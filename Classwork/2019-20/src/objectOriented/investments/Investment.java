package objectOriented.investments;

import objectOriented.Name;
import org.jetbrains.annotations.NotNull;

import java.math.BigDecimal;

import static java.math.RoundingMode.HALF_UP;

public abstract class Investment {
	private double totalYield;
	private Name name;

	/**
	 * Constructor sets name to given value and totalYield to zero (0.0)
	 *
	 * @param name an identifier for investment such as "Money Market Account"
	 */
	public Investment(String name) {
		this.name = new Name(name);
		totalYield = 0;
	}

	/**
	 * @param amount to be rounded to nearest cent (nearest hundredth)
	 * @return double amount after rounding
	 */
	public static double toDollarNotation(double amount) {
		var bd = new BigDecimal(Double.toString(amount));
		bd = bd.setScale(2, HALF_UP);
		return bd.doubleValue();
	}

	/**
	 * @param amount to be formatted as a value in dollars and cents
	 * @return double amount after rounding
	 */
	@NotNull
	public static String format(double amount) {
		return String.format("$%s", String.format("%.2f", toDollarNotation(amount)));
	}

	public abstract double invest1Year(double amt);

	/**
	 * @param amount to be added to totalYield
	 */
	public void addToYield(double amount) {
		totalYield += amount;
	}

	/**
	 * @return total value of profit(or loss) generated by a particular Investment object
	 */
	public double getTotalYield() {
		return totalYield;
	}

	/**
	 * @return identifier for investment such as "Money Market Account"
	 */
	public Name getName() {
		return name;
	}

	/**
	 * @param name an identifier for investment such as "Money Market Account"
	 */
	public void setName(String name) {
		this.name = new Name(name);
	}

	/**
	 * @return String representing name and totalYield amount
	 */
	@Override
	public String toString() {
		return String.format("%s totalYield = %s", name, format(totalYield));
	}
}