Index: Random_Work/src/projectEuler/programs/p078.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p078.java b/Random_Work/src/projectEuler/programs/p078.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p078.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,38 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.pow;
-
-public final class p078 extends EulerSolution {
-	private static final int MODULUS = pow(10, 6);
-
-	public static void main(String[] args) {
-		System.out.println(new p078().run());
-	}
-
-	@Contract(pure = true)
-	private static int search(int limit) {
-		/*
-		 * partitions[i] is {the number of ways i can be written
-		 * as an unordered sum of positive integers} mod 10^6.
-		 * Note that the partition function P(n, k) can be computed with
-		 * dynamic programming using only 1 dimension for memoization.
-		 */
-		int[] partitions = new int[limit];
-		partitions[0] = 1;
-		for (int i = 1; i < limit; i++)
-			for (int j = i; j < limit; j++) partitions[j] = (partitions[j] + partitions[j - i]) % MODULUS;
-		return IntStream.range(0, limit).filter(i -> partitions[i] == 0).findFirst().orElse(-1);
-	}
-
-	@NotNull String run() {
-		for (int limit = 1; ; limit *= 2) {
-			int result = search(limit);
-			if (result != -1) return Integer.toString(result);
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p047.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p047.java b/Random_Work/src/projectEuler/programs/p047.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p047.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,34 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.sqrt;
-
-public final class p047 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p047().run());
-	}
-
-	private static boolean has4PrimeFactors(int n) {
-		return countDistinctPrimeFactors(n) == 4;
-	}
-
-	private static int countDistinctPrimeFactors(int n) {
-		int count = 0;
-		for (int i = 2, end = sqrt(n); i <= end; i++)
-			if (n % i == 0) {
-				do n /= i;
-				while (n % i == 0);
-				count++;
-				end = sqrt(n);
-			}
-		if (n > 1) count++;
-		return count;
-	}
-
-	@NotNull String run() {
-		for (int i = 2; ; i++)
-			if (has4PrimeFactors(i) && has4PrimeFactors(i + 1) && has4PrimeFactors(i + 2) && has4PrimeFactors(i + 3))
-				return Integer.toString(i);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p061.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p061.java b/Random_Work/src/projectEuler/programs/p061.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p061.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,63 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import static java.util.Arrays.setAll;
-import static java.util.Arrays.stream;
-
-public final class p061 extends EulerSolution {
-	// numbers[i][j] is the set of figurate numbers of i sides (3 <= i <= 8), having 4 digits, beginning with the 2 digits equal to j
-	private Set<Integer>[][] numbers;
-
-	public static void main(String[] args) {
-		System.out.println(new p061().run());
-	}
-
-	@Contract(pure = true)
-	private static int figurateNumber(int sides, int n) {
-		return n * ((sides - 2) * n - (sides - 4)) / 2;
-	}
-
-	@NotNull
-	String run() {
-		// Build table of numbers
-		numbers = new Set[9][100];
-		stream(numbers).forEachOrdered(number -> setAll(number, j -> new HashSet<>()));
-		for (int sides = 3; sides <= 8; sides++) {
-			for (int n = 1; ; n++) {
-				int num = figurateNumber(sides, n);
-				if (num >= 10000)
-					break;
-				if (num >= 1000)
-					numbers[sides][num / 100].add(num);
-			}
-		}
-		// Do search
-		for (int i = 10; i < 100; i++)
-			for (int num : numbers[3][i]) {
-				int temp = findSolutionSum(num, num, 1 << 3, num);
-				if (temp != -1) return Integer.toString(temp);
-			}
-		throw new AssertionError("No solution");
-	}
-
-	// Note: sidesUsed is a bit set
-	@Contract(pure = true)
-	private int findSolutionSum(int begin, int current, int sidesUsed, int sum) {
-		if ((sidesUsed == 0x1F8) && ((current % 100) == (begin / 100))) return sum;
-		else {
-			for (int sides = 4; sides <= 8; sides++) {
-				if (((sidesUsed >>> sides) & 1) != 0) continue;
-				for (int num : numbers[sides][current % 100]) {
-					int temp = findSolutionSum(begin, num, sidesUsed | (1 << sides), sum + num);
-					if (temp != -1) return temp;
-				}
-			}
-		}
-		return -1;
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p016.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p016.java b/Random_Work/src/projectEuler/programs/p016.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p016.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,22 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static java.math.BigInteger.ONE;
-
-public final class p016 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p016().run());
-	}
-
-	/*
-	 * We implement this solution in a straightforward way with help from BigInteger.
-	 */
-	@NotNull String run() {
-		String temp = ONE.shiftLeft(1000).toString();
-		int sum = IntStream.range(0, temp.length()).map(i -> temp.charAt(i) - '0').sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,2 +0,0 @@
-# Default ignored files
-/workspace.xml
\ No newline at end of file
Index: .idea/uiDesigner.xml
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
deleted file mode 100644
--- a/.idea/uiDesigner.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,153 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-	<component name="Palette2">
-		<group name="Swing">
-			<item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer"
-			      icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false"
-			      can-attach-label="false">
-				<default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1"/>
-			</item>
-			<item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer"
-			      icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false"
-			      can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2"/>
-			</item>
-			<item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false"
-			      auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3"/>
-			</item>
-			<item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false"
-			      auto-create-binding="false" can-attach-label="true">
-				<default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3"/>
-			</item>
-			<item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1"/>
-				<initial-values>
-					<property name="text" value="Button"/>
-				</initial-values>
-			</item>
-			<item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png"
-			      removable="false" auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0"/>
-				<initial-values>
-					<property name="text" value="RadioButton"/>
-				</initial-values>
-			</item>
-			<item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0"/>
-				<initial-values>
-					<property name="text" value="CheckBox"/>
-				</initial-values>
-			</item>
-			<item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false"
-			      auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0"/>
-				<initial-values>
-					<property name="text" value="Label"/>
-				</initial-values>
-			</item>
-			<item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-					<preferred-size width="150" height="-1"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png"
-			      removable="false" auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-					<preferred-size width="150" height="-1"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png"
-			      removable="false" auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
-					<preferred-size width="150" height="-1"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1"/>
-			</item>
-			<item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
-					<preferred-size width="150" height="50"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-					<preferred-size width="200" height="200"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false"
-			      auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
-					<preferred-size width="200" height="200"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false"
-			      auto-create-binding="true" can-attach-label="true">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1"/>
-			</item>
-			<item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1"/>
-			</item>
-			<item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false"
-			      auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3"/>
-			</item>
-			<item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png"
-			      removable="false" auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1"/>
-			</item>
-			<item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false"
-			      auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
-					<preferred-size width="-1" height="20"/>
-				</default-constraints>
-			</item>
-			<item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png"
-			      removable="false" auto-create-binding="false" can-attach-label="false">
-				<default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1"/>
-			</item>
-			<item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false"
-			      auto-create-binding="true" can-attach-label="false">
-				<default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2"/>
-			</item>
-		</group>
-	</component>
-</project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p008.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p008.java b/Random_Work/src/projectEuler/programs/p008.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p008.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Math.max;
-import static java.lang.System.out;
-
-public final class p008 extends EulerSolution {
-	private static final int ADJACENT = 13;
-	private static final String NUMBER = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450";
-
-	public static void main(String[] args) {
-		out.println(new p008().run());
-	}
-
-	/*
-	 * We implement a straightforward algorithm that examines every substring of length 13.
-	 * Note that the maximum product is 9^13 = 2541865828329, which fits in a Java long type (but not int).
-	 */
-	@NotNull String run() {
-		long maxProd = -1;
-		for (int i = 0; i + ADJACENT <= NUMBER.length(); i++) {
-			long prod = 1;
-			for (int j = 0; j < ADJACENT; j++) prod *= NUMBER.charAt(i + j) - '0';
-			maxProd = max(prod, maxProd);
-		}
-		return Long.toString(maxProd);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p086.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p086.java b/Random_Work/src/projectEuler/programs/p086.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p086.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,85 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.ArrayList;
-import java.util.HashSet;
-import java.util.Set;
-
-import static java.lang.Math.max;
-import static java.lang.Math.min;
-import static java.util.Collections.addAll;
-import static java.util.Collections.sort;
-import static projectEuler.programs.Library.gcd;
-
-public final class p086 extends EulerSolution {
-	// solutions.get(k) is the set of all solutions where the largest side has length k.
-	// A solution is a triple (x, y, z) such that 0 < x <= y <= z, and in the rectangular prism with dimensions x * y * z,
-	// the shortest surface path from one vertex to the opposite vertex has an integral length.
-	private final ArrayList<Set<ArrayList<Integer>>> solutions = new ArrayList<>();
-	// cumulativeSolutions.get(m) = solutions.get(0).size() + solutions.get(1).size() + ... + solutions.get(m).size().
-	private final ArrayList<Integer> cumulativeSolutions = new ArrayList<>();
-
-	public static void main(String[] args) {
-		System.out.println(new p086().run());
-	}
-
-	@NotNull String run() {
-		cumulativeSolutions.add(0);
-		int limit = 1;
-		while (true) {
-			// Extend the solutions list with blank sets
-			while (solutions.size() < limit) solutions.add(new HashSet<>());
-			generateSolutions(limit);
-			// Compute the number of cumulative solutions up to and including a certain maximum size
-			for (int i = cumulativeSolutions.size(); i < limit; i++) {
-				int sum = cumulativeSolutions.get(i - 1) + solutions.get(i).size();
-				cumulativeSolutions.add(sum);
-				if (sum > 1000000) return Integer.toString(i);
-			}
-			// Raise the limit and keep searching
-			limit *= 2;
-		}
-	}
-
-	// Generates all solutions where the largest side has length less than 'limit'.
-	private void generateSolutions(int limit) {
-		/*
-		 * Pythagorean triples theorem:
-		 * Every primitive Pythagorean triple with a odd and b even can be expressed as
-		 * a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.
-		 * Now generate all Pythagorean triples, including non-primitive ones.
-		 */
-		outer:
-		for (int s = 3; ; s += 2)
-			for (int t = s - 2; t > 0; t -= 2) {
-				if (s * s / 2 >= limit * 3) break outer;
-				if (gcd(s, t) == 1) for (int k = 1; ; k++) {
-					int a = s * t * k;
-					int b = (((s * s) - (t * t)) >> 1) * k;
-					int c = (((s * s) + (t * t)) >> 1) * k;
-					if ((a >= limit) && (b >= limit)) break;
-					findSplits(a, b, c, limit);
-					findSplits(b, a, c, limit);
-				}
-			}
-	}
-
-	// Assumes that a^2 + b^2 = c^2.
-	private void findSplits(int a, int b, int c, int limit) {
-		for (int x = 1; x < a; x++) {
-			int y = a - x;
-			if (y < x) break;
-			if (min(min(((x + y) * (x + y)) + (b * b), ((y + b) * (y + b)) + (x * x)), ((b + x) * (b + x)) + (y * y)) == (c * c)) {
-				int max = max(max(x, y), b);
-				if (max < limit) {
-					// Add canonical solution
-					ArrayList<Integer> soln = new ArrayList<>();
-					addAll(soln, x, y, b);
-					sort(soln);
-					solutions.get(max).add(soln);
-				}
-			}
-		}
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/World.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/World.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/World.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/World.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,843 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		World
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "World";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/World.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="World.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.world</span>
-	<BR>
-	Class World&lt;T&gt;</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.world.World&lt;T&gt;</B>
-</PRE>
-<DL>
-	<DT><B>Direct Known Subclasses:</B>
-	<DD><A HREF="../../../info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor">ActorWorld</A>
-	</DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>World&lt;T&gt;</B>
-	<DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-	               title="class or interface in java.lang">Object</A>
-</DL>
-
-<P>
-	A <code>World</code> is the mediator between a grid and the GridWorld GUI.
-	<br/>
-	This class is not tested on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#World()">World</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#World(info.gridworld.grid.Grid)">World</A></B>(<A
-				HREF="../../../info/gridworld/grid/Grid.html"
-				title="interface in info.gridworld.grid">Grid</A>&lt;<A
-				HREF="../../../info/gridworld/world/World.html"
-				title="type parameter in World">T</A>&gt;&nbsp;g)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#add(info.gridworld.grid.Location, T)">add</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-			<A HREF="../../../info/gridworld/world/World.html"
-			   title="type parameter in World">T</A>&nbsp;occupant)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds an occupant at a given location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#addGridClass(java.lang.String)">addGridClass</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-				title="class or interface in java.lang">String</A>&nbsp;className)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a class to be shown in the "Set grid" menu.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#addOccupantClass(java.lang.String)">addOccupantClass</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-				title="class or interface in java.lang">String</A>&nbsp;className)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds a class to be shown when clicking on an
-			empty location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html"
-			               title="interface in info.gridworld.grid">Grid</A>&lt;<A
-					HREF="../../../info/gridworld/world/World.html"
-					title="type parameter in World">T</A>&gt;</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#getGrid()">getGrid</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the grid managed by this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true"
-			               title="class or interface in java.util">Set</A>&lt;<A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-					title="class or interface in java.lang">String</A>&gt;</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#getGridClasses()">getGridClasses</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a set of grid classes that should be used
-			by the world frame for
-			this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-			               title="class or interface in java.lang">String</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#getMessage()">getMessage</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the message to be displayed in the world
-			frame above the grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true"
-			               title="class or interface in java.util">Set</A>&lt;<A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-					title="class or interface in java.lang">String</A>&gt;</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#getOccupantClasses()">getOccupantClasses</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a set of occupant classes that should be
-			used by the world frame for
-			this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A></CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#getRandomEmptyLocation()">getRandomEmptyLocation</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a random empty location in this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#keyPressed(java.lang.String, info.gridworld.grid.Location)">keyPressed</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-				title="class or interface in java.lang">String</A>&nbsp;description,
-			<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called when a key was pressed.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#locationClicked(info.gridworld.grid.Location)">locationClicked</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called when the user clicks on a
-			location in the
-			WorldFrame.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/world/World.html"
-			               title="type parameter in World">T</A></CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#remove(info.gridworld.grid.Location)">remove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes an occupant from a given location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#setGrid(info.gridworld.grid.Grid)">setGrid</A></B>(<A
-				HREF="../../../info/gridworld/grid/Grid.html"
-				title="interface in info.gridworld.grid">Grid</A>&lt;<A
-				HREF="../../../info/gridworld/world/World.html" title="type parameter in World">T</A>&gt;&nbsp;newGrid)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the grid managed by this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/world/World.html#setMessage(java.lang.String)">setMessage</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-				title="class or interface in java.lang">String</A>&nbsp;newMessage)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the message to be displayed in the world
-			frame above the grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#show()">show</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs and shows a frame for this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#step()">step</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called when the user clicks on
-			the step button, or when
-			run mode has been activated by clicking the run button.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-			               title="class or interface in java.lang">String</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/world/World.html#toString()">toString</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns a string that shows the positions of the
-			grid occupants.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="World()"><!-- --></A>
-<H3>
-	World</H3>
-<PRE>
-public <B>World</B>()</PRE>
-<DL>
-</DL>
-<HR>
-
-<A NAME="World(info.gridworld.grid.Grid)"><!-- --></A>
-<H3>
-	World</H3>
-<PRE>
-public <B>World</B>(<A HREF="../../../info/gridworld/grid/Grid.html"
-                       title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/world/World.html" title="type parameter in World">T</A>&gt;&nbsp;g)</PRE>
-<DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="show()"><!-- --></A>
-<H3>
-	show</H3>
-<PRE>
-public void <B>show</B>()</PRE>
-<DL>
-	<DD>Constructs and shows a frame for this world.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getGrid()"><!-- --></A>
-<H3>
-	getGrid</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/world/World.html"
-		title="type parameter in World">T</A>&gt; <B>getGrid</B>()</PRE>
-<DL>
-	<DD>Gets the grid managed by this world.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="setGrid(info.gridworld.grid.Grid)"><!-- --></A>
-<H3>
-	setGrid</H3>
-<PRE>
-public void <B>setGrid</B>(<A HREF="../../../info/gridworld/grid/Grid.html"
-                              title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/world/World.html"
-		title="type parameter in World">T</A>&gt;&nbsp;newGrid)</PRE>
-<DL>
-	<DD>Sets the grid managed by this world.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>newGrid</CODE> - the new grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="setMessage(java.lang.String)"><!-- --></A>
-<H3>
-	setMessage</H3>
-<PRE>
-public void <B>setMessage</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-                                 title="class or interface in java.lang">String</A>&nbsp;newMessage)</PRE>
-<DL>
-	<DD>Sets the message to be displayed in the world frame above the grid.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>newMessage</CODE> - the new message
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getMessage()"><!-- --></A>
-<H3>
-	getMessage</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-          title="class or interface in java.lang">String</A> <B>getMessage</B>()</PRE>
-<DL>
-	<DD>Gets the message to be displayed in the world frame above the grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the message
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="step()"><!-- --></A>
-<H3>
-	step</H3>
-<PRE>
-public void <B>step</B>()</PRE>
-<DL>
-	<DD>This method is called when the user clicks on the step button, or when
-		run mode has been activated by clicking the run button.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="locationClicked(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	locationClicked</H3>
-<PRE>
-public boolean <B>locationClicked</B>(<A HREF="../../../info/gridworld/grid/Location.html"
-                                         title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>This method is called when the user clicks on a location in the
-		WorldFrame.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the grid location that the user selected
-			<DT><B>Returns:</B>
-			<DD>true if the world consumes the click, or false if the GUI should
-				invoke the Location->Edit menu action
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="keyPressed(java.lang.String, info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	keyPressed</H3>
-<PRE>
-public boolean <B>keyPressed</B>(<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-		title="class or interface in java.lang">String</A>&nbsp;description,
-                          <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>This method is called when a key was pressed. Override it if your world wants
-		to consume some keys (e.g. "1"-"9" for Sudoku). Don't consume plain arrow keys,
-		or the user loses the ability to move the selection square with the keyboard.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>description</CODE> - the string describing the key, in
-				<a href="http://java.sun.com/javase/6/docs/api/javax/swing/KeyStroke.html#getKeyStroke(java.lang.String)">this
-					format</a>.
-			<DD><CODE>loc</CODE> - the selected location in the grid at the time the key was pressed
-			<DT><B>Returns:</B>
-			<DD>true if the world consumes the key press, false if the GUI should
-				consume it.
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getRandomEmptyLocation()"><!-- --></A>
-<H3>
-	getRandomEmptyLocation</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A> <B>getRandomEmptyLocation</B>()</PRE>
-<DL>
-	<DD>Gets a random empty location in this world.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a random empty location
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="add(info.gridworld.grid.Location,java.lang.Object)"><!-- --></A><A
-		NAME="add(info.gridworld.grid.Location, T)">
-	<!-- --></A>
-<H3>
-	add</H3>
-<PRE>
-public void <B>add</B>(<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-                <A HREF="../../../info/gridworld/world/World.html" title="type parameter in World">T</A>&nbsp;occupant)</PRE>
-<DL>
-	<DD>Adds an occupant at a given location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location
-			<DD><CODE>occupant</CODE> - the occupant to add
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="remove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	remove</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/world/World.html" title="type parameter in World">T</A> <B>remove</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Removes an occupant from a given location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location
-			<DT><B>Returns:</B>
-			<DD>the removed occupant, or null if the location was empty
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="addGridClass(java.lang.String)"><!-- --></A>
-<H3>
-	addGridClass</H3>
-<PRE>
-public void <B>addGridClass</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-                                   title="class or interface in java.lang">String</A>&nbsp;className)</PRE>
-<DL>
-	<DD>Adds a class to be shown in the "Set grid" menu.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>className</CODE> - the name of the grid class
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="addOccupantClass(java.lang.String)"><!-- --></A>
-<H3>
-	addOccupantClass</H3>
-<PRE>
-public void <B>addOccupantClass</B>(<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-		title="class or interface in java.lang">String</A>&nbsp;className)</PRE>
-<DL>
-	<DD>Adds a class to be shown when clicking on an empty location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>className</CODE> - the name of the occupant class
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getGridClasses()"><!-- --></A>
-<H3>
-	getGridClasses</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true"
-          title="class or interface in java.util">Set</A>&lt;<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-		title="class or interface in java.lang">String</A>&gt; <B>getGridClasses</B>()</PRE>
-<DL>
-	<DD>Gets a set of grid classes that should be used by the world frame for
-		this world.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the set of grid class names
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupantClasses()"><!-- --></A>
-<H3>
-	getOccupantClasses</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/Set.html?is-external=true"
-          title="class or interface in java.util">Set</A>&lt;<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-		title="class or interface in java.lang">String</A>&gt; <B>getOccupantClasses</B>()</PRE>
-<DL>
-	<DD>Gets a set of occupant classes that should be used by the world frame for
-		this world.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the set of occupant class names
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="toString()"><!-- --></A>
-<H3>
-	toString</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-          title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
-<DL>
-	<DD>Returns a string that shows the positions of the grid occupants.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()"
-					title="class or interface in java.lang">toString</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/World.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="World.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p032.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p032.java b/Random_Work/src/projectEuler/programs/p032.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p032.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,40 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.Arrays.sort;
-import static java.util.stream.IntStream.range;
-import static java.util.stream.IntStream.rangeClosed;
-
-
-public final class p032 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p032().run());
-	}
-
-	private static boolean hasPandigitalProduct(int n) {
-		// Find and examine all factors of n
-		return rangeClosed(1, n).anyMatch(i -> ((n % i) == 0) && isPandigital("" + n + i + n / i));
-	}
-
-	private static boolean isPandigital(@NotNull String s) {
-		if (s.length() != 9) return false;
-		char[] temp = s.toCharArray();
-		sort(temp);
-		return new String(temp).equals("123456789");
-	}
-
-	/*
-	 * For contradiction suppose a candidate (x, y, z) has z >= 10000.
-	 * Then x*y consumes at least 5 digits. With the 4 (or fewer)
-	 * remaining digits, even the upper bound of x=99 and y=99
-	 * produces a product of x*y < 10000, which is unequal to z.
-	 *
-	 * Therefore we need the product z < 10000 to be able to find
-	 * possible x and y values.
-	 */
-	@NotNull String run() {
-		int sum = range(1, 10000).filter(p032::hasPandigitalProduct).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p084.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p084.java b/Random_Work/src/projectEuler/programs/p084.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p084.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,139 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Random;
-import java.util.stream.Collectors;
-
-import static java.lang.String.format;
-import static java.util.Arrays.setAll;
-import static java.util.Arrays.sort;
-import static java.util.stream.IntStream.range;
-
-public final class p084 extends EulerSolution {
-	private final Random random = new Random();
-
-	public static void main(String[] args) {
-		System.out.println(new p084().run());
-	}
-
-	/*
-	 * This is a statistical sampling approximation algorithm that simply simulates the game for a fixed number of dice rolls.
-	 * An exact algorithm would involve calculating the eigenvector of the largest eigenvalue of the transition matrix (which is practical),
-	 * but averaging over all possible permutations of both the Chance and Community Chest decks (which is computationally infeasible).
-	 */
-	@NotNull String run() {
-		final int[] visitCounts = new int[40];
-		CardDeck chance = new CardDeck(16);
-		CardDeck communityChest = new CardDeck(16);
-		int consecutiveDoubles = 0;
-		int location = 0;
-		for (int i = 0; i < 100000000; i++) {
-			// Roll tetrahedral dice
-			int die0 = random.nextInt(4) + 1;
-			int die1 = random.nextInt(4) + 1;
-			if (die0 == die1) consecutiveDoubles++;
-			else consecutiveDoubles = 0;
-			if (consecutiveDoubles < 3) location = (location + die0 + die1) % 40;
-			else {
-				location = 30;
-				consecutiveDoubles = 0;
-			}
-			// Process actions for some locations
-			switch (location) {
-				case 7:
-				case 22:
-				case 36: // Chance
-					switch (chance.nextCard()) {
-						case 0:
-							location = 0;
-							break;
-						case 1:
-							location = 10;
-							break;
-						case 2:
-							location = 11;
-							break;
-						case 3:
-							location = 24;
-							break;
-						case 4:
-							location = 39;
-							break;
-						case 5:
-							location = 5;
-							break;
-						case 6:
-						case 7: // Next railway
-							location = ((((location + 5) / 10) % 4) * 10) + 5;
-							break;
-						case 8: // Next utility
-							location = ((location > 12) && (location < 28)) ? 28 : 12;
-							break;
-						case 9:
-							location -= 3;
-							break;
-						default:
-							break;
-					}
-					break;
-				case 30: // Go to jail
-					location = 10;
-					break;
-				default:
-					break;
-			}
-			switch (location) {
-				case 2:
-				case 17:
-				case 33: // Community chest
-					switch (communityChest.nextCard()) {
-						case 0:
-							location = 0;
-							break;
-						case 1:
-							location = 10;
-							break;
-						default:
-							break;
-					}
-					break;
-				default:
-					break;
-			}
-			visitCounts[location]++;
-		}
-
-		// Embed index into count, invert so that maximum becomes minimum
-		setAll(visitCounts, i -> (~visitCounts[i] << 6) | i);
-		sort(visitCounts);
-		return range(0, 3).mapToObj(i -> format("%02d", visitCounts[i] & 0x3F)).collect(Collectors.joining());
-	}
-
-	private final class CardDeck {
-		private final int[] cards;
-		private int index;
-
-		CardDeck(int size) {
-			cards = new int[size];
-			setAll(cards, i -> i);
-			index = size;
-		}
-
-		int nextCard() {
-			if (index == cards.length) {
-				// Fisher-Yates shuffle
-				for (int i = cards.length - 1; i >= 0; i--) {
-					int j = random.nextInt(i + 1);
-					int temp = cards[i];
-					cards[i] = cards[j];
-					cards[j] = temp;
-				}
-				index = 0;
-			}
-			int result = cards[index];
-			index++;
-			return result;
-		}
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-tree.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-tree.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-tree.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-tree.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,215 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Class Hierarchy
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Class Hierarchy";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?overview-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="overview-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H2>
-		Hierarchy For All Packages</H2>
-</div>
-<DL>
-	<DT><B>Package Hierarchies:</B>
-	<DD><A HREF="info/gridworld/actor/package-tree.html">info.gridworld.actor</A>, <A
-			HREF="info/gridworld/grid/package-tree.html">info.gridworld.grid</A>, <A
-			HREF="info/gridworld/world/package-tree.html">info.gridworld.world</A>
-</DL>
-<HR>
-<H2>
-	Class Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">java.lang.<A
-			HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-			title="class or interface in java.lang"><B>Object</B></A>
-		<UL>
-			<LI TYPE="circle">info.gridworld.grid.<A HREF="info/gridworld/grid/AbstractGrid.html"
-			                                         title="class in info.gridworld.grid"><B>AbstractGrid</B></A>&lt;E&gt;
-				(implements info.gridworld.grid.<A HREF="info/gridworld/grid/Grid.html"
-				                                   title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;)
-				<UL>
-					<LI TYPE="circle">info.gridworld.grid.<A HREF="info/gridworld/grid/BoundedGrid.html"
-					                                         title="class in info.gridworld.grid"><B>BoundedGrid</B></A>&lt;E&gt;
-					<LI TYPE="circle">info.gridworld.grid.<A HREF="info/gridworld/grid/UnboundedGrid.html"
-					                                         title="class in info.gridworld.grid"><B>UnboundedGrid</B></A>&lt;E&gt;
-				</UL>
-			<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/Actor.html"
-			                                          title="class in info.gridworld.actor"><B>Actor</B></A>
-				<UL>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/Bug.html"
-					                                          title="class in info.gridworld.actor"><B>Bug</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/Critter.html"
-					                                          title="class in info.gridworld.actor"><B>Critter</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/Flower.html"
-					                                          title="class in info.gridworld.actor"><B>Flower</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/Rock.html"
-					                                          title="class in info.gridworld.actor"><B>Rock</B></A>
-				</UL>
-			<LI TYPE="circle">info.gridworld.grid.<A HREF="info/gridworld/grid/Location.html"
-			                                         title="class in info.gridworld.grid"><B>Location</B></A>
-				(implements java.lang.<A
-						HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true"
-						title="class or interface in java.lang">Comparable</A>&lt;T&gt;)
-			<LI TYPE="circle">info.gridworld.world.<A HREF="info/gridworld/world/World.html"
-			                                          title="class in info.gridworld.world"><B>World</B></A>&lt;T&gt;<UL>
-				<LI TYPE="circle">info.gridworld.actor.<A HREF="info/gridworld/actor/ActorWorld.html"
-				                                          title="class in info.gridworld.actor"><B>ActorWorld</B></A>
-			</UL>
-		</UL>
-</UL>
-<H2>
-	Interface Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">info.gridworld.grid.<A HREF="info/gridworld/grid/Grid.html"
-	                                         title="interface in info.gridworld.grid"><B>Grid</B></A>&lt;E&gt;
-</UL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?overview-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="overview-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-frame.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-frame.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-frame.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-frame.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,62 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		All Classes
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-<span CLASS="FrameHeadingFont" style="font-size: larger; ">
-	<B>All Classes</B></span>
-<BR>
-
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameItemFont"><A HREF="info/gridworld/grid/AbstractGrid.html"
-		                                          target="classFrame"
-		                                          title="class in info.gridworld.grid">AbstractGrid</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Actor.html" target="classFrame"
-			   title="class in info.gridworld.actor">Actor</A>
-			<BR>
-			<A HREF="info/gridworld/actor/ActorWorld.html" target="classFrame"
-			   title="class in info.gridworld.actor">ActorWorld</A>
-			<BR>
-			<A HREF="info/gridworld/grid/BoundedGrid.html" target="classFrame"
-			   title="class in info.gridworld.grid">BoundedGrid</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Bug.html" target="classFrame"
-			   title="class in info.gridworld.actor">Bug</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Critter.html" target="classFrame" title="class in info.gridworld.actor">Critter</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Flower.html" target="classFrame"
-			   title="class in info.gridworld.actor">Flower</A>
-			<BR>
-			<A HREF="info/gridworld/grid/Grid.html" target="classFrame"
-			   title="interface in info.gridworld.grid"><I>Grid</I></A>
-			<BR>
-			<A HREF="info/gridworld/grid/Location.html" target="classFrame" title="class in info.gridworld.grid">Location</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Rock.html" target="classFrame" title="class in info.gridworld.actor">Rock</A>
-			<BR>
-			<A HREF="info/gridworld/grid/UnboundedGrid.html" target="classFrame"
-			   title="class in info.gridworld.grid">UnboundedGrid</A>
-			<BR>
-			<A HREF="info/gridworld/world/World.html" target="classFrame"
-			   title="class in info.gridworld.world">World</A>
-			<BR>
-		</span></TD>
-	</TR>
-</TABLE>
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p030.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p030.java b/Random_Work/src/projectEuler/programs/p030.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p030.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,31 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-public final class p030 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p030().run());
-	}
-
-	@Contract(pure = true)
-	private static int fifthPowerDigitSum(int x) {
-		int sum = 0;
-		while (x != 0) {
-			int y = x % 10;
-			sum += y * y * y * y * y;
-			x /= 10;
-		}
-		return sum;
-	}
-
-	@NotNull String run() {
-		// As stated in the problem, 1 = 1^5 is excluded.
-		// If a number has at least n >= 7 digits, then even if every digit is 9,
-		// n * 9^5 is still less than the number (which is at least 10^n).
-		int sum = IntStream.range(2, 1000000).filter(i -> i == fifthPowerDigitSum(i)).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p076.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p076.java b/Random_Work/src/projectEuler/programs/p076.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p076.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,28 +0,0 @@
-package projectEuler.programs;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.ONE;
-import static java.math.BigInteger.ZERO;
-
-public final class p076 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p076().run());
-	}
-
-	private static BigInteger partitions() {
-		// Dynamic programming
-		BigInteger[][] table = new BigInteger[101][101];
-		for (int i = 0; i <= 100; i++)
-			for (int j = 100; j >= 0; j--)
-				if (j == i) table[i][j] = ONE;
-				else if (j > i) table[i][j] = ZERO;
-				else if (j == 0) table[i][j] = table[i][j + 1];
-				else table[i][j] = table[i][j + 1].add(table[i - j][j]);
-		return table[100][1];
-	}
-
-	String run() {
-		return partitions().subtract(ONE).toString();
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p024.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p024.java b/Random_Work/src/projectEuler/programs/p024.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p024.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,31 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.Arrays.stream;
-import static java.util.stream.Collectors.joining;
-import static java.util.stream.IntStream.range;
-import static projectEuler.programs.Library.nextPermutation;
-
-public final class p024 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p024().run());
-	}
-
-	/*
-	 * We initialize an array as the lowest permutation of the given digits, which is the sequence
-	 * (0,1,2,3,4,5,6,7,8,9). Then we call the next permutation algorithm on it 999 999 times
-	 * (because the index in the problem is 1-based), and stringify the resulting sequence.
-	 *
-	 * The next permutation algorithm is well-known and a bit long to explain.
-	 * See: https://www.nayuki.io/page/next-lexicographical-permutation-algorithm
-	 */
-
-	@NotNull String run() {
-		int[] array = range(0, 10).toArray();
-		range(0, 999999).forEachOrdered(i -> {
-			assert nextPermutation(array);
-		});
-		return stream(array).mapToObj(String::valueOf).collect(joining());
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p022.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p022.java b/Random_Work/src/projectEuler/programs/p022.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p022.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-import static java.util.Arrays.sort;
-
-public final class p022 extends EulerSolution {
-	//	Mutable array
-	private final String[] names = {"MARY", "PATRICIA", "LINDA", "BARBARA", "ELIZABETH", "JENNIFER", "MARIA", "SUSAN", "MARGARET", "DOROTHY", "LISA", "NANCY", "KAREN", "BETTY", "HELEN", "SANDRA", "DONNA", "CAROL", "RUTH", "SHARON", "MICHELLE", "LAURA", "SARAH", "KIMBERLY", "DEBORAH", "JESSICA", "SHIRLEY", "CYNTHIA", "ANGELA", "MELISSA", "BRENDA", "AMY", "ANNA", "REBECCA", "VIRGINIA", "KATHLEEN", "PAMELA", "MARTHA", "DEBRA", "AMANDA", "STEPHANIE", "CAROLYN", "CHRISTINE", "MARIE", "JANET", "CATHERINE", "FRANCES", "ANN", "JOYCE", "DIANE", "ALICE", "JULIE", "HEATHER", "TERESA", "DORIS", "GLORIA", "EVELYN", "JEAN", "CHERYL", "MILDRED", "KATHERINE", "JOAN", "ASHLEY", "JUDITH", "ROSE", "JANICE", "KELLY", "NICOLE", "JUDY", "CHRISTINA", "KATHY", "THERESA", "BEVERLY", "DENISE", "TAMMY", "IRENE", "JANE", "LORI", "RACHEL", "MARILYN", "ANDREA", "KATHRYN", "LOUISE", "SARA", "ANNE", "JACQUELINE", "WANDA", "BONNIE", "JULIA", "RUBY", "LOIS", "TINA", "PHYLLIS", "NORMA", "PAULA", "DIANA", "ANNIE", "LILLIAN", "EMILY", "ROBIN", "PEGGY", "CRYSTAL", "GLADYS", "RITA", "DAWN", "CONNIE", "FLORENCE", "TRACY", "EDNA", "TIFFANY", "CARMEN", "ROSA", "CINDY", "GRACE", "WENDY", "VICTORIA", "EDITH", "KIM", "SHERRY", "SYLVIA", "JOSEPHINE", "THELMA", "SHANNON", "SHEILA", "ETHEL", "ELLEN", "ELAINE", "MARJORIE", "CARRIE", "CHARLOTTE", "MONICA", "ESTHER", "PAULINE", "EMMA", "JUANITA", "ANITA", "RHONDA", "HAZEL", "AMBER", "EVA", "DEBBIE", "APRIL", "LESLIE", "CLARA", "LUCILLE", "JAMIE", "JOANNE", "ELEANOR", "VALERIE", "DANIELLE", "MEGAN", "ALICIA", "SUZANNE", "MICHELE", "GAIL", "BERTHA", "DARLENE", "VERONICA", "JILL", "ERIN", "GERALDINE", "LAUREN", "CATHY", "JOANN", "LORRAINE", "LYNN", "SALLY", "REGINA", "ERICA", "BEATRICE", "DOLORES", "BERNICE", "AUDREY", "YVONNE", "ANNETTE", "JUNE", "SAMANTHA", "MARION", "DANA", "STACY", "ANA", "RENEE", "IDA", "VIVIAN", "ROBERTA", "HOLLY", "BRITTANY", "MELANIE", "LORETTA", "YOLANDA", "JEANETTE", "LAURIE", "KATIE", "KRISTEN", "VANESSA", "ALMA", "SUE", "ELSIE", "BETH", "JEANNE", "VICKI", "CARLA", "TARA", "ROSEMARY", "EILEEN", "TERRI", "GERTRUDE", "LUCY", "TONYA", "ELLA", "STACEY", "WILMA", "GINA", "KRISTIN", "JESSIE", "NATALIE", "AGNES", "VERA", "WILLIE", "CHARLENE", "BESSIE", "DELORES", "MELINDA", "PEARL", "ARLENE", "MAUREEN", "COLLEEN", "ALLISON", "TAMARA", "JOY", "GEORGIA", "CONSTANCE", "LILLIE", "CLAUDIA", "JACKIE", "MARCIA", "TANYA", "NELLIE", "MINNIE", "MARLENE", "HEIDI", "GLENDA", "LYDIA", "VIOLA", "COURTNEY", "MARIAN", "STELLA", "CAROLINE", "DORA", "JO", "VICKIE", "MATTIE", "TERRY", "MAXINE", "IRMA", "MABEL", "MARSHA", "MYRTLE", "LENA", "CHRISTY", "DEANNA", "PATSY", "HILDA", "GWENDOLYN", "JENNIE", "NORA", "MARGIE", "NINA", "CASSANDRA", "LEAH", "PENNY", "KAY", "PRISCILLA", "NAOMI", "CAROLE", "BRANDY", "OLGA", "BILLIE", "DIANNE", "TRACEY", "LEONA", "JENNY", "FELICIA", "SONIA", "MIRIAM", "VELMA", "BECKY", "BOBBIE", "VIOLET", "KRISTINA", "TONI", "MISTY", "MAE", "SHELLY", "DAISY", "RAMONA", "SHERRI", "ERIKA", "KATRINA", "CLAIRE", "LINDSEY", "LINDSAY", "GENEVA", "GUADALUPE", "BELINDA", "MARGARITA", "SHERYL", "CORA", "FAYE", "ADA", "NATASHA", "SABRINA", "ISABEL", "MARGUERITE", "HATTIE", "HARRIET", "MOLLY", "CECILIA", "KRISTI", "BRANDI", "BLANCHE", "SANDY", "ROSIE", "JOANNA", "IRIS", "EUNICE", "ANGIE", "INEZ", "LYNDA", "MADELINE", "AMELIA", "ALBERTA", "GENEVIEVE", "MONIQUE", "JODI", "JANIE", "MAGGIE", "KAYLA", "SONYA", "JAN", "LEE", "KRISTINE", "CANDACE", "FANNIE", "MARYANN", "OPAL", "ALISON", "YVETTE", "MELODY", "LUZ", "SUSIE", "OLIVIA", "FLORA", "SHELLEY", "KRISTY", "MAMIE", "LULA", "LOLA", "VERNA", "BEULAH", "ANTOINETTE", "CANDICE", "JUANA", "JEANNETTE", "PAM", "KELLI", "HANNAH", "WHITNEY", "BRIDGET", "KARLA", "CELIA", "LATOYA", "PATTY", "SHELIA", "GAYLE", "DELLA", "VICKY", "LYNNE", "SHERI", "MARIANNE", "KARA", "JACQUELYN", "ERMA", "BLANCA", "MYRA", "LETICIA", "PAT", "KRISTA", "ROXANNE", "ANGELICA", "JOHNNIE", "ROBYN", "FRANCIS", "ADRIENNE", "ROSALIE", "ALEXANDRA", "BROOKE", "BETHANY", "SADIE", "BERNADETTE", "TRACI", "JODY", "KENDRA", "JASMINE", "NICHOLE", "RACHAEL", "CHELSEA", "MABLE", "ERNESTINE", "MURIEL", "MARCELLA", "ELENA", "KRYSTAL", "ANGELINA", "NADINE", "KARI", "ESTELLE", "DIANNA", "PAULETTE", "LORA", "MONA", "DOREEN", "ROSEMARIE", "ANGEL", "DESIREE", "ANTONIA", "HOPE", "GINGER", "JANIS", "BETSY", "CHRISTIE", "FREDA", "MERCEDES", "MEREDITH", "LYNETTE", "TERI", "CRISTINA", "EULA", "LEIGH", "MEGHAN", "SOPHIA", "ELOISE", "ROCHELLE", "GRETCHEN", "CECELIA", "RAQUEL", "HENRIETTA", "ALYSSA", "JANA", "KELLEY", "GWEN", "KERRY", "JENNA", "TRICIA", "LAVERNE", "OLIVE", "ALEXIS", "TASHA", "SILVIA", "ELVIRA", "CASEY", "DELIA", "SOPHIE", "KATE", "PATTI", "LORENA", "KELLIE", "SONJA", "LILA", "LANA", "DARLA", "MAY", "MINDY", "ESSIE", "MANDY", "LORENE", "ELSA", "JOSEFINA", "JEANNIE", "MIRANDA", "DIXIE", "LUCIA", "MARTA", "FAITH", "LELA", "JOHANNA", "SHARI", "CAMILLE", "TAMI", "SHAWNA", "ELISA", "EBONY", "MELBA", "ORA", "NETTIE", "TABITHA", "OLLIE", "JAIME", "WINIFRED", "KRISTIE", "MARINA", "ALISHA", "AIMEE", "RENA", "MYRNA", "MARLA", "TAMMIE", "LATASHA", "BONITA", "PATRICE", "RONDA", "SHERRIE", "ADDIE", "FRANCINE", "DELORIS", "STACIE", "ADRIANA", "CHERI", "SHELBY", "ABIGAIL", "CELESTE", "JEWEL", "CARA", "ADELE", "REBEKAH", "LUCINDA", "DORTHY", "CHRIS", "EFFIE", "TRINA", "REBA", "SHAWN", "SALLIE", "AURORA", "LENORA", "ETTA", "LOTTIE", "KERRI", "TRISHA", "NIKKI", "ESTELLA", "FRANCISCA", "JOSIE", "TRACIE", "MARISSA", "KARIN", "BRITTNEY", "JANELLE", "LOURDES", "LAUREL", "HELENE", "FERN", "ELVA", "CORINNE", "KELSEY", "INA", "BETTIE", "ELISABETH", "AIDA", "CAITLIN", "INGRID", "IVA", "EUGENIA", "CHRISTA", "GOLDIE", "CASSIE", "MAUDE", "JENIFER", "THERESE", "FRANKIE", "DENA", "LORNA", "JANETTE", "LATONYA", "CANDY", "MORGAN", "CONSUELO", "TAMIKA", "ROSETTA", "DEBORA", "CHERIE", "POLLY", "DINA", "JEWELL", "FAY", "JILLIAN", "DOROTHEA", "NELL", "TRUDY", "ESPERANZA", "PATRICA", "KIMBERLEY", "SHANNA", "HELENA", "CAROLINA", "CLEO", "STEFANIE", "ROSARIO", "OLA", "JANINE", "MOLLIE", "LUPE", "ALISA", "LOU", "MARIBEL", "SUSANNE", "BETTE", "SUSANA", "ELISE", "CECILE", "ISABELLE", "LESLEY", "JOCELYN", "PAIGE", "JONI", "RACHELLE", "LEOLA", "DAPHNE", "ALTA", "ESTER", "PETRA", "GRACIELA", "IMOGENE", "JOLENE", "KEISHA", "LACEY", "GLENNA", "GABRIELA", "KERI", "URSULA", "LIZZIE", "KIRSTEN", "SHANA", "ADELINE", "MAYRA", "JAYNE", "JACLYN", "GRACIE", "SONDRA", "CARMELA", "MARISA", "ROSALIND", "CHARITY", "TONIA", "BEATRIZ", "MARISOL", "CLARICE", "JEANINE", "SHEENA", "ANGELINE", "FRIEDA", "LILY", "ROBBIE", "SHAUNA", "MILLIE", "CLAUDETTE", "CATHLEEN", "ANGELIA", "GABRIELLE", "AUTUMN", "KATHARINE", "SUMMER", "JODIE", "STACI", "LEA", "CHRISTI", "JIMMIE", "JUSTINE", "ELMA", "LUELLA", "MARGRET", "DOMINIQUE", "SOCORRO", "RENE", "MARTINA", "MARGO", "MAVIS", "CALLIE", "BOBBI", "MARITZA", "LUCILE", "LEANNE", "JEANNINE", "DEANA", "AILEEN", "LORIE", "LADONNA", "WILLA", "MANUELA", "GALE", "SELMA", "DOLLY", "SYBIL", "ABBY", "LARA", "DALE", "IVY", "DEE", "WINNIE", "MARCY", "LUISA", "JERI", "MAGDALENA", "OFELIA", "MEAGAN", "AUDRA", "MATILDA", "LEILA", "CORNELIA", "BIANCA", "SIMONE", "BETTYE", "RANDI", "VIRGIE", "LATISHA", "BARBRA", "GEORGINA", "ELIZA", "LEANN", "BRIDGETTE", "RHODA", "HALEY", "ADELA", "NOLA", "BERNADINE", "FLOSSIE", "ILA", "GRETA", "RUTHIE", "NELDA", "MINERVA", "LILLY", "TERRIE", "LETHA", "HILARY", "ESTELA", "VALARIE", "BRIANNA", "ROSALYN", "EARLINE", "CATALINA", "AVA", "MIA", "CLARISSA", "LIDIA", "CORRINE", "ALEXANDRIA", "CONCEPCION", "TIA", "SHARRON", "RAE", "DONA", "ERICKA", "JAMI", "ELNORA", "CHANDRA", "LENORE", "NEVA", "MARYLOU", "MELISA", "TABATHA", "SERENA", "AVIS", "ALLIE", "SOFIA", "JEANIE", "ODESSA", "NANNIE", "HARRIETT", "LORAINE", "PENELOPE", "MILAGROS", "EMILIA", "BENITA", "ALLYSON", "ASHLEE", "TANIA", "TOMMIE", "ESMERALDA", "KARINA", "EVE", "PEARLIE", "ZELMA", "MALINDA", "NOREEN", "TAMEKA", "SAUNDRA", "HILLARY", "AMIE", "ALTHEA", "ROSALINDA", "JORDAN", "LILIA", "ALANA", "GAY", "CLARE", "ALEJANDRA", "ELINOR", "MICHAEL", "LORRIE", "JERRI", "DARCY", "EARNESTINE", "CARMELLA", "TAYLOR", "NOEMI", "MARCIE", "LIZA", "ANNABELLE", "LOUISA", "EARLENE", "MALLORY", "CARLENE", "NITA", "SELENA", "TANISHA", "KATY", "JULIANNE", "JOHN", "LAKISHA", "EDWINA", "MARICELA", "MARGERY", "KENYA", "DOLLIE", "ROXIE", "ROSLYN", "KATHRINE", "NANETTE", "CHARMAINE", "LAVONNE", "ILENE", "KRIS", "TAMMI", "SUZETTE", "CORINE", "KAYE", "JERRY", "MERLE", "CHRYSTAL", "LINA", "DEANNE", "LILIAN", "JULIANA", "ALINE", "LUANN", "KASEY", "MARYANNE", "EVANGELINE", "COLETTE", "MELVA", "LAWANDA", "YESENIA", "NADIA", "MADGE", "KATHIE", "EDDIE", "OPHELIA", "VALERIA", "NONA", "MITZI", "MARI", "GEORGETTE", "CLAUDINE", "FRAN", "ALISSA", "ROSEANN", "LAKEISHA", "SUSANNA", "REVA", "DEIDRE", "CHASITY", "SHEREE", "CARLY", "JAMES", "ELVIA", "ALYCE", "DEIRDRE", "GENA", "BRIANA", "ARACELI", "KATELYN", "ROSANNE", "WENDI", "TESSA", "BERTA", "MARVA", "IMELDA", "MARIETTA", "MARCI", "LEONOR", "ARLINE", "SASHA", "MADELYN", "JANNA", "JULIETTE", "DEENA", "AURELIA", "JOSEFA", "AUGUSTA", "LILIANA", "YOUNG", "CHRISTIAN", "LESSIE", "AMALIA", "SAVANNAH", "ANASTASIA", "VILMA", "NATALIA", "ROSELLA", "LYNNETTE", "CORINA", "ALFREDA", "LEANNA", "CAREY", "AMPARO", "COLEEN", "TAMRA", "AISHA", "WILDA", "KARYN", "CHERRY", "QUEEN", "MAURA", "MAI", "EVANGELINA", "ROSANNA", "HALLIE", "ERNA", "ENID", "MARIANA", "LACY", "JULIET", "JACKLYN", "FREIDA", "MADELEINE", "MARA", "HESTER", "CATHRYN", "LELIA", "CASANDRA", "BRIDGETT", "ANGELITA", "JANNIE", "DIONNE", "ANNMARIE", "KATINA", "BERYL", "PHOEBE", "MILLICENT", "KATHERYN", "DIANN", "CARISSA", "MARYELLEN", "LIZ", "LAURI", "HELGA", "GILDA", "ADRIAN", "RHEA", "MARQUITA", "HOLLIE", "TISHA", "TAMERA", "ANGELIQUE", "FRANCESCA", "BRITNEY", "KAITLIN", "LOLITA", "FLORINE", "ROWENA", "REYNA", "TWILA", "FANNY", "JANELL", "INES", "CONCETTA", "BERTIE", "ALBA", "BRIGITTE", "ALYSON", "VONDA", "PANSY", "ELBA", "NOELLE", "LETITIA", "KITTY", "DEANN", "BRANDIE", "LOUELLA", "LETA", "FELECIA", "SHARLENE", "LESA", "BEVERLEY", "ROBERT", "ISABELLA", "HERMINIA", "TERRA", "CELINA", "TORI", "OCTAVIA", "JADE", "DENICE", "GERMAINE", "SIERRA", "MICHELL", "CORTNEY", "NELLY", "DORETHA", "SYDNEY", "DEIDRA", "MONIKA", "LASHONDA", "JUDI", "CHELSEY", "ANTIONETTE", "MARGOT", "BOBBY", "ADELAIDE", "NAN", "LEEANN", "ELISHA", "DESSIE", "LIBBY", "KATHI", "GAYLA", "LATANYA", "MINA", "MELLISA", "KIMBERLEE", "JASMIN", "RENAE", "ZELDA", "ELDA", "MA", "JUSTINA", "GUSSIE", "EMILIE", "CAMILLA", "ABBIE", "ROCIO", "KAITLYN", "JESSE", "EDYTHE", "ASHLEIGH", "SELINA", "LAKESHA", "GERI", "ALLENE", "PAMALA", "MICHAELA", "DAYNA", "CARYN", "ROSALIA", "SUN", "JACQULINE", "REBECA", "MARYBETH", "KRYSTLE", "IOLA", "DOTTIE", "BENNIE", "BELLE", "AUBREY", "GRISELDA", "ERNESTINA", "ELIDA", "ADRIANNE", "DEMETRIA", "DELMA", "CHONG", "JAQUELINE", "DESTINY", "ARLEEN", "VIRGINA", "RETHA", "FATIMA", "TILLIE", "ELEANORE", "CARI", "TREVA", "BIRDIE", "WILHELMINA", "ROSALEE", "MAURINE", "LATRICE", "YONG", "JENA", "TARYN", "ELIA", "DEBBY", "MAUDIE", "JEANNA", "DELILAH", "CATRINA", "SHONDA", "HORTENCIA", "THEODORA", "TERESITA", "ROBBIN", "DANETTE", "MARYJANE", "FREDDIE", "DELPHINE", "BRIANNE", "NILDA", "DANNA", "CINDI", "BESS", "IONA", "HANNA", "ARIEL", "WINONA", "VIDA", "ROSITA", "MARIANNA", "WILLIAM", "RACHEAL", "GUILLERMINA", "ELOISA", "CELESTINE", "CAREN", "MALISSA", "LONA", "CHANTEL", "SHELLIE", "MARISELA", "LEORA", "AGATHA", "SOLEDAD", "MIGDALIA", "IVETTE", "CHRISTEN", "ATHENA", "JANEL", "CHLOE", "VEDA", "PATTIE", "TESSIE", "TERA", "MARILYNN", "LUCRETIA", "KARRIE", "DINAH", "DANIELA", "ALECIA", "ADELINA", "VERNICE", "SHIELA", "PORTIA", "MERRY", "LASHAWN", "DEVON", "DARA", "TAWANA", "OMA", "VERDA", "CHRISTIN", "ALENE", "ZELLA", "SANDI", "RAFAELA", "MAYA", "KIRA", "CANDIDA", "ALVINA", "SUZAN", "SHAYLA", "LYN", "LETTIE", "ALVA", "SAMATHA", "ORALIA", "MATILDE", "MADONNA", "LARISSA", "VESTA", "RENITA", "INDIA", "DELOIS", "SHANDA", "PHILLIS", "LORRI", "ERLINDA", "CRUZ", "CATHRINE", "BARB", "ZOE", "ISABELL", "IONE", "GISELA", "CHARLIE", "VALENCIA", "ROXANNA", "MAYME", "KISHA", "ELLIE", "MELLISSA", "DORRIS", "DALIA", "BELLA", "ANNETTA", "ZOILA", "RETA", "REINA", "LAURETTA", "KYLIE", "CHRISTAL", "PILAR", "CHARLA", "ELISSA", "TIFFANI", "TANA", "PAULINA", "LEOTA", "BREANNA", "JAYME", "CARMEL", "VERNELL", "TOMASA", "MANDI", "DOMINGA", "SANTA", "MELODIE", "LURA", "ALEXA", "TAMELA", "RYAN", "MIRNA", "KERRIE", "VENUS", "NOEL", "FELICITA", "CRISTY", "CARMELITA", "BERNIECE", "ANNEMARIE", "TIARA", "ROSEANNE", "MISSY", "CORI", "ROXANA", "PRICILLA", "KRISTAL", "JUNG", "ELYSE", "HAYDEE", "ALETHA", "BETTINA", "MARGE", "GILLIAN", "FILOMENA", "CHARLES", "ZENAIDA", "HARRIETTE", "CARIDAD", "VADA", "UNA", "ARETHA", "PEARLINE", "MARJORY", "MARCELA", "FLOR", "EVETTE", "ELOUISE", "ALINA", "TRINIDAD", "DAVID", "DAMARIS", "CATHARINE", "CARROLL", "BELVA", "NAKIA", "MARLENA", "LUANNE", "LORINE", "KARON", "DORENE", "DANITA", "BRENNA", "TATIANA", "SAMMIE", "LOUANN", "LOREN", "JULIANNA", "ANDRIA", "PHILOMENA", "LUCILA", "LEONORA", "DOVIE", "ROMONA", "MIMI", "JACQUELIN", "GAYE", "TONJA", "MISTI", "JOE", "GENE", "CHASTITY", "STACIA", "ROXANN", "MICAELA", "NIKITA", "MEI", "VELDA", "MARLYS", "JOHNNA", "AURA", "LAVERN", "IVONNE", "HAYLEY", "NICKI", "MAJORIE", "HERLINDA", "GEORGE", "ALPHA", "YADIRA", "PERLA", "GREGORIA", "DANIEL", "ANTONETTE", "SHELLI", "MOZELLE", "MARIAH", "JOELLE", "CORDELIA", "JOSETTE", "CHIQUITA", "TRISTA", "LOUIS", "LAQUITA", "GEORGIANA", "CANDI", "SHANON", "LONNIE", "HILDEGARD", "CECIL", "VALENTINA", "STEPHANY", "MAGDA", "KAROL", "GERRY", "GABRIELLA", "TIANA", "ROMA", "RICHELLE", "RAY", "PRINCESS", "OLETA", "JACQUE", "IDELLA", "ALAINA", "SUZANNA", "JOVITA", "BLAIR", "TOSHA", "RAVEN", "NEREIDA", "MARLYN", "KYLA", "JOSEPH", "DELFINA", "TENA", "STEPHENIE", "SABINA", "NATHALIE", "MARCELLE", "GERTIE", "DARLEEN", "THEA", "SHARONDA", "SHANTEL", "BELEN", "VENESSA", "ROSALINA", "ONA", "GENOVEVA", "COREY", "CLEMENTINE", "ROSALBA", "RENATE", "RENATA", "MI", "IVORY", "GEORGIANNA", "FLOY", "DORCAS", "ARIANA", "TYRA", "THEDA", "MARIAM", "JULI", "JESICA", "DONNIE", "VIKKI", "VERLA", "ROSELYN", "MELVINA", "JANNETTE", "GINNY", "DEBRAH", "CORRIE", "ASIA", "VIOLETA", "MYRTIS", "LATRICIA", "COLLETTE", "CHARLEEN", "ANISSA", "VIVIANA", "TWYLA", "PRECIOUS", "NEDRA", "LATONIA", "LAN", "HELLEN", "FABIOLA", "ANNAMARIE", "ADELL", "SHARYN", "CHANTAL", "NIKI", "MAUD", "LIZETTE", "LINDY", "KIA", "KESHA", "JEANA", "DANELLE", "CHARLINE", "CHANEL", "CARROL", "VALORIE", "LIA", "DORTHA", "CRISTAL", "SUNNY", "LEONE", "LEILANI", "GERRI", "DEBI", "ANDRA", "KESHIA", "IMA", "EULALIA", "EASTER", "DULCE", "NATIVIDAD", "LINNIE", "KAMI", "GEORGIE", "CATINA", "BROOK", "ALDA", "WINNIFRED", "SHARLA", "RUTHANN", "MEAGHAN", "MAGDALENE", "LISSETTE", "ADELAIDA", "VENITA", "TRENA", "SHIRLENE", "SHAMEKA", "ELIZEBETH", "DIAN", "SHANTA", "MICKEY", "LATOSHA", "CARLOTTA", "WINDY", "SOON", "ROSINA", "MARIANN", "LEISA", "JONNIE", "DAWNA", "CATHIE", "BILLY", "ASTRID", "SIDNEY", "LAUREEN", "JANEEN", "HOLLI", "FAWN", "VICKEY", "TERESSA", "SHANTE", "RUBYE", "MARCELINA", "CHANDA", "CARY", "TERESE", "SCARLETT", "MARTY", "MARNIE", "LULU", "LISETTE", "JENIFFER", "ELENOR", "DORINDA", "DONITA", "CARMAN", "BERNITA", "ALTAGRACIA", "ALETA", "ADRIANNA", "ZORAIDA", "RONNIE", "NICOLA", "LYNDSEY", "KENDALL", "JANINA", "CHRISSY", "AMI", "STARLA", "PHYLIS", "PHUONG", "KYRA", "CHARISSE", "BLANCH", "SANJUANITA", "RONA", "NANCI", "MARILEE", "MARANDA", "CORY", "BRIGETTE", "SANJUANA", "MARITA", "KASSANDRA", "JOYCELYN", "IRA", "FELIPA", "CHELSIE", "BONNY", "MIREYA", "LORENZA", "KYONG", "ILEANA", "CANDELARIA", "TONY", "TOBY", "SHERIE", "OK", "MARK", "LUCIE", "LEATRICE", "LAKESHIA", "GERDA", "EDIE", "BAMBI", "MARYLIN", "LAVON", "HORTENSE", "GARNET", "EVIE", "TRESSA", "SHAYNA", "LAVINA", "KYUNG", "JEANETTA", "SHERRILL", "SHARA", "PHYLISS", "MITTIE", "ANABEL", "ALESIA", "THUY", "TAWANDA", "RICHARD", "JOANIE", "TIFFANIE", "LASHANDA", "KARISSA", "ENRIQUETA", "DARIA", "DANIELLA", "CORINNA", "ALANNA", "ABBEY", "ROXANE", "ROSEANNA", "MAGNOLIA", "LIDA", "KYLE", "JOELLEN", "ERA", "CORAL", "CARLEEN", "TRESA", "PEGGIE", "NOVELLA", "NILA", "MAYBELLE", "JENELLE", "CARINA", "NOVA", "MELINA", "MARQUERITE", "MARGARETTE", "JOSEPHINA", "EVONNE", "DEVIN", "CINTHIA", "ALBINA", "TOYA", "TAWNYA", "SHERITA", "SANTOS", "MYRIAM", "LIZABETH", "LISE", "KEELY", "JENNI", "GISELLE", "CHERYLE", "ARDITH", "ARDIS", "ALESHA", "ADRIANE", "SHAINA", "LINNEA", "KAROLYN", "HONG", "FLORIDA", "FELISHA", "DORI", "DARCI", "ARTIE", "ARMIDA", "ZOLA", "XIOMARA", "VERGIE", "SHAMIKA", "NENA", "NANNETTE", "MAXIE", "LOVIE", "JEANE", "JAIMIE", "INGE", "FARRAH", "ELAINA", "CAITLYN", "STARR", "FELICITAS", "CHERLY", "CARYL", "YOLONDA", "YASMIN", "TEENA", "PRUDENCE", "PENNIE", "NYDIA", "MACKENZIE", "ORPHA", "MARVEL", "LIZBETH", "LAURETTE", "JERRIE", "HERMELINDA", "CAROLEE", "TIERRA", "MIRIAN", "META", "MELONY", "KORI", "JENNETTE", "JAMILA", "ENA", "ANH", "YOSHIKO", "SUSANNAH", "SALINA", "RHIANNON", "JOLEEN", "CRISTINE", "ASHTON", "ARACELY", "TOMEKA", "SHALONDA", "MARTI", "LACIE", "KALA", "JADA", "ILSE", "HAILEY", "BRITTANI", "ZONA", "SYBLE", "SHERRYL", "RANDY", "NIDIA", "MARLO", "KANDICE", "KANDI", "DEB", "DEAN", "AMERICA", "ALYCIA", "TOMMY", "RONNA", "NORENE", "MERCY", "JOSE", "INGEBORG", "GIOVANNA", "GEMMA", "CHRISTEL", "AUDRY", "ZORA", "VITA", "VAN", "TRISH", "STEPHAINE", "SHIRLEE", "SHANIKA", "MELONIE", "MAZIE", "JAZMIN", "INGA", "HOA", "HETTIE", "GERALYN", "FONDA", "ESTRELLA", "ADELLA", "SU", "SARITA", "RINA", "MILISSA", "MARIBETH", "GOLDA", "EVON", "ETHELYN", "ENEDINA", "CHERISE", "CHANA", "VELVA", "TAWANNA", "SADE", "MIRTA", "LI", "KARIE", "JACINTA", "ELNA", "DAVINA", "CIERRA", "ASHLIE", "ALBERTHA", "TANESHA", "STEPHANI", "NELLE", "MINDI", "LU", "LORINDA", "LARUE", "FLORENE", "DEMETRA", "DEDRA", "CIARA", "CHANTELLE", "ASHLY", "SUZY", "ROSALVA", "NOELIA", "LYDA", "LEATHA", "KRYSTYNA", "KRISTAN", "KARRI", "DARLINE", "DARCIE", "CINDA", "CHEYENNE", "CHERRIE", "AWILDA", "ALMEDA", "ROLANDA", "LANETTE", "JERILYN", "GISELE", "EVALYN", "CYNDI", "CLETA", "CARIN", "ZINA", "ZENA", "VELIA", "TANIKA", "PAUL", "CHARISSA", "THOMAS", "TALIA", "MARGARETE", "LAVONDA", "KAYLEE", "KATHLENE", "JONNA", "IRENA", "ILONA", "IDALIA", "CANDIS", "CANDANCE", "BRANDEE", "ANITRA", "ALIDA", "SIGRID", "NICOLETTE", "MARYJO", "LINETTE", "HEDWIG", "CHRISTIANA", "CASSIDY", "ALEXIA", "TRESSIE", "MODESTA", "LUPITA", "LITA", "GLADIS", "EVELIA", "DAVIDA", "CHERRI", "CECILY", "ASHELY", "ANNABEL", "AGUSTINA", "WANITA", "SHIRLY", "ROSAURA", "HULDA", "EUN", "BAILEY", "YETTA", "VERONA", "THOMASINA", "SIBYL", "SHANNAN", "MECHELLE", "LUE", "LEANDRA", "LANI", "KYLEE", "KANDY", "JOLYNN", "FERNE", "EBONI", "CORENE", "ALYSIA", "ZULA", "NADA", "MOIRA", "LYNDSAY", "LORRETTA", "JUAN", "JAMMIE", "HORTENSIA", "GAYNELL", "CAMERON", "ADRIA", "VINA", "VICENTA", "TANGELA", "STEPHINE", "NORINE", "NELLA", "LIANA", "LESLEE", "KIMBERELY", "ILIANA", "GLORY", "FELICA", "EMOGENE", "ELFRIEDE", "EDEN", "EARTHA", "CARMA", "BEA", "OCIE", "MARRY", "LENNIE", "KIARA", "JACALYN", "CARLOTA", "ARIELLE", "YU", "STAR", "OTILIA", "KIRSTIN", "KACEY", "JOHNETTA", "JOEY", "JOETTA", "JERALDINE", "JAUNITA", "ELANA", "DORTHEA", "CAMI", "AMADA", "ADELIA", "VERNITA", "TAMAR", "SIOBHAN", "RENEA", "RASHIDA", "OUIDA", "ODELL", "NILSA", "MERYL", "KRISTYN", "JULIETA", "DANICA", "BREANNE", "AUREA", "ANGLEA", "SHERRON", "ODETTE", "MALIA", "LORELEI", "LIN", "LEESA", "KENNA", "KATHLYN", "FIONA", "CHARLETTE", "SUZIE", "SHANTELL", "SABRA", "RACQUEL", "MYONG", "MIRA", "MARTINE", "LUCIENNE", "LAVADA", "JULIANN", "JOHNIE", "ELVERA", "DELPHIA", "CLAIR", "CHRISTIANE", "CHAROLETTE", "CARRI", "AUGUSTINE", "ASHA", "ANGELLA", "PAOLA", "NINFA", "LEDA", "LAI", "EDA", "SUNSHINE", "STEFANI", "SHANELL", "PALMA", "MACHELLE", "LISSA", "KECIA", "KATHRYNE", "KARLENE", "JULISSA", "JETTIE", "JENNIFFER", "HUI", "CORRINA", "CHRISTOPHER", "CAROLANN", "ALENA", "TESS", "ROSARIA", "MYRTICE", "MARYLEE", "LIANE", "KENYATTA", "JUDIE", "JANEY", "IN", "ELMIRA", "ELDORA", "DENNA", "CRISTI", "CATHI", "ZAIDA", "VONNIE", "VIVA", "VERNIE", "ROSALINE", "MARIELA", "LUCIANA", "LESLI", "KARAN", "FELICE", "DENEEN", "ADINA", "WYNONA", "TARSHA", "SHERON", "SHASTA", "SHANITA", "SHANI", "SHANDRA", "RANDA", "PINKIE", "PARIS", "NELIDA", "MARILOU", "LYLA", "LAURENE", "LACI", "JOI", "JANENE", "DOROTHA", "DANIELE", "DANI", "CAROLYNN", "CARLYN", "BERENICE", "AYESHA", "ANNELIESE", "ALETHEA", "THERSA", "TAMIKO", "RUFINA", "OLIVA", "MOZELL", "MARYLYN", "MADISON", "KRISTIAN", "KATHYRN", "KASANDRA", "KANDACE", "JANAE", "GABRIEL", "DOMENICA", "DEBBRA", "DANNIELLE", "CHUN", "BUFFY", "BARBIE", "ARCELIA", "AJA", "ZENOBIA", "SHAREN", "SHAREE", "PATRICK", "PAGE", "MY", "LAVINIA", "KUM", "KACIE", "JACKELINE", "HUONG", "FELISA", "EMELIA", "ELEANORA", "CYTHIA", "CRISTIN", "CLYDE", "CLARIBEL", "CARON", "ANASTACIA", "ZULMA", "ZANDRA", "YOKO", "TENISHA", "SUSANN", "SHERILYN", "SHAY", "SHAWANDA", "SABINE", "ROMANA", "MATHILDA", "LINSEY", "KEIKO", "JOANA", "ISELA", "GRETTA", "GEORGETTA", "EUGENIE", "DUSTY", "DESIRAE", "DELORA", "CORAZON", "ANTONINA", "ANIKA", "WILLENE", "TRACEE", "TAMATHA", "REGAN", "NICHELLE", "MICKIE", "MAEGAN", "LUANA", "LANITA", "KELSIE", "EDELMIRA", "BREE", "AFTON", "TEODORA", "TAMIE", "SHENA", "MEG", "LINH", "KELI", "KACI", "DANYELLE", "BRITT", "ARLETTE", "ALBERTINE", "ADELLE", "TIFFINY", "STORMY", "SIMONA", "NUMBERS", "NICOLASA", "NICHOL", "NIA", "NAKISHA", "MEE", "MAIRA", "LOREEN", "KIZZY", "JOHNNY", "JAY", "FALLON", "CHRISTENE", "BOBBYE", "ANTHONY", "YING", "VINCENZA", "TANJA", "RUBIE", "RONI", "QUEENIE", "MARGARETT", "KIMBERLI", "IRMGARD", "IDELL", "HILMA", "EVELINA", "ESTA", "EMILEE", "DENNISE", "DANIA", "CARL", "CARIE", "ANTONIO", "WAI", "SANG", "RISA", "RIKKI", "PARTICIA", "MUI", "MASAKO", "MARIO", "LUVENIA", "LOREE", "LONI", "LIEN", "KEVIN", "GIGI", "FLORENCIA", "DORIAN", "DENITA", "DALLAS", "CHI", "BILLYE", "ALEXANDER", "TOMIKA", "SHARITA", "RANA", "NIKOLE", "NEOMA", "MARGARITE", "MADALYN", "LUCINA", "LAILA", "KALI", "JENETTE", "GABRIELE", "EVELYNE", "ELENORA", "CLEMENTINA", "ALEJANDRINA", "ZULEMA", "VIOLETTE", "VANNESSA", "THRESA", "RETTA", "PIA", "PATIENCE", "NOELLA", "NICKIE", "JONELL", "DELTA", "CHUNG", "CHAYA", "CAMELIA", "BETHEL", "ANYA", "ANDREW", "THANH", "SUZANN", "SPRING", "SHU", "MILA", "LILLA", "LAVERNA", "KEESHA", "KATTIE", "GIA", "GEORGENE", "EVELINE", "ESTELL", "ELIZBETH", "VIVIENNE", "VALLIE", "TRUDIE", "STEPHANE", "MICHEL", "MAGALY", "MADIE", "KENYETTA", "KARREN", "JANETTA", "HERMINE", "HARMONY", "DRUCILLA", "DEBBI", "CELESTINA", "CANDIE", "BRITNI", "BECKIE", "AMINA", "ZITA", "YUN", "YOLANDE", "VIVIEN", "VERNETTA", "TRUDI", "SOMMER", "PEARLE", "PATRINA", "OSSIE", "NICOLLE", "LOYCE", "LETTY", "LARISA", "KATHARINA", "JOSELYN", "JONELLE", "JENELL", "IESHA", "HEIDE", "FLORINDA", "FLORENTINA", "FLO", "ELODIA", "DORINE", "BRUNILDA", "BRIGID", "ASHLI", "ARDELLA", "TWANA", "THU", "TARAH", "SUNG", "SHEA", "SHAVON", "SHANE", "SERINA", "RAYNA", "RAMONITA", "NGA", "MARGURITE", "LUCRECIA", "KOURTNEY", "KATI", "JESUS", "JESENIA", "DIAMOND", "CRISTA", "AYANA", "ALICA", "ALIA", "VINNIE", "SUELLEN", "ROMELIA", "RACHELL", "PIPER", "OLYMPIA", "MICHIKO", "KATHALEEN", "JOLIE", "JESSI", "JANESSA", "HANA", "HA", "ELEASE", "CARLETTA", "BRITANY", "SHONA", "SALOME", "ROSAMOND", "REGENA", "RAINA", "NGOC", "NELIA", "LOUVENIA", "LESIA", "LATRINA", "LATICIA", "LARHONDA", "JINA", "JACKI", "HOLLIS", "HOLLEY", "EMMY", "DEEANN", "CORETTA", "ARNETTA", "VELVET", "THALIA", "SHANICE", "NETA", "MIKKI", "MICKI", "LONNA", "LEANA", "LASHUNDA", "KILEY", "JOYE", "JACQULYN", "IGNACIA", "HYUN", "HIROKO", "HENRY", "HENRIETTE", "ELAYNE", "DELINDA", "DARNELL", "DAHLIA", "COREEN", "CONSUELA", "CONCHITA", "CELINE", "BABETTE", "AYANNA", "ANETTE", "ALBERTINA", "SKYE", "SHAWNEE", "SHANEKA", "QUIANA", "PAMELIA", "MIN", "MERRI", "MERLENE", "MARGIT", "KIESHA", "KIERA", "KAYLENE", "JODEE", "JENISE", "ERLENE", "EMMIE", "ELSE", "DARYL", "DALILA", "DAISEY", "CODY", "CASIE", "BELIA", "BABARA", "VERSIE", "VANESA", "SHELBA", "SHAWNDA", "SAM", "NORMAN", "NIKIA", "NAOMA", "MARNA", "MARGERET", "MADALINE", "LAWANA", "KINDRA", "JUTTA", "JAZMINE", "JANETT", "HANNELORE", "GLENDORA", "GERTRUD", "GARNETT", "FREEDA", "FREDERICA", "FLORANCE", "FLAVIA", "DENNIS", "CARLINE", "BEVERLEE", "ANJANETTE", "VALDA", "TRINITY", "TAMALA", "STEVIE", "SHONNA", "SHA", "SARINA", "ONEIDA", "MICAH", "MERILYN", "MARLEEN", "LURLINE", "LENNA", "KATHERIN", "JIN", "JENI", "HAE", "GRACIA", "GLADY", "FARAH", "ERIC", "ENOLA", "EMA", "DOMINQUE", "DEVONA", "DELANA", "CECILA", "CAPRICE", "ALYSHA", "ALI", "ALETHIA", "VENA", "THERESIA", "TAWNY", "SONG", "SHAKIRA", "SAMARA", "SACHIKO", "RACHELE", "PAMELLA", "NICKY", "MARNI", "MARIEL", "MAREN", "MALISA", "LIGIA", "LERA", "LATORIA", "LARAE", "KIMBER", "KATHERN", "KAREY", "JENNEFER", "JANETH", "HALINA", "FREDIA", "DELISA", "DEBROAH", "CIERA", "CHIN", "ANGELIKA", "ANDREE", "ALTHA", "YEN", "VIVAN", "TERRESA", "TANNA", "SUK", "SUDIE", "SOO", "SIGNE", "SALENA", "RONNI", "REBBECCA", "MYRTIE", "MCKENZIE", "MALIKA", "MAIDA", "LOAN", "LEONARDA", "KAYLEIGH", "FRANCE", "ETHYL", "ELLYN", "DAYLE", "CAMMIE", "BRITTNI", "BIRGIT", "AVELINA", "ASUNCION", "ARIANNA", "AKIKO", "VENICE", "TYESHA", "TONIE", "TIESHA", "TAKISHA", "STEFFANIE", "SINDY", "SANTANA", "MEGHANN", "MANDA", "MACIE", "LADY", "KELLYE", "KELLEE", "JOSLYN", "JASON", "INGER", "INDIRA", "GLINDA", "GLENNIS", "FERNANDA", "FAUSTINA", "ENEIDA", "ELICIA", "DOT", "DIGNA", "DELL", "ARLETTA", "ANDRE", "WILLIA", "TAMMARA", "TABETHA", "SHERRELL", "SARI", "REFUGIO", "REBBECA", "PAULETTA", "NIEVES", "NATOSHA", "NAKITA", "MAMMIE", "KENISHA", "KAZUKO", "KASSIE", "GARY", "EARLEAN", "DAPHINE", "CORLISS", "CLOTILDE", "CAROLYNE", "BERNETTA", "AUGUSTINA", "AUDREA", "ANNIS", "ANNABELL", "YAN", "TENNILLE", "TAMICA", "SELENE", "SEAN", "ROSANA", "REGENIA", "QIANA", "MARKITA", "MACY", "LEEANNE", "LAURINE", "KYM", "JESSENIA", "JANITA", "GEORGINE", "GENIE", "EMIKO", "ELVIE", "DEANDRA", "DAGMAR", "CORIE", "COLLEN", "CHERISH", "ROMAINE", "PORSHA", "PEARLENE", "MICHELINE", "MERNA", "MARGORIE", "MARGARETTA", "LORE", "KENNETH", "JENINE", "HERMINA", "FREDERICKA", "ELKE", "DRUSILLA", "DORATHY", "DIONE", "DESIRE", "CELENA", "BRIGIDA", "ANGELES", "ALLEGRA", "THEO", "TAMEKIA", "SYNTHIA", "STEPHEN", "SOOK", "SLYVIA", "ROSANN", "REATHA", "RAYE", "MARQUETTA", "MARGART", "LING", "LAYLA", "KYMBERLY", "KIANA", "KAYLEEN", "KATLYN", "KARMEN", "JOELLA", "IRINA", "EMELDA", "ELENI", "DETRA", "CLEMMIE", "CHERYLL", "CHANTELL", "CATHEY", "ARNITA", "ARLA", "ANGLE", "ANGELIC", "ALYSE", "ZOFIA", "THOMASINE", "TENNIE", "SON", "SHERLY", "SHERLEY", "SHARYL", "REMEDIOS", "PETRINA", "NICKOLE", "MYUNG", "MYRLE", "MOZELLA", "LOUANNE", "LISHA", "LATIA", "LANE", "KRYSTA", "JULIENNE", "JOEL", "JEANENE", "JACQUALINE", "ISAURA", "GWENDA", "EARLEEN", "DONALD", "CLEOPATRA", "CARLIE", "AUDIE", "ANTONIETTA", "ALISE", "ALEX", "VERDELL", "VAL", "TYLER", "TOMOKO", "THAO", "TALISHA", "STEVEN", "SO", "SHEMIKA", "SHAUN", "SCARLET", "SAVANNA", "SANTINA", "ROSIA", "RAEANN", "ODILIA", "NANA", "MINNA", "MAGAN", "LYNELLE", "LE", "KARMA", "JOEANN", "IVANA", "INELL", "ILANA", "HYE", "HONEY", "HEE", "GUDRUN", "FRANK", "DREAMA", "CRISSY", "CHANTE", "CARMELINA", "ARVILLA", "ARTHUR", "ANNAMAE", "ALVERA", "ALEIDA", "AARON", "YEE", "YANIRA", "VANDA", "TIANNA", "TAM", "STEFANIA", "SHIRA", "PERRY", "NICOL", "NANCIE", "MONSERRATE", "MINH", "MELYNDA", "MELANY", "MATTHEW", "LOVELLA", "LAURE", "KIRBY", "KACY", "JACQUELYNN", "HYON", "GERTHA", "FRANCISCO", "ELIANA", "CHRISTENA", "CHRISTEEN", "CHARISE", "CATERINA", "CARLEY", "CANDYCE", "ARLENA", "AMMIE", "YANG", "WILLETTE", "VANITA", "TUYET", "TINY", "SYREETA", "SILVA", "SCOTT", "RONALD", "PENNEY", "NYLA", "MICHAL", "MAURICE", "MARYAM", "MARYA", "MAGEN", "LUDIE", "LOMA", "LIVIA", "LANELL", "KIMBERLIE", "JULEE", "DONETTA", "DIEDRA", "DENISHA", "DEANE", "DAWNE", "CLARINE", "CHERRYL", "BRONWYN", "BRANDON", "ALLA", "VALERY", "TONDA", "SUEANN", "SORAYA", "SHOSHANA", "SHELA", "SHARLEEN", "SHANELLE", "NERISSA", "MICHEAL", "MERIDITH", "MELLIE", "MAYE", "MAPLE", "MAGARET", "LUIS", "LILI", "LEONILA", "LEONIE", "LEEANNA", "LAVONIA", "LAVERA", "KRISTEL", "KATHEY", "KATHE", "JUSTIN", "JULIAN", "JIMMY", "JANN", "ILDA", "HILDRED", "HILDEGARDE", "GENIA", "FUMIKO", "EVELIN", "ERMELINDA", "ELLY", "DUNG", "DOLORIS", "DIONNA", "DANAE", "BERNEICE", "ANNICE", "ALIX", "VERENA", "VERDIE", "TRISTAN", "SHAWNNA", "SHAWANA", "SHAUNNA", "ROZELLA", "RANDEE", "RANAE", "MILAGRO", "LYNELL", "LUISE", "LOUIE", "LOIDA", "LISBETH", "KARLEEN", "JUNITA", "JONA", "ISIS", "HYACINTH", "HEDY", "GWENN", "ETHELENE", "ERLINE", "EDWARD", "DONYA", "DOMONIQUE", "DELICIA", "DANNETTE", "CICELY", "BRANDA", "BLYTHE", "BETHANN", "ASHLYN", "ANNALEE", "ALLINE", "YUKO", "VELLA", "TRANG", "TOWANDA", "TESHA", "SHERLYN", "NARCISA", "MIGUELINA", "MERI", "MAYBELL", "MARLANA", "MARGUERITA", "MADLYN", "LUNA", "LORY", "LORIANN", "LIBERTY", "LEONORE", "LEIGHANN", "LAURICE", "LATESHA", "LARONDA", "KATRICE", "KASIE", "KARL", "KALEY", "JADWIGA", "GLENNIE", "GEARLDINE", "FRANCINA", "EPIFANIA", "DYAN", "DORIE", "DIEDRE", "DENESE", "DEMETRICE", "DELENA", "DARBY", "CRISTIE", "CLEORA", "CATARINA", "CARISA", "BERNIE", "BARBERA", "ALMETA", "TRULA", "TEREASA", "SOLANGE", "SHEILAH", "SHAVONNE", "SANORA", "ROCHELL", "MATHILDE", "MARGARETA", "MAIA", "LYNSEY", "LAWANNA", "LAUNA", "KENA", "KEENA", "KATIA", "JAMEY", "GLYNDA", "GAYLENE", "ELVINA", "ELANOR", "DANUTA", "DANIKA", "CRISTEN", "CORDIE", "COLETTA", "CLARITA", "CARMON", "BRYNN", "AZUCENA", "AUNDREA", "ANGELE", "YI", "WALTER", "VERLIE", "VERLENE", "TAMESHA", "SILVANA", "SEBRINA", "SAMIRA", "REDA", "RAYLENE", "PENNI", "PANDORA", "NORAH", "NOMA", "MIREILLE", "MELISSIA", "MARYALICE", "LARAINE", "KIMBERY", "KARYL", "KARINE", "KAM", "JOLANDA", "JOHANA", "JESUSA", "JALEESA", "JAE", "JACQUELYNE", "IRISH", "ILUMINADA", "HILARIA", "HANH", "GENNIE", "FRANCIE", "FLORETTA", "EXIE", "EDDA", "DREMA", "DELPHA", "BEV", "BARBAR", "ASSUNTA", "ARDELL", "ANNALISA", "ALISIA", "YUKIKO", "YOLANDO", "WONDA", "WEI", "WALTRAUD", "VETA", "TEQUILA", "TEMEKA", "TAMEIKA", "SHIRLEEN", "SHENITA", "PIEDAD", "OZELLA", "MIRTHA", "MARILU", "KIMIKO", "JULIANE", "JENICE", "JEN", "JANAY", "JACQUILINE", "HILDE", "FE", "FAE", "EVAN", "EUGENE", "ELOIS", "ECHO", "DEVORAH", "CHAU", "BRINDA", "BETSEY", "ARMINDA", "ARACELIS", "APRYL", "ANNETT", "ALISHIA", "VEOLA", "USHA", "TOSHIKO", "THEOLA", "TASHIA", "TALITHA", "SHERY", "RUDY", "RENETTA", "REIKO", "RASHEEDA", "OMEGA", "OBDULIA", "MIKA", "MELAINE", "MEGGAN", "MARTIN", "MARLEN", "MARGET", "MARCELINE", "MANA", "MAGDALEN", "LIBRADA", "LEZLIE", "LEXIE", "LATASHIA", "LASANDRA", "KELLE", "ISIDRA", "ISA", "INOCENCIA", "GWYN", "FRANCOISE", "ERMINIA", "ERINN", "DIMPLE", "DEVORA", "CRISELDA", "ARMANDA", "ARIE", "ARIANE", "ANGELO", "ANGELENA", "ALLEN", "ALIZA", "ADRIENE", "ADALINE", "XOCHITL", "TWANNA", "TRAN", "TOMIKO", "TAMISHA", "TAISHA", "SUSY", "SIU", "RUTHA", "ROXY", "RHONA", "RAYMOND", "OTHA", "NORIKO", "NATASHIA", "MERRIE", "MELVIN", "MARINDA", "MARIKO", "MARGERT", "LORIS", "LIZZETTE", "LEISHA", "KAILA", "KA", "JOANNIE", "JERRICA", "JENE", "JANNET", "JANEE", "JACINDA", "HERTA", "ELENORE", "DORETTA", "DELAINE", "DANIELL", "CLAUDIE", "CHINA", "BRITTA", "APOLONIA", "AMBERLY", "ALEASE", "YURI", "YUK", "WEN", "WANETA", "UTE", "TOMI", "SHARRI", "SANDIE", "ROSELLE", "REYNALDA", "RAGUEL", "PHYLICIA", "PATRIA", "OLIMPIA", "ODELIA", "MITZIE", "MITCHELL", "MISS", "MINDA", "MIGNON", "MICA", "MENDY", "MARIVEL", "MAILE", "LYNETTA", "LAVETTE", "LAURYN", "LATRISHA", "LAKIESHA", "KIERSTEN", "KARY", "JOSPHINE", "JOLYN", "JETTA", "JANISE", "JACQUIE", "IVELISSE", "GLYNIS", "GIANNA", "GAYNELLE", "EMERALD", "DEMETRIUS", "DANYELL", "DANILLE", "DACIA", "CORALEE", "CHER", "CEOLA", "BRETT", "BELL", "ARIANNE", "ALESHIA", "YUNG", "WILLIEMAE", "TROY", "TRINH", "THORA", "TAI", "SVETLANA", "SHERIKA", "SHEMEKA", "SHAUNDA", "ROSELINE", "RICKI", "MELDA", "MALLIE", "LAVONNA", "LATINA", "LARRY", "LAQUANDA", "LALA", "LACHELLE", "KLARA", "KANDIS", "JOHNA", "JEANMARIE", "JAYE", "HANG", "GRAYCE", "GERTUDE", "EMERITA", "EBONIE", "CLORINDA", "CHING", "CHERY", "CAROLA", "BREANN", "BLOSSOM", "BERNARDINE", "BECKI", "ARLETHA", "ARGELIA", "ARA", "ALITA", "YULANDA", "YON", "YESSENIA", "TOBI", "TASIA", "SYLVIE", "SHIRL", "SHIRELY", "SHERIDAN", "SHELLA", "SHANTELLE", "SACHA", "ROYCE", "REBECKA", "REAGAN", "PROVIDENCIA", "PAULENE", "MISHA", "MIKI", "MARLINE", "MARICA", "LORITA", "LATOYIA", "LASONYA", "KERSTIN", "KENDA", "KEITHA", "KATHRIN", "JAYMIE", "JACK", "GRICELDA", "GINETTE", "ERYN", "ELINA", "ELFRIEDA", "DANYEL", "CHEREE", "CHANELLE", "BARRIE", "AVERY", "AURORE", "ANNAMARIA", "ALLEEN", "AILENE", "AIDE", "YASMINE", "VASHTI", "VALENTINE", "TREASA", "TORY", "TIFFANEY", "SHERYLL", "SHARIE", "SHANAE", "SAU", "RAISA", "PA", "NEDA", "MITSUKO", "MIRELLA", "MILDA", "MARYANNA", "MARAGRET", "MABELLE", "LUETTA", "LORINA", "LETISHA", "LATARSHA", "LANELLE", "LAJUANA", "KRISSY", "KARLY", "KARENA", "JON", "JESSIKA", "JERICA", "JEANELLE", "JANUARY", "JALISA", "JACELYN", "IZOLA", "IVEY", "GREGORY", "EUNA", "ETHA", "DREW", "DOMITILA", "DOMINICA", "DAINA", "CREOLA", "CARLI", "CAMIE", "BUNNY", "BRITTNY", "ASHANTI", "ANISHA", "ALEEN", "ADAH", "YASUKO", "WINTER", "VIKI", "VALRIE", "TONA", "TINISHA", "THI", "TERISA", "TATUM", "TANEKA", "SIMONNE", "SHALANDA", "SERITA", "RESSIE", "REFUGIA", "PAZ", "OLENE", "NA", "MERRILL", "MARGHERITA", "MANDIE", "MAN", "MAIRE", "LYNDIA", "LUCI", "LORRIANE", "LORETA", "LEONIA", "LAVONA", "LASHAWNDA", "LAKIA", "KYOKO", "KRYSTINA", "KRYSTEN", "KENIA", "KELSI", "JUDE", "JEANICE", "ISOBEL", "GEORGIANN", "GENNY", "FELICIDAD", "EILENE", "DEON", "DELOISE", "DEEDEE", "DANNIE", "CONCEPTION", "CLORA", "CHERILYN", "CHANG", "CALANDRA", "BERRY", "ARMANDINA", "ANISA", "ULA", "TIMOTHY", "TIERA", "THERESSA", "STEPHANIA", "SIMA", "SHYLA", "SHONTA", "SHERA", "SHAQUITA", "SHALA", "SAMMY", "ROSSANA", "NOHEMI", "NERY", "MORIAH", "MELITA", "MELIDA", "MELANI", "MARYLYNN", "MARISHA", "MARIETTE", "MALORIE", "MADELENE", "LUDIVINA", "LORIA", "LORETTE", "LORALEE", "LIANNE", "LEON", "LAVENIA", "LAURINDA", "LASHON", "KIT", "KIMI", "KEILA", "KATELYNN", "KAI", "JONE", "JOANE", "JI", "JAYNA", "JANELLA", "JA", "HUE", "HERTHA", "FRANCENE", "ELINORE", "DESPINA", "DELSIE", "DEEDRA", "CLEMENCIA", "CARRY", "CAROLIN", "CARLOS", "BULAH", "BRITTANIE", "BOK", "BLONDELL", "BIBI", "BEAULAH", "BEATA", "ANNITA", "AGRIPINA", "VIRGEN", "VALENE", "UN", "TWANDA", "TOMMYE", "TOI", "TARRA", "TARI", "TAMMERA", "SHAKIA", "SADYE", "RUTHANNE", "ROCHEL", "RIVKA", "PURA", "NENITA", "NATISHA", "MING", "MERRILEE", "MELODEE", "MARVIS", "LUCILLA", "LEENA", "LAVETA", "LARITA", "LANIE", "KEREN", "ILEEN", "GEORGEANN", "GENNA", "GENESIS", "FRIDA", "EWA", "EUFEMIA", "EMELY", "ELA", "EDYTH", "DEONNA", "DEADRA", "DARLENA", "CHANELL", "CHAN", "CATHERN", "CASSONDRA", "CASSAUNDRA", "BERNARDA", "BERNA", "ARLINDA", "ANAMARIA", "ALBERT", "WESLEY", "VERTIE", "VALERI", "TORRI", "TATYANA", "STASIA", "SHERISE", "SHERILL", "SEASON", "SCOTTIE", "SANDA", "RUTHE", "ROSY", "ROBERTO", "ROBBI", "RANEE", "QUYEN", "PEARLY", "PALMIRA", "ONITA", "NISHA", "NIESHA", "NIDA", "NEVADA", "NAM", "MERLYN", "MAYOLA", "MARYLOUISE", "MARYLAND", "MARX", "MARTH", "MARGENE", "MADELAINE", "LONDA", "LEONTINE", "LEOMA", "LEIA", "LAWRENCE", "LAURALEE", "LANORA", "LAKITA", "KIYOKO", "KETURAH", "KATELIN", "KAREEN", "JONIE", "JOHNETTE", "JENEE", "JEANETT", "IZETTA", "HIEDI", "HEIKE", "HASSIE", "HAROLD", "GIUSEPPINA", "GEORGANN", "FIDELA", "FERNANDE", "ELWANDA", "ELLAMAE", "ELIZ", "DUSTI", "DOTTY", "CYNDY", "CORALIE", "CELESTA", "ARGENTINA", "ALVERTA", "XENIA", "WAVA", "VANETTA", "TORRIE", "TASHINA", "TANDY", "TAMBRA", "TAMA", "STEPANIE", "SHILA", "SHAUNTA", "SHARAN", "SHANIQUA", "SHAE", "SETSUKO", "SERAFINA", "SANDEE", "ROSAMARIA", "PRISCILA", "OLINDA", "NADENE", "MUOI", "MICHELINA", "MERCEDEZ", "MARYROSE", "MARIN", "MARCENE", "MAO", "MAGALI", "MAFALDA", "LOGAN", "LINN", "LANNIE", "KAYCE", "KAROLINE", "KAMILAH", "KAMALA", "JUSTA", "JOLINE", "JENNINE", "JACQUETTA", "IRAIDA", "GERALD", "GEORGEANNA", "FRANCHESCA", "FAIRY", "EMELINE", "ELANE", "EHTEL", "EARLIE", "DULCIE", "DALENE", "CRIS", "CLASSIE", "CHERE", "CHARIS", "CAROYLN", "CARMINA", "CARITA", "BRIAN", "BETHANIE", "AYAKO", "ARICA", "AN", "ALYSA", "ALESSANDRA", "AKILAH", "ADRIEN", "ZETTA", "YOULANDA", "YELENA", "YAHAIRA", "XUAN", "WENDOLYN", "VICTOR", "TIJUANA", "TERRELL", "TERINA", "TERESIA", "SUZI", "SUNDAY", "SHERELL", "SHAVONDA", "SHAUNTE", "SHARDA", "SHAKITA", "SENA", "RYANN", "RUBI", "RIVA", "REGINIA", "REA", "RACHAL", "PARTHENIA", "PAMULA", "MONNIE", "MONET", "MICHAELE", "MELIA", "MARINE", "MALKA", "MAISHA", "LISANDRA", "LEO", "LEKISHA", "LEAN", "LAURENCE", "LAKENDRA", "KRYSTIN", "KORTNEY", "KIZZIE", "KITTIE", "KERA", "KENDAL", "KEMBERLY", "KANISHA", "JULENE", "JULE", "JOSHUA", "JOHANNE", "JEFFREY", "JAMEE", "HAN", "HALLEY", "GIDGET", "GALINA", "FREDRICKA", "FLETA", "FATIMAH", "EUSEBIA", "ELZA", "ELEONORE", "DORTHEY", "DORIA", "DONELLA", "DINORAH", "DELORSE", "CLARETHA", "CHRISTINIA", "CHARLYN", "BONG", "BELKIS", "AZZIE", "ANDERA", "AIKO", "ADENA", "YER", "YAJAIRA", "WAN", "VANIA", "ULRIKE", "TOSHIA", "TIFANY", "STEFANY", "SHIZUE", "SHENIKA", "SHAWANNA", "SHAROLYN", "SHARILYN", "SHAQUANA", "SHANTAY", "SEE", "ROZANNE", "ROSELEE", "RICKIE", "REMONA", "REANNA", "RAELENE", "QUINN", "PHUNG", "PETRONILA", "NATACHA", "NANCEY", "MYRL", "MIYOKO", "MIESHA", "MERIDETH", "MARVELLA", "MARQUITTA", "MARHTA", "MARCHELLE", "LIZETH", "LIBBIE", "LAHOMA", "LADAWN", "KINA", "KATHELEEN", "KATHARYN", "KARISA", "KALEIGH", "JUNIE", "JULIEANN", "JOHNSIE", "JANEAN", "JAIMEE", "JACKQUELINE", "HISAKO", "HERMA", "HELAINE", "GWYNETH", "GLENN", "GITA", "EUSTOLIA", "EMELINA", "ELIN", "EDRIS", "DONNETTE", "DONNETTA", "DIERDRE", "DENAE", "DARCEL", "CLAUDE", "CLARISA", "CINDERELLA", "CHIA", "CHARLESETTA", "CHARITA", "CELSA", "CASSY", "CASSI", "CARLEE", "BRUNA", "BRITTANEY", "BRANDE", "BILLI", "BAO", "ANTONETTA", "ANGLA", "ANGELYN", "ANALISA", "ALANE", "WENONA", "WENDIE", "VERONIQUE", "VANNESA", "TOBIE", "TEMPIE", "SUMIKO", "SULEMA", "SPARKLE", "SOMER", "SHEBA", "SHAYNE", "SHARICE", "SHANEL", "SHALON", "SAGE", "ROY", "ROSIO", "ROSELIA", "RENAY", "REMA", "REENA", "PORSCHE", "PING", "PEG", "OZIE", "ORETHA", "ORALEE", "ODA", "NU", "NGAN", "NAKESHA", "MILLY", "MARYBELLE", "MARLIN", "MARIS", "MARGRETT", "MARAGARET", "MANIE", "LURLENE", "LILLIA", "LIESELOTTE", "LAVELLE", "LASHAUNDA", "LAKEESHA", "KEITH", "KAYCEE", "KALYN", "JOYA", "JOETTE", "JENAE", "JANIECE", "ILLA", "GRISEL", "GLAYDS", "GENEVIE", "GALA", "FREDDA", "FRED", "ELMER", "ELEONOR", "DEBERA", "DEANDREA", "DAN", "CORRINNE", "CORDIA", "CONTESSA", "COLENE", "CLEOTILDE", "CHARLOTT", "CHANTAY", "CECILLE", "BEATRIS", "AZALEE", "ARLEAN", "ARDATH", "ANJELICA", "ANJA", "ALFREDIA", "ALEISHA", "ADAM", "ZADA", "YUONNE", "XIAO", "WILLODEAN", "WHITLEY", "VENNIE", "VANNA", "TYISHA", "TOVA", "TORIE", "TONISHA", "TILDA", "TIEN", "TEMPLE", "SIRENA", "SHERRIL", "SHANTI", "SHAN", "SENAIDA", "SAMELLA", "ROBBYN", "RENDA", "REITA", "PHEBE", "PAULITA", "NOBUKO", "NGUYET", "NEOMI", "MOON", "MIKAELA", "MELANIA", "MAXIMINA", "MARG", "MAISIE", "LYNNA", "LILLI", "LAYNE", "LASHAUN", "LAKENYA", "LAEL", "KIRSTIE", "KATHLINE", "KASHA", "KARLYN", "KARIMA", "JOVAN", "JOSEFINE", "JENNELL", "JACQUI", "JACKELYN", "HYO", "HIEN", "GRAZYNA", "FLORRIE", "FLORIA", "ELEONORA", "DWANA", "DORLA", "DONG", "DELMY", "DEJA", "DEDE", "DANN", "CRYSTA", "CLELIA", "CLARIS", "CLARENCE", "CHIEKO", "CHERLYN", "CHERELLE", "CHARMAIN", "CHARA", "CAMMY", "BEE", "ARNETTE", "ARDELLE", "ANNIKA", "AMIEE", "AMEE", "ALLENA", "YVONE", "YUKI", "YOSHIE", "YEVETTE", "YAEL", "WILLETTA", "VONCILE", "VENETTA", "TULA", "TONETTE", "TIMIKA", "TEMIKA", "TELMA", "TEISHA", "TAREN", "TA", "STACEE", "SHIN", "SHAWNTA", "SATURNINA", "RICARDA", "POK", "PASTY", "ONIE", "NUBIA", "MORA", "MIKE", "MARIELLE", "MARIELLA", "MARIANELA", "MARDELL", "MANY", "LUANNA", "LOISE", "LISABETH", "LINDSY", "LILLIANA", "LILLIAM", "LELAH", "LEIGHA", "LEANORA", "LANG", "KRISTEEN", "KHALILAH", "KEELEY", "KANDRA", "JUNKO", "JOAQUINA", "JERLENE", "JANI", "JAMIKA", "JAME", "HSIU", "HERMILA", "GOLDEN", "GENEVIVE", "EVIA", "EUGENA", "EMMALINE", "ELFREDA", "ELENE", "DONETTE", "DELCIE", "DEEANNA", "DARCEY", "CUC", "CLARINDA", "CIRA", "CHAE", "CELINDA", "CATHERYN", "CATHERIN", "CASIMIRA", "CARMELIA", "CAMELLIA", "BREANA", "BOBETTE", "BERNARDINA", "BEBE", "BASILIA", "ARLYNE", "AMAL", "ALAYNA", "ZONIA", "ZENIA", "YURIKO", "YAEKO", "WYNELL", "WILLOW", "WILLENA", "VERNIA", "TU", "TRAVIS", "TORA", "TERRILYN", "TERICA", "TENESHA", "TAWNA", "TAJUANA", "TAINA", "STEPHNIE", "SONA", "SOL", "SINA", "SHONDRA", "SHIZUKO", "SHERLENE", "SHERICE", "SHARIKA", "ROSSIE", "ROSENA", "RORY", "RIMA", "RIA", "RHEBA", "RENNA", "PETER", "NATALYA", "NANCEE", "MELODI", "MEDA", "MAXIMA", "MATHA", "MARKETTA", "MARICRUZ", "MARCELENE", "MALVINA", "LUBA", "LOUETTA", "LEIDA", "LECIA", "LAURAN", "LASHAWNA", "LAINE", "KHADIJAH", "KATERINE", "KASI", "KALLIE", "JULIETTA", "JESUSITA", "JESTINE", "JESSIA", "JEREMY", "JEFFIE", "JANYCE", "ISADORA", "GEORGIANNE", "FIDELIA", "EVITA", "EURA", "EULAH", "ESTEFANA", "ELSY", "ELIZABET", "ELADIA", "DODIE", "DION", "DIA", "DENISSE", "DELORAS", "DELILA", "DAYSI", "DAKOTA", "CURTIS", "CRYSTLE", "CONCHA", "COLBY", "CLARETTA", "CHU", "CHRISTIA", "CHARLSIE", "CHARLENA", "CARYLON", "BETTYANN", "ASLEY", "ASHLEA", "AMIRA", "AI", "AGUEDA", "AGNUS", "YUETTE", "VINITA", "VICTORINA", "TYNISHA", "TREENA", "TOCCARA", "TISH", "THOMASENA", "TEGAN", "SOILA", "SHILOH", "SHENNA", "SHARMAINE", "SHANTAE", "SHANDI", "SEPTEMBER", "SARAN", "SARAI", "SANA", "SAMUEL", "SALLEY", "ROSETTE", "ROLANDE", "REGINE", "OTELIA", "OSCAR", "OLEVIA", "NICHOLLE", "NECOLE", "NAIDA", "MYRTA", "MYESHA", "MITSUE", "MINTA", "MERTIE", "MARGY", "MAHALIA", "MADALENE", "LOVE", "LOURA", "LOREAN", "LEWIS", "LESHA", "LEONIDA", "LENITA", "LAVONE", "LASHELL", "LASHANDRA", "LAMONICA", "KIMBRA", "KATHERINA", "KARRY", "KANESHA", "JULIO", "JONG", "JENEVA", "JAQUELYN", "HWA", "GILMA", "GHISLAINE", "GERTRUDIS", "FRANSISCA", "FERMINA", "ETTIE", "ETSUKO", "ELLIS", "ELLAN", "ELIDIA", "EDRA", "DORETHEA", "DOREATHA", "DENYSE", "DENNY", "DEETTA", "DAINE", "CYRSTAL", "CORRIN", "CAYLA", "CARLITA", "CAMILA", "BURMA", "BULA", "BUENA", "BLAKE", "BARABARA", "AVRIL", "AUSTIN", "ALAINE", "ZANA", "WILHEMINA", "WANETTA", "VIRGIL", "VI", "VERONIKA", "VERNON", "VERLINE", "VASILIKI", "TONITA", "TISA", "TEOFILA", "TAYNA", "TAUNYA", "TANDRA", "TAKAKO", "SUNNI", "SUANNE", "SIXTA", "SHARELL", "SEEMA", "RUSSELL", "ROSENDA", "ROBENA", "RAYMONDE", "PEI", "PAMILA", "OZELL", "NEIDA", "NEELY", "MISTIE", "MICHA", "MERISSA", "MAURITA", "MARYLN", "MARYETTA", "MARSHALL", "MARCELL", "MALENA", "MAKEDA", "MADDIE", "LOVETTA", "LOURIE", "LORRINE", "LORILEE", "LESTER", "LAURENA", "LASHAY", "LARRAINE", "LAREE", "LACRESHA", "KRISTLE", "KRISHNA", "KEVA", "KEIRA", "KAROLE", "JOIE", "JINNY", "JEANNETTA", "JAMA", "HEIDY", "GILBERTE", "GEMA", "FAVIOLA", "EVELYNN", "ENDA", "ELLI", "ELLENA", "DIVINA", "DAGNY", "COLLENE", "CODI", "CINDIE", "CHASSIDY", "CHASIDY", "CATRICE", "CATHERINA", "CASSEY", "CAROLL", "CARLENA", "CANDRA", "CALISTA", "BRYANNA", "BRITTENY", "BEULA", "BARI", "AUDRIE", "AUDRIA", "ARDELIA", "ANNELLE", "ANGILA", "ALONA", "ALLYN", "DOUGLAS", "ROGER", "JONATHAN", "RALPH", "NICHOLAS", "BENJAMIN", "BRUCE", "HARRY", "WAYNE", "STEVE", "HOWARD", "ERNEST", "PHILLIP", "TODD", "CRAIG", "ALAN", "PHILIP", "EARL", "DANNY", "BRYAN", "STANLEY", "LEONARD", "NATHAN", "MANUEL", "RODNEY", "MARVIN", "VINCENT", "JEFFERY", "JEFF", "CHAD", "JACOB", "ALFRED", "BRADLEY", "HERBERT", "FREDERICK", "EDWIN", "DON", "RICKY", "RANDALL", "BARRY", "BERNARD", "LEROY", "MARCUS", "THEODORE", "CLIFFORD", "MIGUEL", "JIM", "TOM", "CALVIN", "BILL", "LLOYD", "DEREK", "WARREN", "DARRELL", "JEROME", "FLOYD", "ALVIN", "TIM", "GORDON", "GREG", "JORGE", "DUSTIN", "PEDRO", "DERRICK", "ZACHARY", "HERMAN", "GLEN", "HECTOR", "RICARDO", "RICK", "BRENT", "RAMON", "GILBERT", "MARC", "REGINALD", "RUBEN", "NATHANIEL", "RAFAEL", "EDGAR", "MILTON", "RAUL", "BEN", "CHESTER", "DUANE", "FRANKLIN", "BRAD", "RON", "ROLAND", "ARNOLD", "HARVEY", "JARED", "ERIK", "DARRYL", "NEIL", "JAVIER", "FERNANDO", "CLINTON", "TED", "MATHEW", "TYRONE", "DARREN", "LANCE", "KURT", "ALLAN", "NELSON", "GUY", "CLAYTON", "HUGH", "MAX", "DWAYNE", "DWIGHT", "ARMANDO", "FELIX", "EVERETT", "IAN", "WALLACE", "KEN", "BOB", "ALFREDO", "ALBERTO", "DAVE", "IVAN", "BYRON", "ISAAC", "MORRIS", "CLIFTON", "WILLARD", "ROSS", "ANDY", "SALVADOR", "KIRK", "SERGIO", "SETH", "KENT", "TERRANCE", "EDUARDO", "TERRENCE", "ENRIQUE", "WADE", "STUART", "FREDRICK", "ARTURO", "ALEJANDRO", "NICK", "LUTHER", "WENDELL", "JEREMIAH", "JULIUS", "OTIS", "TREVOR", "OLIVER", "LUKE", "HOMER", "GERARD", "DOUG", "KENNY", "HUBERT", "LYLE", "MATT", "ALFONSO", "ORLANDO", "REX", "CARLTON", "ERNESTO", "NEAL", "PABLO", "LORENZO", "OMAR", "WILBUR", "GRANT", "HORACE", "RODERICK", "ABRAHAM", "WILLIS", "RICKEY", "ANDRES", "CESAR", "JOHNATHAN", "MALCOLM", "RUDOLPH", "DAMON", "KELVIN", "PRESTON", "ALTON", "ARCHIE", "MARCO", "WM", "PETE", "RANDOLPH", "GARRY", "GEOFFREY", "JONATHON", "FELIPE", "GERARDO", "ED", "DOMINIC", "DELBERT", "COLIN", "GUILLERMO", "EARNEST", "LUCAS", "BENNY", "SPENCER", "RODOLFO", "MYRON", "EDMUND", "GARRETT", "SALVATORE", "CEDRIC", "LOWELL", "GREGG", "SHERMAN", "WILSON", "SYLVESTER", "ROOSEVELT", "ISRAEL", "JERMAINE", "FORREST", "WILBERT", "LELAND", "SIMON", "CLARK", "IRVING", "BRYANT", "OWEN", "RUFUS", "WOODROW", "KRISTOPHER", "MACK", "LEVI", "MARCOS", "GUSTAVO", "JAKE", "LIONEL", "GILBERTO", "CLINT", "NICOLAS", "ISMAEL", "ORVILLE", "ERVIN", "DEWEY", "AL", "WILFRED", "JOSH", "HUGO", "IGNACIO", "CALEB", "TOMAS", "SHELDON", "ERICK", "STEWART", "DOYLE", "DARREL", "ROGELIO", "TERENCE", "SANTIAGO", "ALONZO", "ELIAS", "BERT", "ELBERT", "RAMIRO", "CONRAD", "NOAH", "GRADY", "PHIL", "CORNELIUS", "LAMAR", "ROLANDO", "CLAY", "PERCY", "DEXTER", "BRADFORD", "DARIN", "AMOS", "MOSES", "IRVIN", "SAUL", "ROMAN", "RANDAL", "TIMMY", "DARRIN", "WINSTON", "BRENDAN", "ABEL", "DOMINICK", "BOYD", "EMILIO", "ELIJAH", "DOMINGO", "EMMETT", "MARLON", "EMANUEL", "JERALD", "EDMOND", "EMIL", "DEWAYNE", "WILL", "OTTO", "TEDDY", "REYNALDO", "BRET", "JESS", "TRENT", "HUMBERTO", "EMMANUEL", "STEPHAN", "VICENTE", "LAMONT", "GARLAND", "MILES", "EFRAIN", "HEATH", "RODGER", "HARLEY", "ETHAN", "ELDON", "ROCKY", "PIERRE", "JUNIOR", "FREDDY", "ELI", "BRYCE", "ANTOINE", "STERLING", "CHASE", "GROVER", "ELTON", "CLEVELAND", "DYLAN", "CHUCK", "DAMIAN", "REUBEN", "STAN", "AUGUST", "LEONARDO", "JASPER", "RUSSEL", "ERWIN", "BENITO", "HANS", "MONTE", "BLAINE", "ERNIE", "CURT", "QUENTIN", "AGUSTIN", "MURRAY", "JAMAL", "ADOLFO", "HARRISON", "TYSON", "BURTON", "BRADY", "ELLIOTT", "WILFREDO", "BART", "JARROD", "VANCE", "DENIS", "DAMIEN", "JOAQUIN", "HARLAN", "DESMOND", "ELLIOT", "DARWIN", "GREGORIO", "BUDDY", "XAVIER", "KERMIT", "ROSCOE", "ESTEBAN", "ANTON", "SOLOMON", "SCOTTY", "NORBERT", "ELVIN", "WILLIAMS", "NOLAN", "ROD", "QUINTON", "HAL", "BRAIN", "ROB", "ELWOOD", "KENDRICK", "DARIUS", "MOISES", "FIDEL", "THADDEUS", "CLIFF", "MARCEL", "JACKSON", "RAPHAEL", "BRYON", "ARMAND", "ALVARO", "JEFFRY", "DANE", "JOESPH", "THURMAN", "NED", "RUSTY", "MONTY", "FABIAN", "REGGIE", "MASON", "GRAHAM", "ISAIAH", "VAUGHN", "GUS", "LOYD", "DIEGO", "ADOLPH", "NORRIS", "MILLARD", "ROCCO", "GONZALO", "DERICK", "RODRIGO", "WILEY", "RIGOBERTO", "ALPHONSO", "TY", "NOE", "VERN", "REED", "JEFFERSON", "ELVIS", "BERNARDO", "MAURICIO", "HIRAM", "DONOVAN", "BASIL", "RILEY", "NICKOLAS", "MAYNARD", "SCOT", "VINCE", "QUINCY", "EDDY", "SEBASTIAN", "FEDERICO", "ULYSSES", "HERIBERTO", "DONNELL", "COLE", "DAVIS", "GAVIN", "EMERY", "WARD", "ROMEO", "JAYSON", "DANTE", "CLEMENT", "COY", "MAXWELL", "JARVIS", "BRUNO", "ISSAC", "DUDLEY", "BROCK", "SANFORD", "CARMELO", "BARNEY", "NESTOR", "STEFAN", "DONNY", "ART", "LINWOOD", "BEAU", "WELDON", "GALEN", "ISIDRO", "TRUMAN", "DELMAR", "JOHNATHON", "SILAS", "FREDERIC", "DICK", "IRWIN", "MERLIN", "CHARLEY", "MARCELINO", "HARRIS", "CARLO", "TRENTON", "KURTIS", "HUNTER", "AURELIO", "WINFRED", "VITO", "COLLIN", "DENVER", "CARTER", "LEONEL", "EMORY", "PASQUALE", "MOHAMMAD", "MARIANO", "DANIAL", "LANDON", "DIRK", "BRANDEN", "ADAN", "BUFORD", "GERMAN", "WILMER", "EMERSON", "ZACHERY", "FLETCHER", "JACQUES", "ERROL", "DALTON", "MONROE", "JOSUE", "EDWARDO", "BOOKER", "WILFORD", "SONNY", "SHELTON", "CARSON", "THERON", "RAYMUNDO", "DAREN", "HOUSTON", "ROBBY", "LINCOLN", "GENARO", "BENNETT", "OCTAVIO", "CORNELL", "HUNG", "ARRON", "ANTONY", "HERSCHEL", "GIOVANNI", "GARTH", "CYRUS", "CYRIL", "RONNY", "LON", "FREEMAN", "DUNCAN", "KENNITH", "CARMINE", "ERICH", "CHADWICK", "WILBURN", "RUSS", "REID", "MYLES", "ANDERSON", "MORTON", "JONAS", "FOREST", "MITCHEL", "MERVIN", "ZANE", "RICH", "JAMEL", "LAZARO", "ALPHONSE", "RANDELL", "MAJOR", "JARRETT", "BROOKS", "ABDUL", "LUCIANO", "SEYMOUR", "EUGENIO", "MOHAMMED", "VALENTIN", "CHANCE", "ARNULFO", "LUCIEN", "FERDINAND", "THAD", "EZRA", "ALDO", "RUBIN", "ROYAL", "MITCH", "EARLE", "ABE", "WYATT", "MARQUIS", "LANNY", "KAREEM", "JAMAR", "BORIS", "ISIAH", "EMILE", "ELMO", "ARON", "LEOPOLDO", "EVERETTE", "JOSEF", "ELOY", "RODRICK", "REINALDO", "LUCIO", "JERROD", "WESTON", "HERSHEL", "BARTON", "PARKER", "LEMUEL", "BURT", "JULES", "GIL", "ELISEO", "AHMAD", "NIGEL", "EFREN", "ANTWAN", "ALDEN", "MARGARITO", "COLEMAN", "DINO", "OSVALDO", "LES", "DEANDRE", "NORMAND", "KIETH", "TREY", "NORBERTO", "NAPOLEON", "JEROLD", "FRITZ", "ROSENDO", "MILFORD", "CHRISTOPER", "ALFONZO", "LYMAN", "JOSIAH", "BRANT", "WILTON", "RICO", "JAMAAL", "DEWITT", "BRENTON", "OLIN", "FOSTER", "FAUSTINO", "CLAUDIO", "JUDSON", "GINO", "EDGARDO", "ALEC", "TANNER", "JARRED", "DONN", "TAD", "PRINCE", "PORFIRIO", "ODIS", "LENARD", "CHAUNCEY", "TOD", "MEL", "MARCELO", "KORY", "AUGUSTUS", "KEVEN", "HILARIO", "BUD", "SAL", "ORVAL", "MAURO", "ZACHARIAH", "OLEN", "ANIBAL", "MILO", "JED", "DILLON", "AMADO", "NEWTON", "LENNY", "RICHIE", "HORACIO", "BRICE", "MOHAMED", "DELMER", "DARIO", "REYES", "MAC", "JONAH", "JERROLD", "ROBT", "HANK", "RUPERT", "ROLLAND", "KENTON", "DAMION", "ANTONE", "WALDO", "FREDRIC", "BRADLY", "KIP", "BURL", "WALKER", "TYREE", "JEFFEREY", "AHMED", "WILLY", "STANFORD", "OREN", "NOBLE", "MOSHE", "MIKEL", "ENOCH", "BRENDON", "QUINTIN", "JAMISON", "FLORENCIO", "DARRICK", "TOBIAS", "HASSAN", "GIUSEPPE", "DEMARCUS", "CLETUS", "TYRELL", "LYNDON", "KEENAN", "WERNER", "GERALDO", "COLUMBUS", "CHET", "BERTRAM", "MARKUS", "HUEY", "HILTON", "DWAIN", "DONTE", "TYRON", "OMER", "ISAIAS", "HIPOLITO", "FERMIN", "ADALBERTO", "BO", "BARRETT", "TEODORO", "MCKINLEY", "MAXIMO", "GARFIELD", "RALEIGH", "LAWERENCE", "ABRAM", "RASHAD", "KING", "EMMITT", "DARON", "SAMUAL", "MIQUEL", "EUSEBIO", "DOMENIC", "DARRON", "BUSTER", "WILBER", "RENATO", "JC", "HOYT", "HAYWOOD", "EZEKIEL", "CHAS", "FLORENTINO", "ELROY", "CLEMENTE", "ARDEN", "NEVILLE", "EDISON", "DESHAWN", "NATHANIAL", "JORDON", "DANILO", "CLAUD", "SHERWOOD", "RAYMON", "RAYFORD", "CRISTOBAL", "AMBROSE", "TITUS", "HYMAN", "FELTON", "EZEQUIEL", "ERASMO", "STANTON", "LONNY", "LEN", "IKE", "MILAN", "LINO", "JAROD", "HERB", "ANDREAS", "WALTON", "RHETT", "PALMER", "DOUGLASS", "CORDELL", "OSWALDO", "ELLSWORTH", "VIRGILIO", "TONEY", "NATHANAEL", "DEL", "BENEDICT", "MOSE", "JOHNSON", "ISREAL", "GARRET", "FAUSTO", "ASA", "ARLEN", "ZACK", "WARNER", "MODESTO", "FRANCESCO", "MANUAL", "GAYLORD", "GASTON", "FILIBERTO", "DEANGELO", "MICHALE", "GRANVILLE", "WES", "MALIK", "ZACKARY", "TUAN", "ELDRIDGE", "CRISTOPHER", "CORTEZ", "ANTIONE", "MALCOM", "LONG", "KOREY", "JOSPEH", "COLTON", "WAYLON", "VON", "HOSEA", "SHAD", "SANTO", "RUDOLF", "ROLF", "REY", "RENALDO", "MARCELLUS", "LUCIUS", "KRISTOFER", "BOYCE", "BENTON", "HAYDEN", "HARLAND", "ARNOLDO", "RUEBEN", "LEANDRO", "KRAIG", "JERRELL", "JEROMY", "HOBERT", "CEDRICK", "ARLIE", "WINFORD", "WALLY", "LUIGI", "KENETH", "JACINTO", "GRAIG", "FRANKLYN", "EDMUNDO", "SID", "PORTER", "LEIF", "JERAMY", "BUCK", "WILLIAN", "VINCENZO", "SHON", "LYNWOOD", "JERE", "HAI", "ELDEN", "DORSEY", "DARELL", "BRODERICK", "ALONSO",};
-
-	/*
-	 * We apply straightforward algorithms to sort the names, sum the letter values, and multiply by the position.
-	 */
-	public static void main(String[] args) {
-		out.println(new p022().run());
-	}
-
-	@NotNull String run() {
-		sort(names);
-		long sum = 0;
-		for (int i = 0; i < names.length; i++) {
-			int value = 0;
-			for (int j = 0; j < names[i].length(); j++) value += names[i].charAt(j) - 'A' + 1;
-			sum += value * (i + 1);
-		}
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p040.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p040.java b/Random_Work/src/projectEuler/programs/p040.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p040.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,20 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.pow;
-
-public final class p040 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p040().run());
-	}
-
-	@NotNull String run() {
-		var sb = new StringBuilder();
-		IntStream.range(1, 1000000).forEachOrdered(sb::append);
-		int prod = IntStream.rangeClosed(0, 6).map(i -> sb.charAt(pow(10, i) - 1) - '0').reduce(1, (a, b) -> a * b);
-		return Integer.toString(prod);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p045.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p045.java b/Random_Work/src/projectEuler/programs/p045.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p045.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,27 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Math.min;
-
-public final class p045 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p045().run());
-	}
-
-	@NotNull String run() {
-		int i = 286;
-		int j = 166;
-		int k = 144;
-		while (true) {
-			long triangle = (long) i * (i + 1) / 2;
-			long pentagon = (long) j * (j * 3 - 1) / 2;
-			long hexagon = (long) k * (k * 2 - 1);
-			long min = min(min(triangle, pentagon), hexagon);
-			if ((min == triangle) && (min == pentagon) && (min == hexagon)) return Long.toString(min);
-			if (min == triangle) i++;
-			if (min == pentagon) j++;
-			if (min == hexagon) k++;
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p071.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p071.java b/Random_Work/src/projectEuler/programs/p071.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p071.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,53 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-public final class p071 extends EulerSolution {
-	private static final int LIMIT = 1000000;
-
-	/*
-	 * We consider each (integer) denominator d from 1 to 1000000 by brute force.
-	 * For a given d, what is the largest integer n such that n/d < 3/7?
-	 *
-	 * - If d is a multiple of 7, then the integer n' = (d / 7) * 3 satisfies n'/d = 3/7.
-	 * Hence we choose n = n' - 1 = (d / 7) * 3 - 1, so that n/d < 3/7.
-	 * Since (d / 7) * 3 is already an integer, it is equal to floor(d * 3 / 7),
-	 * which will unify with the next case. Thus n = floor(d * 3 / 7) - 1.
-	 * - Otherwise d is not a multiple of 7, so choosing n = floor(d * 3 / 7)
-	 * will automatically satisfy n/d < 3/7, and be the largest possible n
-	 * due to the definition of the floor function.
-	 *
-	 * When we choose n in this manner, it might not be coprime with d. In other words,
-	 * the simplified form of the fraction n/d might have a denominator smaller than d.
-	 *
-	 * Let's process denominators in ascending order. Each denominator generates a pair
-	 * of integers (n, d) that conceptually represents a fraction, without simplification.
-	 * Whenever the current value of n/d is strictly larger than the previously saved value,
-	 * we save this current value of (n, d).
-	 *
-	 * If we handle denominators in this way - starting from 1, counting up consecutively -
-	 * then it is guaranteed that our final saved pair (n, d) is in lowest terms. This is
-	 * because if (n, d) is not in lowest terms, then its reduced form (n', d') would have
-	 * been saved when the smaller denominator d' was processed, and because n/d is
-	 * not larger than n'/d' (they are equal), the saved value would not be overwritten.
-	 * Hence in this entire computation we can avoid explicitly simplifying any fraction at all.
-	 */
-
-	public static void main(String[] args) {
-		System.out.println(new p071().run());
-	}
-
-	@NotNull String run() {
-		int maxN = 0;
-		int maxD = 1;
-		for (int d = 1; d <= LIMIT; d++) {
-			int n = d * 3 / 7;
-			if (d % 7 == 0) n--;
-			if ((long) n * maxD > (long) maxN * d) { // n/d > maxN/maxD
-				maxN = n;
-				maxD = d;
-			}
-		}
-		return Integer.toString(maxN);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/build.properties
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/build.properties b/out/production/Java_Development/objectOriented/gridWorld/build.properties
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/build.properties	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,1 +0,0 @@
-version.id = 1.00
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p068.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p068.java b/Random_Work/src/projectEuler/programs/p068.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p068.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import java.util.stream.IntStream;
-
-import static java.lang.Integer.MAX_VALUE;
-import static projectEuler.programs.Library.nextPermutation;
-
-public final class p068 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p068().run());
-	}
-
-	String run() {
-		int[] state = IntStream.range(0, 10).map(i -> i + 1).toArray();
-		String max = null;
-		do {
-			int sum = state[0] + state[5] + state[6];
-			if (((state[1] + state[6] + state[7]) != sum) || ((state[2] + state[7] + state[8]) != sum) || ((state[3] + state[8] + state[9]) != sum) || ((state[4] + state[9] + state[5]) != sum))
-				continue;
-			int minOuterIndex = -1;
-			int minOuter = MAX_VALUE;
-			for (int i = 0; i < 5; i++)
-				if (state[i] < minOuter) {
-					minOuterIndex = i;
-					minOuter = state[i];
-				}
-			StringBuilder s = new StringBuilder();
-			for (int i = 0; i < 5; i++)
-				s.append(state[(minOuterIndex + i) % 5]).append(state[(minOuterIndex + i) % 5 + 5]).append(state[(minOuterIndex + i + 1) % 5 + 5]);
-			if (s.length() == 16) max = s.toString();
-		} while (nextPermutation(state));
-		assert max != null;
-		return max;
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p082.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p082.java b/Random_Work/src/projectEuler/programs/p082.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p082.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,37 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Integer.MAX_VALUE;
-import static java.lang.Math.min;
-
-public final class p082 extends EulerSolution {
-	private static final int INFINITY = MAX_VALUE / 2;
-	private static final int[][] GRID = {{4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870}, {1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377}, {9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230}, {7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187}, {3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505}, {1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942}, {4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757}, {510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706}, {9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048}, {3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540}, {6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442}, {7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509}, {4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000}, {356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672}, {9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785}, {192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095}, {1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859}, {4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837}, {5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286}, {1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963}, {1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127}, {8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535}, {7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446}, {3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615}, {9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303}, {5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266}, {6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763}, {9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550}, {5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887}, {6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531}, {5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739}, {1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269}, {4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380}, {4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829}, {8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873}, {2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271}, {6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281}, {2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660}, {6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665}, {3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056}, {5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089}, {3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523}, {1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616}, {8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125}, {3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307}, {8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920}, {8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225}, {9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976}, {3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432}, {1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351}, {7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991}, {9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110}, {7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965}, {3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314}, {1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416}, {126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028}, {8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407}, {7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312}, {4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000}, {4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229}, {7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256}, {7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842}, {6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241}, {4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213}, {9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015}, {3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405}, {2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640}, {3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480}, {4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181}, {171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501}, {3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698}, {2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531}, {7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255}, {8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631}, {2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914}, {6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864}, {8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738}, {2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294}, {2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789}, {5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981}};
-	private int[][] distance;
-
-	public static void main(String[] args) {
-		System.out.println(new p082().run());
-	}
-
-	@NotNull String run() {
-		int h = GRID.length;
-		int w = GRID[0].length;
-		// Dynamic programming
-		distance = new int[h][w];
-		for (int x = 0; x < w; x++) {
-			for (int y = 0; y < h; y++) distance[y][x] = GRID[y][x] + min(getValue(x - 1, y), getValue(x, y - 1));
-			for (int y = h - 1; y >= 0; y--) distance[y][x] = min(GRID[y][x] + getValue(x, y + 1), distance[y][x]);
-		}
-		// Minimum of rightmost column
-		int min = INFINITY;
-		for (int y = 0; y < h; y++) min = min(distance[y][w - 1], min);
-		return Integer.toString(min);
-	}
-
-	@Contract(pure = true)
-	private int getValue(int x, int y) {
-		return (x < 0) ? 0 : (((y < 0) || (y >= distance.length) || (x >= distance[y].length)) ? INFINITY : distance[y][x]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p049.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p049.java b/Random_Work/src/projectEuler/programs/p049.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p049.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,36 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Arrays;
-
-import static java.util.Arrays.sort;
-import static projectEuler.programs.Library.listPrimality;
-
-public final class p049 extends EulerSolution {
-	private static final int LIMIT = 10000;
-
-	public static void main(String[] args) {
-		System.out.println(new p049().run());
-	}
-
-	private static boolean hasSameDigits(int x, int y) {
-		char[] xdigits = Integer.toString(x).toCharArray();
-		char[] ydigits = Integer.toString(y).toCharArray();
-		sort(xdigits);
-		sort(ydigits);
-		return Arrays.equals(xdigits, ydigits);
-	}
-
-	@NotNull String run() {
-		boolean[] isPrime = listPrimality(LIMIT - 1);
-		for (int base = 1000; base < LIMIT; base++)
-			if (isPrime[base]) for (int step = 1; step < LIMIT; step++) {
-				int a = base + step;
-				int b = a + step;
-				if (a < LIMIT && isPrime[a] && hasSameDigits(a, base) && b < LIMIT && isPrime[b] && hasSameDigits(b, base) && (base != 1487 || a != 4817))
-					return "" + base + a + b;
-			}
-		throw new RuntimeException("Not found");
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-tree.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-tree.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-tree.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-tree.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,181 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.world Class Hierarchy
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "info.gridworld.world Class Hierarchy";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-tree.html"><B>PREV</B></A>&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H2>
-		Hierarchy For Package info.gridworld.world
-	</H2>
-</div>
-<DL>
-	<DT><B>Package Hierarchies:</B>
-	<DD><A HREF="../../../overview-tree.html">All Packages</A>
-</DL>
-<HR>
-<H2>
-	Class Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">java.lang.<A
-			HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-			title="class or interface in java.lang"><B>Object</B></A>
-		<UL>
-			<LI TYPE="circle">info.gridworld.world.<A HREF="../../../info/gridworld/world/World.html"
-			                                          title="class in info.gridworld.world"><B>World</B></A>&lt;T&gt;
-		</UL>
-</UL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-tree.html"><B>PREV</B></A>&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p057.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p057.java b/Random_Work/src/projectEuler/programs/p057.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p057.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.*;
-
-public final class p057 extends EulerSolution {
-	private static final int LIMIT = 1000;
-
-	public static void main(String[] args) {
-		System.out.println(new p057().run());
-	}
-
-	@NotNull String run() {
-		BigInteger n = ZERO;
-		BigInteger d = ONE;
-		int count = 0;
-		for (int i = 0; i < LIMIT; i++) {
-			BigInteger temp = d.multiply(valueOf(2)).add(n);
-			n = d;
-			d = temp;
-			// Now n/d is the i'th (0-based) continued fraction approximation of sqrt(2) - 1
-			if (n.add(d).toString().length() > d.toString().length()) count++;
-		}
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p051.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p051.java b/Random_Work/src/projectEuler/programs/p051.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p051.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,70 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.Arrays.copyOfRange;
-import static java.util.stream.IntStream.range;
-import static projectEuler.programs.Library.listPrimality;
-
-public final class p051 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p051().run());
-	}
-
-	@NotNull
-	@Contract(pure = true)
-	private static int[] toDigits(int n) {
-		int[] buf = new int[10];
-		int i = buf.length;
-		do {
-			i--;
-			buf[i] = n % 10;
-			n /= 10;
-		} while (n != 0);
-		return copyOfRange(buf, i, buf.length);
-	}
-
-	@NotNull
-	@Contract(pure = true)
-	private static int[] doMask(@NotNull int[] digits, int mask) {
-		return range(0, digits.length).map(i -> digits[i] * ((~mask >>> i) & 1)).toArray();
-	}
-
-	@NotNull
-	@Contract(pure = true)
-	private static int[] addMask(@NotNull int[] digits, int mask) {
-		return range(0, digits.length).map(i -> digits[i] + ((mask >>> i) & 1)).toArray();
-	}
-
-	@Contract(pure = true)
-	private static int toNumber(@NotNull int[] digits) {
-		int result = 0;
-		for (int x : digits) result = (result * 10) + x;
-		return result;
-	}
-
-	@NotNull String run() {
-		boolean[] isPrime = listPrimality(1000000);
-		for (int i = 0; i < isPrime.length; i++) {
-			if (!isPrime[i]) continue;
-			int[] n = toDigits(i);
-			for (int mask = 0; mask < (1 << n.length); mask++) {
-				int[] digits = doMask(n, mask);
-				int count = 0;
-				for (int j = 0; j < 10; j++) {
-					if (digits[0] != 0 && isPrime[toNumber(digits)]) count++;
-					digits = addMask(digits, mask);
-				}
-				if (count == 8) {
-					digits = doMask(n, mask);
-					for (int j = 0; j < 10; j++) {
-						if (digits[0] != 0 && isPrime[toNumber(digits)]) return Integer.toString(toNumber(digits));
-						digits = addMask(digits, mask);
-					}
-				}
-			}
-		}
-		throw new RuntimeException("Not found");
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p034.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p034.java b/Random_Work/src/projectEuler/programs/p034.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p034.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,33 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-public final class p034 extends EulerSolution {
-	// Hard-coded values for factorial(0), factorial(1), ..., factorial(9)
-	private static final int[] FACTORIAL = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
-
-	public static void main(String[] args) {
-		System.out.println(new p034().run());
-	}
-
-	@Contract(pure = true)
-	private static int factorialDigitSum(int x) {
-		int sum = 0;
-		while (x != 0) {
-			sum += FACTORIAL[x % 10];
-			x /= 10;
-		}
-		return sum;
-	}
-
-	@NotNull String run() {
-		// As stated in the problem, 1 = 1! and 2 = 2! are excluded.
-		// If a number has at least n >= 8 digits, then even if every digit is 9,
-		// n * 9! is still less than the number (which is at least 10^n).
-		int sum = IntStream.range(3, 10000000).filter(i -> i == factorialDigitSum(i)).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p018.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p018.java b/Random_Work/src/projectEuler/programs/p018.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p018.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Math.max;
-import static java.lang.System.out;
-
-public final class p018 extends EulerSolution {
-	// Mutable
-	private final int[][] triangle = {{75}, {95, 64}, {17, 47, 82}, {18, 35, 87, 10}, {20, 4, 82, 47, 65}, {19, 1, 23, 75, 3, 34}, {88, 2, 77, 73, 7, 63, 67}, {99, 65, 4, 28, 6, 16, 70, 92}, {41, 41, 26, 56, 83, 40, 80, 70, 33}, {41, 48, 72, 33, 47, 32, 37, 16, 94, 29}, {53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14}, {70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57}, {91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48}, {63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31}, {4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23},};
-
-	public static void main(String[] args) {
-		out.println(new p018().run());
-	}
-
-	/*
-	 * We create a new blank triangle with the same dimensions as the original big triangle.
-	 * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,
-	 * calculate the maximum path sum when starting from this cell, and store the result
-	 * in the corresponding cell of the blank triangle.
-	 *
-	 * If we start at a particular cell, what is the maximum path total? If the cell is at the
-	 * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is
-	 * the cell's value plus either {the maximum path total of the cell down and to the left}
-	 * or {the maximum path total of the cell down and to the right}, whichever is greater.
-	 * By computing the blank triangle's values from bottom up, the dependent values are always
-	 * computed before they are utilized. This technique is known as dynamic programming.
-	 */
-	@NotNull String run() {
-		for (int i = triangle.length - 2; i >= 0; i--)
-			for (int j = 0; j < triangle[i].length; j++)
-				triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1]);
-		return Integer.toString(triangle[0][0]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p026.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p026.java b/Random_Work/src/projectEuler/programs/p026.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p026.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,34 +0,0 @@
-package projectEuler.programs;
-
-import java.util.HashMap;
-import java.util.Map;
-
-public final class p026 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p026().run());
-	}
-
-	private static int getCycleLength(int n) {
-		Map<Integer, Integer> stateToIter = new HashMap<>();
-		int state = 1;
-		for (int iter = 0; ; iter++)
-			if (stateToIter.containsKey(state)) return iter - stateToIter.get(state);
-			else {
-				stateToIter.put(state, iter);
-				state = (state * 10) % n;
-			}
-	}
-
-	String run() {
-		int bestNumber = 0;
-		int bestLength = 0;
-		for (int i = 1; i <= 1000; i++) {
-			int len = getCycleLength(i);
-			if (len > bestLength) {
-				bestNumber = i;
-				bestLength = len;
-			}
-		}
-		return Integer.toString(bestNumber);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-frame.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-frame.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-frame.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-frame.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,42 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.actor
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-<span CLASS="FrameTitleFont" style="font-size: larger; ">
-	<A HREF="../../../info/gridworld/actor/package-summary.html" target="classFrame">info.gridworld.actor</A></span>
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameHeadingFont" style="font-size: larger; ">
-			Classes</span>&nbsp;
-			<span CLASS="FrameItemFont">
-				<BR>
-				<A HREF="Actor.html" target="classFrame" title="class in info.gridworld.actor">Actor</A>
-				<BR>
-				<A HREF="ActorWorld.html" target="classFrame" title="class in info.gridworld.actor">ActorWorld</A>
-				<BR>
-				<A HREF="Bug.html" target="classFrame" title="class in info.gridworld.actor">Bug</A>
-				<BR>
-				<A HREF="Critter.html" target="classFrame" title="class in info.gridworld.actor">Critter</A>
-				<BR>
-				<A HREF="Flower.html" target="classFrame" title="class in info.gridworld.actor">Flower</A>
-				<BR>
-				<A HREF="Rock.html" target="classFrame" title="class in info.gridworld.actor">Rock</A></span></TD>
-	</TR>
-</TABLE>
-
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p065.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p065.java b/Random_Work/src/projectEuler/programs/p065.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p065.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,38 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.*;
-
-public final class p065 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p065().run());
-	}
-
-	@Contract(pure = true)
-	private static int continuedFractionTerm(int i) {
-		if (i == 0) return 2;
-		else if (i % 3 == 2) return i / 3 * 2 + 2;
-		else return 1;
-	}
-
-	@NotNull String run() {
-		BigInteger n = ONE;
-		BigInteger d = ZERO;
-		for (int i = 99; i >= 0; i--) {
-			BigInteger temp = valueOf(continuedFractionTerm(i)).multiply(n).add(d);
-			d = n;
-			n = temp;
-		}
-		int sum = 0;
-		while (!n.equals(ZERO)) {
-			BigInteger[] divrem = n.divideAndRemainder(TEN);
-			sum += divrem[1].intValue();
-			n = divrem[0];
-		}
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p039.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p039.java b/Random_Work/src/projectEuler/programs/p039.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p039.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,34 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-public final class p039 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p039().run());
-	}
-
-	@Contract(pure = true)
-	private static int countSolutions(int p) {
-		int count = 0;
-		for (int a = 1; a <= p; a++)
-			for (int b = a; b <= p; b++) {
-				int c = p - a - b;
-				if ((b <= c) && (((a * a) + (b * b)) == (c * c))) count++;
-			}
-		return count;
-	}
-
-	@NotNull String run() {
-		int maxPerimeter = 0;
-		int maxTriangles = 0;
-		for (int p = 1; p <= 1000; p++) {
-			int triangles = countSolutions(p);
-			if (triangles > maxTriangles) {
-				maxTriangles = triangles;
-				maxPerimeter = p;
-			}
-		}
-		return Integer.toString(maxPerimeter);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p053.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p053.java b/Random_Work/src/projectEuler/programs/p053.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p053.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,22 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.TEN;
-import static projectEuler.programs.Library.binomial;
-
-public final class p053 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p053().run());
-	}
-
-	@NotNull String run() {
-		BigInteger MILLION = TEN.pow(6);
-		int count = 0;
-		for (int n = 1; n <= 100; n++)
-			for (int r = 0; r <= n; r++) if (binomial(n, r).compareTo(MILLION) > 0) count++;
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/EulerSolution.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/EulerSolution.java b/Random_Work/src/projectEuler/programs/EulerSolution.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/EulerSolution.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,8 +0,0 @@
-package projectEuler.programs;
-
-/**
- * This forces every solution class to implement a common method, which is helpful for unit testing, like in the {@linkplain projectEuler.programs.EulerTest} implementation.
- */
-public abstract class EulerSolution {
-	abstract String run();
-}
Index: Random_Work/src/projectEuler/programs/p055.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p055.java b/Random_Work/src/projectEuler/programs/p055.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p055.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,28 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.stream.IntStream;
-
-import static java.math.BigInteger.valueOf;
-
-public final class p055 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p055().run());
-	}
-
-	private static boolean isLychrel(int n) {
-		BigInteger temp = valueOf(n);
-		for (int i = 0; i < 49; i++) {
-			temp = temp.add(new BigInteger(Library.reverse(temp.toString())));
-			if (Library.isPalindrome(temp.toString())) return false;
-		}
-		return true;
-	}
-
-	@NotNull String run() {
-		int count = (int) IntStream.range(0, 10000).filter(p055::isLychrel).count();
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p029.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p029.java b/Random_Work/src/projectEuler/programs/p029.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p029.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,22 +0,0 @@
-package projectEuler.programs;
-
-import java.math.BigInteger;
-import java.util.HashSet;
-
-import static java.math.BigInteger.valueOf;
-
-public final class p029 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p029().run());
-	}
-
-	/*
-	 * We generate all the possible powers in the given range, put each value
-	 * into a set, and let the set count the number of unique values present.
-	 */
-	String run() {
-		HashSet<BigInteger> generated = new HashSet<>();
-		for (int a = 2; a <= 100; a++) for (int b = 2; b <= 100; b++) generated.add(valueOf(a).pow(b));
-		return Integer.toString(generated.size());
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p037.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p037.java b/Random_Work/src/projectEuler/programs/p037.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p037.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.isPrime;
-
-public final class p037 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p037().run());
-	}
-
-	private static boolean isTruncatablePrime(int n) {
-		// Test if left-truncatable
-		for (long i = 10; i <= n; i *= 10) if (!isPrime(n % (int) i)) return false;
-		// Test if right-truncatable
-		for (; n != 0; n /= 10) if (!isPrime(n)) return false;
-		return true;
-	}
-
-	@NotNull String run() {
-		long sum = 0;
-		for (int count = 0, n = 10; count < 11; n++)
-			if (isTruncatablePrime(n)) {
-				sum += n;
-				count++;
-			}
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p063.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p063.java b/Random_Work/src/projectEuler/programs/p063.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p063.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,34 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.math.BigInteger.valueOf;
-
-public final class p063 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p063().run());
-	}
-
-	/*
-	 * Let's examine n^k for different values of n and k and see which
-	 * choices cannot possibly work (i.e. not being exactly k digits long).
-	 *
-	 * When n = 10, for each k, n^k has exactly k+1 digits, so these are excluded.
-	 * By extension, when n > 10, for each k, n^k has at least k+1 digits, so these are excluded.
-	 * Thus we should only consider 1 <= n <= 9.
-	 *
-	 * When n = 9, k = 22, then n^k has 21 digits which is insufficient.
-	 * Extending this, when n = 9 and k > 22, n^k has fewer than k digits.
-	 * Furthermore, when n < 9, n^k will have start to have
-	 * fewer than k digits at some value of k with k < 22.
-	 * Therefore we should only consider 1 <= k <= 21.
-	 *
-	 * We handle the rest of the testing by brute force.
-	 */
-	@NotNull String run() {
-		int count = 0;
-		for (int n = 1; n <= 9; n++)
-			for (int k = 1; k <= 21; k++) if (valueOf(n).pow(k).toString().length() == k) count++;
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/build.xml
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/build.xml b/out/production/Java_Development/objectOriented/gridWorld/build.xml
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/build.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,77 +0,0 @@
-<?xml version="1.0"?>
-<project name="GridWorld" default="make-zip" basedir=".">
-	<property file="build.properties"/>
-	<property name="framework.dir" value="framework"/>
-	<property name="projects.dir" value="projects"/>
-	<property name="build.dir" value="build"/>
-	<property name="dist.dir" value="dist"/>
-	<property name="zip.name" value="GridWorldCode"/>
-	<property name="dist.zip.dir" value="${dist.dir}/${zip.name}"/>
-	<property name="package.name" value="info.gridworld"/>
-	<property name="framework.resources" value="${framework.dir}/info/gridworld/gui/WorldFrameResources.properties"/>
-	<target name="init">
-		<tstamp>
-			<format property="version.date" pattern="yyyy-MM-dd" locale="en"/>
-		</tstamp>
-		<mkdir dir="${build.dir}"/>
-		<mkdir dir="${dist.dir}"/>
-		<mkdir dir="${dist.zip.dir}"/>
-	</target>
-	<target name="props" depends="init" description="Set version-specific properties.">
-		<replaceregexp file="${framework.resources}" byline="true">
-			<regexp pattern="(version.id\s*=\s*).*"/>
-			<substitution expression="\1${version.id}"/>
-		</replaceregexp>
-		<replaceregexp file="${framework.resources}" byline="true">
-			<regexp pattern="(version.date\s*=\s*).*"/>
-			<substitution expression="\1${version.date}"/>
-		</replaceregexp>
-	</target>
-	<target name="compile" depends="props">
-		<javac srcdir="${framework.dir}" destdir="${build.dir}" debug="true" target="1.5">
-			<compilerarg value="-Xlint:unchecked"/>
-		</javac>
-	</target>
-	<target name="build-jar" depends="compile">
-		<copy todir="${build.dir}">
-			<fileset dir="${framework.dir}">
-				<include name="**/*.gif"/>
-				<include name="**/*.properties"/>
-				<include name="**/*.html"/>
-			</fileset>
-		</copy>
-		<jar destfile="${dist.zip.dir}/gridworld.jar" basedir="${build.dir}"/>
-	</target>
-	<target name="javadoc" depends="build-jar">
-		<javadoc destdir="${dist.zip.dir}/javadoc" packagenames="${package.name}.*" sourcepath="${framework.dir}"
-		         excludepackagenames="${package.name}.gui.*" link="${java.api.url}"/>
-	</target>
-	<target name="make-zip" depends="javadoc">
-		<copy todir="${dist.zip.dir}/projects">
-			<fileset dir="${projects.dir}">
-				<include name="**/*.java"/>
-				<include name="**/*.gif"/>
-			</fileset>
-		</copy>
-		<copy todir="${dist.zip.dir}/framework">
-			<fileset dir="${framework.dir}">
-				<include name="**/*.java"/>
-				<include name="**/*.gif"/>
-				<include name="**/*.properties"/>
-			</fileset>
-		</copy>
-		<copy todir="${dist.zip.dir}">
-			<fileset dir="${basedir}">
-				<include name="build.xml"/>
-				<include name="build.properties"/>
-			</fileset>
-		</copy>
-		<delete file="${dist.dir}/${zip.name}.zip"/>
-		<zip destfile="${dist.dir}/${zip.name}.zip" basedir="${dist.dir}">
-		</zip>
-	</target>
-	<target name="clean">
-		<delete dir="${build.dir}"/>
-		<delete dir="${dist.dir}"/>
-	</target>
-</project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p059.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p059.java b/Random_Work/src/projectEuler/programs/p059.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p059.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,56 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static java.lang.Double.NaN;
-
-public final class p059 extends EulerSolution {
-	private static final byte[] CIPHER_TEXT = {36, 22, 80, 0, 0, 4, 23, 25, 19, 17, 88, 4, 4, 19, 21, 11, 88, 22, 23, 23, 29, 69, 12, 24, 0, 88, 25, 11, 12, 2, 10, 28, 5, 6, 12, 25, 10, 22, 80, 10, 30, 80, 10, 22, 21, 69, 23, 22, 69, 61, 5, 9, 29, 2, 66, 11, 80, 8, 23, 3, 17, 88, 19, 0, 20, 21, 7, 10, 17, 17, 29, 20, 69, 8, 17, 21, 29, 2, 22, 84, 80, 71, 60, 21, 69, 11, 5, 8, 21, 25, 22, 88, 3, 0, 10, 25, 0, 10, 5, 8, 88, 2, 0, 27, 25, 21, 10, 31, 6, 25, 2, 16, 21, 82, 69, 35, 63, 11, 88, 4, 13, 29, 80, 22, 13, 29, 22, 88, 31, 3, 88, 3, 0, 10, 25, 0, 11, 80, 10, 30, 80, 23, 29, 19, 12, 8, 2, 10, 27, 17, 9, 11, 45, 95, 88, 57, 69, 16, 17, 19, 29, 80, 23, 29, 19, 0, 22, 4, 9, 1, 80, 3, 23, 5, 11, 28, 92, 69, 9, 5, 12, 12, 21, 69, 13, 30, 0, 0, 0, 0, 27, 4, 0, 28, 28, 28, 84, 80, 4, 22, 80, 0, 20, 21, 2, 25, 30, 17, 88, 21, 29, 8, 2, 0, 11, 3, 12, 23, 30, 69, 30, 31, 23, 88, 4, 13, 29, 80, 0, 22, 4, 12, 10, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 17, 3, 69, 11, 21, 23, 17, 21, 22, 88, 65, 69, 83, 80, 84, 87, 68, 69, 83, 80, 84, 87, 73, 69, 83, 80, 84, 87, 65, 83, 88, 91, 69, 29, 4, 6, 86, 92, 69, 15, 24, 12, 27, 24, 69, 28, 21, 21, 29, 30, 1, 11, 80, 10, 22, 80, 17, 16, 21, 69, 9, 5, 4, 28, 2, 4, 12, 5, 23, 29, 80, 10, 30, 80, 17, 16, 21, 69, 27, 25, 23, 27, 28, 0, 84, 80, 22, 23, 80, 17, 16, 17, 17, 88, 25, 3, 88, 4, 13, 29, 80, 17, 10, 5, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 3, 0, 10, 25, 0, 11, 80, 12, 11, 80, 10, 26, 4, 4, 17, 30, 0, 28, 92, 69, 30, 2, 10, 21, 80, 12, 12, 80, 4, 12, 80, 10, 22, 19, 0, 88, 4, 13, 29, 80, 20, 13, 17, 1, 10, 17, 17, 13, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 6, 17, 2, 6, 20, 21, 69, 30, 31, 9, 20, 31, 18, 11, 94, 69, 54, 17, 8, 29, 28, 28, 84, 80, 44, 88, 24, 4, 14, 21, 69, 30, 31, 16, 22, 20, 69, 12, 24, 4, 12, 80, 17, 16, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 17, 3, 69, 11, 21, 23, 17, 21, 22, 88, 25, 22, 88, 17, 69, 11, 25, 29, 12, 24, 69, 8, 17, 23, 12, 80, 10, 30, 80, 17, 16, 21, 69, 11, 1, 16, 25, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 21, 29, 2, 12, 21, 21, 17, 29, 2, 69, 23, 22, 69, 12, 24, 0, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 67, 80, 10, 10, 80, 7, 1, 80, 21, 13, 4, 17, 17, 30, 2, 88, 4, 13, 29, 80, 22, 13, 29, 69, 23, 22, 69, 12, 24, 12, 11, 80, 22, 29, 2, 12, 29, 3, 69, 29, 1, 16, 25, 28, 69, 12, 31, 69, 11, 92, 69, 17, 4, 69, 16, 17, 22, 88, 4, 13, 29, 80, 23, 25, 4, 12, 23, 80, 22, 9, 2, 17, 80, 70, 76, 88, 29, 16, 20, 4, 12, 8, 28, 12, 29, 20, 69, 26, 9, 69, 11, 80, 17, 23, 80, 84, 88, 31, 3, 88, 4, 13, 29, 80, 21, 29, 2, 12, 21, 21, 17, 29, 2, 69, 12, 31, 69, 12, 24, 0, 88, 20, 12, 25, 29, 0, 12, 21, 23, 86, 80, 44, 88, 7, 12, 20, 28, 69, 11, 31, 10, 22, 80, 22, 16, 31, 18, 88, 4, 13, 25, 4, 69, 12, 24, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 3, 0, 10, 25, 0, 11, 80, 17, 23, 80, 7, 29, 80, 4, 8, 0, 23, 23, 8, 12, 21, 17, 17, 29, 28, 28, 88, 65, 75, 78, 68, 81, 65, 67, 81, 72, 70, 83, 64, 68, 87, 74, 70, 81, 75, 70, 81, 67, 80, 4, 22, 20, 69, 30, 2, 10, 21, 80, 8, 13, 28, 17, 17, 0, 9, 1, 25, 11, 31, 80, 17, 16, 25, 22, 88, 30, 16, 21, 18, 0, 10, 80, 7, 1, 80, 22, 17, 8, 73, 88, 17, 11, 28, 80, 17, 16, 21, 11, 88, 4, 4, 19, 25, 11, 31, 80, 17, 16, 21, 69, 11, 1, 16, 25, 2, 0, 88, 2, 10, 23, 4, 73, 88, 4, 13, 29, 80, 11, 13, 29, 7, 29, 2, 69, 75, 94, 84, 76, 65, 80, 65, 66, 83, 77, 67, 80, 64, 73, 82, 65, 67, 87, 75, 72, 69, 17, 3, 69, 17, 30, 1, 29, 21, 1, 88, 0, 23, 23, 20, 16, 27, 21, 1, 84, 80, 18, 16, 25, 6, 16, 80, 0, 0, 0, 23, 29, 3, 22, 29, 3, 69, 12, 24, 0, 88, 0, 0, 10, 25, 8, 29, 4, 0, 10, 80, 10, 30, 80, 4, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 86, 80, 35, 23, 28, 9, 23, 7, 12, 22, 23, 69, 25, 23, 4, 17, 30, 69, 12, 24, 0, 88, 3, 4, 21, 21, 69, 11, 4, 0, 8, 3, 69, 26, 9, 69, 15, 24, 12, 27, 24, 69, 49, 80, 13, 25, 20, 69, 25, 2, 23, 17, 6, 0, 28, 80, 4, 12, 80, 17, 16, 25, 22, 88, 3, 16, 21, 92, 69, 49, 80, 13, 25, 6, 0, 88, 20, 12, 11, 19, 10, 14, 21, 23, 29, 20, 69, 12, 24, 4, 12, 80, 17, 16, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 29, 80, 22, 29, 2, 12, 29, 3, 69, 73, 80, 78, 88, 65, 74, 73, 70, 69, 83, 80, 84, 87, 72, 84, 88, 91, 69, 73, 95, 87, 77, 70, 69, 83, 80, 84, 87, 70, 87, 77, 80, 78, 88, 21, 17, 27, 94, 69, 25, 28, 22, 23, 80, 1, 29, 0, 0, 22, 20, 22, 88, 31, 11, 88, 4, 13, 29, 80, 20, 13, 17, 1, 10, 17, 17, 13, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 6, 17, 2, 6, 20, 21, 75, 88, 62, 4, 21, 21, 9, 1, 92, 69, 12, 24, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 29, 16, 20, 4, 12, 8, 28, 12, 29, 20, 69, 26, 9, 69, 65, 64, 69, 31, 25, 19, 29, 3, 69, 12, 24, 0, 88, 18, 12, 9, 5, 4, 28, 2, 4, 12, 21, 69, 80, 22, 10, 13, 2, 17, 16, 80, 21, 23, 7, 0, 10, 89, 69, 23, 22, 69, 12, 24, 0, 88, 19, 12, 10, 19, 16, 21, 22, 0, 10, 21, 11, 27, 21, 69, 23, 22, 69, 12, 24, 0, 88, 0, 0, 10, 25, 8, 29, 4, 0, 10, 80, 10, 30, 80, 4, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 86, 80, 36, 22, 20, 69, 26, 9, 69, 11, 25, 8, 17, 28, 4, 10, 80, 23, 29, 17, 22, 23, 30, 12, 22, 23, 69, 49, 80, 13, 25, 6, 0, 88, 28, 12, 19, 21, 18, 17, 3, 0, 88, 18, 0, 29, 30, 69, 25, 18, 9, 29, 80, 17, 23, 80, 1, 29, 4, 0, 10, 29, 12, 22, 21, 69, 12, 24, 0, 88, 3, 16, 21, 3, 69, 23, 22, 69, 12, 24, 0, 88, 3, 16, 26, 3, 0, 9, 5, 0, 22, 4, 69, 11, 21, 23, 17, 21, 22, 88, 25, 11, 88, 7, 13, 17, 19, 13, 88, 4, 13, 29, 80, 0, 0, 0, 10, 22, 21, 11, 12, 3, 69, 25, 2, 0, 88, 21, 19, 29, 30, 69, 22, 5, 8, 26, 21, 23, 11, 94};
-
-	public static void main(String[] args) {
-		System.out.println(new p059().run());
-	}
-
-	// Heuristical scoring function. The current implementation returns only integral values, but floating-point values are legal too.
-	@Contract(pure = true)
-	private static double score(@NotNull byte[] b) {
-		double sum = 0;
-		for (byte value : b)
-			if (((char) value >= 'A') && ((char) value <= 'Z')) sum += 1; // Uppercase letters are good
-			else if (((char) value >= 'a') && ((char) value <= 'z')) sum += 2; // Lowercase letters are excellent
-			else if (((char) value < 0x20) || ((char) value == 0x7F)) sum -= 10; // Control characters are very bad
-		return sum;
-	}
-
-	@NotNull
-	@Contract(pure = true)
-	private static byte[] decrypt(byte[] key) {
-		byte[] plaintext = new byte[CIPHER_TEXT.length];
-		IntStream.range(0, CIPHER_TEXT.length).forEachOrdered(i -> plaintext[i] = (byte) (CIPHER_TEXT[i] ^ key[i % key.length]));
-		return plaintext;
-	}
-
-	@NotNull String run() {
-		byte[] bestKey = null;
-		byte[] bestDecrypted = null;
-		double bestScore = NaN;
-		for (byte x = 'a'; x <= 'z'; x++)
-			for (byte y = 'a'; y <= 'z'; y++)
-				for (byte z = 'a'; z <= 'z'; z++) {
-					byte[] key = {x, y, z};
-					byte[] decrypted = decrypt(key);
-					double score = score(decrypted);
-					if ((bestKey == null) || (score > bestScore)) {
-						bestKey = key;
-						bestDecrypted = decrypted;
-						bestScore = score;
-					}
-				}
-		int sum = 0;
-		for (byte b : bestDecrypted) sum += b;
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p073.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p073.java b/Random_Work/src/projectEuler/programs/p073.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p073.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,30 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-public final class p073 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p073().run());
-	}
-
-	// Counts the number of reduced fractions n/d such that leftN/leftD < n/d < rightN/rightD and d <= 12000.
-	// leftN/leftD and rightN/rightD must be adjacent in the Stern-Brocot tree at some point in the generation process.
-	private static int sternBrocotCount(int leftN, int leftD, int rightN, int rightD) {
-		int n = leftN + rightN;
-		int d = leftD + rightD;
-		return (d > 12000) ? 0 : (1 + sternBrocotCount(leftN, leftD, n, d) + sternBrocotCount(n, d, rightN, rightD));
-	}
-
-	/*
-	 * The Stern-Brocot tree is an infinite binary search tree of all positive rational numbers,
-	 * where each number appears only once and is in lowest terms.
-	 * It is formed by starting with the two sentinels 0/1 and 1/1. Iterating infinitely in any order,
-	 * between any two currently adjacent fractions Ln/Ld and Rn/Rd, insert a new fraction (Ln+Rn)/(Ld+Rd).
-	 * See MathWorld for a visualization: http://mathworld.wolfram.com/Stern-BrocotTree.html
-	 *
-	 * This algorithm uses a lot of stack space (about 12000 frames). You probably need to use a JVM option like "-Xss4M".
-	 */
-	@NotNull String run() {
-		return Integer.toString(sternBrocotCount(1, 3, 1, 2));
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p012.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p012.java b/Random_Work/src/projectEuler/programs/p012.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p012.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,37 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static java.lang.Integer.MAX_VALUE;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p012 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p012().run());
-	}
-
-	// Returns the number of integers in the range [1, n] that divide n.
-	@Contract(pure = true)
-	private static int countDivisors(int n) {
-		int end = sqrt(n);
-		int count = IntStream.range(1, end).filter(i -> n % i == 0).map(i -> 2).sum();
-		if ((end * end) == n) count++; // Perfect square
-		return count;
-	}
-
-	/*
-	 * Computers are fast, so we can implement this solution directly without any clever math.
-	 */
-	@NotNull String run() {
-		int triangle = 0;
-		for (int i = 1; ; i++) {
-			assert (MAX_VALUE - triangle) >= i : "Overflow";
-			triangle += i; // This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2
-			if (countDivisors(triangle) > 500) return Integer.toString(triangle);
-		}
-	}
-
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/UnboundedGrid.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/UnboundedGrid.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/UnboundedGrid.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/UnboundedGrid.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,584 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		UnboundedGrid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "UnboundedGrid";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/UnboundedGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="UnboundedGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.grid</span>
-	<BR>
-	Class UnboundedGrid&lt;E&gt;</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A
-		HREF="../../../info/gridworld/grid/AbstractGrid.html"
-		title="class in info.gridworld.grid">info.gridworld.grid.AbstractGrid</A>&lt;E&gt;
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.grid.UnboundedGrid&lt;E&gt;</B>
-</PRE>
-<DL>
-	<DT><B>All Implemented Interfaces:</B>
-	<DD><A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;
-	</DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>UnboundedGrid&lt;E&gt;</B>
-	<DT>extends <A HREF="../../../info/gridworld/grid/AbstractGrid.html" title="class in info.gridworld.grid">AbstractGrid</A>&lt;E&gt;
-</DL>
-
-<P>
-	An <code>UnboundedGrid</code> is a rectangular grid with an unbounded number of rows and
-	columns. <br/>
-	The implementation of this class is testable on the AP CS AB exam.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html#UnboundedGrid()">UnboundedGrid</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs an empty unbounded grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-			               title="type parameter in UnboundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html#get(info.gridworld.grid.Location)">get</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the object at a given location in this
-			grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html#getNumCols()">getNumCols</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of columns in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html#getNumRows()">getNumRows</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of rows in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/UnboundedGrid.html#getOccupiedLocations()">getOccupiedLocations</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the locations in this grid that contain
-			objects.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/UnboundedGrid.html#isValid(info.gridworld.grid.Location)">isValid</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether a location is valid in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-			               title="type parameter in UnboundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html#put(info.gridworld.grid.Location, E)">put</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-			<A HREF="../../../info/gridworld/grid/UnboundedGrid.html" title="type parameter in UnboundedGrid">E</A>&nbsp;obj)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Puts an object at a given location in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-			               title="type parameter in UnboundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/UnboundedGrid.html#remove(info.gridworld.grid.Location)">remove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the object at a given location from this
-			grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.grid.AbstractGrid"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.grid.<A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html"
-				title="class in info.gridworld.grid">AbstractGrid</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">getEmptyAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getNeighbors(info.gridworld.grid.Location)">getNeighbors</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">getOccupiedAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">getValidAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="UnboundedGrid()"><!-- --></A>
-<H3>
-	UnboundedGrid</H3>
-<PRE>
-public <B>UnboundedGrid</B>()</PRE>
-<DL>
-	<DD>Constructs an empty unbounded grid.
-		<P>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getNumRows()"><!-- --></A>
-<H3>
-	getNumRows</H3>
-<PRE>
-public int <B>getNumRows</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getNumRows()">Grid</A></CODE></B></DD>
-	<DD>Returns the number of rows in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of rows, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getNumCols()"><!-- --></A>
-<H3>
-	getNumCols</H3>
-<PRE>
-public int <B>getNumCols</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getNumCols()">Grid</A></CODE></B></DD>
-	<DD>Returns the number of columns in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of columns, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="isValid(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	isValid</H3>
-<PRE>
-public boolean <B>isValid</B>(<A HREF="../../../info/gridworld/grid/Location.html"
-                                 title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#isValid(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Checks whether a location is valid in this grid. <br/>
-		Precondition: <code>loc</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location to check
-			<DT><B>Returns:</B>
-			<DD><code>true</code> if <code>loc</code> is valid in this grid,
-				<code>false</code> otherwise
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupiedLocations()"><!-- --></A>
-<H3>
-	getOccupiedLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getOccupiedLocations</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getOccupiedLocations()">Grid</A></CODE></B></DD>
-	<DD>Gets the locations in this grid that contain objects.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>an array list of all occupied locations in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="get(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	get</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-          title="type parameter in UnboundedGrid">E</A> <B>get</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#get(info.gridworld.grid.Location)">Grid</A></CODE></B></DD>
-	<DD>Returns the object at a given location in this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>the object at location <code>loc</code> (or <code>null<code>
-				if the location is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="put(info.gridworld.grid.Location,java.lang.Object)"><!-- --></A><A
-		NAME="put(info.gridworld.grid.Location, E)">
-	<!-- --></A>
-<H3>
-	put</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-          title="type parameter in UnboundedGrid">E</A> <B>put</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-             <A HREF="../../../info/gridworld/grid/UnboundedGrid.html" title="type parameter in UnboundedGrid">E</A>&nbsp;obj)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#put(info.gridworld.grid.Location, E)">Grid</A></CODE></B>
-	</DD>
-	<DD>Puts an object at a given location in this grid. <br/>
-		Precondition: (1) <code>loc</code> is valid in this grid (2)
-		<code>obj</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location at which to put the object
-			<DD><CODE>obj</CODE> - the new object to be added
-			<DT><B>Returns:</B>
-			<DD>the object previously at <code>loc</code> (or <code>null</code>
-				if the location was previously unoccupied)
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="remove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	remove</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-          title="type parameter in UnboundedGrid">E</A> <B>remove</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#remove(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Removes the object at a given location from this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location of the object that is to be removed
-			<DT><B>Returns:</B>
-			<DD>the object that was removed (or <code>null<code> if the location
-				is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/UnboundedGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="UnboundedGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p028.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p028.java b/Random_Work/src/projectEuler/programs/p028.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p028.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,26 +0,0 @@
-package projectEuler.programs;
-
-import java.util.stream.IntStream;
-
-public final class p028 extends EulerSolution {
-	/*
-	 * From the diagram, let's observe the four corners of an n * n square (where n is odd).
-	 * It's not hard to convince yourself that the top right corner always has the value n^2.
-	 * Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),
-	 * the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).
-	 * Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.
-	 *
-	 * Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.
-	 */
-	private static final int SIZE = 1001; // Must be odd
-
-	public static void main(String[] args) {
-		System.out.println(new p028().run());
-	}
-
-	String run() {
-		long sum = 1; // Special case for size 1
-		sum += IntStream.iterate(3, n -> n <= SIZE, n -> n + 2).mapToLong(n -> (4 * n * n) - (6 * (n - 1))).sum();
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p004.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p004.java b/Random_Work/src/projectEuler/programs/p004.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p004.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,26 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-import static projectEuler.programs.Library.isPalindrome;
-
-public final class p004 extends EulerSolution {
-	public static void main(String[] args) {
-		out.println(new p004().run());
-	}
-
-	/*
-	 * Computers are fast, so we can implement this solution directly without any clever math.
-	 * Note that the maximum product is 999 * 999, which fits in a Java int type.
-	 */
-	@NotNull String run() {
-		int maxPalin = -1;
-		for (int i = 100; i < 1000; i++)
-			for (int j = 100; j < 1000; j++) {
-				int prod = i * j;
-				if (isPalindrome(prod) && (prod > maxPalin)) maxPalin = prod;
-			}
-		return Integer.toString(maxPalin);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-summary.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-summary.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-summary.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-summary.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,208 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.actor
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) parent.document.title = "info.gridworld.actor";
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV PACKAGE&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-summary.html"><B>NEXT PACKAGE</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<H2>
-	Package info.gridworld.actor
-</H2>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Class Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/Actor.html"
-		                      title="class in info.gridworld.actor">Actor</A></B>
-		</TD>
-		<TD>An <code>Actor</code> is an entity with a color and direction that can act.</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/ActorWorld.html"
-		                      title="class in info.gridworld.actor">ActorWorld</A></B></TD>
-		<TD>An <code>ActorWorld</code> is occupied by actors.</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/Bug.html"
-		                      title="class in info.gridworld.actor">Bug</A></B></TD>
-		<TD>A <code>Bug</code> is an actor that can move and turn.</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/Critter.html"
-		                      title="class in info.gridworld.actor">Critter</A></B>
-		</TD>
-		<TD>A <code>Critter</code> is an actor that moves through its world, processing
-			other actors in some way and then moving to a new location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/Flower.html"
-		                      title="class in info.gridworld.actor">Flower</A></B>
-		</TD>
-		<TD>A <code>Flower</code> is an actor that darkens over time.</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/actor/Rock.html"
-		                      title="class in info.gridworld.actor">Rock</A></B></TD>
-		<TD>A <code>Rock</code> is an actor that does nothing.</TD>
-	</TR>
-</TABLE>
-&nbsp;
-
-<P>
-<DL>
-</DL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV PACKAGE&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-summary.html"><B>NEXT PACKAGE</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p050.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p050.java b/Random_Work/src/projectEuler/programs/p050.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p050.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,32 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.*;
-
-public final class p050 extends EulerSolution {
-	private static final int LIMIT = pow(10, 6);
-
-	public static void main(String[] args) {
-		System.out.println(new p050().run());
-	}
-
-	@NotNull String run() {
-		boolean[] isPrime = listPrimality(LIMIT);
-		int[] primes = listPrimes(LIMIT);
-		long maxSum = 0;
-		int maxRun = -1;
-		for (int i = 0; i < primes.length; i++) { // For each index of a starting prime number
-			int sum = 0;
-			for (int j = i; j < primes.length; j++) { // For each end index (inclusive)
-				sum += primes[j];
-				if (sum > LIMIT) break;
-				else if (j - i > maxRun && sum > maxSum && isPrime[sum]) {
-					maxSum = sum;
-					maxRun = j - i;
-				}
-			}
-		}
-		return Long.toString(maxSum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p081.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p081.java b/Random_Work/src/projectEuler/programs/p081.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p081.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,28 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Math.min;
-
-public final class p081 extends EulerSolution {
-	// Mutable
-	private final int[][] grid = {{4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870}, {1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377}, {9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230}, {7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187}, {3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505}, {1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942}, {4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757}, {510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706}, {9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048}, {3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540}, {6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442}, {7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509}, {4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000}, {356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672}, {9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785}, {192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095}, {1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859}, {4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837}, {5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286}, {1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963}, {1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127}, {8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535}, {7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446}, {3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615}, {9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303}, {5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266}, {6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763}, {9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550}, {5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887}, {6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531}, {5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739}, {1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269}, {4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380}, {4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829}, {8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873}, {2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271}, {6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281}, {2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660}, {6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665}, {3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056}, {5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089}, {3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523}, {1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616}, {8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125}, {3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307}, {8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920}, {8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225}, {9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976}, {3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432}, {1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351}, {7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991}, {9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110}, {7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965}, {3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314}, {1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416}, {126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028}, {8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407}, {7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312}, {4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000}, {4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229}, {7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256}, {7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842}, {6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241}, {4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213}, {9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015}, {3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405}, {2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640}, {3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480}, {4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181}, {171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501}, {3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698}, {2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531}, {7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255}, {8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631}, {2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914}, {6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864}, {8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738}, {2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294}, {2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789}, {5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981}};
-
-	public static void main(String[] args) {
-		System.out.println(new p081().run());
-	}
-
-	@NotNull String run() {
-		// Dynamic programming
-		for (int i = grid.length - 1; i >= 0; i--)
-			for (int j = grid[i].length - 1; j >= 0; j--) {
-				int temp;
-				if (i + 1 < grid.length && j + 1 < grid[i].length) temp = min(grid[i + 1][j], grid[i][j + 1]);
-				else if (i + 1 < grid.length) temp = grid[i + 1][j];
-				else if (j + 1 < grid[i].length) temp = grid[i][j + 1];
-				else temp = 0;
-				grid[i][j] += temp;
-			}
-		return Integer.toString(grid[0][0]);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Location.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Location.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Location.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Location.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,1008 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Location
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Location";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/UnboundedGrid.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/Location.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Location.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.grid</span>
-	<BR>
-	Class Location</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.grid.Location</B>
-</PRE>
-<DL>
-	<DT><B>All Implemented Interfaces:</B>
-	<DD><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true"
-	       title="class or interface in java.lang">Comparable</A></DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Location</B>
-	<DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-	               title="class or interface in java.lang">Object</A>
-	<DT>implements <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true"
-	                  title="class or interface in java.lang">Comparable</A>
-</DL>
-
-<P>
-	A <code>Location</code> object represents the row and column of a location
-	in a two-dimensional grid. <br/>
-	The API of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-	<!-- =========== FIELD SUMMARY =========== -->
-
-	<A NAME="field_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Field Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#AHEAD">AHEAD</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for making no turn.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#EAST">EAST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for east.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#FULL_CIRCLE">FULL_CIRCLE</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning a full circle.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#HALF_CIRCLE">HALF_CIRCLE</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning a half circle.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#HALF_LEFT">HALF_LEFT</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning 45 degrees to the
-			left.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#HALF_RIGHT">HALF_RIGHT</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning 45 degrees to the
-			right.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#LEFT">LEFT</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning 90 degrees to the
-			left.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#NORTH">NORTH</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for north.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#NORTHEAST">NORTHEAST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for northeast.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#NORTHWEST">NORTHWEST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for northwest.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#RIGHT">RIGHT</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The turn angle for turning 90 degrees to the
-			right.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#SOUTH">SOUTH</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for south.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#SOUTHEAST">SOUTHEAST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for southeast.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#SOUTHWEST">SOUTHWEST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for southwest.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>static&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#WEST">WEST</A></B></CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;The compass direction for west.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#Location(int, int)">Location</A></B>(int&nbsp;r,
-			int&nbsp;c)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a location with given row and column
-			coordinates.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Location.html#compareTo(java.lang.Object)">compareTo</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A>&nbsp;other)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Compares this location to <code>other</code> for
-			ordering.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#equals(java.lang.Object)">equals</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A>&nbsp;other)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Indicates whether some other
-			<code>Location</code> object is "equal to"
-			this one.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A></CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Location.html#getAdjacentLocation(int)">getAdjacentLocation</A></B>(int&nbsp;direction)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the adjacent location in any one of the
-			eight compass directions.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#getCol()">getCol</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the column coordinate.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Location.html#getDirectionToward(info.gridworld.grid.Location)">getDirectionToward</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;target)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the direction from this location toward
-			another location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#getRow()">getRow</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the row coordinate.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#hashCode()">hashCode</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Generates a hash code.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-			               title="class or interface in java.lang">String</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Location.html#toString()">toString</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a string that describes this location.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ============ FIELD DETAIL =========== -->
-
-	<A NAME="field_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Field Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="LEFT"><!-- --></A>
-<H3>
-	LEFT</H3>
-<PRE>
-public static final int <B>LEFT</B></PRE>
-<DL>
-	<DD>The turn angle for turning 90 degrees to the left.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.LEFT">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="RIGHT"><!-- --></A>
-<H3>
-	RIGHT</H3>
-<PRE>
-public static final int <B>RIGHT</B></PRE>
-<DL>
-	<DD>The turn angle for turning 90 degrees to the right.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.RIGHT">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="HALF_LEFT"><!-- --></A>
-<H3>
-	HALF_LEFT</H3>
-<PRE>
-public static final int <B>HALF_LEFT</B></PRE>
-<DL>
-	<DD>The turn angle for turning 45 degrees to the left.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.HALF_LEFT">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="HALF_RIGHT"><!-- --></A>
-<H3>
-	HALF_RIGHT</H3>
-<PRE>
-public static final int <B>HALF_RIGHT</B></PRE>
-<DL>
-	<DD>The turn angle for turning 45 degrees to the right.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.HALF_RIGHT">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="FULL_CIRCLE"><!-- --></A>
-<H3>
-	FULL_CIRCLE</H3>
-<PRE>
-public static final int <B>FULL_CIRCLE</B></PRE>
-<DL>
-	<DD>The turn angle for turning a full circle.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.FULL_CIRCLE">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="HALF_CIRCLE"><!-- --></A>
-<H3>
-	HALF_CIRCLE</H3>
-<PRE>
-public static final int <B>HALF_CIRCLE</B></PRE>
-<DL>
-	<DD>The turn angle for turning a half circle.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.HALF_CIRCLE">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="AHEAD"><!-- --></A>
-<H3>
-	AHEAD</H3>
-<PRE>
-public static final int <B>AHEAD</B></PRE>
-<DL>
-	<DD>The turn angle for making no turn.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.AHEAD">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="NORTH"><!-- --></A>
-<H3>
-	NORTH</H3>
-<PRE>
-public static final int <B>NORTH</B></PRE>
-<DL>
-	<DD>The compass direction for north.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.NORTH">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="NORTHEAST"><!-- --></A>
-<H3>
-	NORTHEAST</H3>
-<PRE>
-public static final int <B>NORTHEAST</B></PRE>
-<DL>
-	<DD>The compass direction for northeast.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.NORTHEAST">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="EAST"><!-- --></A>
-<H3>
-	EAST</H3>
-<PRE>
-public static final int <B>EAST</B></PRE>
-<DL>
-	<DD>The compass direction for east.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.EAST">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="SOUTHEAST"><!-- --></A>
-<H3>
-	SOUTHEAST</H3>
-<PRE>
-public static final int <B>SOUTHEAST</B></PRE>
-<DL>
-	<DD>The compass direction for southeast.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.SOUTHEAST">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="SOUTH"><!-- --></A>
-<H3>
-	SOUTH</H3>
-<PRE>
-public static final int <B>SOUTH</B></PRE>
-<DL>
-	<DD>The compass direction for south.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.SOUTH">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="SOUTHWEST"><!-- --></A>
-<H3>
-	SOUTHWEST</H3>
-<PRE>
-public static final int <B>SOUTHWEST</B></PRE>
-<DL>
-	<DD>The compass direction for southwest.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.SOUTHWEST">Constant Field
-				Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="WEST"><!-- --></A>
-<H3>
-	WEST</H3>
-<PRE>
-public static final int <B>WEST</B></PRE>
-<DL>
-	<DD>The compass direction for west.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.WEST">Constant Field Values</A>
-		</DL>
-</DL>
-<HR>
-
-<A NAME="NORTHWEST"><!-- --></A>
-<H3>
-	NORTHWEST</H3>
-<PRE>
-public static final int <B>NORTHWEST</B></PRE>
-<DL>
-	<DD>The compass direction for northwest.
-		<P>
-		<DL>
-			<DT><B>See Also:</B>
-			<DD><A HREF="../../../constant-values.html#info.gridworld.grid.Location.NORTHWEST">Constant Field
-				Values</A>
-		</DL>
-</DL>
-
-<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Location(int, int)"><!-- --></A>
-<H3>
-	Location</H3>
-<PRE>
-public <B>Location</B>(int&nbsp;r,
-                int&nbsp;c)</PRE>
-<DL>
-	<DD>Constructs a location with given row and column coordinates.
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>r</CODE> - the row
-			<DD><CODE>c</CODE> - the column
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getRow()"><!-- --></A>
-<H3>
-	getRow</H3>
-<PRE>
-public int <B>getRow</B>()</PRE>
-<DL>
-	<DD>Gets the row coordinate.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the row of this location
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getCol()"><!-- --></A>
-<H3>
-	getCol</H3>
-<PRE>
-public int <B>getCol</B>()</PRE>
-<DL>
-	<DD>Gets the column coordinate.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the column of this location
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getAdjacentLocation(int)"><!-- --></A>
-<H3>
-	getAdjacentLocation</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A> <B>getAdjacentLocation</B>(int&nbsp;direction)</PRE>
-<DL>
-	<DD>Gets the adjacent location in any one of the eight compass directions.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>direction</CODE> - the direction in which to find a neighbor location
-			<DT><B>Returns:</B>
-			<DD>the adjacent location in the direction that is closest to
-				<tt>direction</tt>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getDirectionToward(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getDirectionToward</H3>
-<PRE>
-public int <B>getDirectionToward</B>(<A HREF="../../../info/gridworld/grid/Location.html"
-                                        title="class in info.gridworld.grid">Location</A>&nbsp;target)</PRE>
-<DL>
-	<DD>Returns the direction from this location toward another location. The
-		direction is rounded to the nearest compass direction.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>target</CODE> - a location that is different from this location
-			<DT><B>Returns:</B>
-			<DD>the closest compass direction from this location toward
-				<code>target</code>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="equals(java.lang.Object)"><!-- --></A>
-<H3>
-	equals</H3>
-<PRE>
-public boolean <B>equals</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-                                title="class or interface in java.lang">Object</A>&nbsp;other)</PRE>
-<DL>
-	<DD>Indicates whether some other <code>Location</code> object is "equal to"
-		this one.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-					title="class or interface in java.lang">equals</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>other</CODE> - the other location to test
-			<DT><B>Returns:</B>
-			<DD><code>true</code> if <code>other</code> is a
-				<code>Location</code> with the same row and column as this location;
-				<code>false</code> otherwise
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="hashCode()"><!-- --></A>
-<H3>
-	hashCode</H3>
-<PRE>
-public int <B>hashCode</B>()</PRE>
-<DL>
-	<DD>Generates a hash code.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-					title="class or interface in java.lang">hashCode</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a hash code for this location
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="compareTo(java.lang.Object)"><!-- --></A>
-<H3>
-	compareTo</H3>
-<PRE>
-public int <B>compareTo</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-                               title="class or interface in java.lang">Object</A>&nbsp;other)</PRE>
-<DL>
-	<DD>Compares this location to <code>other</code> for ordering. Returns a
-		negative integer, zero, or a positive integer as this location is less
-		than, equal to, or greater than <code>other</code>. Locations are
-		ordered in row-major order. <br/>
-		(Precondition: <code>other</code> is a <code>Location</code> object.)
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Specified by:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true#compareTo(T)"
-					title="class or interface in java.lang">compareTo</A></CODE> in interface <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true"
-					title="class or interface in java.lang">Comparable</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>other</CODE> - the other location to test
-			<DT><B>Returns:</B>
-			<DD>a negative integer if this location is less than
-				<code>other</code>, zero if the two locations are equal, or a positive
-				integer if this location is greater than <code>other</code>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="toString()"><!-- --></A>
-<H3>
-	toString</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-          title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
-<DL>
-	<DD>Creates a string that describes this location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()"
-					title="class or interface in java.lang">toString</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a string with the row and column of this location, in the format
-				(row, col)
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/UnboundedGrid.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/Location.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Location.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;<A HREF="#field_summary">FIELD</A>&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;<A HREF="#field_detail">FIELD</A>&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p042.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p042.java b/Random_Work/src/projectEuler/programs/p042.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p042.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,38 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.Arrays.stream;
-
-public final class p042 extends EulerSolution {
-	private static final String[] WORDS = {"A", "ABILITY", "ABLE", "ABOUT", "ABOVE", "ABSENCE", "ABSOLUTELY", "ACADEMIC", "ACCEPT", "ACCESS", "ACCIDENT", "ACCOMPANY", "ACCORDING", "ACCOUNT", "ACHIEVE", "ACHIEVEMENT", "ACID", "ACQUIRE", "ACROSS", "ACT", "ACTION", "ACTIVE", "ACTIVITY", "ACTUAL", "ACTUALLY", "ADD", "ADDITION", "ADDITIONAL", "ADDRESS", "ADMINISTRATION", "ADMIT", "ADOPT", "ADULT", "ADVANCE", "ADVANTAGE", "ADVICE", "ADVISE", "AFFAIR", "AFFECT", "AFFORD", "AFRAID", "AFTER", "AFTERNOON", "AFTERWARDS", "AGAIN", "AGAINST", "AGE", "AGENCY", "AGENT", "AGO", "AGREE", "AGREEMENT", "AHEAD", "AID", "AIM", "AIR", "AIRCRAFT", "ALL", "ALLOW", "ALMOST", "ALONE", "ALONG", "ALREADY", "ALRIGHT", "ALSO", "ALTERNATIVE", "ALTHOUGH", "ALWAYS", "AMONG", "AMONGST", "AMOUNT", "AN", "ANALYSIS", "ANCIENT", "AND", "ANIMAL", "ANNOUNCE", "ANNUAL", "ANOTHER", "ANSWER", "ANY", "ANYBODY", "ANYONE", "ANYTHING", "ANYWAY", "APART", "APPARENT", "APPARENTLY", "APPEAL", "APPEAR", "APPEARANCE", "APPLICATION", "APPLY", "APPOINT", "APPOINTMENT", "APPROACH", "APPROPRIATE", "APPROVE", "AREA", "ARGUE", "ARGUMENT", "ARISE", "ARM", "ARMY", "AROUND", "ARRANGE", "ARRANGEMENT", "ARRIVE", "ART", "ARTICLE", "ARTIST", "AS", "ASK", "ASPECT", "ASSEMBLY", "ASSESS", "ASSESSMENT", "ASSET", "ASSOCIATE", "ASSOCIATION", "ASSUME", "ASSUMPTION", "AT", "ATMOSPHERE", "ATTACH", "ATTACK", "ATTEMPT", "ATTEND", "ATTENTION", "ATTITUDE", "ATTRACT", "ATTRACTIVE", "AUDIENCE", "AUTHOR", "AUTHORITY", "AVAILABLE", "AVERAGE", "AVOID", "AWARD", "AWARE", "AWAY", "AYE", "BABY", "BACK", "BACKGROUND", "BAD", "BAG", "BALANCE", "BALL", "BAND", "BANK", "BAR", "BASE", "BASIC", "BASIS", "BATTLE", "BE", "BEAR", "BEAT", "BEAUTIFUL", "BECAUSE", "BECOME", "BED", "BEDROOM", "BEFORE", "BEGIN", "BEGINNING", "BEHAVIOUR", "BEHIND", "BELIEF", "BELIEVE", "BELONG", "BELOW", "BENEATH", "BENEFIT", "BESIDE", "BEST", "BETTER", "BETWEEN", "BEYOND", "BIG", "BILL", "BIND", "BIRD", "BIRTH", "BIT", "BLACK", "BLOCK", "BLOOD", "BLOODY", "BLOW", "BLUE", "BOARD", "BOAT", "BODY", "BONE", "BOOK", "BORDER", "BOTH", "BOTTLE", "BOTTOM", "BOX", "BOY", "BRAIN", "BRANCH", "BREAK", "BREATH", "BRIDGE", "BRIEF", "BRIGHT", "BRING", "BROAD", "BROTHER", "BUDGET", "BUILD", "BUILDING", "BURN", "BUS", "BUSINESS", "BUSY", "BUT", "BUY", "BY", "CABINET", "CALL", "CAMPAIGN", "CAN", "CANDIDATE", "CAPABLE", "CAPACITY", "CAPITAL", "CAR", "CARD", "CARE", "CAREER", "CAREFUL", "CAREFULLY", "CARRY", "CASE", "CASH", "CAT", "CATCH", "CATEGORY", "CAUSE", "CELL", "CENTRAL", "CENTRE", "CENTURY", "CERTAIN", "CERTAINLY", "CHAIN", "CHAIR", "CHAIRMAN", "CHALLENGE", "CHANCE", "CHANGE", "CHANNEL", "CHAPTER", "CHARACTER", "CHARACTERISTIC", "CHARGE", "CHEAP", "CHECK", "CHEMICAL", "CHIEF", "CHILD", "CHOICE", "CHOOSE", "CHURCH", "CIRCLE", "CIRCUMSTANCE", "CITIZEN", "CITY", "CIVIL", "CLAIM", "CLASS", "CLEAN", "CLEAR", "CLEARLY", "CLIENT", "CLIMB", "CLOSE", "CLOSELY", "CLOTHES", "CLUB", "COAL", "CODE", "COFFEE", "COLD", "COLLEAGUE", "COLLECT", "COLLECTION", "COLLEGE", "COLOUR", "COMBINATION", "COMBINE", "COME", "COMMENT", "COMMERCIAL", "COMMISSION", "COMMIT", "COMMITMENT", "COMMITTEE", "COMMON", "COMMUNICATION", "COMMUNITY", "COMPANY", "COMPARE", "COMPARISON", "COMPETITION", "COMPLETE", "COMPLETELY", "COMPLEX", "COMPONENT", "COMPUTER", "CONCENTRATE", "CONCENTRATION", "CONCEPT", "CONCERN", "CONCERNED", "CONCLUDE", "CONCLUSION", "CONDITION", "CONDUCT", "CONFERENCE", "CONFIDENCE", "CONFIRM", "CONFLICT", "CONGRESS", "CONNECT", "CONNECTION", "CONSEQUENCE", "CONSERVATIVE", "CONSIDER", "CONSIDERABLE", "CONSIDERATION", "CONSIST", "CONSTANT", "CONSTRUCTION", "CONSUMER", "CONTACT", "CONTAIN", "CONTENT", "CONTEXT", "CONTINUE", "CONTRACT", "CONTRAST", "CONTRIBUTE", "CONTRIBUTION", "CONTROL", "CONVENTION", "CONVERSATION", "COPY", "CORNER", "CORPORATE", "CORRECT", "COS", "COST", "COULD", "COUNCIL", "COUNT", "COUNTRY", "COUNTY", "COUPLE", "COURSE", "COURT", "COVER", "CREATE", "CREATION", "CREDIT", "CRIME", "CRIMINAL", "CRISIS", "CRITERION", "CRITICAL", "CRITICISM", "CROSS", "CROWD", "CRY", "CULTURAL", "CULTURE", "CUP", "CURRENT", "CURRENTLY", "CURRICULUM", "CUSTOMER", "CUT", "DAMAGE", "DANGER", "DANGEROUS", "DARK", "DATA", "DATE", "DAUGHTER", "DAY", "DEAD", "DEAL", "DEATH", "DEBATE", "DEBT", "DECADE", "DECIDE", "DECISION", "DECLARE", "DEEP", "DEFENCE", "DEFENDANT", "DEFINE", "DEFINITION", "DEGREE", "DELIVER", "DEMAND", "DEMOCRATIC", "DEMONSTRATE", "DENY", "DEPARTMENT", "DEPEND", "DEPUTY", "DERIVE", "DESCRIBE", "DESCRIPTION", "DESIGN", "DESIRE", "DESK", "DESPITE", "DESTROY", "DETAIL", "DETAILED", "DETERMINE", "DEVELOP", "DEVELOPMENT", "DEVICE", "DIE", "DIFFERENCE", "DIFFERENT", "DIFFICULT", "DIFFICULTY", "DINNER", "DIRECT", "DIRECTION", "DIRECTLY", "DIRECTOR", "DISAPPEAR", "DISCIPLINE", "DISCOVER", "DISCUSS", "DISCUSSION", "DISEASE", "DISPLAY", "DISTANCE", "DISTINCTION", "DISTRIBUTION", "DISTRICT", "DIVIDE", "DIVISION", "DO", "DOCTOR", "DOCUMENT", "DOG", "DOMESTIC", "DOOR", "DOUBLE", "DOUBT", "DOWN", "DRAW", "DRAWING", "DREAM", "DRESS", "DRINK", "DRIVE", "DRIVER", "DROP", "DRUG", "DRY", "DUE", "DURING", "DUTY", "EACH", "EAR", "EARLY", "EARN", "EARTH", "EASILY", "EAST", "EASY", "EAT", "ECONOMIC", "ECONOMY", "EDGE", "EDITOR", "EDUCATION", "EDUCATIONAL", "EFFECT", "EFFECTIVE", "EFFECTIVELY", "EFFORT", "EGG", "EITHER", "ELDERLY", "ELECTION", "ELEMENT", "ELSE", "ELSEWHERE", "EMERGE", "EMPHASIS", "EMPLOY", "EMPLOYEE", "EMPLOYER", "EMPLOYMENT", "EMPTY", "ENABLE", "ENCOURAGE", "END", "ENEMY", "ENERGY", "ENGINE", "ENGINEERING", "ENJOY", "ENOUGH", "ENSURE", "ENTER", "ENTERPRISE", "ENTIRE", "ENTIRELY", "ENTITLE", "ENTRY", "ENVIRONMENT", "ENVIRONMENTAL", "EQUAL", "EQUALLY", "EQUIPMENT", "ERROR", "ESCAPE", "ESPECIALLY", "ESSENTIAL", "ESTABLISH", "ESTABLISHMENT", "ESTATE", "ESTIMATE", "EVEN", "EVENING", "EVENT", "EVENTUALLY", "EVER", "EVERY", "EVERYBODY", "EVERYONE", "EVERYTHING", "EVIDENCE", "EXACTLY", "EXAMINATION", "EXAMINE", "EXAMPLE", "EXCELLENT", "EXCEPT", "EXCHANGE", "EXECUTIVE", "EXERCISE", "EXHIBITION", "EXIST", "EXISTENCE", "EXISTING", "EXPECT", "EXPECTATION", "EXPENDITURE", "EXPENSE", "EXPENSIVE", "EXPERIENCE", "EXPERIMENT", "EXPERT", "EXPLAIN", "EXPLANATION", "EXPLORE", "EXPRESS", "EXPRESSION", "EXTEND", "EXTENT", "EXTERNAL", "EXTRA", "EXTREMELY", "EYE", "FACE", "FACILITY", "FACT", "FACTOR", "FACTORY", "FAIL", "FAILURE", "FAIR", "FAIRLY", "FAITH", "FALL", "FAMILIAR", "FAMILY", "FAMOUS", "FAR", "FARM", "FARMER", "FASHION", "FAST", "FATHER", "FAVOUR", "FEAR", "FEATURE", "FEE", "FEEL", "FEELING", "FEMALE", "FEW", "FIELD", "FIGHT", "FIGURE", "FILE", "FILL", "FILM", "FINAL", "FINALLY", "FINANCE", "FINANCIAL", "FIND", "FINDING", "FINE", "FINGER", "FINISH", "FIRE", "FIRM", "FIRST", "FISH", "FIT", "FIX", "FLAT", "FLIGHT", "FLOOR", "FLOW", "FLOWER", "FLY", "FOCUS", "FOLLOW", "FOLLOWING", "FOOD", "FOOT", "FOOTBALL", "FOR", "FORCE", "FOREIGN", "FOREST", "FORGET", "FORM", "FORMAL", "FORMER", "FORWARD", "FOUNDATION", "FREE", "FREEDOM", "FREQUENTLY", "FRESH", "FRIEND", "FROM", "FRONT", "FRUIT", "FUEL", "FULL", "FULLY", "FUNCTION", "FUND", "FUNNY", "FURTHER", "FUTURE", "GAIN", "GAME", "GARDEN", "GAS", "GATE", "GATHER", "GENERAL", "GENERALLY", "GENERATE", "GENERATION", "GENTLEMAN", "GET", "GIRL", "GIVE", "GLASS", "GO", "GOAL", "GOD", "GOLD", "GOOD", "GOVERNMENT", "GRANT", "GREAT", "GREEN", "GREY", "GROUND", "GROUP", "GROW", "GROWING", "GROWTH", "GUEST", "GUIDE", "GUN", "HAIR", "HALF", "HALL", "HAND", "HANDLE", "HANG", "HAPPEN", "HAPPY", "HARD", "HARDLY", "HATE", "HAVE", "HE", "HEAD", "HEALTH", "HEAR", "HEART", "HEAT", "HEAVY", "HELL", "HELP", "HENCE", "HER", "HERE", "HERSELF", "HIDE", "HIGH", "HIGHLY", "HILL", "HIM", "HIMSELF", "HIS", "HISTORICAL", "HISTORY", "HIT", "HOLD", "HOLE", "HOLIDAY", "HOME", "HOPE", "HORSE", "HOSPITAL", "HOT", "HOTEL", "HOUR", "HOUSE", "HOUSEHOLD", "HOUSING", "HOW", "HOWEVER", "HUGE", "HUMAN", "HURT", "HUSBAND", "I", "IDEA", "IDENTIFY", "IF", "IGNORE", "ILLUSTRATE", "IMAGE", "IMAGINE", "IMMEDIATE", "IMMEDIATELY", "IMPACT", "IMPLICATION", "IMPLY", "IMPORTANCE", "IMPORTANT", "IMPOSE", "IMPOSSIBLE", "IMPRESSION", "IMPROVE", "IMPROVEMENT", "IN", "INCIDENT", "INCLUDE", "INCLUDING", "INCOME", "INCREASE", "INCREASED", "INCREASINGLY", "INDEED", "INDEPENDENT", "INDEX", "INDICATE", "INDIVIDUAL", "INDUSTRIAL", "INDUSTRY", "INFLUENCE", "INFORM", "INFORMATION", "INITIAL", "INITIATIVE", "INJURY", "INSIDE", "INSIST", "INSTANCE", "INSTEAD", "INSTITUTE", "INSTITUTION", "INSTRUCTION", "INSTRUMENT", "INSURANCE", "INTEND", "INTENTION", "INTEREST", "INTERESTED", "INTERESTING", "INTERNAL", "INTERNATIONAL", "INTERPRETATION", "INTERVIEW", "INTO", "INTRODUCE", "INTRODUCTION", "INVESTIGATE", "INVESTIGATION", "INVESTMENT", "INVITE", "INVOLVE", "IRON", "IS", "ISLAND", "ISSUE", "IT", "ITEM", "ITS", "ITSELF", "JOB", "JOIN", "JOINT", "JOURNEY", "JUDGE", "JUMP", "JUST", "JUSTICE", "KEEP", "KEY", "KID", "KILL", "KIND", "KING", "KITCHEN", "KNEE", "KNOW", "KNOWLEDGE", "LABOUR", "LACK", "LADY", "LAND", "LANGUAGE", "LARGE", "LARGELY", "LAST", "LATE", "LATER", "LATTER", "LAUGH", "LAUNCH", "LAW", "LAWYER", "LAY", "LEAD", "LEADER", "LEADERSHIP", "LEADING", "LEAF", "LEAGUE", "LEAN", "LEARN", "LEAST", "LEAVE", "LEFT", "LEG", "LEGAL", "LEGISLATION", "LENGTH", "LESS", "LET", "LETTER", "LEVEL", "LIABILITY", "LIBERAL", "LIBRARY", "LIE", "LIFE", "LIFT", "LIGHT", "LIKE", "LIKELY", "LIMIT", "LIMITED", "LINE", "LINK", "LIP", "LIST", "LISTEN", "LITERATURE", "LITTLE", "LIVE", "LIVING", "LOAN", "LOCAL", "LOCATION", "LONG", "LOOK", "LORD", "LOSE", "LOSS", "LOT", "LOVE", "LOVELY", "LOW", "LUNCH", "MACHINE", "MAGAZINE", "MAIN", "MAINLY", "MAINTAIN", "MAJOR", "MAJORITY", "MAKE", "MALE", "MAN", "MANAGE", "MANAGEMENT", "MANAGER", "MANNER", "MANY", "MAP", "MARK", "MARKET", "MARRIAGE", "MARRIED", "MARRY", "MASS", "MASTER", "MATCH", "MATERIAL", "MATTER", "MAY", "MAYBE", "ME", "MEAL", "MEAN", "MEANING", "MEANS", "MEANWHILE", "MEASURE", "MECHANISM", "MEDIA", "MEDICAL", "MEET", "MEETING", "MEMBER", "MEMBERSHIP", "MEMORY", "MENTAL", "MENTION", "MERELY", "MESSAGE", "METAL", "METHOD", "MIDDLE", "MIGHT", "MILE", "MILITARY", "MILK", "MIND", "MINE", "MINISTER", "MINISTRY", "MINUTE", "MISS", "MISTAKE", "MODEL", "MODERN", "MODULE", "MOMENT", "MONEY", "MONTH", "MORE", "MORNING", "MOST", "MOTHER", "MOTION", "MOTOR", "MOUNTAIN", "MOUTH", "MOVE", "MOVEMENT", "MUCH", "MURDER", "MUSEUM", "MUSIC", "MUST", "MY", "MYSELF", "NAME", "NARROW", "NATION", "NATIONAL", "NATURAL", "NATURE", "NEAR", "NEARLY", "NECESSARILY", "NECESSARY", "NECK", "NEED", "NEGOTIATION", "NEIGHBOUR", "NEITHER", "NETWORK", "NEVER", "NEVERTHELESS", "NEW", "NEWS", "NEWSPAPER", "NEXT", "NICE", "NIGHT", "NO", "NOBODY", "NOD", "NOISE", "NONE", "NOR", "NORMAL", "NORMALLY", "NORTH", "NORTHERN", "NOSE", "NOT", "NOTE", "NOTHING", "NOTICE", "NOTION", "NOW", "NUCLEAR", "NUMBER", "NURSE", "OBJECT", "OBJECTIVE", "OBSERVATION", "OBSERVE", "OBTAIN", "OBVIOUS", "OBVIOUSLY", "OCCASION", "OCCUR", "ODD", "OF", "OFF", "OFFENCE", "OFFER", "OFFICE", "OFFICER", "OFFICIAL", "OFTEN", "OIL", "OKAY", "OLD", "ON", "ONCE", "ONE", "ONLY", "ONTO", "OPEN", "OPERATE", "OPERATION", "OPINION", "OPPORTUNITY", "OPPOSITION", "OPTION", "OR", "ORDER", "ORDINARY", "ORGANISATION", "ORGANISE", "ORGANIZATION", "ORIGIN", "ORIGINAL", "OTHER", "OTHERWISE", "OUGHT", "OUR", "OURSELVES", "OUT", "OUTCOME", "OUTPUT", "OUTSIDE", "OVER", "OVERALL", "OWN", "OWNER", "PACKAGE", "PAGE", "PAIN", "PAINT", "PAINTING", "PAIR", "PANEL", "PAPER", "PARENT", "PARK", "PARLIAMENT", "PART", "PARTICULAR", "PARTICULARLY", "PARTLY", "PARTNER", "PARTY", "PASS", "PASSAGE", "PAST", "PATH", "PATIENT", "PATTERN", "PAY", "PAYMENT", "PEACE", "PENSION", "PEOPLE", "PER", "PERCENT", "PERFECT", "PERFORM", "PERFORMANCE", "PERHAPS", "PERIOD", "PERMANENT", "PERSON", "PERSONAL", "PERSUADE", "PHASE", "PHONE", "PHOTOGRAPH", "PHYSICAL", "PICK", "PICTURE", "PIECE", "PLACE", "PLAN", "PLANNING", "PLANT", "PLASTIC", "PLATE", "PLAY", "PLAYER", "PLEASE", "PLEASURE", "PLENTY", "PLUS", "POCKET", "POINT", "POLICE", "POLICY", "POLITICAL", "POLITICS", "POOL", "POOR", "POPULAR", "POPULATION", "POSITION", "POSITIVE", "POSSIBILITY", "POSSIBLE", "POSSIBLY", "POST", "POTENTIAL", "POUND", "POWER", "POWERFUL", "PRACTICAL", "PRACTICE", "PREFER", "PREPARE", "PRESENCE", "PRESENT", "PRESIDENT", "PRESS", "PRESSURE", "PRETTY", "PREVENT", "PREVIOUS", "PREVIOUSLY", "PRICE", "PRIMARY", "PRIME", "PRINCIPLE", "PRIORITY", "PRISON", "PRISONER", "PRIVATE", "PROBABLY", "PROBLEM", "PROCEDURE", "PROCESS", "PRODUCE", "PRODUCT", "PRODUCTION", "PROFESSIONAL", "PROFIT", "PROGRAM", "PROGRAMME", "PROGRESS", "PROJECT", "PROMISE", "PROMOTE", "PROPER", "PROPERLY", "PROPERTY", "PROPORTION", "PROPOSE", "PROPOSAL", "PROSPECT", "PROTECT", "PROTECTION", "PROVE", "PROVIDE", "PROVIDED", "PROVISION", "PUB", "PUBLIC", "PUBLICATION", "PUBLISH", "PULL", "PUPIL", "PURPOSE", "PUSH", "PUT", "QUALITY", "QUARTER", "QUESTION", "QUICK", "QUICKLY", "QUIET", "QUITE", "RACE", "RADIO", "RAILWAY", "RAIN", "RAISE", "RANGE", "RAPIDLY", "RARE", "RATE", "RATHER", "REACH", "REACTION", "READ", "READER", "READING", "READY", "REAL", "REALISE", "REALITY", "REALIZE", "REALLY", "REASON", "REASONABLE", "RECALL", "RECEIVE", "RECENT", "RECENTLY", "RECOGNISE", "RECOGNITION", "RECOGNIZE", "RECOMMEND", "RECORD", "RECOVER", "RED", "REDUCE", "REDUCTION", "REFER", "REFERENCE", "REFLECT", "REFORM", "REFUSE", "REGARD", "REGION", "REGIONAL", "REGULAR", "REGULATION", "REJECT", "RELATE", "RELATION", "RELATIONSHIP", "RELATIVE", "RELATIVELY", "RELEASE", "RELEVANT", "RELIEF", "RELIGION", "RELIGIOUS", "RELY", "REMAIN", "REMEMBER", "REMIND", "REMOVE", "REPEAT", "REPLACE", "REPLY", "REPORT", "REPRESENT", "REPRESENTATION", "REPRESENTATIVE", "REQUEST", "REQUIRE", "REQUIREMENT", "RESEARCH", "RESOURCE", "RESPECT", "RESPOND", "RESPONSE", "RESPONSIBILITY", "RESPONSIBLE", "REST", "RESTAURANT", "RESULT", "RETAIN", "RETURN", "REVEAL", "REVENUE", "REVIEW", "REVOLUTION", "RICH", "RIDE", "RIGHT", "RING", "RISE", "RISK", "RIVER", "ROAD", "ROCK", "ROLE", "ROLL", "ROOF", "ROOM", "ROUND", "ROUTE", "ROW", "ROYAL", "RULE", "RUN", "RURAL", "SAFE", "SAFETY", "SALE", "SAME", "SAMPLE", "SATISFY", "SAVE", "SAY", "SCALE", "SCENE", "SCHEME", "SCHOOL", "SCIENCE", "SCIENTIFIC", "SCIENTIST", "SCORE", "SCREEN", "SEA", "SEARCH", "SEASON", "SEAT", "SECOND", "SECONDARY", "SECRETARY", "SECTION", "SECTOR", "SECURE", "SECURITY", "SEE", "SEEK", "SEEM", "SELECT", "SELECTION", "SELL", "SEND", "SENIOR", "SENSE", "SENTENCE", "SEPARATE", "SEQUENCE", "SERIES", "SERIOUS", "SERIOUSLY", "SERVANT", "SERVE", "SERVICE", "SESSION", "SET", "SETTLE", "SETTLEMENT", "SEVERAL", "SEVERE", "SEX", "SEXUAL", "SHAKE", "SHALL", "SHAPE", "SHARE", "SHE", "SHEET", "SHIP", "SHOE", "SHOOT", "SHOP", "SHORT", "SHOT", "SHOULD", "SHOULDER", "SHOUT", "SHOW", "SHUT", "SIDE", "SIGHT", "SIGN", "SIGNAL", "SIGNIFICANCE", "SIGNIFICANT", "SILENCE", "SIMILAR", "SIMPLE", "SIMPLY", "SINCE", "SING", "SINGLE", "SIR", "SISTER", "SIT", "SITE", "SITUATION", "SIZE", "SKILL", "SKIN", "SKY", "SLEEP", "SLIGHTLY", "SLIP", "SLOW", "SLOWLY", "SMALL", "SMILE", "SO", "SOCIAL", "SOCIETY", "SOFT", "SOFTWARE", "SOIL", "SOLDIER", "SOLICITOR", "SOLUTION", "SOME", "SOMEBODY", "SOMEONE", "SOMETHING", "SOMETIMES", "SOMEWHAT", "SOMEWHERE", "SON", "SONG", "SOON", "SORRY", "SORT", "SOUND", "SOURCE", "SOUTH", "SOUTHERN", "SPACE", "SPEAK", "SPEAKER", "SPECIAL", "SPECIES", "SPECIFIC", "SPEECH", "SPEED", "SPEND", "SPIRIT", "SPORT", "SPOT", "SPREAD", "SPRING", "STAFF", "STAGE", "STAND", "STANDARD", "STAR", "START", "STATE", "STATEMENT", "STATION", "STATUS", "STAY", "STEAL", "STEP", "STICK", "STILL", "STOCK", "STONE", "STOP", "STORE", "STORY", "STRAIGHT", "STRANGE", "STRATEGY", "STREET", "STRENGTH", "STRIKE", "STRONG", "STRONGLY", "STRUCTURE", "STUDENT", "STUDIO", "STUDY", "STUFF", "STYLE", "SUBJECT", "SUBSTANTIAL", "SUCCEED", "SUCCESS", "SUCCESSFUL", "SUCH", "SUDDENLY", "SUFFER", "SUFFICIENT", "SUGGEST", "SUGGESTION", "SUITABLE", "SUM", "SUMMER", "SUN", "SUPPLY", "SUPPORT", "SUPPOSE", "SURE", "SURELY", "SURFACE", "SURPRISE", "SURROUND", "SURVEY", "SURVIVE", "SWITCH", "SYSTEM", "TABLE", "TAKE", "TALK", "TALL", "TAPE", "TARGET", "TASK", "TAX", "TEA", "TEACH", "TEACHER", "TEACHING", "TEAM", "TEAR", "TECHNICAL", "TECHNIQUE", "TECHNOLOGY", "TELEPHONE", "TELEVISION", "TELL", "TEMPERATURE", "TEND", "TERM", "TERMS", "TERRIBLE", "TEST", "TEXT", "THAN", "THANK", "THANKS", "THAT", "THE", "THEATRE", "THEIR", "THEM", "THEME", "THEMSELVES", "THEN", "THEORY", "THERE", "THEREFORE", "THESE", "THEY", "THIN", "THING", "THINK", "THIS", "THOSE", "THOUGH", "THOUGHT", "THREAT", "THREATEN", "THROUGH", "THROUGHOUT", "THROW", "THUS", "TICKET", "TIME", "TINY", "TITLE", "TO", "TODAY", "TOGETHER", "TOMORROW", "TONE", "TONIGHT", "TOO", "TOOL", "TOOTH", "TOP", "TOTAL", "TOTALLY", "TOUCH", "TOUR", "TOWARDS", "TOWN", "TRACK", "TRADE", "TRADITION", "TRADITIONAL", "TRAFFIC", "TRAIN", "TRAINING", "TRANSFER", "TRANSPORT", "TRAVEL", "TREAT", "TREATMENT", "TREATY", "TREE", "TREND", "TRIAL", "TRIP", "TROOP", "TROUBLE", "TRUE", "TRUST", "TRUTH", "TRY", "TURN", "TWICE", "TYPE", "TYPICAL", "UNABLE", "UNDER", "UNDERSTAND", "UNDERSTANDING", "UNDERTAKE", "UNEMPLOYMENT", "UNFORTUNATELY", "UNION", "UNIT", "UNITED", "UNIVERSITY", "UNLESS", "UNLIKELY", "UNTIL", "UP", "UPON", "UPPER", "URBAN", "US", "USE", "USED", "USEFUL", "USER", "USUAL", "USUALLY", "VALUE", "VARIATION", "VARIETY", "VARIOUS", "VARY", "VAST", "VEHICLE", "VERSION", "VERY", "VIA", "VICTIM", "VICTORY", "VIDEO", "VIEW", "VILLAGE", "VIOLENCE", "VISION", "VISIT", "VISITOR", "VITAL", "VOICE", "VOLUME", "VOTE", "WAGE", "WAIT", "WALK", "WALL", "WANT", "WAR", "WARM", "WARN", "WASH", "WATCH", "WATER", "WAVE", "WAY", "WE", "WEAK", "WEAPON", "WEAR", "WEATHER", "WEEK", "WEEKEND", "WEIGHT", "WELCOME", "WELFARE", "WELL", "WEST", "WESTERN", "WHAT", "WHATEVER", "WHEN", "WHERE", "WHEREAS", "WHETHER", "WHICH", "WHILE", "WHILST", "WHITE", "WHO", "WHOLE", "WHOM", "WHOSE", "WHY", "WIDE", "WIDELY", "WIFE", "WILD", "WILL", "WIN", "WIND", "WINDOW", "WINE", "WING", "WINNER", "WINTER", "WISH", "WITH", "WITHDRAW", "WITHIN", "WITHOUT", "WOMAN", "WONDER", "WONDERFUL", "WOOD", "WORD", "WORK", "WORKER", "WORKING", "WORKS", "WORLD", "WORRY", "WORTH", "WOULD", "WRITE", "WRITER", "WRITING", "WRONG", "YARD", "YEAH", "YEAR", "YES", "YESTERDAY", "YET", "YOU", "YOUNG", "YOUR", "YOURSELF", "YOUTH"};
-
-	public static void main(String[] args) {
-		System.out.println(new p042().run());
-	}
-
-	@Contract(pure = true)
-	private static boolean isTriangularNumber(int x) {
-		for (int i = 1; ; i++) {
-			int t = (i * (i + 1)) >> 1;
-			if (t == x) return true;
-			if (t > x) return false;
-		}
-	}
-
-	private static int wordValue(@NotNull String s) {
-		int sum = 0;
-		for (int i = 0; i < s.length(); i++) {
-			char c = s.charAt(i);
-			assert c >= 'A' && c <= 'Z';
-			sum += (c - 'A') + 1;
-		}
-		return sum;
-	}
-
-	@NotNull String run() {
-		int count = (int) stream(WORDS).filter(word -> isTriangularNumber(wordValue(word))).count();
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p020.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p020.java b/Random_Work/src/projectEuler/programs/p020.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p020.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,23 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static java.lang.System.out;
-import static projectEuler.programs.Library.factorial;
-
-public final class p020 extends EulerSolution {
-	public static void main(String[] args) {
-		out.println(new p020().run());
-	}
-
-	/*
-	 * We do a straightforward product with help from Java's BigInteger type.
-	 */
-	@NotNull String run() {
-		String temp = factorial(100).toString();
-		int sum = IntStream.range(0, temp.length()).map(i -> temp.charAt(i) - '0').sum();
-		return Integer.toString(sum);
-	}
-}
Index: Random_Work/src/projectEuler/programs/p067.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p067.java b/Random_Work/src/projectEuler/programs/p067.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p067.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Math.max;
-
-public final class p067 extends EulerSolution {
-	// Mutable
-	private final int[][] triangle = {{59}, {73, 41}, {52, 40, 9}, {26, 53, 6, 34}, {10, 51, 87, 86, 81}, {61, 95, 66, 57, 25, 68}, {90, 81, 80, 38, 92, 67, 73}, {30, 28, 51, 76, 81, 18, 75, 44}, {84, 14, 95, 87, 62, 81, 17, 78, 58}, {21, 46, 71, 58, 2, 79, 62, 39, 31, 9}, {56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15}, {78, 53, 4, 21, 84, 93, 32, 13, 97, 11, 37, 51}, {45, 3, 81, 79, 5, 18, 78, 86, 13, 30, 63, 99, 95}, {39, 87, 96, 28, 3, 38, 42, 17, 82, 87, 58, 7, 22, 57}, {6, 17, 51, 17, 7, 93, 9, 7, 75, 97, 95, 78, 87, 8, 53}, {67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28}, {76, 40, 41, 4, 87, 16, 9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87}, {12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35}, {70, 39, 6, 5, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86}, {66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 5, 98, 3, 2, 60}, {38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 2, 90, 45, 13, 31, 61, 83, 73, 47}, {36, 10, 63, 96, 60, 49, 41, 5, 37, 42, 14, 58, 84, 93, 96, 17, 9, 43, 5, 43, 6, 59}, {66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18}, {54, 42, 5, 79, 30, 49, 99, 73, 46, 37, 50, 2, 45, 9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45}, {71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 9, 2}, {33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 7, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 5}, {92, 9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 5, 57, 7, 54, 69, 21, 67, 43, 17, 63, 12}, {24, 59, 6, 8, 98, 74, 66, 26, 61, 60, 13, 3, 9, 9, 24, 30, 71, 8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34}, {66, 82, 67, 4, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 4, 53, 22, 83, 41, 9, 74, 90}, {48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 8, 19, 54, 89, 29, 73, 68, 42, 14, 8, 16, 70, 37}, {37, 60, 69, 70, 72, 71, 9, 59, 13, 60, 38, 13, 57, 36, 9, 30, 43, 89, 30, 39, 15, 2, 44, 73, 5, 73, 26, 63, 56, 86, 12}, {55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 3, 21, 27, 22, 19, 26, 82, 69, 54, 4, 13, 7, 85, 14, 1, 15, 70, 59, 89, 95, 10, 19}, {4, 9, 31, 92, 91, 38, 92, 86, 98, 75, 21, 5, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 3, 43, 22}, {75, 63, 2, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 8, 65, 78, 3, 85, 41, 57, 79, 39, 52, 33, 48}, {78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 7, 4, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93}, {42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 5, 94, 7, 69, 51, 96, 3, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 4, 53, 85, 92, 25, 65}, {52, 9, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 6, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 3, 3, 19, 11, 28, 42, 75, 45, 45}, {61, 31, 61, 68, 96, 34, 49, 39, 5, 71, 76, 59, 62, 67, 6, 47, 96, 99, 34, 21, 32, 47, 52, 7, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46}, {1, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63}, {93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 1, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 2, 62, 2, 65, 94, 42, 14, 94}, {32, 73, 9, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 6, 2, 83, 50, 60, 66}, {32, 1, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 6, 69, 84, 14, 22, 56, 43, 9, 48, 66, 69, 83, 91, 60, 40, 36, 61}, {92, 48, 22, 99, 15, 95, 64, 43, 1, 16, 94, 2, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 8, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 9}, {91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 6, 1, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 7, 42, 38, 42, 74, 83, 2, 5}, {46, 19, 77, 66, 24, 18, 5, 32, 2, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 2, 7, 3, 76, 86}, {99, 98, 84, 93, 7, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 5, 37, 29, 24, 96, 3, 27, 70, 62, 13, 4, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 4, 71, 66, 78, 70, 53, 99}, {67, 60, 38, 6, 88, 4, 17, 72, 10, 99, 71, 7, 42, 25, 54, 5, 26, 64, 91, 50, 45, 71, 6, 30, 67, 48, 69, 82, 8, 56, 80, 67, 18, 46, 66, 63, 1, 20, 8, 80, 47, 7, 91, 16, 3, 79, 87}, {18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 2, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 2, 5, 49, 3, 50, 77, 6, 32, 84, 27, 18, 38}, {68, 1, 50, 4, 3, 21, 42, 94, 53, 24, 89, 5, 92, 26, 52, 36, 68, 11, 85, 1, 4, 42, 2, 45, 15, 6, 50, 4, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 4, 40, 46, 2, 58, 87}, {94, 10, 2, 78, 88, 52, 21, 3, 88, 60, 6, 53, 49, 71, 20, 91, 12, 65, 7, 49, 21, 22, 11, 41, 58, 99, 36, 16, 9, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 2, 99, 43, 76, 81, 71, 29, 39, 49, 17}, {64, 39, 59, 84, 86, 16, 17, 66, 3, 9, 43, 6, 64, 18, 63, 29, 68, 6, 23, 7, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 5, 54, 41, 39, 66}, {43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 8, 76, 35, 11, 4, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 7, 31, 38, 26, 8, 15, 56, 88, 86, 1, 52, 62, 10, 24, 32, 5, 60, 65, 53, 28, 57, 99}, {3, 50, 3, 52, 7, 73, 49, 92, 66, 80, 1, 46, 8, 67, 25, 36, 73, 93, 7, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 9, 79, 94, 83, 53, 9, 40, 69, 62, 10, 79, 49, 47, 3, 81, 30}, {71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 3, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 9, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 9, 69, 20, 36}, {73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 7, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 2, 56, 47, 7, 49, 2}, {76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16}, {3, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 4, 13, 82, 4, 91, 43, 40, 12, 52, 29, 99, 7, 76, 60, 25, 1, 7, 61, 71, 37, 92, 40, 47, 99, 66, 57, 1, 43, 44, 22, 40, 53, 53, 9, 69, 26, 81, 7}, {49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 4, 79, 96, 3, 31, 45, 71, 81, 6, 14, 18, 17, 5, 31, 50, 92, 79, 23, 47, 9, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85}, {37, 18, 62, 85, 87, 28, 64, 5, 77, 51, 47, 26, 30, 65, 5, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 1, 30, 63, 15, 49, 48, 41, 17, 67, 47, 3, 68, 20, 90, 98, 32, 4, 40, 68}, {90, 51, 58, 60, 6, 55, 23, 68, 5, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 5, 17, 70, 83, 96, 93, 6, 4, 78, 47, 80, 6, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38}, {57, 95, 64, 6, 53, 36, 82, 51, 40, 33, 47, 14, 7, 98, 78, 65, 39, 58, 53, 6, 50, 53, 4, 69, 40, 68, 36, 69, 75, 78, 75, 60, 3, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11}, {18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 2, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83}, {81, 72, 93, 19, 69, 52, 48, 1, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 5, 42, 28, 89, 90, 99, 32, 72, 84, 17, 8, 87, 36, 3, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 8, 23, 11, 87, 99, 33, 47, 2, 14, 44, 73, 70, 99, 43, 35, 33}, {90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 1, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 4, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 3, 84, 23, 44, 89, 72, 35, 8, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 4, 71, 32, 95}, {37, 13, 4, 22, 64, 37, 37, 28, 56, 62, 86, 33, 7, 37, 10, 44, 52, 82, 52, 6, 19, 52, 57, 75, 90, 26, 91, 24, 6, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 3, 64, 56, 97, 87, 63, 22, 34, 3, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47}, {77, 23, 26, 70, 72, 76, 77, 4, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 6, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 1, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 5, 45, 73, 82, 47, 74, 44}, {22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 3, 24, 59, 27, 98, 77, 4, 9, 37, 40, 12, 26, 87, 9, 71, 70, 7, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 7, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69}, {72, 23, 63, 66, 1, 11, 7, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 1, 88, 66, 99, 21, 41, 95, 80, 2, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88}, {8, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 5, 16, 23, 27, 10, 67, 2, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 9, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 3, 60, 94, 42, 47, 9, 34, 94, 93, 72}, {56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 6, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 8, 22, 97, 32, 85, 27}, {91, 53, 40, 28, 13, 34, 91, 25, 1, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 8, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 7, 46, 94, 22, 20, 5, 53, 64, 56, 30, 5, 56, 61, 88, 27}, {23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 7, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 2, 22, 5, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 9, 3, 40, 38, 12, 3, 32}, {9, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 5, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 7, 79, 9, 19, 56, 36, 42, 30, 23, 69, 73, 72, 7, 5, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 8, 52, 23, 70}, {47, 81, 28, 9, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 7, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 8, 9, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 8, 73, 34, 99, 6, 49, 24, 6, 83, 51, 40, 14, 15, 10, 25, 1}, {54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 3, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 5, 9, 97, 70, 1, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 8, 97, 1, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 8, 32, 46, 34}, {96, 80, 82, 7, 59, 71, 92, 53, 19, 20, 88, 66, 3, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 8, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 6, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 2, 1, 22, 52, 47, 96, 64, 58, 52, 39}, {88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 9, 2, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 5, 96, 75, 95, 4, 43, 28, 81, 39, 81, 1, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51}, {29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 6, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 8, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 1, 57, 80, 23, 81, 90, 79, 58, 1, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69}, {37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 4, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 3, 48, 5, 98, 91, 86, 94, 35, 90, 90, 8, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 7, 9, 49, 34, 31, 77, 49, 43, 6, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 7, 98, 86, 1, 17, 10, 46, 64, 24, 18, 56}, {51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 5, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 5, 56, 5, 98, 73, 67, 46, 74, 69, 34, 8, 30, 5, 52, 7, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57}, {19, 23, 61, 36, 9, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 5, 99, 66, 81, 86, 38, 26, 6, 25, 13, 60, 54, 55, 23, 53, 27, 5, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 6}, {13, 40, 57, 72, 21, 15, 60, 8, 4, 19, 11, 98, 34, 45, 9, 97, 86, 71, 3, 15, 56, 19, 15, 44, 97, 31, 90, 4, 87, 87, 76, 8, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 6, 65, 97, 86, 9, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 7, 78, 27, 80, 36, 69, 41, 6, 92, 32, 78, 37, 82, 30, 5, 18, 87, 99, 72, 19, 99}, {44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 2, 7, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 7, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 8, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 2, 52, 99, 51, 33, 26, 4, 87, 2, 8, 18, 96}, {54, 42, 61, 45, 91, 6, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 4, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 3, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 8, 92, 84, 42, 61, 40, 38, 9, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39}, {52, 92, 3, 71, 89, 7, 9, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 2, 6, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 9, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 2, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 9, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59}, {54, 96, 80, 15, 91, 90, 99, 70, 10, 9, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 3, 1, 33, 27, 61, 28, 66, 8, 4, 70, 49, 46, 48, 83, 1, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 5}, {92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 5, 79, 16, 93, 97, 89, 38, 89, 42, 83, 2, 88, 94, 95, 82, 21, 1, 97, 48, 39, 31, 78, 9, 65, 50, 56, 97, 61, 1, 7, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 5, 31, 57, 9, 38, 94, 7, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35}, {41, 63, 89, 76, 87, 31, 86, 9, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 9, 37, 76, 5, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 6, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 6, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72}, {63, 40, 78, 8, 52, 9, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 5, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 4, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92}, {12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 1, 18, 56, 12, 1, 58, 37, 91, 22, 42, 66, 83, 25, 19, 4, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 4, 72, 91, 4, 27, 73, 7, 34, 37, 71, 60, 59, 31, 1, 54, 54, 44, 96, 93, 83, 36, 4, 45}, {30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 2, 99, 34, 67, 99, 76, 16, 14, 15, 93, 8, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 5, 93, 48, 17, 31, 70, 80, 59, 9, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23}, {51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 2, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 4, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 5, 31, 17, 86, 42, 49, 1, 44, 63, 28, 60, 7, 78, 95, 40}, {44, 61, 89, 59, 4, 49, 51, 27, 69, 71, 46, 76, 44, 4, 9, 34, 56, 39, 15, 6, 94, 91, 75, 90, 65, 27, 56, 23, 74, 6, 23, 33, 36, 69, 14, 39, 5, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 9, 16, 69, 4, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 7, 11, 62, 66, 47, 22, 67}, {65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 4, 4, 67, 99, 81, 74, 70, 74, 36, 96, 68, 9, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 6, 35, 78, 20, 71, 6, 85, 66, 57, 2, 58, 91, 72, 5, 29, 56, 73, 48, 86, 52, 9, 93, 22, 57, 79, 42, 12, 1, 31, 68, 17, 59, 63, 76, 7, 77}, {73, 81, 14, 13, 17, 20, 11, 9, 1, 83, 8, 85, 91, 70, 84, 63, 62, 77, 37, 7, 47, 1, 59, 95, 39, 69, 39, 21, 99, 9, 87, 2, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 5, 26, 26, 48, 61, 50, 90, 65, 1, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 5, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 8, 44, 2, 71, 7, 63, 22, 5, 52, 19, 8, 20}, {17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 3, 13, 91, 65, 85, 2, 40, 5, 42, 31, 77, 42, 5, 36, 6, 54, 4, 58, 7, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 3, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 5, 33, 36, 79, 39}, {60, 85, 59, 39, 60, 7, 57, 76, 77, 92, 6, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 3, 99, 28, 83, 15, 75, 99, 1, 89, 85, 79, 50, 3, 95, 32, 67, 44, 8, 7, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 1, 48, 74, 12, 98, 7}, {64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 4, 79, 51, 8, 19, 60, 52, 95, 6, 68, 46, 86, 35, 97, 27, 58, 4, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 4, 46, 7, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15}, {30, 11, 85, 31, 34, 71, 13, 48, 5, 14, 44, 3, 19, 67, 23, 73, 19, 57, 6, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 7, 87, 97, 80, 89, 5, 71, 5, 5, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 4, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 8, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68}, {23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 3, 28, 94, 32, 6, 49, 65, 41, 34, 18, 23, 8, 47, 62, 60, 3, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 3, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 7, 25, 70, 7, 77, 43, 53, 64, 3, 94, 42, 95, 39, 18, 1, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 6, 25, 61, 41, 26, 15, 59, 63, 35}};
-
-	/*
-	 * We create a new blank triangle with the same dimensions as the original big triangle.
-	 * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,
-	 * calculate the maximum path sum when starting from this cell, and store the result
-	 * in the corresponding cell of the blank triangle.
-	 *
-	 * If we start at a particular cell, what is the maximum path total? If the cell is at the
-	 * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is
-	 * the cell's value plus either {the maximum path total of the cell down and to the left}
-	 * or {the maximum path total of the cell down and to the right}, whichever is greater.
-	 * By computing the blank triangle's values from bottom up, the dependent values are always
-	 * computed before they are utilized. This technique is known as dynamic programming.
-	 */
-
-	public static void main(String[] args) {
-		System.out.println(new p067().run());
-	}
-
-	@NotNull String run() {
-		for (int i = triangle.length - 2; i >= 0; i--)
-			for (int j = 0; j < triangle[i].length; j++)
-				triangle[i][j] += max(triangle[i + 1][j], triangle[i + 1][j + 1]);
-		return Integer.toString(triangle[0][0]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p006.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p006.java b/Random_Work/src/projectEuler/programs/p006.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p006.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,33 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-
-public final class p006 extends EulerSolution {
-	/*
-	 * Computers are fast, so we can implement this solution directly without any clever math.
-	 * Note that sum^2 is bounded above by (100*100)^2 and sum2 is
-	 * bounded above by 100*(100^2), both of which fit in a Java int type.
-	 *
-	 * However for the mathematically inclined, there are closed-form formulas:
-	 * sum = N(N + 1) / 2.
-	 * sum2 = N(N + 1)(2N + 1) / 6.
-	 * Hence sum^2 - sum2 = (N^4 / 4) + (N^3 / 6) - (N^2 / 4) - (N / 6).
-	 */
-	private static final int N = 100;
-
-	public static void main(String[] args) {
-		out.println(new p006().run());
-	}
-
-	@NotNull String run() {
-		int sum = 0;
-		int sum2 = 0;
-		for (int i = 1; i <= N; i++) {
-			sum += i;
-			sum2 += i * i;
-		}
-		return Integer.toString(sum * sum - sum2);
-	}
-}
\ No newline at end of file
Index: .idea/jsLibraryMappings.xml
===================================================================
diff --git a/.idea/jsLibraryMappings.xml b/.idea/jsLibraryMappings.xml
deleted file mode 100644
--- a/.idea/jsLibraryMappings.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-	<component name="JavaScriptLibraryMappings">
-		<file url="file://$PROJECT_DIR$" libraries="{Node.js Core}"/>
-	</component>
-</project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p014.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p014.java b/Random_Work/src/projectEuler/programs/p014.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p014.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,56 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.ONE;
-import static java.math.BigInteger.valueOf;
-import static projectEuler.programs.Library.pow;
-
-public final class p014 extends EulerSolution {
-	/*
-	 * We compute the Collatz chain length for every integer in the range according to the iteration rule.
-	 * Also, we cache the Collatz value for small integer arguments to speed up the computation.
-	 */
-	private static final int LIMIT = pow(10, 6);
-	// Can be set to any non-negative number, but there are diminishing returns as you go larger
-	private static final BigInteger CACHE_SIZE = valueOf(LIMIT);
-	// Memoization
-	private final int[] collatzChainLength = new int[CACHE_SIZE.intValue()];
-
-	public static void main(String[] args) {
-		System.out.println(new p014().run());
-	}
-
-	@NotNull String run() {
-		int maxArg = -1;
-		int maxChain = 0;
-		for (int i = 1; i < LIMIT; i++) {
-			int chainLen = collatzChainLength(valueOf(i));
-			if (chainLen > maxChain) {
-				maxArg = i;
-				maxChain = chainLen;
-			}
-		}
-		return Integer.toString(maxArg);
-	}
-
-	// Returns the Collatz chain length of the given integer with automatic caching.
-	private int collatzChainLength(@NotNull BigInteger n) {
-		assert n.signum() >= 0;
-		if (n.compareTo(CACHE_SIZE) >= 0) return collatzChainLengthDirect(n); // Caching not available
-		int index = n.intValue(); // Index in the cache
-		if (collatzChainLength[index] == 0) collatzChainLength[index] = collatzChainLengthDirect(n);
-		return collatzChainLength[index];
-	}
-
-	// Returns the Collatz chain length of the given integer, with the
-	// first step uncached but the remaining steps using automatic caching.
-	private int collatzChainLengthDirect(@NotNull BigInteger n) {
-		// Else n is odd
-		if (n.equals(ONE)) return 1; // Base case
-		else
-			return collatzChainLength(!n.testBit(0) ? n.shiftRight(1) : n.multiply(valueOf(3)).add(ONE)) + 1; // If n is even
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-noframe.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-noframe.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-noframe.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/allclasses-noframe.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,54 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		All Classes
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-<span CLASS="FrameHeadingFont" style="font-size: larger; ">
-	<B>All Classes</B></span>
-<BR>
-
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameItemFont"><A HREF="info/gridworld/grid/AbstractGrid.html"
-		                                          title="class in info.gridworld.grid">AbstractGrid</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>
-			<BR>
-			<A HREF="info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor">ActorWorld</A>
-			<BR>
-			<A HREF="info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid">BoundedGrid</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Bug.html" title="class in info.gridworld.actor">Bug</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Critter.html" title="class in info.gridworld.actor">Critter</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Flower.html" title="class in info.gridworld.actor">Flower</A>
-			<BR>
-			<A HREF="info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><I>Grid</I></A>
-			<BR>
-			<A HREF="info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>
-			<BR>
-			<A HREF="info/gridworld/actor/Rock.html" title="class in info.gridworld.actor">Rock</A>
-			<BR>
-			<A HREF="info/gridworld/grid/UnboundedGrid.html" title="class in info.gridworld.grid">UnboundedGrid</A>
-			<BR>
-			<A HREF="info/gridworld/world/World.html" title="class in info.gridworld.world">World</A>
-			<BR>
-		</span></TD>
-	</TR>
-</TABLE>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/index.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/index.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/index.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/index.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,44 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Frameset//EN" "http://www.w3.org/TR/html4/frameset.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc on Mon Apr 16 06:49:13 PST 2007-->
-	<TITLE>
-		Generated Documentation (Untitled)
-	</TITLE>
-	<SCRIPT type="text/javascript">
-        targetPage = "" + window.location.search;
-        if (targetPage !== "" && targetPage !== "undefined") targetPage = targetPage.substring(1);
-        if (targetPage.indexOf(":") !== -1) targetPage = "undefined";
-
-        function loadFrames() {
-            if (targetPage !== "" && targetPage !== "undefined") top.classFrame.location = top.targetPage;
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-</HEAD>
-<!--suppress HtmlDeprecatedTag -->
-<FRAMESET cols="20%,80%" onLoad="top.loadFrames()" title="">
-	<!--suppress HtmlDeprecatedTag -->
-	<FRAMESET onLoad="top.loadFrames()" rows="30%,70%" title="">
-		<!--suppress HtmlDeprecatedTag -->
-		<FRAME name="packageListFrame" src="overview-frame.html" title="All Packages">
-		<!--suppress HtmlDeprecatedTag -->
-		<FRAME name="packageFrame" src="allclasses-frame.html"
-		       title="All classes and interfaces (except non-static nested types)">
-	</FRAMESET>
-	<!--suppress HtmlDeprecatedTag -->
-	<FRAME name="classFrame" scrolling="yes" src="overview-summary.html"
-	       title="Package, class and interface descriptions">
-	<!--suppress HtmlDeprecatedTag -->
-	<NOFRAMES>
-		<H2>Frame Alert</H2>
-		<P>
-			This document is designed to be viewed using the frames feature. If you see this message, you are using a
-			non-frame-capable web client.
-			<BR>
-			Link to<A HREF="overview-summary.html">Non-frame version.</A>
-	</NOFRAMES>
-</FRAMESET>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Flower.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Flower.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Flower.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Flower.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,379 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		Flower
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Flower";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Critter.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Rock.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Flower.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Flower.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class Flower</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A HREF="../../../info/gridworld/actor/Actor.html"
-                                                                  title="class in info.gridworld.actor">info.gridworld.actor.Actor</A>
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.Flower</B>
-</PRE>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Flower</B>
-	<DT>extends <A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>
-</DL>
-
-<P>
-	A <code>Flower</code> is an actor that darkens over time. Some actors drop
-	flowers as they move. <br/>
-	The API of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Flower.html#Flower()">Flower</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a pink flower.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Flower.html#Flower(java.awt.Color)">Flower</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-				title="class or interface in java.awt">Color</A>&nbsp;initialColor)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a flower of a given color.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Flower.html#act()">act</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Causes the color of this flower to darken.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.actor.Actor"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.actor.<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#getColor()">getColor</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getDirection()">getDirection</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getGrid()">getGrid</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getLocation()">getLocation</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)">moveTo</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)">putSelfInGrid</A>,
-			<A HREF="../../../info/gridworld/actor/Actor.html#removeSelfFromGrid()">removeSelfFromGrid</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setColor(java.awt.Color)">setColor</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setDirection(int)">setDirection</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Flower()"><!-- --></A>
-<H3>
-	Flower</H3>
-<PRE>
-public <B>Flower</B>()</PRE>
-<DL>
-	<DD>Constructs a pink flower.
-		<P>
-</DL>
-<HR>
-
-<A NAME="Flower(java.awt.Color)"><!-- --></A>
-<H3>
-	Flower</H3>
-<PRE>
-public <B>Flower</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-                        title="class or interface in java.awt">Color</A>&nbsp;initialColor)</PRE>
-<DL>
-	<DD>Constructs a flower of a given color.
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>initialColor</CODE> - the initial color of this flower
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="act()"><!-- --></A>
-<H3>
-	act</H3>
-<PRE>
-public void <B>act</B>()</PRE>
-<DL>
-	<DD>Causes the color of this flower to darken.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#act()">act</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/actor/Actor.html"
-					title="class in info.gridworld.actor">Actor</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Critter.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Rock.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Flower.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Flower.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p002.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p002.java b/Random_Work/src/projectEuler/programs/p002.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p002.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-
-public final class p002 extends EulerSolution {
-	public static void main(String[] args) {
-		out.println(new p002().run());
-	}
-
-	/*
-	 * Computers are fast, so we can implement this solution directly without any clever math.
-	 * Because the Fibonacci sequence grows exponentially by a factor of 1.618, the sum is
-	 * bounded above by a small multiple of 4 million. Thus the answer fits in a Java int type.
-	 */
-	@NotNull String run() {
-		int sum = 0;
-		int x = 1; // Represents the current Fibonacci number being processed
-		int y = 2; // Represents the next Fibonacci number in the sequence
-		while (x <= 4000000) {
-			if (x % 2 == 0) sum += x;
-			int z = x + y;
-			x = y;
-			y = z;
-		}
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p087.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p087.java b/Random_Work/src/projectEuler/programs/p087.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p087.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.HashSet;
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.listPrimes;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p087 extends EulerSolution {
-	private static final int LIMIT = 50000000;
-
-	public static void main(String[] args) {
-		System.out.println(new p087().run());
-	}
-
-	@NotNull String run() {
-		int[] primes = listPrimes(sqrt(LIMIT));
-		HashSet<Integer> sums = new HashSet<>();
-		sums.add(0);
-		for (int i = 2; i <= 4; i++) {
-			HashSet<Integer> newSums = new HashSet<>();
-			for (int p : primes) {
-				long q = IntStream.range(0, i).mapToLong(j -> p).reduce(1, (a, b) -> a * b);
-				// q = p^i
-				if (q > LIMIT) break;
-				int r = (int) q;
-				sums.stream().mapToInt(x -> x).filter(x -> x + r <= LIMIT).mapToObj(x -> x + r).forEachOrdered(newSums::add);
-			}
-			sums = newSums;
-		}
-		return Integer.toString(sums.size());
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/AbstractGrid.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/AbstractGrid.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/AbstractGrid.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/AbstractGrid.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,608 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		AbstractGrid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "AbstractGrid";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/AbstractGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="AbstractGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.grid</span>
-	<BR>
-	Class AbstractGrid&lt;E&gt;</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.grid.AbstractGrid&lt;E&gt;</B>
-</PRE>
-<DL>
-	<DT><B>All Implemented Interfaces:</B>
-	<DD><A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;
-	</DD>
-</DL>
-<DL>
-	<DT><B>Direct Known Subclasses:</B>
-	<DD><A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid">BoundedGrid</A>,
-		<A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-				title="class in info.gridworld.grid">UnboundedGrid</A></DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public abstract class <B>AbstractGrid&lt;E&gt;</B>
-	<DT>extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-	               title="class or interface in java.lang">Object</A>
-	<DT>implements <A HREF="../../../info/gridworld/grid/Grid.html"
-	                  title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;
-</DL>
-
-<P>
-	<code>AbstractGrid</code> contains the methods that are common to grid
-	implementations. <br/>
-	The implementation of this class is testable on the AP CS AB exam.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#AbstractGrid()">AbstractGrid</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">getEmptyAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid empty locations adjacent to a
-			given location in all eight
-			compass directions (north, northeast, east, southeast, south, southwest,
-			west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/AbstractGrid.html"
-					title="type parameter in AbstractGrid">E</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getNeighbors(info.gridworld.grid.Location)">getNeighbors</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the neighboring occupants in all eight
-			compass directions (north,
-			northeast, east, southeast, south, southwest, west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">getOccupiedAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid occupied locations adjacent to a
-			given location in all
-			eight compass directions (north, northeast, east, southeast, south,
-			southwest, west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">getValidAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid locations adjacent to a given
-			location in all eight
-			compass directions (north, northeast, east, southeast, south, southwest,
-			west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-			               title="class or interface in java.lang">String</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/AbstractGrid.html#toString()">toString</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a string that describes this grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.grid.Grid"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from interface info.gridworld.grid.<A
-				HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/grid/Grid.html#get(info.gridworld.grid.Location)">get</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#getNumCols()">getNumCols</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#getNumRows()">getNumRows</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#getOccupiedLocations()">getOccupiedLocations</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#isValid(info.gridworld.grid.Location)">isValid</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#put(info.gridworld.grid.Location, E)">put</A>, <A
-				HREF="../../../info/gridworld/grid/Grid.html#remove(info.gridworld.grid.Location)">remove</A></CODE>
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="AbstractGrid()"><!-- --></A>
-<H3>
-	AbstractGrid</H3>
-<PRE>
-public <B>AbstractGrid</B>()</PRE>
-<DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getNeighbors(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getNeighbors</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/AbstractGrid.html" title="type parameter in AbstractGrid">E</A>&gt; <B>getNeighbors</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getNeighbors(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Gets the neighboring occupants in all eight compass directions (north,
-		northeast, east, southeast, south, southwest, west, and northwest).
-		<br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Specified by:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/grid/Grid.html#getNeighbors(info.gridworld.grid.Location)">getNeighbors</A></CODE>
-				in interface <CODE><A HREF="../../../info/gridworld/grid/Grid.html"
-				                      title="interface in info.gridworld.grid">Grid</A>&lt;<A
-						HREF="../../../info/gridworld/grid/AbstractGrid.html"
-						title="type parameter in AbstractGrid">E</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>returns an array list of the objects in the occupied locations
-				adjacent to <code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getValidAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getValidAdjacentLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getValidAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Gets the valid locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Specified by:</B>
-			<DD><CODE><A
-					HREF="../../../info/gridworld/grid/Grid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">getValidAdjacentLocations</A></CODE>
-				in interface <CODE><A HREF="../../../info/gridworld/grid/Grid.html"
-				                      title="interface in info.gridworld.grid">Grid</A>&lt;<A
-						HREF="../../../info/gridworld/grid/AbstractGrid.html"
-						title="type parameter in AbstractGrid">E</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid locations adjacent to <code>loc</code>
-				in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getEmptyAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getEmptyAdjacentLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getEmptyAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Gets the valid empty locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Specified by:</B>
-			<DD><CODE><A
-					HREF="../../../info/gridworld/grid/Grid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">getEmptyAdjacentLocations</A></CODE>
-				in interface <CODE><A HREF="../../../info/gridworld/grid/Grid.html"
-				                      title="interface in info.gridworld.grid">Grid</A>&lt;<A
-						HREF="../../../info/gridworld/grid/AbstractGrid.html"
-						title="type parameter in AbstractGrid">E</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid empty locations adjacent to
-				<code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupiedAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getOccupiedAdjacentLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getOccupiedAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Gets the valid occupied locations adjacent to a given location in all
-		eight compass directions (north, northeast, east, southeast, south,
-		southwest, west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Specified by:</B>
-			<DD><CODE><A
-					HREF="../../../info/gridworld/grid/Grid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">getOccupiedAdjacentLocations</A></CODE>
-				in interface <CODE><A HREF="../../../info/gridworld/grid/Grid.html"
-				                      title="interface in info.gridworld.grid">Grid</A>&lt;<A
-						HREF="../../../info/gridworld/grid/AbstractGrid.html"
-						title="type parameter in AbstractGrid">E</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid occupied locations adjacent to
-				<code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="toString()"><!-- --></A>
-<H3>
-	toString</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-          title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
-<DL>
-	<DD>Creates a string that describes this grid.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()"
-					title="class or interface in java.lang">toString</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a string with descriptions of all objects in this grid (not
-				necessarily in any particular order), in the format {loc=obj, loc=obj,
-				...}
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/AbstractGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="AbstractGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p010.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p010.java b/Random_Work/src/projectEuler/programs/p010.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p010.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,24 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-import static java.util.Arrays.stream;
-import static projectEuler.programs.Library.listPrimes;
-
-public final class p010 extends EulerSolution {
-	/*
-	 * Call the sieve of Eratosthenes and sum the primes found.
-	 * A conservative upper bound for the sum is 2000000^2, which fits in a Java long type.
-	 */
-	private static final int LIMIT = 2000000;
-
-	public static void main(String[] args) {
-		out.println(new p010().run());
-	}
-
-	@NotNull String run() {
-		long sum = stream(listPrimes(LIMIT - 1)).asLongStream().sum();
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/BoundedGrid.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/BoundedGrid.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/BoundedGrid.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/BoundedGrid.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,593 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		BoundedGrid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "BoundedGrid";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/AbstractGrid.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/BoundedGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="BoundedGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.grid</span>
-	<BR>
-	Class BoundedGrid&lt;E&gt;</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A
-		HREF="../../../info/gridworld/grid/AbstractGrid.html"
-		title="class in info.gridworld.grid">info.gridworld.grid.AbstractGrid</A>&lt;E&gt;
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.grid.BoundedGrid&lt;E&gt;</B>
-</PRE>
-<DL>
-	<DT><B>All Implemented Interfaces:</B>
-	<DD><A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;
-	</DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>BoundedGrid&lt;E&gt;</B>
-	<DT>extends <A HREF="../../../info/gridworld/grid/AbstractGrid.html" title="class in info.gridworld.grid">AbstractGrid</A>&lt;E&gt;
-</DL>
-
-<P>
-	A <code>BoundedGrid</code> is a rectangular grid with a finite number of
-	rows and columns. <br/>
-	The implementation of this class is testable on the AP CS AB exam.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/BoundedGrid.html#BoundedGrid(int, int)">BoundedGrid</A></B>(int&nbsp;rows,
-			int&nbsp;cols)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs an empty bounded grid with the given
-			dimensions.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-			               title="type parameter in BoundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/BoundedGrid.html#get(info.gridworld.grid.Location)">get</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the object at a given location in this
-			grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/BoundedGrid.html#getNumCols()">getNumCols</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of columns in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/BoundedGrid.html#getNumRows()">getNumRows</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of rows in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/BoundedGrid.html#getOccupiedLocations()">getOccupiedLocations</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the locations in this grid that contain
-			objects.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/BoundedGrid.html#isValid(info.gridworld.grid.Location)">isValid</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether a location is valid in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-			               title="type parameter in BoundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/BoundedGrid.html#put(info.gridworld.grid.Location, E)">put</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-			<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="type parameter in BoundedGrid">E</A>&nbsp;obj)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Puts an object at a given location in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-			               title="type parameter in BoundedGrid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/BoundedGrid.html#remove(info.gridworld.grid.Location)">remove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the object at a given location from this
-			grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.grid.AbstractGrid"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.grid.<A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html"
-				title="class in info.gridworld.grid">AbstractGrid</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A
-				HREF="../../../info/gridworld/grid/AbstractGrid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">getEmptyAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getNeighbors(info.gridworld.grid.Location)">getNeighbors</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">getOccupiedAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">getValidAdjacentLocations</A>,
-			<A HREF="../../../info/gridworld/grid/AbstractGrid.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="BoundedGrid(int, int)"><!-- --></A>
-<H3>
-	BoundedGrid</H3>
-<PRE>
-public <B>BoundedGrid</B>(int&nbsp;rows,
-                   int&nbsp;cols)</PRE>
-<DL>
-	<DD>Constructs an empty bounded grid with the given dimensions.
-		(Precondition: <code>rows > 0</code> and <code>cols > 0</code>.)
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>rows</CODE> - number of rows in BoundedGrid
-			<DD><CODE>cols</CODE> - number of columns in BoundedGrid
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getNumRows()"><!-- --></A>
-<H3>
-	getNumRows</H3>
-<PRE>
-public int <B>getNumRows</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getNumRows()">Grid</A></CODE></B></DD>
-	<DD>Returns the number of rows in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of rows, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getNumCols()"><!-- --></A>
-<H3>
-	getNumCols</H3>
-<PRE>
-public int <B>getNumCols</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getNumCols()">Grid</A></CODE></B></DD>
-	<DD>Returns the number of columns in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of columns, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="isValid(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	isValid</H3>
-<PRE>
-public boolean <B>isValid</B>(<A HREF="../../../info/gridworld/grid/Location.html"
-                                 title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#isValid(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Checks whether a location is valid in this grid. <br/>
-		Precondition: <code>loc</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location to check
-			<DT><B>Returns:</B>
-			<DD><code>true</code> if <code>loc</code> is valid in this grid,
-				<code>false</code> otherwise
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupiedLocations()"><!-- --></A>
-<H3>
-	getOccupiedLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getOccupiedLocations</B>()</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#getOccupiedLocations()">Grid</A></CODE></B></DD>
-	<DD>Gets the locations in this grid that contain objects.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>an array list of all occupied locations in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="get(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	get</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-          title="type parameter in BoundedGrid">E</A> <B>get</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#get(info.gridworld.grid.Location)">Grid</A></CODE></B></DD>
-	<DD>Returns the object at a given location in this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>the object at location <code>loc</code> (or <code>null<code>
-				if the location is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="put(info.gridworld.grid.Location,java.lang.Object)"><!-- --></A><A
-		NAME="put(info.gridworld.grid.Location, E)">
-	<!-- --></A>
-<H3>
-	put</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-          title="type parameter in BoundedGrid">E</A> <B>put</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-             <A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="type parameter in BoundedGrid">E</A>&nbsp;obj)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#put(info.gridworld.grid.Location, E)">Grid</A></CODE></B>
-	</DD>
-	<DD>Puts an object at a given location in this grid. <br/>
-		Precondition: (1) <code>loc</code> is valid in this grid (2)
-		<code>obj</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location at which to put the object
-			<DD><CODE>obj</CODE> - the new object to be added
-			<DT><B>Returns:</B>
-			<DD>the object previously at <code>loc</code> (or <code>null</code>
-				if the location was previously unoccupied)
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="remove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	remove</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-          title="type parameter in BoundedGrid">E</A> <B>remove</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD><B>Description copied from interface: <CODE><A
-			HREF="../../../info/gridworld/grid/Grid.html#remove(info.gridworld.grid.Location)">Grid</A></CODE></B>
-	</DD>
-	<DD>Removes the object at a given location from this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location of the object that is to be removed
-			<DT><B>Returns:</B>
-			<DD>the object that was removed (or <code>null<code> if the location
-				is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/AbstractGrid.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/BoundedGrid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="BoundedGrid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/RandomStuff.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/RandomStuff.java b/Random_Work/src/RandomStuff.java
deleted file mode 100644
--- a/Random_Work/src/RandomStuff.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,14 +0,0 @@
-import java.util.Random;
-
-import static java.lang.String.valueOf;
-import static java.util.stream.Collectors.joining;
-import static java.util.stream.IntStream.range;
-
-public class RandomStuff {
-	public static void main(String[] args) {
-	}
-
-	public static String getAlphaNumericString(int n) {
-		return range(0, n).mapToObj(i -> valueOf("ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvxyz".charAt(new Random().nextInt("ABCDEFGHIJKLMNPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvxyz".length())))).collect(joining());
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-summary.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-summary.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-summary.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-summary.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,182 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.world
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "info.gridworld.world";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
-			&nbsp;NEXT PACKAGE</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<H2>
-	Package info.gridworld.world
-</H2>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Class Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/world/World.html"
-		                      title="class in info.gridworld.world">World&lt;T&gt;</A></B>
-		</TD>
-		<TD>A <code>World</code> is the mediator between a grid and the GridWorld GUI.</TD>
-	</TR>
-</TABLE>
-&nbsp;
-
-<P>
-<DL>
-</DL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
-			&nbsp;NEXT PACKAGE</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/world/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/VisualizingAlgorithms.js
===================================================================
diff --git a/out/production/Java_Development/VisualizingAlgorithms.js b/out/production/Java_Development/VisualizingAlgorithms.js
deleted file mode 100644
--- a/out/production/Java_Development/VisualizingAlgorithms.js	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,229 +0,0 @@
-/*
-This program allows you to experiment with visualizing different sorting
-algorithms.
-
-When you click run it will ask you to choose a sorting algorithm.
-
-This program is written in Javascript instead of Java.
-If you're interested in learning more about Javascript, check out
-the CodeHS Introduction to Computer Science course!
-
-
-Program created by Zach Keeshin, extended by Jeremy Keeshin.
-*/
-
-const MAX_VALUE = 25;
-
-const MULTIPLIER = 25;
-
-let LENGTH = 25;
-
-let WIDTH;
-
-const listOfPermutations = [];
-
-let counter = 0;
-
-const DELAY = 100;
-
-//The following are the constants for the different algorithms
-const BUBBLE_SORT = 0;
-const SELECTION_SORT = 1;
-const INSERTION_SORT = 2;
-const MERGE_SORT = 3;
-const QUICKSORT = 4;
-
-function start() {
-	setSize(400, 300);
-	LENGTH = readInt("How many items in the array?");
-	WIDTH = getWidth() / LENGTH;
-	const myArray = fillArray(LENGTH);
-	println(myArray);
-	drawArray(myArray);
-	println(myArray.length);
-	addToList(myArray);
-
-	askWhichAlgorithm(myArray);
-
-	setTimer(drawAll, DELAY);
-}
-
-/*
-This method will ask the user which algorithm they
-would like to use using the JavaScript dialog boxes
-on Chrome
-*/
-function askWhichAlgorithm(arr) {
-	const numSort = readLine("Which sorting algorithm would you like to use? " + "\nEnter 0 for Bubble sort" + "\nEnter 1 for Selection sort" + "\nEnter 2 for Insertion sort" + "\nEnter 3 for Merge sort" + "\nEnter 4 for Quicksort");
-	if (numSort === BUBBLE_SORT) bubbleSort(arr);
-	else if (numSort === SELECTION_SORT) selectionSort(arr);
-	else if (numSort === INSERTION_SORT) insertionSort(arr);
-	else if (numSort === MERGE_SORT) mergeSort(arr, 0, arr.length);
-	else if (numSort === QUICKSORT) quickSort(arr, 0, arr.length);
-	else println("Not a valid input :(");
-}
-
-/*
-This method creates and adds a deep copy of the
-given array to the list of arrays.
-*/
-function addToList(arr) {
-	const copy = arr.slice(0);
-	listOfPermutations.push(copy);
-}
-
-/*
-This method draws every permutation of the array
-on its way to being sorted. This is what will be
-called on the timer in start().
-*/
-function drawAll() {
-	if (counter >= listOfPermutations.length) return;
-	removeAll();
-	drawArray(listOfPermutations[counter]);
-	counter++;
-}
-
-/*
-This draws a single array using a for loop and the gradient
-formula adapted from the Water Color Grid exercise.
-*/
-function drawArray(arr) {
-	for (let i = 0; i < arr.length; i++) {
-		const rect = new Rectangle(WIDTH, arr[i] / MAX_VALUE * getHeight());
-		rect.setPosition(i * WIDTH, getHeight() - rect.getHeight());
-		const color = Color.createFromRGBL(64, 91, 122, 1 - arr[i] / MAX_VALUE);
-		rect.setColor(color);
-		add(rect);
-	}
-}
-
-/*
-This populates and returns an array of randomized ints
-between 1 and MAX_VALUE of with "length" elements.
-*/
-function fillArray(length) {
-	const arr = [];
-	for (let i = 0; i < length; i++) {
-		arr.push(Randomizer.nextInt(1, MAX_VALUE));
-	}
-	return arr;
-}
-
-/*
-This method swaps the elements at the given
-indices and is used as a utility for quickSort
-and mergeSort.
-*/
-function swapQS(arr, i, j) {
-	if (arr[i] === arr[j]) {
-		return;
-	}
-
-	const t = arr[i];
-	arr[i] = arr[j];
-	arr[j] = t;
-	addToList(arr);
-}
-
-function quickSort(arr, start, end) {
-	let i, mid;
-
-	if (end - start < 2) {
-		return;
-	}
-
-	mid = end;
-	for (i = start + 1; i < mid;) {
-		if (compare(arr, i, start) > 0) {
-			swapQS(arr, i, --mid);
-		} else {
-			i++;
-		}
-	}
-	swapQS(arr, start, mid - 1);
-	quickSort(arr, start, mid - 1);
-	quickSort(arr, mid, end);
-}
-
-function vswap(arr, a, b) {
-	const t = arr[a];
-	arr[a] = arr[b];
-	arr[b] = t;
-	addToList(arr);
-}
-
-function shift(arr, a, b) {
-	for (; b > a; b--) vswap(arr, b - 1, b);
-	// use this one for a faster merge
-	//addToList(arr);
-}
-
-function compare(arr, i, j) {
-	return arr[i] - arr[j];
-}
-
-function merge(arr, i, j, end) {
-	for (; i < end; i++) if (compare(arr, i, j) > 0 && j < end) shift(arr, i, j++);
-}
-
-function mergeSort(arr, start, end) {
-	const mid = Math.floor((start + end) / 2);
-	if (end - start < 2) return;
-	mergeSort(arr, start, mid);
-	mergeSort(arr, mid, end);
-	merge(arr, start, mid, end);
-}
-
-function insertionSort(items) {
-	const len = items.length; // number of items in the array
-	let value,  // the value currently being compared
-		i,      // index into unsorted section
-		j;      // index into sorted section
-	for (i = 0; i < len; i++) {
-		// store the current value because it may shift later
-		value = items[i];
-		/*
-		 * Whenever the value in the sorted section is greater than the value
-		 * in the unsorted section, shift all items in the sorted section over
-		 * by one. This creates space in which to insert the value.
-		 */
-		for (j = i - 1; j > -1 && items[j] > value; j--) items[j + 1] = items[j];
-		items[j + 1] = value;
-		addToList(items);
-	}
-}
-
-function swap(items, firstIndex, secondIndex) {
-	const temp = items[firstIndex];
-	items[firstIndex] = items[secondIndex];
-	items[secondIndex] = temp;
-}
-
-function selectionSort(items) {
-	const len = items.length;
-	let min;
-	for (let i = 0; i < len; i++) {
-		//set minimum to this position
-		min = i;
-		//check the rest of the array to see if anything is smaller
-		for (let j = i + 1; j < len; j++) if (items[j] < items[min]) min = j;
-		//if the minimum isn't in the position, swap it
-		if (i !== min) swap(items, i, min);
-		addToList(items);
-	}
-}
-
-function bubbleSort(values) {
-	let swapped;
-	const length = values.length - 1;
-	do {
-		swapped = false;
-		for (let i = 0; i < length; i++)
-			if (values[i] > values[i + 1]) {
-				swap(values, i, i + 1)
-				swapped = true;
-				addToList(values);
-			}
-	} while (swapped === true);
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/framework/info/gridworld/gui/WorldFrameResources.properties
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/framework/info/gridworld/gui/WorldFrameResources.properties b/out/production/Java_Development/objectOriented/gridWorld/framework/info/gridworld/gui/WorldFrameResources.properties
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/framework/info/gridworld/gui/WorldFrameResources.properties	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,65 +0,0 @@
-version.id               = 1.00
-version.date             = 2007-04-16
-frame.title              = GridWorld
-message.default          = Click on a grid location to construct or manipulate an occupant.
-dialog.help.title        = GridWorld Help
-dialog.help.error        = Couldn't load help file.
-dialog.license.title     = GNU Public License
-dialog.license.error     = Couldn't load license file.
-dialog.about.title       = About GridWorld
-dialog.about.text        = <h2>GridWorld</h2>\
- <font size=-1>Version: {0} </font><p>\
- <font size=-1>Copyright&copy; 2002, 2007 College Entrance Examination Board \
- (http://www.collegeboard.com).<br>Copyright&copy; 2007 Cay S. Horstmann \
- (http://horstmann.com).<br>Images created by Chris Renard, a student at \
- the School for the Talented and Gifted, Dallas Independent School District.</font></font>
-chooser.type             = Select a world
-menu.file                = &World
-menu.run                 = &Run
-menu.view                = &Location
-menu.help                = &Help
-menu.file.new            = Set &grid...
-menu.file.new.accel      = @N
-menu.file.save           = &Save grid as...
-menu.file.save.accel     = @S
-menu.file.quit           = &Quit
-menu.file.quit.accel     = @Q
-menu.view.zoomin         = Zoom &in
-menu.view.zoomin.accel   = @PAGE_UP
-menu.view.zoomout        = Zoom &out
-menu.view.zoomout.accel  = @PAGE_DOWN
-menu.view.left           = &Left
-menu.view.left.accel     = LEFT
-menu.view.right          = &Right
-menu.view.right.accel    = RIGHT
-menu.view.up             = &Up
-menu.view.up.accel       = UP
-menu.view.down           = &Down
-menu.view.down.accel     = DOWN
-menu.view.edit           = &Edit
-menu.view.edit.accel     = ENTER
-menu.view.delete         = Dele&te
-menu.view.delete.accel   = DELETE
-menu.view.center         = &Bring (0, 0) to upper left
-menu.view.center.accel   = @HOME
-menu.help.about          = &About GridWorld...
-menu.help.help           = GridWorld &Help...
-menu.help.help.accel     = @HELP
-menu.help.license        = View &License...
-button.gui.step          = Step
-button.gui.run           = Run
-button.gui.stop          = Stop
-slider.gui.slow          = Slow
-slider.gui.fast          = Fast
-cancel                   = Cancel
-error.reason             = Reason: {0}
-error.title              = Error
-error.text               = An error occurred.
-error.abort.text         = An error occurred. The program must exit.
-cell.tooltip.nonempty    = {0} contains {1}
-cell.tooltip.empty       = {0} is empty
-dialog.method.title      = Select a method
-dialog.constructor.title = Select a constructor
-dialog.method.params     = Parameters
-dialog.method.return     = Return value
-dialog.error.copy        = Copy
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/constant-values.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/constant-values.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/constant-values.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/constant-values.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,290 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Constant Field Values
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Constant Field Values";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?constant-values.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="constant-values.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H1>
-		Constant Field Values</H1>
-</div>
-<HR NOSHADE SIZE="4">
-<B>Contents</B>
-<UL>
-	<LI><A HREF="#info.gridworld">info.gridworld.*</A>
-</UL>
-
-<A NAME="info.gridworld"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left"><span SIZE="+2">
-			info.gridworld.*</span></TH>
-	</TR>
-</TABLE>
-
-<P>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left" COLSPAN="3">info.gridworld.grid.<A HREF="info/gridworld/grid/Location.html"
-		                                                    title="class in info.gridworld.grid">Location</A></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.AHEAD"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#AHEAD">AHEAD</A></CODE></TD>
-		<TD ALIGN="right"><CODE>0</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.EAST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#EAST">EAST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>90</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.FULL_CIRCLE"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#FULL_CIRCLE">FULL_CIRCLE</A></CODE></TD>
-		<TD ALIGN="right"><CODE>360</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.HALF_CIRCLE"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#HALF_CIRCLE">HALF_CIRCLE</A></CODE></TD>
-		<TD ALIGN="right"><CODE>180</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.HALF_LEFT"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#HALF_LEFT">HALF_LEFT</A></CODE></TD>
-		<TD ALIGN="right"><CODE>-45</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.HALF_RIGHT"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#HALF_RIGHT">HALF_RIGHT</A></CODE></TD>
-		<TD ALIGN="right"><CODE>45</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.LEFT"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#LEFT">LEFT</A></CODE></TD>
-		<TD ALIGN="right"><CODE>-90</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.NORTH"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#NORTH">NORTH</A></CODE></TD>
-		<TD ALIGN="right"><CODE>0</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.NORTHEAST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#NORTHEAST">NORTHEAST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>45</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.NORTHWEST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#NORTHWEST">NORTHWEST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>315</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.RIGHT"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#RIGHT">RIGHT</A></CODE></TD>
-		<TD ALIGN="right"><CODE>90</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.SOUTH"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#SOUTH">SOUTH</A></CODE></TD>
-		<TD ALIGN="right"><CODE>180</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.SOUTHEAST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#SOUTHEAST">SOUTHEAST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>135</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.SOUTHWEST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#SOUTHWEST">SOUTHWEST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>225</CODE></TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<A NAME="info.gridworld.grid.Location.WEST"><!-- --></A>
-		<TD ALIGN="right"><span SIZE="-1">
-			<CODE>public&nbsp;static&nbsp;final&nbsp;int</CODE></span></TD>
-		<TD ALIGN="left"><CODE><A HREF="info/gridworld/grid/Location.html#WEST">WEST</A></CODE></TD>
-		<TD ALIGN="right"><CODE>270</CODE></TD>
-	</TR>
-</TABLE>
-
-<P>
-
-<P>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?constant-values.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="constant-values.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Critter.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Critter.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Critter.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Critter.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,553 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		Critter
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Critter";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Bug.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Flower.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Critter.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Critter.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class Critter</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A HREF="../../../info/gridworld/actor/Actor.html"
-                                                                  title="class in info.gridworld.actor">info.gridworld.actor.Actor</A>
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.Critter</B>
-</PRE>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Critter</B>
-	<DT>extends <A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>
-</DL>
-
-<P>
-	A <code>Critter</code> is an actor that moves through its world, processing
-	other actors in some way and then moving to a new location. Define your own
-	critters by extending this class and overriding any methods of this class
-	except for <code>act</code>. When you override these methods, be sure to
-	preserve the postconditions. <br/>
-	The implementation of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#Critter()">Critter</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#act()">act</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A critter acts by getting a list of other
-			actors, processing that list,
-			getting locations to move to, selecting one of them, and moving to the
-			selected location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#getActors()">getActors</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the actors for processing.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#getMoveLocations()">getMoveLocations</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets a list of possible locations for the next
-			move.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#makeMove(info.gridworld.grid.Location)">makeMove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Moves this critter to the given location <code>loc</code>,
-			or removes
-			this critter from its grid if <code>loc</code> is <code>null</code>.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#processActors(java.util.ArrayList)">processActors</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-				title="class or interface in java.util">ArrayList</A>&lt;<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;actors)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Processes the elements of <code>actors</code>.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A></CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Critter.html#selectMoveLocation(java.util.ArrayList)">selectMoveLocation</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-				title="class or interface in java.util">ArrayList</A>&lt;<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&gt;&nbsp;locs)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Selects the location for the next move.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.actor.Actor"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.actor.<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#getColor()">getColor</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getDirection()">getDirection</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getGrid()">getGrid</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getLocation()">getLocation</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)">moveTo</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)">putSelfInGrid</A>,
-			<A HREF="../../../info/gridworld/actor/Actor.html#removeSelfFromGrid()">removeSelfFromGrid</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setColor(java.awt.Color)">setColor</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setDirection(int)">setDirection</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Critter()"><!-- --></A>
-<H3>
-	Critter</H3>
-<PRE>
-public <B>Critter</B>()</PRE>
-<DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="act()"><!-- --></A>
-<H3>
-	act</H3>
-<PRE>
-public void <B>act</B>()</PRE>
-<DL>
-	<DD>A critter acts by getting a list of other actors, processing that list,
-		getting locations to move to, selecting one of them, and moving to the
-		selected location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#act()">act</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/actor/Actor.html"
-					title="class in info.gridworld.actor">Actor</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getActors()"><!-- --></A>
-<H3>
-	getActors</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/actor/Actor.html"
-		title="class in info.gridworld.actor">Actor</A>&gt; <B>getActors</B>()</PRE>
-<DL>
-	<DD>Gets the actors for processing. Implemented to return the actors that
-		occupy neighboring grid locations. Override this method in subclasses to
-		look elsewhere for actors to process.<br/>
-		Postcondition: The state of all actors is unchanged.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a list of actors that this critter wishes to process.
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="processActors(java.util.ArrayList)"><!-- --></A>
-<H3>
-	processActors</H3>
-<PRE>
-public void <B>processActors</B>(<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-		title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/actor/Actor.html"
-                                                                    title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;actors)</PRE>
-<DL>
-	<DD>Processes the elements of <code>actors</code>. New actors may be added
-		to empty locations. Implemented to "eat" (i.e. remove) selected actors
-		that are not rocks or critters. Override this method in subclasses to
-		process actors in a different way. <br/>
-		Postcondition: (1) The state of all actors in the grid other than this
-		critter and the elements of <code>actors</code> is unchanged. (2) The
-		location of this critter is unchanged.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>actors</CODE> - the actors to be processed
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getMoveLocations()"><!-- --></A>
-<H3>
-	getMoveLocations</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-          title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt; <B>getMoveLocations</B>()</PRE>
-<DL>
-	<DD>Gets a list of possible locations for the next move. These locations must
-		be valid in the grid of this critter. Implemented to return the empty
-		neighboring locations. Override this method in subclasses to look
-		elsewhere for move locations.<br/>
-		Postcondition: The state of all actors is unchanged.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a list of possible locations for the next move
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="selectMoveLocation(java.util.ArrayList)"><!-- --></A>
-<H3>
-	selectMoveLocation</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A> <B>selectMoveLocation</B>(<A
-		HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-		title="class or interface in java.util">ArrayList</A>&lt;<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&gt;&nbsp;locs)</PRE>
-<DL>
-	<DD>Selects the location for the next move. Implemented to randomly pick one
-		of the possible locations, or to return the current location if
-		<code>locs</code> has size 0. Override this method in subclasses that
-		have another mechanism for selecting the next move location. <br/>
-		Postcondition: (1) The returned location is an element of
-		<code>locs</code>, this critter's current location, or
-		<code>null</code>. (2) The state of all actors is unchanged.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>locs</CODE> - the possible locations for the next move
-			<DT><B>Returns:</B>
-			<DD>the location that was selected for the next move.
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="makeMove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	makeMove</H3>
-<PRE>
-public void <B>makeMove</B>(<A HREF="../../../info/gridworld/grid/Location.html"
-                               title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Moves this critter to the given location <code>loc</code>, or removes
-		this critter from its grid if <code>loc</code> is <code>null</code>.
-		An actor may be added to the old location. If there is a different actor
-		at location <code>loc</code>, that actor is removed from the grid.
-		Override this method in subclasses that want to carry out other actions
-		(for example, turning this critter or adding an occupant in its previous
-		location). <br/>
-		Postcondition: (1) <code>getLocation() == loc</code>. (2) The state of
-		all actors other than those at the old and new locations is unchanged.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location to move to
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Bug.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Flower.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Critter.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Critter.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p085.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p085.java b/Random_Work/src/projectEuler/programs/p085.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p085.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,36 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Integer.MAX_VALUE;
-import static java.lang.Math.abs;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p085 extends EulerSolution {
-	private static final int TARGET = 2000000;
-
-	public static void main(String[] args) {
-		System.out.println(new p085().run());
-	}
-
-	@Contract(pure = true)
-	private static int numberOfRectangles(int m, int n) {
-		return ((m + 1) * m * (n + 1) * n) >> 2; // A bit more than m^2 n^2 / 4
-	}
-
-	@NotNull String run() {
-		int bestDiff = MAX_VALUE;
-		int bestArea = -1;
-		int sqrt = sqrt(TARGET);
-		for (int w = 1; w <= sqrt; w++)
-			for (int h = 1; h <= sqrt; h++) {
-				int diff = abs(numberOfRectangles(w, h) - TARGET);
-				if (diff < bestDiff) {
-					bestDiff = diff;
-					bestArea = w * h;
-				}
-			}
-		return Integer.toString(bestArea);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p009.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p009.java b/Random_Work/src/projectEuler/programs/p009.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p009.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,25 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-public final class p009 extends EulerSolution {
-	/*
-	 * Computers are fast, so we can implement a brute-force search to directly solve the problem.
-	 * Note that a^2 + b^2 is bounded above by 2*(1000^2), which fits in a Java int type.
-	 */
-	private static final int PERIMETER = 1000;
-
-	public static void main(String[] args) {
-		System.out.println(new p009().run());
-	}
-
-	@NotNull String run() {
-		for (int a = 1; a < PERIMETER; a++)
-			for (int b = a + 1; b < PERIMETER; b++) {
-				int c = PERIMETER - a - b;
-				// It is now implied that b < c, because we have a > 0
-				if (((a * a) + (b * b)) == (c * c)) return Integer.toString(a * b * c);
-			}
-		throw new AssertionError("Not found");
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p017.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p017.java b/Random_Work/src/projectEuler/programs/p017.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p017.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,42 +0,0 @@
-package projectEuler.programs;
-
-import java.util.stream.IntStream;
-
-public final class p017 extends EulerSolution {
-	private static final String[] ONES = {"zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen"};
-	private static final String[] TENS = {"", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"};
-
-	public static void main(String[] args) {
-		System.out.println(new p017().run());
-	}
-
-	private static String toEnglish(int n) {
-		if (0 <= n && n < 20) return ONES[n];
-		else if (20 <= n && n < 100) return TENS[n / 10] + (n % 10 != 0 ? ONES[n % 10] : "");
-		else if (100 <= n && n < 1000)
-			return ONES[n / 100] + "hundred" + (n % 100 != 0 ? "and" + toEnglish(n % 100) : "");
-		else if (1000 <= n && n < 1000000)
-			return toEnglish(n / 1000) + "thousand" + (n % 1000 != 0 ? toEnglish(n % 1000) : "");
-		else throw new IllegalArgumentException();
-	}
-
-	/*
-	 * - For the numbers 0 to 19, we write the single word:
-	 * {zero, one, two, three, four, five, six, seven, eight, nine,
-	 * ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen}.
-	 * - For the numbers 20 to 99, we write the word for the tens place:
-	 * {twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety}.
-	 * Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).
-	 * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":
-	 * {one hundred, two hundred, three hundred, ..., eight hundred, nine hundred}.
-	 * Subsequently if the last two digits are not 00, then we write the word "and"
-	 * followed by the phrase for the last two digits (from 01 to 99).
-	 * - For the numbers 1000 to 999999, we write the word for the three digits starting at the
-	 * thousands place and going leftward, followed by "thousand". Subsequently if the last three
-	 * digits are not 000, then we write the phrase for the last three digits (from 001 to 999).
-	 */
-	String run() {
-		int sum = IntStream.rangeClosed(1, 1000).map(i -> toEnglish(i).length()).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-frame.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-frame.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-frame.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-frame.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,54 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.grid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-<span CLASS="FrameTitleFont" style="font-size: larger; ">
-	<A HREF="../../../info/gridworld/grid/package-summary.html" target="classFrame">info.gridworld.grid</A></span>
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameHeadingFont" style="font-size: larger; ">
-			Interfaces</span>&nbsp;
-			<span CLASS="FrameItemFont">
-				<BR>
-				<A HREF="Grid.html" target="classFrame"
-				   title="interface in info.gridworld.grid"><I>Grid</I></A></span>
-		</TD>
-	</TR>
-</TABLE>
-
-
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameHeadingFont" style="font-size: larger; ">
-			Classes</span>&nbsp;
-			<span CLASS="FrameItemFont">
-				<BR>
-				<A HREF="AbstractGrid.html" target="classFrame"
-				   title="class in info.gridworld.grid">AbstractGrid</A>
-				<BR>
-				<A HREF="BoundedGrid.html" target="classFrame"
-				   title="class in info.gridworld.grid">BoundedGrid</A>
-				<BR>
-				<A HREF="Location.html" target="classFrame" title="class in info.gridworld.grid">Location</A>
-				<BR>
-				<A HREF="UnboundedGrid.html" target="classFrame" title="class in info.gridworld.grid">UnboundedGrid</A></span>
-		</TD>
-	</TR>
-</TABLE>
-
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-tree.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-tree.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-tree.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/package-tree.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,196 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.actor Class Hierarchy
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "info.gridworld.actor Class Hierarchy";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-tree.html"><B>NEXT</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H2>
-		Hierarchy For Package info.gridworld.actor
-	</H2>
-</div>
-<DL>
-	<DT><B>Package Hierarchies:</B>
-	<DD><A HREF="../../../overview-tree.html">All Packages</A>
-</DL>
-<HR>
-<H2>
-	Class Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">java.lang.<A
-			HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-			title="class or interface in java.lang"><B>Object</B></A>
-		<UL>
-			<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/Actor.html"
-			                                          title="class in info.gridworld.actor"><B>Actor</B></A>
-				<UL>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/Bug.html"
-					                                          title="class in info.gridworld.actor"><B>Bug</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/Critter.html"
-					                                          title="class in info.gridworld.actor"><B>Critter</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/Flower.html"
-					                                          title="class in info.gridworld.actor"><B>Flower</B></A>
-					<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/Rock.html"
-					                                          title="class in info.gridworld.actor"><B>Rock</B></A>
-				</UL>
-			<LI TYPE="circle">info.gridworld.world.<A HREF="../../../info/gridworld/world/World.html"
-			                                          title="class in info.gridworld.world"><B>World</B></A>&lt;T&gt;<UL>
-				<LI TYPE="circle">info.gridworld.actor.<A HREF="../../../info/gridworld/actor/ActorWorld.html"
-				                                          title="class in info.gridworld.actor"><B>ActorWorld</B></A>
-			</UL>
-		</UL>
-</UL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/package-tree.html"><B>NEXT</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-summary.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-summary.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-summary.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-summary.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,177 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Overview
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Overview";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Overview</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?overview-summary.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="overview-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Packages</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="20%"><B><A HREF="info/gridworld/actor/package-summary.html">info.gridworld.actor</A></B></TD>
-		<TD>&nbsp;</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="20%"><B><A HREF="info/gridworld/grid/package-summary.html">info.gridworld.grid</A></B></TD>
-		<TD>&nbsp;</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="20%"><B><A HREF="info/gridworld/world/package-summary.html">info.gridworld.world</A></B></TD>
-		<TD>&nbsp;</TD>
-	</TR>
-</TABLE>
-
-<P>
-	&nbsp;
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Overview</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?overview-summary.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="overview-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p079.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p079.java b/Random_Work/src/projectEuler/programs/p079.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p079.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,57 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.pow;
-
-public final class p079 extends EulerSolution {
-	private static final String[] SUBSEQS = {"319", "680", "180", "690", "129", "620", "762", "689", "762", "318", "368", "710", "720", "710", "629", "168", "160", "689", "716", "731", "736", "729", "316", "729", "729", "710", "769", "290", "719", "680", "318", "389", "162", "289", "162", "718", "729", "319", "790", "680", "890", "362", "319", "760", "316", "729", "380", "319", "728", "716"};
-	private char[] packedSubseqs;
-
-	public static void main(String[] args) {
-		System.out.println(new p079().run());
-	}
-
-	// Converts integer to string with zero padding, in little endian.
-	// Since we're trying all combinations, the order doesn't matter.
-	@NotNull
-	@Contract(pure = true)
-	private static char[] toChars(int n, int len) {
-		char[] result = new char[len];
-		int i = 0;
-		for (; i < result.length; i++, n /= 10) result[i] = (char) ('0' + (n % 10));
-		assert n == 0;
-		return result;
-	}
-
-	String run() {
-		// Preprocessing
-		packedSubseqs = new char[SUBSEQS.length * 3];
-		IntStream.range(0, packedSubseqs.length).forEachOrdered(i -> packedSubseqs[i] = SUBSEQS[i / 3].charAt(i % 3));
-		// Try ascending lengths
-		for (int len = 3; len <= 10; len++) {
-			int end = pow(10, len);
-			for (int guess = 0; guess < end; guess++) {
-				char[] guessChars = toChars(guess, len);
-				if (isConsistent(guessChars)) return new String(guessChars);
-			}
-		}
-		throw new RuntimeException("Not found");
-	}
-
-	@Contract(pure = true)
-	private boolean isConsistent(char[] guess) {
-		// For each string 's' in SUBSEQS, test if 's' is a subsequence of 'guess'
-		for (int i = 0; i < packedSubseqs.length; i += 3) {
-			int j = 0; // Index in 's'
-			// Index in 'guess'
-			for (int k = 0; k < guess.length && j < 3; k++) if (guess[k] == packedSubseqs[i + j]) j++;
-			// Not all characters consumed, fail
-			if (j < 3) return false;
-		}
-		return true;
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/stylesheet.css
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/stylesheet.css b/out/production/Java_Development/objectOriented/gridWorld/javadoc/stylesheet.css
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/stylesheet.css	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,11 +0,0 @@
-/* Javadoc style sheet */
-/* Page background color */
-body {
-    background-color: white;
-    color: #474747
-}
-
-/* Headings */
-h1 {
-    font-size: 145%
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p025.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p025.java b/Random_Work/src/projectEuler/programs/p025.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p025.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,36 +0,0 @@
-package projectEuler.programs;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.*;
-
-public final class p025 extends EulerSolution {
-	private static final int DIGITS = 1000;
-
-	/*
-	 * Because the target number is relatively small, we simply compute each Fibonacci number starting
-	 * from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows
-	 * exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit
-	 * after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.
-	 */
-
-	public static void main(String[] args) {
-		System.out.println(new p025().run());
-	}
-
-	String run() {
-		BigInteger lowerThres = TEN.pow(DIGITS - 1);
-		BigInteger upperThres = TEN.pow(DIGITS);
-		BigInteger prev = ONE;
-		BigInteger cur = ZERO;
-		for (int i = 0; ; i++) {
-			// At this point, prev = fibonacci(i - 1) and cur = fibonacci(i)
-			if (cur.compareTo(upperThres) >= 0) throw new RuntimeException("Not found");
-			else if (cur.compareTo(lowerThres) >= 0) return Integer.toString(i);
-			// Advance the Fibonacci sequence by one step
-			BigInteger temp = cur.add(prev);
-			prev = cur;
-			cur = temp;
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p023.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p023.java b/Random_Work/src/projectEuler/programs/p023.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p023.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,38 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.stream.IntStream.range;
-import static java.util.stream.IntStream.rangeClosed;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p023 extends EulerSolution {
-	private static final int LIMIT = 28123;
-	private final boolean[] isAbundant = new boolean[LIMIT + 1];
-
-	public static void main(String[] args) {
-		System.out.println(new p023().run());
-	}
-
-	private static boolean isAbundant(int n) {
-		assert n >= 1;
-		int sum = 1; // Sum of factors less than n
-		int end = sqrt(n);
-		sum += rangeClosed(2, end).filter(i -> n % i == 0).map(i -> i + n / i).sum();
-		if ((end * end) == n) sum -= end;
-		return sum > n;
-	}
-
-	@NotNull String run() {
-		// Compute look-up table
-		range(1, isAbundant.length).forEachOrdered(i -> isAbundant[i] = isAbundant(i));
-		int sum = rangeClosed(1, LIMIT).filter(i -> !isSumOf2Abundants(i)).sum();
-		return Integer.toString(sum);
-	}
-
-	@Contract(pure = true)
-	private boolean isSumOf2Abundants(int n) {
-		return rangeClosed(0, n).anyMatch(i -> isAbundant[i] && isAbundant[n - i]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p069.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p069.java b/Random_Work/src/projectEuler/programs/p069.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p069.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,26 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.listTotients;
-import static projectEuler.programs.Library.pow;
-
-public final class p069 extends EulerSolution {
-	private static final int LIMIT = pow(10, 6);
-
-	public static void main(String[] args) {
-		System.out.println(new p069().run());
-	}
-
-	@NotNull String run() {
-		int maxNumer = 0;
-		int maxDenom = 1;
-		int[] totients = listTotients(LIMIT);
-		for (int n = 1; n < totients.length; n++)
-			if ((long) n * maxDenom > (long) maxNumer * totients[n]) {
-				maxNumer = n;
-				maxDenom = totients[n];
-			}
-		return Integer.toString(maxNumer);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Bug.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Bug.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Bug.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Bug.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,461 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		Bug
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Bug";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Critter.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Bug.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Bug.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class Bug</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A HREF="../../../info/gridworld/actor/Actor.html"
-                                                                  title="class in info.gridworld.actor">info.gridworld.actor.Actor</A>
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.Bug</B>
-</PRE>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Bug</B>
-	<DT>extends <A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>
-</DL>
-
-<P>
-	A <code>Bug</code> is an actor that can move and turn. It drops flowers as
-	it moves. <br/>
-	The implementation of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#Bug()">Bug</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a red bug.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#Bug(java.awt.Color)">Bug</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-				title="class or interface in java.awt">Color</A>&nbsp;bugColor)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a bug of a given color.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#act()">act</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Moves if it can move, turns otherwise.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#canMove()">canMove</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Tests whether this bug can move forward into a
-			location that is empty or
-			contains a flower.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#move()">move</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Moves the bug forward, putting a flower into the
-			location it previously
-			occupied.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Bug.html#turn()">turn</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Turns the bug 45 degrees to the right without
-			changing its location.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.actor.Actor"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.actor.<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#getColor()">getColor</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getDirection()">getDirection</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getGrid()">getGrid</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getLocation()">getLocation</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)">moveTo</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)">putSelfInGrid</A>,
-			<A HREF="../../../info/gridworld/actor/Actor.html#removeSelfFromGrid()">removeSelfFromGrid</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setColor(java.awt.Color)">setColor</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setDirection(int)">setDirection</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Bug()"><!-- --></A>
-<H3>
-	Bug</H3>
-<PRE>
-public <B>Bug</B>()</PRE>
-<DL>
-	<DD>Constructs a red bug.
-		<P>
-</DL>
-<HR>
-
-<A NAME="Bug(java.awt.Color)"><!-- --></A>
-<H3>
-	Bug</H3>
-<PRE>
-public <B>Bug</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-                     title="class or interface in java.awt">Color</A>&nbsp;bugColor)</PRE>
-<DL>
-	<DD>Constructs a bug of a given color.
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>bugColor</CODE> - the color for this bug
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="act()"><!-- --></A>
-<H3>
-	act</H3>
-<PRE>
-public void <B>act</B>()</PRE>
-<DL>
-	<DD>Moves if it can move, turns otherwise.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#act()">act</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/actor/Actor.html"
-					title="class in info.gridworld.actor">Actor</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="turn()"><!-- --></A>
-<H3>
-	turn</H3>
-<PRE>
-public void <B>turn</B>()</PRE>
-<DL>
-	<DD>Turns the bug 45 degrees to the right without changing its location.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="move()"><!-- --></A>
-<H3>
-	move</H3>
-<PRE>
-public void <B>move</B>()</PRE>
-<DL>
-	<DD>Moves the bug forward, putting a flower into the location it previously
-		occupied.
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="canMove()"><!-- --></A>
-<H3>
-	canMove</H3>
-<PRE>
-public boolean <B>canMove</B>()</PRE>
-<DL>
-	<DD>Tests whether this bug can move forward into a location that is empty or
-		contains a flower.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>true if this bug can move.
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Critter.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Bug.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Bug.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p031.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p031.java b/Random_Work/src/projectEuler/programs/p031.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p031.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,29 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-public final class p031 extends EulerSolution {
-	private static final int TOTAL = 200;
-
-	/*
-	 * We use the standard dynamic programming algorithm to solve the subset sum problem over integers.
-	 * The order of the coin values does not matter, but the values need to be unique.
-	 */
-	private static final int[] COINS = {1, 2, 5, 10, 20, 50, 100, 200};
-
-	public static void main(String[] args) {
-		System.out.println(new p031().run());
-	}
-
-	@NotNull String run() {
-		// ways[i][j] is the number of ways to use any copies of
-		// the first i coin values to form an unordered sum of j
-		int[][] ways = new int[COINS.length + 1][TOTAL + 1];
-		ways[0][0] = 1;
-		for (int i = 0; i < COINS.length; i++) {
-			int coin = COINS[i];
-			for (int j = 0; j <= TOTAL; j++) ways[i + 1][j] = ways[i][j] + ((j >= coin) ? ways[i + 1][j - coin] : 0);
-		}
-		return Integer.toString(ways[COINS.length][TOTAL]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p077.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p077.java b/Random_Work/src/projectEuler/programs/p077.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p077.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,53 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.isPrime;
-
-public final class p077 extends EulerSolution {
-	private static final int TARGET = 5000;
-
-	public static void main(String[] args) {
-		System.out.println(new p077().run());
-	}
-
-	/*
-	 * This function searches for the smallest n in [0, limit)
-	 * such that P(n, n) > target, or returns -1 if not found.
-	 *
-	 * Let P(i, n) denote the number of ways that n can be written as an
-	 * unordered sum of prime numbers where no prime is greater than i.
-	 *
-	 * - P(i, 0) = 1 for all i.
-	 * - P(0, n) = 0 for all n > 0.
-	 * - If i is 1 or composite then P(i, n) = P(i - 1, n).
-	 * - Otherwise i is prime:
-	 * - If i <= n then P(i, n) = P(i - 1, n) + P(i, n - i).
-	 * - Else P(i, n) = P(i - 1, n).
-	 *
-	 * Notice that when computing P(i, k), we only need values from the
-	 * current row i for k' in [1, k) and values from the previous row i -1
-	 * for k' in [k, n). Thus we only need to buffer one row of data for
-	 * dynamic programming and can overwrite it in place.
-	 */
-	@Contract(pure = true)
-	private static int search(int limit) {
-		int[] partitions = new int[limit];
-		partitions[0] = 1;
-		for (int i = 0; i < partitions.length; i++) {
-			if (!isPrime(i)) continue;
-			for (int j = i; j < partitions.length; j++) partitions[j] += partitions[j - i];
-		}
-		return IntStream.range(0, limit).filter(i -> partitions[i] > TARGET).findFirst().orElse(-1);
-	}
-
-	@NotNull String run() {
-		for (int limit = 1; ; limit *= 2) {
-			int result = search(limit);
-			if (result != -1) return Integer.toString(result);
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p015.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p015.java b/Random_Work/src/projectEuler/programs/p015.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p015.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,18 +0,0 @@
-package projectEuler.programs;
-
-import static projectEuler.programs.Library.binomial;
-
-public final class p015 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p015().run());
-	}
-
-	/*
-	 * This is a classic combinatorics problem. To get from the top left corner to the bottom right corner of an N*N grid,
-	 * it involves making exactly N moves right and N moves down in some order. Because each individual down or right move
-	 * is indistinguishable, there are exactly 2N choose N (binomial coefficient) ways of arranging these moves.
-	 */
-	String run() {
-		return binomial(40, 20).toString();
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p033.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p033.java b/Random_Work/src/projectEuler/programs/p033.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p033.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,46 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.gcd;
-
-public final class p033 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p033().run());
-	}
-
-	/*
-	 * Consider an arbitrary fraction n/d:
-	 * Let n = 10 * n1 + n0 be the numerator.
-	 * Let d = 10 * d1 + d0 be the denominator.
-	 * As stated in the problem, we need 10 <= n < d < 100.
-	 * We must disregard trivial simplifications where n0 = d0 = 0.
-	 *
-	 * Now, a simplification with n0 = d0 is impossible because:
-	 * n1 / d1 = n / d = (10*n1 + n0) / (10*d1 + n0).
-	 * n1 * (10*d1 + n0) = d1 * (10*n1 + n0).
-	 * 10*n1*d1 + n1*n0 = 10*d1*n1 + d1*n0.
-	 * n1*n0 = d1*n0.
-	 * n1 = d1.
-	 * This implies n = d, which contradicts the fact that n < d.
-	 * Similarly, we cannot have a simplification with n1 = d1 for the same reason.
-	 *
-	 * Therefore we only need to consider the cases where n0 = d1 or n1 = d0.
-	 * In the first case, check that n1/d0 = n/d;
-	 * in the second case, check that n0/d1 = n/d.
-	 */
-	@NotNull String run() {
-		int numer = 1;
-		int denom = 1;
-		for (int d = 10; d < 100; d++)
-			for (int n = 10; n < d; n++) {
-				int n0 = n % 10, n1 = n / 10;
-				int d0 = d % 10, d1 = d / 10;
-				if (n1 == d0 && n0 * d == n * d1 || n0 == d1 && n1 * d == n * d0) {
-					numer *= n;
-					denom *= d;
-				}
-			}
-		return Integer.toString(denom / gcd(numer, denom));
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p007.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p007.java b/Random_Work/src/projectEuler/programs/p007.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p007.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,21 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-public final class p007 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p007().run());
-	}
-
-	/*
-	 * Computers are fast, so we can implement this solution by testing each number
-	 * individually for primeness, instead of using the more efficient sieve of Eratosthenes.
-	 */
-	@NotNull String run() {
-		for (int i = 2, count = 0; ; i++)
-			if (Library.isPrime(i)) {
-				count++;
-				if (count == 10001) return Integer.toString(i);
-			}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p064.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p064.java b/Random_Work/src/projectEuler/programs/p064.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p064.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,101 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.HashMap;
-
-import static java.math.BigInteger.*;
-import static projectEuler.programs.Library.isSquare;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p064 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p064().run());
-	}
-
-	// Returns the period of the continued fraction of sqrt(n)
-	private static int getSqrtContinuedFractionPeriod(int n) {
-		HashMap<QuadraticSurd, Integer> seen = new HashMap<>();
-		QuadraticSurd val = new QuadraticSurd(ZERO, ONE, ONE, valueOf(n));
-		do {
-			seen.put(val, seen.size());
-			val = val.subtract(new QuadraticSurd(val.floor(), ZERO, ONE, val.d)).reciprocal();
-		} while (!seen.containsKey(val));
-		return seen.size() - seen.get(val);
-	}
-
-	@NotNull String run() {
-		int count = 0;
-		for (int i = 1; i <= 10000; i++)
-			if (!isSquare(i) && ((getSqrtContinuedFractionPeriod(i) % 2) == 1)) count++;
-		return Integer.toString(count);
-	}
-
-	// Represents (a + b * sqrt(d)) / c. d must not be a perfect square.
-	private static final class QuadraticSurd {
-		final BigInteger a;
-		final BigInteger b;
-		final BigInteger c;
-		final BigInteger d;
-
-		QuadraticSurd(BigInteger a, BigInteger b, @NotNull BigInteger c, BigInteger d) {
-			assert c.signum() != 0;
-			// Simplify
-			if (c.signum() == -1) {
-				a = a.negate();
-				b = b.negate();
-				c = c.negate();
-			}
-			BigInteger gcd = a.gcd(b).gcd(c);
-			if (!gcd.equals(ONE)) {
-				a = a.divide(gcd);
-				b = b.divide(gcd);
-				c = c.divide(gcd);
-			}
-			this.a = a;
-			this.b = b;
-			this.c = c;
-			this.d = d;
-		}
-
-		@NotNull
-		@Contract("_ -> new")
-		QuadraticSurd subtract(@NotNull QuadraticSurd other) {
-			assert d.equals(other.d);
-			return new QuadraticSurd(a.multiply(other.c).subtract(other.a.multiply(c)), b.multiply(other.c).subtract(other.b.multiply(c)), c.multiply(other.c), d);
-		}
-
-		@NotNull
-		@Contract(" -> new")
-		QuadraticSurd reciprocal() {
-			return new QuadraticSurd(a.multiply(c).negate(), b.multiply(c), b.multiply(b).multiply(d).subtract(a.multiply(a)), d);
-		}
-
-		BigInteger floor() {
-			BigInteger temp = sqrt(b.multiply(b).multiply(d));
-			if (b.signum() == -1) temp = temp.add(ONE).negate();
-			temp = temp.add(a);
-			if (temp.signum() == -1) temp = temp.subtract(c.subtract(ONE));
-			return temp.divide(c);
-		}
-
-		@Contract(value = "null -> false", pure = true)
-		public boolean equals(Object obj) {
-			if (!(obj instanceof QuadraticSurd)) return false;
-			else {
-				QuadraticSurd other = (QuadraticSurd) obj;
-				return a.equals(other.a) && b.equals(other.b) && c.equals(other.c) && d.equals(other.d);
-			}
-		}
-
-		public int hashCode() {
-			return a.hashCode() + b.hashCode() + c.hashCode() + d.hashCode();
-		}
-
-		public String toString() {
-			return String.format("(%d + %d*sqrt(%d)) / %d", a, b, d, c);
-		}
-	}
-}
Index: Random_Work/src/projectEuler/programs/p052.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p052.java b/Random_Work/src/projectEuler/programs/p052.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p052.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,32 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Arrays;
-
-import static java.util.Arrays.sort;
-import static java.util.stream.IntStream.rangeClosed;
-
-public final class p052 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p052().run());
-	}
-
-	private static boolean multiplesHaveSameDigits(int x) {
-		return rangeClosed(2, 6).allMatch(i -> Arrays.equals(toSortedDigits(x), toSortedDigits(i * x)));
-	}
-
-	@NotNull
-	private static char[] toSortedDigits(int x) {
-		char[] result = Integer.toString(x).toCharArray();
-		sort(result);
-		return result;
-	}
-
-	@NotNull String run() {
-		for (int i = 1; ; i++) {
-			assert i <= 357913941 : "Overflow";
-			if (multiplesHaveSameDigits(i)) return Integer.toString(i);
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/Library.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/Library.java b/Random_Work/src/projectEuler/programs/Library.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/Library.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,344 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.lang.Integer.MAX_VALUE;
-import static java.math.BigInteger.*;
-import static java.util.stream.IntStream.rangeClosed;
-
-final class Library {
-	// Returns the reverse of the given string.
-	@NotNull
-	static String reverse(String s) {
-		return new StringBuilder(s).reverse().toString();
-	}
-
-	// Tests whether the given string is a palindrome.
-	static boolean isPalindrome(@NotNull String s) {
-		return s.equals(reverse(s));
-	}
-
-	// Tests whether the given integer is a palindrome in decimal (base 10).
-	static boolean isPalindrome(int x) {
-		return isPalindrome(Integer.toString(x));
-	}
-
-	// Returns floor(sqrt(x)), for x >= 0.
-	@Contract(pure = true)
-	public static int sqrt(int x) {
-		assert x >= 0 : "Square root of negative number";
-		int y = 0;
-		for (int i = 32768; i != 0; i >>>= 1) {
-			y |= i;
-			if ((y > 46340) || ((y * y) > x)) y ^= i;
-		}
-		return y;
-	}
-
-	// Returns floor(sqrt(x)), for x >= 0.
-	@Contract(pure = true)
-	public static long sqrt(long x) {
-		assert x >= 0 : "Square root of negative number";
-		long y = 0;
-		for (long i = 2147483648L; i != 0; i >>>= 1) {
-			y |= i;
-			if ((y > 3037000499L) || ((y * y) > x)) y ^= i;
-		}
-		return y;
-	}
-
-	// Returns floor(sqrt(x)), for x >= 0.
-	public static BigInteger sqrt(@NotNull BigInteger x) {
-		assert x.signum() != -1 : "Square root of negative number";
-		var y = ZERO;
-		for (int i = (x.bitLength() - 1) / 2; i >= 0; i--) {
-			y = y.setBit(i);
-			if (y.multiply(y).compareTo(x) > 0) y = y.clearBit(i);
-		}
-		return y;
-	}
-
-	// Tests whether x is a perfect square, for any value x.
-	@Contract(pure = true)
-	static boolean isSquare(int x) {
-		if (x < 0) return false;
-		int y = sqrt(x);
-		return Math.pow(y, 2) == x;
-	}
-
-	// Returns x to the power of y, throwing an exception if the result overflows an int.
-	@Contract(pure = true)
-	public static int pow(int x, int y) {
-		assert x >= 0 : "Negative base not supported";
-		assert y >= 0 : "Negative exponent";
-		int z = 1;
-		for (int i = 0; i < y; i++) {
-			assert (MAX_VALUE / z) >= x : "Overflow";
-			z *= x;
-		}
-		return z;
-	}
-
-	// Returns x^y mod m.
-	@Contract(pure = true)
-	static int powMod(int x, int y, int m) {
-		assert x >= 0 : "Negative base not supported";
-		assert y >= 0 : "Modular reciprocal not supported";
-		assert m > 0 : "Modulus must be positive";
-		if (m == 1) return 0;
-		// Exponentiation by squaring
-		int z = 1;
-		for (; y != 0; y >>>= 1) {
-			if ((y & 1) != 0) z = (int) (((long) z * x) % m);
-			x = (int) ((long) x * x % m);
-		}
-		return z;
-	}
-
-	// Returns x^-1 mod m, where the result is in the range [0, m).
-	// Note that (x * x^-1) mod m = (x^-1 * x) mod m = 1.
-	@Contract(pure = true)
-	static int reciprocalMod(int x, int m) {
-		assert (0 <= x) && (x < m);
-		int temp = x - 1;
-		// Based on a simplification of the extended Euclidean algorithm
-		int y = temp + 1;
-		x = m;
-		int a = 0;
-		int b = 1;
-		while (y != 0) {
-			int z = x % y;
-			int c = a - x / y * b;
-			int temp2 = y - 1;
-			x = temp2 + 1;
-			y = z;
-			a = b;
-			b = c;
-		}
-		if (x == 1) return a >= 0 ? a : a + m;
-		else throw new IllegalArgumentException("Reciprocal does not exist");
-	}
-
-	// Returns n!.
-	static BigInteger factorial(int n) {
-		assert n >= 0 : "Factorial of negative number";
-		var prod = ONE;
-		for (int i = 2; i <= n; i++) prod = prod.multiply(valueOf(i));
-		return prod;
-	}
-
-	// Returns n choose k.
-	static BigInteger binomial(int n, int k) {
-		assert (k >= 0) && (k <= n);
-		var product = ONE;
-		for (int i = 0; i < k; i++) product = product.multiply(valueOf(n - i));
-		return product.divide(factorial(k));
-	}
-
-	// Returns the largest non-negative integer that divides both x and y.
-	@Contract(pure = true)
-	public static int gcd(int x, int y) {
-		assert (x >= 0) && (y >= 0) : "Negative number";
-		while (y != 0) {
-			int z = x % y;
-			int temp = y - 1;
-			x = temp + 1;
-			y = z;
-		}
-		return x;
-	}
-
-	// Tests whether the given non-negative integer is prime.
-	@Contract(pure = true)
-	public static boolean isPrime(int x) {
-		assert x >= 0 : "Negative number";
-		if ((x == 0) || (x == 1)) return false;
-		else if (x == 2) return true;
-		else {
-			if (x % 2 == 0) return false;
-			for (int i = 3, end = sqrt(x); i <= end; i += 2) if (x % i == 0) return false;
-			return true;
-		}
-	}
-
-	// Returns a Boolean array 'isPrime' where isPrime[i] indicates whether i is prime, for 0 <= i <= n.
-	// For a large batch of queries, this is faster than calling isPrime() for each integer.
-	// For example: listPrimality(100) = {false, false, true, true, false, true, false, true,
-	// false, false, false, true, false, true, false, false, false, true, ...} (array length 101).
-	@Contract(pure = true)
-	public static boolean[] listPrimality(int n) {
-		assert n >= 0 : "Negative array size";
-		boolean[] result = new boolean[n + 1];
-		if (n >= 2) result[2] = true;
-		for (int i = 3; i <= n; i += 2) result[i] = true;
-		// Sieve of Eratosthenes
-		// Note: i * i does not overflow
-		for (int i = 3, end = sqrt(n); i <= end; i += 2)
-			if (result[i]) for (int j = i * i, inc = i * 2; j <= n; j += inc) result[j] = false;
-		return result;
-	}
-
-	// Returns all the prime numbers less than or equal to n, in ascending order.
-	// For example: listPrimes(97) = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ..., 83, 89, 97}.
-	@Contract(pure = true)
-	public static int[] listPrimes(int n) {
-		boolean[] isPrime = listPrimality(n);
-		int count = 0;
-		for (var b : isPrime) if (b) count++;
-		int[] result = new int[count];
-		for (int i = 0, j = 0; i < isPrime.length; i++)
-			if (isPrime[i]) {
-				result[j] = i;
-				j++;
-			}
-		return result;
-	}
-
-	// Returns an array spf where spf[k] is the smallest prime factor of k, valid for 2 <= k <= n.
-	// For example: listSmallestPrimeFactors(10) = {0, 0, 2, 3, 2, 5, 2, 7, 2, 3, 2}.
-	@Contract(pure = true)
-	static int[] listSmallestPrimeFactors(int n) {
-		int[] result = new int[n + 1];
-		int limit = sqrt(n);
-		for (int i = 2; i < result.length; i++)
-			if (result[i] == 0) {
-				result[i] = i;
-				// Note: i * i does not overflow
-				if (i <= limit) for (int j = i * i; j <= n; j += i) if (result[j] == 0) result[j] = i;
-			}
-		return result;
-	}
-
-	// Returns the number of integers in the range [1, n] that are coprime with n.
-	// For example, totient(12) = 4 because these integers are coprime with 12: 1, 5, 7, 11.
-	static int totient(int n) {
-		assert n > 0 : "Totient of non-positive integer";
-		int p = 1;
-		// Trial division
-		for (int i = 2, end = sqrt(n); i <= end; i++)
-			if (n % i == 0) { // Found a factor
-				p *= i - 1;
-				n /= i;
-				while (n % i == 0) {
-					p *= i;
-					n /= i;
-				}
-				end = sqrt(n);
-			}
-		if (n != 1) p *= n - 1;
-		return p;
-	}
-
-
-	// Returns an array 'totients' where totients[i] == totient(i), for 0 <= i <= n.
-	// For a large batch of queries, this is faster than calling totient() for each integer.
-	@Contract(pure = true)
-	static int[] listTotients(int n) {
-		assert n >= 0 : "Negative array size";
-		int[] result = new int[n + 1];
-		rangeClosed(0, n).forEachOrdered(i -> result[i] = i);
-		for (int i = 2; i <= n; i++) if (result[i] == i) for (int j = i; j <= n; j += i) result[j] -= result[j] / i;
-		return result;
-	}
-
-	// Attempts to advance the given sequence to the next permutation in lexicographical order.
-	// Returns true if the sequence was successfully permuted, or returns false if the sequence
-	// was already at the last possible permutation (a non-ascending sequence).
-	// For example:
-	// - nextPermutation({0,0,1}) changes the argument array to {0,1,0} and returns true.
-	// - nextPermutation({1,0,0}) leaves the argument array unchanged and returns false.
-	static boolean nextPermutation(int[] arr) {
-		int i = arr.length - 1;
-		//noinspection StatementWithEmptyBody
-		for (; i > 0 && arr[i - 1] >= arr[i]; i--) ;
-		if (i <= 0) return false;
-		{
-			int j = arr.length - 1;
-			//noinspection StatementWithEmptyBody
-			for (; arr[j] <= arr[i - 1]; j--) ;
-			int temp = arr[i - 1];
-			arr[i - 1] = arr[j];
-			arr[j] = temp;
-		}
-		for (int j = arr.length - 1; i < j; i++, j--) {
-			int temp = arr[i];
-			arr[i] = arr[j];
-			arr[j] = temp;
-		}
-		return true;
-	}
-}
-
-// Immutable unlimited precision fraction
-final class Fraction implements Comparable<Fraction> {
-	public static final Fraction ZERO = new Fraction(BigInteger.ZERO);
-	public final BigInteger numerator; // Always coprime with denominator
-	public final BigInteger denominator; // Always positive
-
-	@Contract(pure = true)
-	Fraction(BigInteger numerator) {
-		this.numerator = numerator;
-		denominator = ONE;
-	}
-
-	Fraction(BigInteger numer, @NotNull BigInteger denom) {
-		assert denom.signum() != 0 : "Division by zero";
-		if (denom.signum() == -1) {
-			numer = numer.negate();
-			denom = denom.negate();
-		}
-		var gcd = numer.gcd(denom);
-		if (!gcd.equals(ONE)) {
-			numer = numer.divide(gcd);
-			denom = denom.divide(gcd);
-		}
-		numerator = numer;
-		denominator = denom;
-	}
-
-	@NotNull
-	@Contract("_ -> new")
-	public Fraction add(@NotNull Fraction other) {
-		return new Fraction(numerator.multiply(other.denominator).add(other.numerator.multiply(denominator)), denominator.multiply(other.denominator));
-	}
-
-	@NotNull
-	@Contract("_ -> new")
-	public Fraction subtract(@NotNull Fraction other) {
-		return new Fraction(numerator.multiply(other.denominator).subtract(other.numerator.multiply(denominator)), denominator.multiply(other.denominator));
-	}
-
-	@NotNull
-	@Contract("_ -> new")
-	public Fraction multiply(@NotNull Fraction other) {
-		return new Fraction(numerator.multiply(other.numerator), denominator.multiply(other.denominator));
-	}
-
-	@NotNull
-	@Contract("_ -> new")
-	public Fraction divide(@NotNull Fraction other) {
-		return new Fraction(numerator.multiply(other.denominator), denominator.multiply(other.numerator));
-	}
-
-	@Contract(value = "null -> false", pure = true)
-	public boolean equals(Fraction obj) {
-		return (obj != null) && (numerator.equals(obj.numerator) && denominator.equals(obj.denominator));
-	}
-
-	public int compareTo(@NotNull Fraction other) {
-		return numerator.multiply(other.denominator).compareTo(other.numerator.multiply(denominator));
-	}
-
-	public int hashCode() {
-		return numerator.hashCode() + denominator.hashCode();
-	}
-
-	@NotNull
-	@Contract(pure = true)
-	public String toString() {
-		return numerator + "/" + denominator;
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p056.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p056.java b/Random_Work/src/projectEuler/programs/p056.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p056.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,32 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.stream.IntStream;
-
-import static java.lang.Math.max;
-import static java.math.BigInteger.valueOf;
-
-public final class p056 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p056().run());
-	}
-
-	private static int digitSum(@NotNull BigInteger n) {
-		int sum;
-		String s = n.toString();
-		sum = IntStream.range(0, s.length()).map(i -> s.charAt(i) - '0').sum();
-		return sum;
-	}
-
-	@NotNull String run() {
-		int max = 0;
-		for (int a = 1; a < 100; a++)
-			for (int b = 1; b < 100; b++) {
-				BigInteger pow = valueOf(a).pow(b);
-				max = max(digitSum(pow), max);
-			}
-		return Integer.toString(max);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-summary.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-summary.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-summary.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-summary.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,224 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.grid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "info.gridworld.grid";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/world/package-summary.html"><B>NEXT PACKAGE</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<H2>
-	Package info.gridworld.grid
-</H2>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Interface Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/grid/Grid.html"
-		                      title="interface in info.gridworld.grid">Grid&lt;E&gt;</A></B>
-		</TD>
-		<TD><code>Grid</code> provides an interface for a two-dimensional, grid-like
-			environment containing arbitrary objects.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-
-<P>
-
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Class Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/grid/AbstractGrid.html"
-		                      title="class in info.gridworld.grid">AbstractGrid&lt;E&gt;</A></B></TD>
-		<TD><code>AbstractGrid</code> contains the methods that are common to grid
-			implementations.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-		                      title="class in info.gridworld.grid">BoundedGrid&lt;E&gt;</A></B>
-		</TD>
-		<TD>A <code>BoundedGrid</code> is a rectangular grid with a finite number of
-			rows and columns.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/grid/Location.html"
-		                      title="class in info.gridworld.grid">Location</A></B>
-		</TD>
-		<TD>A <code>Location</code> object represents the row and column of a location
-			in a two-dimensional grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD WIDTH="15%"><B><A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-		                      title="class in info.gridworld.grid">UnboundedGrid&lt;E&gt;</A></B></TD>
-		<TD>An <code>UnboundedGrid</code> is a rectangular grid with an unbounded number of rows and
-			columns.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-
-<P>
-<DL>
-</DL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Package</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/package-summary.html"><B>PREV PACKAGE</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/world/package-summary.html"><B>NEXT PACKAGE</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/package-summary.html" target="_top"><B>FRAMES</B></A>
-			&nbsp;
-			&nbsp;<A HREF="package-summary.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p075.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p075.java b/Random_Work/src/projectEuler/programs/p075.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p075.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,66 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.HashSet;
-
-import static projectEuler.programs.Library.gcd;
-
-public final class p075 extends EulerSolution {
-	private static final int LIMIT = 1500000;
-
-	public static void main(String[] args) {
-		System.out.println(new p075().run());
-	}
-
-	@NotNull String run() {
-		/*
-		 * Pythagorean triples theorem:
-		 * Every primitive Pythagorean triple with a odd and b even can be expressed as
-		 * a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.
-		 */
-		HashSet<IntTriple> triples = new HashSet<>();
-		for (int s = 3; Math.pow(s, 2) <= LIMIT; s += 2)
-			for (int t = s - 2; t > 0; t -= 2)
-				if (gcd(s, t) == 1) {
-					int a = s * t;
-					int b = ((s * s) - (t * t)) >> 1;
-					int c = ((s * s) + (t * t)) >> 1;
-					if (a + b + c <= LIMIT) triples.add(new IntTriple(a, b, c));
-				}
-		byte[] ways = new byte[LIMIT + 1];
-		// Increment but saturate at 2
-		int count = 0;
-		for (int x : ways) if (x == 1) count++;
-		return Integer.toString(count);
-	}
-
-	private static final class IntTriple {
-
-		final int a;
-		final int b;
-		final int c;
-
-		@Contract(pure = true)
-		IntTriple(int a, int b, int c) {
-			this.a = a;
-			this.b = b;
-			this.c = c;
-		}
-
-		@Contract(value = "null -> false", pure = true)
-		public boolean equals(Object obj) {
-			if (!(obj instanceof IntTriple)) return false;
-			else {
-				IntTriple other = (IntTriple) obj;
-				return (a == other.a) && (b == other.b) && (c == other.c);
-			}
-		}
-
-		@Contract(pure = true)
-		public int hashCode() {
-			return a + b + c;
-		}
-	}
-}
Index: Random_Work/src/projectEuler/programs/p083.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p083.java b/Random_Work/src/projectEuler/programs/p083.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p083.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,44 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Integer.MAX_VALUE;
-import static java.lang.Math.min;
-import static java.util.Arrays.fill;
-import static java.util.Arrays.stream;
-
-public final class p083 extends EulerSolution {
-	private static final int INFINITY = MAX_VALUE / 2;
-	private static final int[][] GRID = {{4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870}, {1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377}, {9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230}, {7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187}, {3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505}, {1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942}, {4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757}, {510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706}, {9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048}, {3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540}, {6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442}, {7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509}, {4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000}, {356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672}, {9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785}, {192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095}, {1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859}, {4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837}, {5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286}, {1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963}, {1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127}, {8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535}, {7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446}, {3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615}, {9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303}, {5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266}, {6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763}, {9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550}, {5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887}, {6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531}, {5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739}, {1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269}, {4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380}, {4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829}, {8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873}, {2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271}, {6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281}, {2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660}, {6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665}, {3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056}, {5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089}, {3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523}, {1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616}, {8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125}, {3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307}, {8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920}, {8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225}, {9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976}, {3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432}, {1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351}, {7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991}, {9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110}, {7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965}, {3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314}, {1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416}, {126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028}, {8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407}, {7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312}, {4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000}, {4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229}, {7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256}, {7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842}, {6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241}, {4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213}, {9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015}, {3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405}, {2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640}, {3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480}, {4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181}, {171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501}, {3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698}, {2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531}, {7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255}, {8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631}, {2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914}, {6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864}, {8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738}, {2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294}, {2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789}, {5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981}};
-	private int[][] distance;
-
-	public static void main(String[] args) {
-		System.out.println(new p083().run());
-	}
-
-	@NotNull String run() {
-		int h = GRID.length;
-		int w = GRID[0].length;
-		distance = new int[h][w];
-		stream(distance).forEachOrdered(row -> fill(row, INFINITY));
-		// Bellman–Ford algorithm
-		distance[0][0] = GRID[0][0];
-		for (int i = 0; i < w * h; i++)
-			for (int y = 0; y < h; y++)
-				for (int x = 0; x < w; x++) {
-					int temp = INFINITY;
-					temp = min(getDistance(x - 1, y), temp);
-					temp = min(getDistance(x + 1, y), temp);
-					temp = min(getDistance(x, y - 1), temp);
-					temp = min(getDistance(x, y + 1), temp);
-					distance[y][x] = min(GRID[y][x] + temp, distance[y][x]);
-				}
-		return Integer.toString(distance[h - 1][w - 1]);
-	}
-
-	@Contract(pure = true)
-	private int getDistance(int x, int y) {
-		return ((y < 0) || (y >= distance.length) || (x < 0) || (x >= distance[y].length)) ? INFINITY : distance[y][x];
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p019.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p019.java b/Random_Work/src/projectEuler/programs/p019.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p019.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-public final class p019 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p019().run());
-	}
-
-	// Return value: 0 = Sunday, 1 = Monday, ..., 6 = Saturday.
-	@Contract(pure = true)
-	private static int dayOfWeek(int year, int month) {
-		assert (year >= 0) && (year <= 10000) && (month >= 1) && (month <= 12);
-		// Zeller's congruence algorithm
-		int m = (month - 3 + 4800) % 4800;
-		int y = (year + m / 12) % 400;
-		m %= 12;
-		return (((y + (y >> 2)) - (y / 100)) + (((13 * m) + 2) / 5) + 1 + 2) % 7;
-	}
-
-	/**
-	 * We use Zeller's congruence to compute the day of week when given the year, month, and day.
-	 * Then we simply check the first day of all the months in the given range by brute force.
-	 * <p>
-	 * Zeller's congruence is well-known and a bit long to explain.
-	 *
-	 * @see <a href="http://en.wikipedia.org/wiki/Zeller%27s_congruence">http://en.wikipedia.org/wiki/Zeller%27s_congruence</a>
-	 */
-	@NotNull String run() {
-		int count = 0;
-		for (int y = 1901; y <= 2000; y++) for (int m = 1; m <= 12; m++) if (dayOfWeek(y, m) == 0) count++; // Sunday
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Rock.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Rock.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Rock.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Rock.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,380 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		Rock
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Rock";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Flower.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Rock.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Rock.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class Rock</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A HREF="../../../info/gridworld/actor/Actor.html"
-                                                                  title="class in info.gridworld.actor">info.gridworld.actor.Actor</A>
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.Rock</B>
-</PRE>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Rock</B>
-	<DT>extends <A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>
-</DL>
-
-<P>
-	A <code>Rock</code> is an actor that does nothing. It is commonly used to
-	block other actors from moving. <br/>
-	The API of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Rock.html#Rock()">Rock</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a black rock.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Rock.html#Rock(java.awt.Color)">Rock</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-				title="class or interface in java.awt">Color</A>&nbsp;rockColor)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a rock of a given color.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Rock.html#act()">act</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Overrides the <code>act</code> method in the
-			<code>Actor</code> class
-			to do nothing.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.actor.Actor"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.actor.<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#getColor()">getColor</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getDirection()">getDirection</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getGrid()">getGrid</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#getLocation()">getLocation</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)">moveTo</A>, <A
-				HREF="../../../info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)">putSelfInGrid</A>,
-			<A HREF="../../../info/gridworld/actor/Actor.html#removeSelfFromGrid()">removeSelfFromGrid</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setColor(java.awt.Color)">setColor</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#setDirection(int)">setDirection</A>, <A
-					HREF="../../../info/gridworld/actor/Actor.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Rock()"><!-- --></A>
-<H3>
-	Rock</H3>
-<PRE>
-public <B>Rock</B>()</PRE>
-<DL>
-	<DD>Constructs a black rock.
-		<P>
-</DL>
-<HR>
-
-<A NAME="Rock(java.awt.Color)"><!-- --></A>
-<H3>
-	Rock</H3>
-<PRE>
-public <B>Rock</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-                      title="class or interface in java.awt">Color</A>&nbsp;rockColor)</PRE>
-<DL>
-	<DD>Constructs a rock of a given color.
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>rockColor</CODE> - the color of this rock
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="act()"><!-- --></A>
-<H3>
-	act</H3>
-<PRE>
-public void <B>act</B>()</PRE>
-<DL>
-	<DD>Overrides the <code>act</code> method in the <code>Actor</code> class
-		to do nothing.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/actor/Actor.html#act()">act</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/actor/Actor.html"
-					title="class in info.gridworld.actor">Actor</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Flower.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;NEXT CLASS</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Rock.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Rock.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-tree.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-tree.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-tree.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/package-tree.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,201 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.grid Class Hierarchy
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "info.gridworld.grid Class Hierarchy";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/package-tree.html"><B>PREV</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/world/package-tree.html"><B>NEXT</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H2>
-		Hierarchy For Package info.gridworld.grid
-	</H2>
-</div>
-<DL>
-	<DT><B>Package Hierarchies:</B>
-	<DD><A HREF="../../../overview-tree.html">All Packages</A>
-</DL>
-<HR>
-<H2>
-	Class Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">java.lang.<A
-			HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-			title="class or interface in java.lang"><B>Object</B></A>
-		<UL>
-			<LI TYPE="circle">info.gridworld.grid.<A HREF="../../../info/gridworld/grid/AbstractGrid.html"
-			                                         title="class in info.gridworld.grid"><B>AbstractGrid</B></A>&lt;E&gt;
-				(implements info.gridworld.grid.<A HREF="../../../info/gridworld/grid/Grid.html"
-				                                   title="interface in info.gridworld.grid">Grid</A>&lt;E&gt;)
-				<UL>
-					<LI TYPE="circle">info.gridworld.grid.<A HREF="../../../info/gridworld/grid/BoundedGrid.html"
-					                                         title="class in info.gridworld.grid"><B>BoundedGrid</B></A>&lt;E&gt;
-					<LI TYPE="circle">info.gridworld.grid.<A HREF="../../../info/gridworld/grid/UnboundedGrid.html"
-					                                         title="class in info.gridworld.grid"><B>UnboundedGrid</B></A>&lt;E&gt;
-				</UL>
-			<LI TYPE="circle">info.gridworld.grid.<A HREF="../../../info/gridworld/grid/Location.html"
-			                                         title="class in info.gridworld.grid"><B>Location</B></A>
-				(implements java.lang.<A
-						HREF="http://java.sun.com/javase/6/docs/api/java/lang/Comparable.html?is-external=true"
-						title="class or interface in java.lang">Comparable</A>&lt;T&gt;)
-		</UL>
-</UL>
-<H2>
-	Interface Hierarchy
-</H2>
-<UL>
-	<LI TYPE="circle">info.gridworld.grid.<A HREF="../../../info/gridworld/grid/Grid.html"
-	                                         title="interface in info.gridworld.grid"><B>Grid</B></A>&lt;E&gt;
-</UL>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Tree</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/package-tree.html"><B>PREV</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/world/package-tree.html"><B>NEXT</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/package-tree.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="package-tree.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p027.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p027.java b/Random_Work/src/projectEuler/programs/p027.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p027.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,35 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-
-import static projectEuler.programs.Library.isPrime;
-
-public final class p027 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p027().run());
-	}
-
-	@Contract(pure = true)
-	private static int numberOfConsecutivePrimesGenerated(int a, int b) {
-		for (int i = 0; ; i++) {
-			int n = (i * i) + (i * a) + b;
-			if ((n < 0) || !isPrime(n)) return i;
-		}
-	}
-
-	String run() {
-		int bestNum = 0;
-		int bestA = 0;
-		int bestB = 0;
-		for (int a = -1000; a <= 1000; a++)
-			for (int b = -1000; b <= 1000; b++) {
-				int num = numberOfConsecutivePrimesGenerated(a, b);
-				if (num > bestNum) {
-					bestNum = num;
-					bestA = a;
-					bestB = b;
-				}
-			}
-		return Integer.toString(bestA * bestB);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p048.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p048.java b/Random_Work/src/projectEuler/programs/p048.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p048.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,18 +0,0 @@
-package projectEuler.programs;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.*;
-
-public final class p048 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p048().run());
-	}
-
-	String run() {
-		BigInteger modulus = TEN.pow(10);
-		BigInteger sum = ZERO;
-		for (int i = 1; i <= 1000; i++) sum = sum.add(valueOf(i).modPow(valueOf(i), modulus));
-		return sum.mod(modulus).toString();
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p036.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p036.java b/Random_Work/src/projectEuler/programs/p036.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p036.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,18 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.isPalindrome;
-
-public final class p036 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p036().run());
-	}
-
-	@NotNull String run() {
-		long sum = IntStream.range(1, 1000000).filter(i -> isPalindrome(Integer.toString(i, 10)) && isPalindrome(Integer.toString(i, 2))).asLongStream().sum();
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p044.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p044.java b/Random_Work/src/projectEuler/programs/p044.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p044.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,53 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.sqrt;
-
-public final class p044 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p044().run());
-	}
-
-	@Contract(pure = true)
-	private static long pentagonalNumber(int x) {
-		assert x > 0;
-		return (long) x * (x * 3 - 1) >>> 1;
-	}
-
-	@Contract(pure = true)
-	private static boolean isPentagonalNumber(long y) {
-		if (y <= 0) return false;
-		/*
-		 * If y = pentagonalNumber(x) = x(3x-1) / 2,
-		 * then by the quadratic formula, the positive solution is x = (sqrt(24y + 1) + 1) / 6.
-		 * There exists a solution for x if and only if both of these conditions hold:
-		 * (24y + 1) is a perfect square, and sqrt(24y + 1) + 1 mod 6 = 0.
-		 * The second condition is equivalent to sqrt(24y + 1) = 5 mod 6.
-		 */
-		long temp = y * 24 + 1;
-		long sqrt = sqrt(temp);
-		return ((sqrt * sqrt) == temp) && ((sqrt % 6) == 5);
-	}
-
-	@NotNull String run() {
-		long minD = -1; // -1 means not found yet, positive number means found a candidate
-		// For each upper pentagonal number index, going upward
-		for (int i = 2; ; i++) {
-			long pentI = pentagonalNumber(i);
-			// If the next number down is at least as big as a found difference, then conclude searching
-			if (minD != -1 && pentI - pentagonalNumber(i - 1) >= minD) break;
-			// For each lower pentagonal number index, going downward
-			for (int j = i - 1; j >= 1; j--) {
-				long pentJ = pentagonalNumber(j);
-				long diff = pentI - pentJ;
-				// If the difference is at least as big as a found difference, then stop testing lower pentagonal numbers
-				if (minD != -1 && diff >= minD) break;
-				else if (isPentagonalNumber(pentI + pentJ) && isPentagonalNumber(diff))
-					minD = diff; // Found a smaller difference
-			}
-		}
-		return Long.toString(minD);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p060.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p060.java b/Random_Work/src/projectEuler/programs/p060.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p060.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,86 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.BitSet;
-import java.util.stream.IntStream;
-
-import static java.util.Arrays.copyOf;
-import static java.util.Arrays.stream;
-
-public final class p060 extends EulerSolution {
-	private static final int PRIME_LIMIT = 100000; // Arbitrary initial cutoff
-	private final int[] primes = Library.listPrimes(PRIME_LIMIT);
-	// Memoization
-	private BitSet isConcatPrimeKnown;
-	private BitSet isConcatPrime;
-
-	public static void main(String[] args) {
-		System.out.println(new p060().run());
-	}
-
-	@NotNull String run() {
-		isConcatPrimeKnown = new BitSet(primes.length * primes.length);
-		isConcatPrime = new BitSet(primes.length * primes.length);
-		int sumLimit = PRIME_LIMIT;
-		while (true) {
-			int sum = findSetSum(new int[]{}, 5, sumLimit - 1);
-			// No smaller sum found
-			if (sum == -1) return Integer.toString(sumLimit);
-			sumLimit = sum;
-		}
-	}
-
-	/*
-	 * Tries to find any suitable set and return its sum, or -1 if none is found.
-	 * A set is suitable if it contains only primes, its size is 'targetSize',
-	 * its sum is less than or equal to 'sumLimit', and each pair concatenates to a prime.
-	 * 'prefix' is an array of ascending indices into the 'primes' array,
-	 * which describes the set found so far.
-	 * The function blindly assumes that each pair of primes in 'prefix' concatenates to a prime.
-	 *
-	 * For example, findSetSum(new int[]{1, 3, 28}, 5, 10000) means "find the sum of any set
-	 * where the set has size 5, consists of primes with the lowest elements being {3, 7, 109},
-	 * has sum 10000 or less, and has each pair concatenating to form a prime".
-	 */
-	private int findSetSum(@NotNull int[] prefix, int targetSize, int sumLimit) {
-		if (prefix.length == targetSize) {
-			return stream(prefix).map(i -> primes[i]).sum();
-		} else {
-			int i = prefix.length == 0 ? 0 : prefix[prefix.length - 1] + 1;
-			outer:
-			for (; i < primes.length && primes[i] <= sumLimit; i++) {
-				for (int j : prefix) if (isConcatPrime(i, j) || isConcatPrime(j, i)) continue outer;
-				int[] appended = copyOf(prefix, prefix.length + 1);
-				appended[appended.length - 1] = i;
-				int sum = findSetSum(appended, targetSize, sumLimit - primes[i]);
-				if (sum != -1) return sum;
-			}
-			return -1;
-		}
-	}
-
-	// Tests whether parseInt(toString(x) + toString(y)) is prime.
-	private boolean isConcatPrime(int x, int y) {
-		int index = x * primes.length + y;
-		if (isConcatPrimeKnown.get(index)) return !isConcatPrime.get(index);
-		x = primes[x];
-		y = primes[y];
-		int mult = IntStream.iterate(y, temp -> temp != 0, temp -> temp / 10).map(temp -> 10).reduce(1, (a, b) -> a * b);
-		boolean result = isPrime((long) x * mult + y);
-		isConcatPrimeKnown.set(index);
-		isConcatPrime.set(index, result);
-		return !result;
-	}
-
-	private boolean isPrime(long x) {
-		if (x < 0) throw new IllegalArgumentException();
-		else if ((x == 0) || (x == 1)) return false;
-		else {
-			long end = Library.sqrt(x);
-			if (stream(primes).takeWhile(p -> p <= end).anyMatch(p -> x % p == 0)) return false;
-			for (long i = primes[primes.length - 1] + 2; i <= end; i += 2) if (x % i == 0) return false;
-			return true;
-		}
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/help-doc.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/help-doc.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/help-doc.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/help-doc.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,286 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		API Help
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "API Help";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Help</B></span>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?help-doc.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="help-doc.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H1>
-		How This API Document Is Organized</H1>
-</div>
-This API (Application Programming Interface) document has pages corresponding to the items in the navigation bar,
-described as follows.<H3>
-	Overview</H3>
-<BLOCKQUOTE>
-
-	<P>
-		The <A HREF="overview-summary.html">Overview</A> page is the front page of this API document and provides a
-		list
-		of all packages with a summary for each. This page can also contain an overall description of the set of
-		packages.</BLOCKQUOTE>
-<H3>
-	Package</H3>
-<BLOCKQUOTE>
-
-	<P>
-		Each package has a page that contains a list of its classes and interfaces, with a summary for each. This page
-		can contain four categories:
-	<UL>
-		<LI>Interfaces (italic)
-		<LI>Classes
-		<LI>Enums
-		<LI>Exceptions
-		<LI>Errors
-		<LI>Annotation Types
-	</UL>
-</BLOCKQUOTE>
-<H3>
-	Class/Interface</H3>
-<BLOCKQUOTE>
-
-	<P>
-		Each class, interface, nested class and nested interface has its own separate page. Each of these pages has
-		three sections consisting of a class/interface description, summary tables, and detailed member descriptions:
-		<UL>
-			<LI>Class inheritance diagram
-			<LI>Direct Subclasses
-			<LI>All Known Subinterfaces
-			<LI>All Known Implementing Classes
-			<LI>Class/interface declaration
-			<LI>Class/interface description
-	<P>
-		<LI>Nested Class Summary
-		<LI>Field Summary
-		<LI>Constructor Summary
-		<LI>Method Summary
-	<P>
-		<LI>Field Detail
-		<LI>Constructor Detail
-	<LI>Method Detail</LI>
-	Each summary entry contains the first sentence from the detailed description for that item. The summary entries
-	are alphabetical, while the detailed descriptions are in the order they appear in the source code. This
-	preserves the logical groupings established by the programmer.
-</BLOCKQUOTE>
-<H3>
-	Annotation Type</H3>
-<BLOCKQUOTE>
-
-	<P>
-		Each annotation type has its own separate page with the following sections:
-	<UL>
-		<LI>Annotation Type declaration
-		<LI>Annotation Type description
-		<LI>Required Element Summary
-		<LI>Optional Element Summary
-		<LI>Element Detail
-	</UL>
-</BLOCKQUOTE>
-<H3>
-	Enum</H3>
-<BLOCKQUOTE>
-
-	<P>
-		Each enum has its own separate page with the following sections:
-	<UL>
-		<LI>Enum declaration
-		<LI>Enum description
-		<LI>Enum Constant Summary
-		<LI>Enum Constant Detail
-	</UL>
-</BLOCKQUOTE>
-<H3>
-	Tree (Class Hierarchy)</H3>
-<BLOCKQUOTE>
-	There is a <A HREF="overview-tree.html">Class Hierarchy</A> page for all packages, plus a hierarchy for each
-	package. Each hierarchy page contains a list of classes and a list of interfaces. The classes are organized by
-	inheritance structure starting with <code>java.lang.Object</code>. The interfaces do not inherit from <code>java.lang.Object</code>.
-	<UL>
-		<LI>When viewing the Overview page, clicking on "Tree" displays the hierarchy for all packages.
-		<LI>When viewing a particular package, class or interface page, clicking "Tree" displays the hierarchy for only
-			that package.
-	</UL>
-</BLOCKQUOTE>
-<H3>
-	Deprecated API</H3>
-<BLOCKQUOTE>
-	The <A HREF="deprecated-list.html">Deprecated API</A> page lists all of the API that have been deprecated. A
-	deprecated API is not recommended for use, generally due to improvements, and a replacement API is usually given.
-	Deprecated APIs may be removed in future implementations.
-</BLOCKQUOTE>
-<H3>
-	Index</H3>
-<BLOCKQUOTE>
-	The <A HREF="index-all.html">Index</A> contains an alphabetic list of all classes, interfaces, constructors,
-	methods, and fields.
-</BLOCKQUOTE>
-<H3>
-	Prev/Next</H3>
-These links take you to the next or previous class, interface, package, or related page.<H3>
-	Frames/No Frames</H3>
-These links show and hide the HTML frames. All pages are available with or without frames.
-<P>
-<H3>
-	Serialized Form</H3>
-Each serializable or externalizable class has a description of its serialization fields and methods. This information is
-of interest to re-implementors, not to developers using the API. While there is no link in the navigation bar, you can
-get to this information by going to any serialized class and clicking "Serialized Form" in the "See also" section of the
-class description.
-<P>
-<H3>
-	Constant Field Values</H3>
-The <a href="constant-values.html">Constant Field Values</a> page lists the static final fields and their values.
-<P>
-	<span SIZE="-1">
-		<EM>
-			This help file applies to API documentation generated using the standard doclet.</EM>
-	</span>
-	<BR>
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Help</B></span>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?help-doc.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="help-doc.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p072.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p072.java b/Random_Work/src/projectEuler/programs/p072.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p072.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,21 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.util.Arrays.stream;
-import static projectEuler.programs.Library.listTotients;
-import static projectEuler.programs.Library.pow;
-
-public final class p072 extends EulerSolution {
-	private static final int LIMIT = pow(10, 6);
-
-	public static void main(String[] args) {
-		System.out.println(new p072().run());
-	}
-
-	@NotNull String run() {
-		int[] totients = listTotients(LIMIT);
-		long sum = stream(totients, 2, totients.length).sum();
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Grid.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Grid.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Grid.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/grid/Grid.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,648 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Grid
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Grid";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/Grid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Grid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.grid</span>
-	<BR>
-	Interface Grid&lt;E&gt;</H2>
-<DL>
-	<DT><B>All Known Implementing Classes:</B>
-	<DD><A HREF="../../../info/gridworld/grid/AbstractGrid.html"
-	       title="class in info.gridworld.grid">AbstractGrid</A>,
-		<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid">BoundedGrid</A>,
-		<A
-				HREF="../../../info/gridworld/grid/UnboundedGrid.html" title="class in info.gridworld.grid">UnboundedGrid</A>
-	</DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public interface <B>Grid&lt;E&gt;</B></PRE>
-</DL>
-
-<P>
-	<code>Grid</code> provides an interface for a two-dimensional, grid-like
-	environment containing arbitrary objects. <br/>
-	This interface is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ========== METHOD SUMMARY =========== -->
-
-	<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html"
-			               title="type parameter in Grid">E</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Grid.html#get(info.gridworld.grid.Location)">get</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the object at a given location in this
-			grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)">getEmptyAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid empty locations adjacent to a
-			given location in all eight
-			compass directions (north, northeast, east, southeast, south, southwest,
-			west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Grid.html"
-					title="type parameter in Grid">E</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Grid.html#getNeighbors(info.gridworld.grid.Location)">getNeighbors</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the neighboring occupants in all eight
-			compass directions (north,
-			northeast, east, southeast, south, southwest, west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Grid.html#getNumCols()">getNumCols</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of columns in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/grid/Grid.html#getNumRows()">getNumRows</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Returns the number of rows in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)">getOccupiedAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid occupied locations adjacent to a
-			given location in all
-			eight compass directions (north, northeast, east, southeast, south,
-			southwest, west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#getOccupiedLocations()">getOccupiedLocations</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the locations in this grid that contain
-			objects.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-			               title="class or interface in java.util">ArrayList</A>&lt;<A
-					HREF="../../../info/gridworld/grid/Location.html"
-					title="class in info.gridworld.grid">Location</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#getValidAdjacentLocations(info.gridworld.grid.Location)">getValidAdjacentLocations</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the valid locations adjacent to a given
-			location in all eight
-			compass directions (north, northeast, east, southeast, south, southwest,
-			west, and northwest).
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;boolean</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#isValid(info.gridworld.grid.Location)">isValid</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Checks whether a location is valid in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html"
-			               title="type parameter in Grid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#put(info.gridworld.grid.Location, E)">put</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-			<A HREF="../../../info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A>&nbsp;obj)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Puts an object at a given location in this grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html"
-			               title="type parameter in Grid">E</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/grid/Grid.html#remove(info.gridworld.grid.Location)">remove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes the object at a given location from this
-			grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ============ METHOD DETAIL ========== -->
-
-	<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getNumRows()"><!-- --></A>
-<H3>
-	getNumRows</H3>
-<PRE>
-int <B>getNumRows</B>()</PRE>
-<DL>
-	<DD>Returns the number of rows in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of rows, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getNumCols()"><!-- --></A>
-<H3>
-	getNumCols</H3>
-<PRE>
-int <B>getNumCols</B>()</PRE>
-<DL>
-	<DD>Returns the number of columns in this grid.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the number of columns, or -1 if this grid is unbounded
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="isValid(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	isValid</H3>
-<PRE>
-boolean <B>isValid</B>(<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Checks whether a location is valid in this grid. <br/>
-		Precondition: <code>loc</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location to check
-			<DT><B>Returns:</B>
-			<DD><code>true</code> if <code>loc</code> is valid in this grid,
-				<code>false</code> otherwise
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="put(info.gridworld.grid.Location,java.lang.Object)"><!-- --></A><A
-		NAME="put(info.gridworld.grid.Location, E)">
-	<!-- --></A>
-<H3>
-	put</H3>
-<PRE>
-<A HREF="../../../info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A> <B>put</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-      <A HREF="../../../info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A>&nbsp;obj)</PRE>
-<DL>
-	<DD>Puts an object at a given location in this grid. <br/>
-		Precondition: (1) <code>loc</code> is valid in this grid (2)
-		<code>obj</code> is not <code>null</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location at which to put the object
-			<DD><CODE>obj</CODE> - the new object to be added
-			<DT><B>Returns:</B>
-			<DD>the object previously at <code>loc</code> (or <code>null</code>
-				if the location was previously unoccupied)
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="remove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	remove</H3>
-<PRE>
-<A HREF="../../../info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A> <B>remove</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Removes the object at a given location from this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location of the object that is to be removed
-			<DT><B>Returns:</B>
-			<DD>the object that was removed (or <code>null<code> if the location
-				is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="get(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	get</H3>
-<PRE>
-<A HREF="../../../info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A> <B>get</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Returns the object at a given location in this grid. <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>the object at location <code>loc</code> (or <code>null<code>
-				if the location is unoccupied)
-			</code>
-			</code>
-			</DD>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupiedLocations()"><!-- --></A>
-<H3>
-	getOccupiedLocations</H3>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-   title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/grid/Location.html"
-                                                               title="class in info.gridworld.grid">Location</A>&gt; <B>getOccupiedLocations</B>()</PRE>
-<DL>
-	<DD>Gets the locations in this grid that contain objects.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>an array list of all occupied locations in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getValidAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getValidAdjacentLocations</H3>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-   title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/grid/Location.html"
-                                                               title="class in info.gridworld.grid">Location</A>&gt; <B>getValidAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Gets the valid locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid locations adjacent to <code>loc</code>
-				in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getEmptyAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getEmptyAdjacentLocations</H3>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-   title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/grid/Location.html"
-                                                               title="class in info.gridworld.grid">Location</A>&gt; <B>getEmptyAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Gets the valid empty locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid empty locations adjacent to
-				<code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getOccupiedAdjacentLocations(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getOccupiedAdjacentLocations</H3>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-   title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/grid/Location.html"
-                                                               title="class in info.gridworld.grid">Location</A>&gt; <B>getOccupiedAdjacentLocations</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Gets the valid occupied locations adjacent to a given location in all
-		eight compass directions (north, northeast, east, southeast, south,
-		southwest, west, and northwest). <br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>an array list of the valid occupied locations adjacent to
-				<code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getNeighbors(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	getNeighbors</H3>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/util/ArrayList.html?is-external=true"
-   title="class or interface in java.util">ArrayList</A>&lt;<A HREF="../../../info/gridworld/grid/Grid.html"
-                                                               title="type parameter in Grid">E</A>&gt; <B>getNeighbors</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Gets the neighboring occupants in all eight compass directions (north,
-		northeast, east, southeast, south, southwest, west, and northwest).
-		<br/>
-		Precondition: <code>loc</code> is valid in this grid
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - a location in this grid
-			<DT><B>Returns:</B>
-			<DD>returns an array list of the objects in the occupied locations
-				adjacent to <code>loc</code> in this grid
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/grid/Grid.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Grid.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;CONSTR&nbsp;|&nbsp;<A HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p054.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p054.java b/Random_Work/src/projectEuler/programs/p054.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p054.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,115 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-public final class p054 extends EulerSolution {
-	private static final String[] HANDS = {"8C TS KC 9H 4S 7D 2S 5D 3S AC", "5C AD 5D AC 9C 7C 5H 8D TD KS", "3H 7H 6S KC JS QH TD JC 2D 8S", "TH 8H 5C QS TC 9H 4D JC KS JS", "7C 5H KC QH JD AS KH 4C AD 4S", "5H KS 9C 7D 9H 8D 3S 5D 5C AH", "6H 4H 5C 3H 2H 3S QH 5S 6S AS", "TD 8C 4H 7C TC KC 4C 3H 7S KS", "7C 9C 6D KD 3H 4C QS QC AC KH", "JC 6S 5H 2H 2D KD 9D 7C AS JS", "AD QH TH 9D 8H TS 6D 3S AS AC", "2H 4S 5C 5S TC KC JD 6C TS 3C", "QD AS 6H JS 2C 3D 9H KC 4H 8S", "KD 8S 9S 7C 2S 3S 6D 6S 4H KC", "3C 8C 2D 7D 4D 9S 4S QH 4H JD", "8C KC 7S TC 2D TS 8H QD AC 5C", "3D KH QD 6C 6S AD AS 8H 2H QS", "6S 8D 4C 8S 6C QH TC 6D 7D 9D", "2S 8D 8C 4C TS 9S 9D 9C AC 3D", "3C QS 2S 4H JH 3D 2D TD 8S 9H", "5H QS 8S 6D 3C 8C JD AS 7H 7D", "6H TD 9D AS JH 6C QC 9S KD JC", "AH 8S QS 4D TH AC TS 3C 3D 5C", "5S 4D JS 3D 8H 6C TS 3S AD 8C", "6D 7C 5D 5H 3S 5C JC 2H 5S 3D", "5H 6H 2S KS 3D 5D JD 7H JS 8H", "KH 4H AS JS QS QC TC 6D 7C KS", "3D QS TS 2H JS 4D AS 9S JC KD", "QD 5H 4D 5D KH 7H 3D JS KD 4H", "2C 9H 6H 5C 9D 6C JC 2D TH 9S", "7D 6D AS QD JH 4D JS 7C QS 5C", "3H KH QD AD 8C 8H 3S TH 9D 5S", "AH 9S 4D 9D 8S 4H JS 3C TC 8D", "2C KS 5H QD 3S TS 9H AH AD 8S", "5C 7H 5D KD 9H 4D 3D 2D KS AD", "KS KC 9S 6D 2C QH 9D 9H TS TC", "9C 6H 5D QH 4D AD 6D QC JS KH", "9S 3H 9D JD 5C 4D 9H AS TC QH", "2C 6D JC 9C 3C AD 9S KH 9D 7D", "KC 9C 7C JC JS KD 3H AS 3C 7D", "QD KH QS 2C 3S 8S 8H 9H 9C JC", "QH 8D 3C KC 4C 4H 6D AD 9H 9D", "3S KS QS 7H KH 7D 5H 5D JD AD", "2H 2C 6H TH TC 7D 8D 4H 8C AS", "4S 2H AC QC 3S 6D TH 4D 4C KH", "4D TC KS AS 7C 3C 6D 2D 9H 6C", "8C TD 5D QS 2C 7H 4C 9C 3H 9H", "5H JH TS 7S TD 6H AD QD 8H 8S", "5S AD 9C 8C 7C 8D 5H 9D 8S 2S", "4H KH KS 9S 2S KC 5S AD 4S 7D", "QS 9C QD 6H JS 5D AC 8D 2S AS", "KH AC JC 3S 9D 9S 3C 9C 5S JS", "AD 3C 3D KS 3S 5C 9C 8C TS 4S", "JH 8D 5D 6H KD QS QD 3D 6C KC", "8S JD 6C 3S 8C TC QC 3C QH JS", "KC JC 8H 2S 9H 9C JH 8S 8C 9S", "8S 2H QH 4D QC 9D KC AS TH 3C", "8S 6H TH 7C 2H 6S 3C 3H AS 7S", "QH 5S JS 4H 5H TS 8H AH AC JC", "9D 8H 2S 4S TC JC 3C 7H 3H 5C", "3D AD 3C 3S 4C QC AS 5D TH 8C", "6S 9D 4C JS KH AH TS JD 8H AD", "4C 6S 9D 7S AC 4D 3D 3S TC JD", "AD 7H 6H 4H JH KC TD TS 7D 6S", "8H JH TC 3S 8D 8C 9S 2C 5C 4D", "2C 9D KC QH TH QS JC 9C 4H TS", "QS 3C QD 8H KH 4H 8D TD 8S AC", "7C 3C TH 5S 8H 8C 9C JD TC KD", "QC TC JD TS 8C 3H 6H KD 7C TD", "JH QS KS 9C 6D 6S AS 9H KH 6H", "2H 4D AH 2D JH 6H TD 5D 4H JD", "KD 8C 9S JH QD JS 2C QS 5C 7C", "4S TC 7H 8D 2S 6H 7S 9C 7C KC", "8C 5D 7H 4S TD QC 8S JS 4H KS", "AD 8S JH 6D TD KD 7C 6C 2D 7D", "JC 6H 6S JS 4H QH 9H AH 4C 3C", "6H 5H AS 7C 7S 3D KH KC 5D 5C", "JC 3D TD AS 4D 6D 6S QH JD KS", "8C 7S 8S QH 2S JD 5C 7H AH QD", "8S 3C 6H 6C 2C 8D TD 7D 4C 4D", "5D QH KH 7C 2S 7H JS 6D QC QD", "AD 6C 6S 7D TH 6H 2H 8H KH 4H", "KS JS KD 5D 2D KH 7D 9C 8C 3D", "9C 6D QD 3C KS 3S 7S AH JD 2D", "AH QH AS JC 8S 8H 4C KC TH 7D", "JC 5H TD 7C 5D KD 4C AD 8H JS", "KC 2H AC AH 7D JH KH 5D 7S 6D", "9S 5S 9C 6H 8S TD JD 9H 6C AC", "7D 8S 6D TS KD 7H AC 5S 7C 5D", "AH QC JC 4C TC 8C 2H TS 2C 7D", "KD KC 6S 3D 7D 2S 8S 3H 5S 5C", "8S 5D 8H 4C 6H KC 3H 7C 5S KD", "JH 8C 3D 3C 6C KC TD 7H 7C 4C", "JC KC 6H TS QS TD KS 8H 8C 9S", "6C 5S 9C QH 7D AH KS KC 9S 2C", "4D 4S 8H TD 9C 3S 7D 9D AS TH", "6S 7D 3C 6H 5D KD 2C 5C 9D 9C", "2H KC 3D AD 3H QD QS 8D JC 4S", "8C 3H 9C 7C AD 5D JC 9D JS AS", "5D 9H 5C 7H 6S 6C QC JC QD 9S", "JC QS JH 2C 6S 9C QC 3D 4S TC", "4H 5S 8D 3D 4D 2S KC 2H JS 2C", "TD 3S TH KD 4D 7H JH JS KS AC", "7S 8C 9S 2D 8S 7D 5C AD 9D AS", "8C 7H 2S 6C TH 3H 4C 3S 8H AC", "KD 5H JC 8H JD 2D 4H TD JH 5C", "3D AS QH KS 7H JD 8S 5S 6D 5H", "9S 6S TC QS JC 5C 5D 9C TH 8C", "5H 3S JH 9H 2S 2C 6S 7S AS KS", "8C QD JC QS TC QC 4H AC KH 6C", "TC 5H 7D JH 4H 2H 8D JC KS 4D", "5S 9C KH KD 9H 5C TS 3D 7D 2D", "5H AS TC 4D 8C 2C TS 9D 3H 8D", "6H 8D 2D 9H JD 6C 4S 5H 5S 6D", "AD 9C JC 7D 6H 9S 6D JS 9H 3C", "AD JH TC QS 4C 5D 9S 7C 9C AH", "KD 6H 2H TH 8S QD KS 9D 9H AS", "4H 8H 8D 5H 6C AH 5S AS AD 8S", "QS 5D 4S 2H TD KS 5H AC 3H JC", "9C 7D QD KD AC 6D 5H QH 6H 5S", "KC AH QH 2H 7D QS 3H KS 7S JD", "6C 8S 3H 6D KS QD 5D 5C 8H TC", "9H 4D 4S 6S 9D KH QC 4H 6C JD", "TD 2D QH 4S 6H JH KD 3C QD 8C", "4S 6H 7C QD 9D AS AH 6S AD 3C", "2C KC TH 6H 8D AH 5C 6D 8S 5D", "TD TS 7C AD JC QD 9H 3C KC 7H", "5D 4D 5S 8H 4H 7D 3H JD KD 2D", "JH TD 6H QS 4S KD 5C 8S 7D 8H", "AC 3D AS 8C TD 7H KH 5D 6C JD", "9D KS 7C 6D QH TC JD KD AS KC", "JH 8S 5S 7S 7D AS 2D 3D AD 2H", "2H 5D AS 3C QD KC 6H 9H 9S 2C", "9D 5D TH 4C JH 3H 8D TC 8H 9H", "6H KD 2C TD 2H 6C 9D 2D JS 8C", "KD 7S 3C 7C AS QH TS AD 8C 2S", "QS 8H 6C JS 4C 9S QC AD TD TS", "2H 7C TS TC 8C 3C 9H 2D 6D JC", "TC 2H 8D JH KS 6D 3H TD TH 8H", "9D TD 9H QC 5D 6C 8H 8C KC TS", "2H 8C 3D AH 4D TH TC 7D 8H KC", "TS 5C 2D 8C 6S KH AH 5H 6H KC", "5S 5D AH TC 4C JD 8D 6H 8C 6C", "KC QD 3D 8H 2D JC 9H 4H AD 2S", "TD 6S 7D JS KD 4H QS 2S 3S 8C", "4C 9H JH TS 3S 4H QC 5S 9S 9C", "2C KD 9H JS 9S 3H JC TS 5D AC", "AS 2H 5D AD 5H JC 7S TD JS 4C", "2D 4S 8H 3D 7D 2C AD KD 9C TS", "7H QD JH 5H JS AC 3D TH 4C 8H", "6D KH KC QD 5C AD 7C 2D 4H AC", "3D 9D TC 8S QD 2C JC 4H JD AH", "6C TD 5S TC 8S AH 2C 5D AS AC", "TH 7S 3D AS 6C 4C 7H 7D 4H AH", "5C 2H KS 6H 7S 4H 5H 3D 3C 7H", "3C 9S AC 7S QH 2H 3D 6S 3S 3H", "2D 3H AS 2C 6H TC JS 6S 9C 6C", "QH KD QD 6D AC 6H KH 2C TS 8C", "8H 7D 3S 9H 5D 3H 4S QC 9S 5H", "2D 9D 7H 6H 3C 8S 5H 4D 3S 4S", "KD 9S 4S TC 7S QC 3S 8S 2H 7H", "TC 3D 8C 3H 6C 2H 6H KS KD 4D", "KC 3D 9S 3H JS 4S 8H 2D 6C 8S", "6H QS 6C TC QD 9H 7D 7C 5H 4D", "TD 9D 8D 6S 6C TC 5D TS JS 8H", "4H KC JD 9H TC 2C 6S 5H 8H AS", "JS 9C 5C 6S 9D JD 8H KC 4C 6D", "4D 8D 8S 6C 7C 6H 7H 8H 5C KC", "TC 3D JC 6D KS 9S 6H 7S 9C 2C", "6C 3S KD 5H TS 7D 9H 9S 6H KH", "3D QD 4C 6H TS AC 3S 5C 2H KD", "4C AS JS 9S 7C TS 7H 9H JC KS", "4H 8C JD 3H 6H AD 9S 4S 5S KS", "4C 2C 7D 3D AS 9C 2S QS KC 6C", "8S 5H 3D 2S AC 9D 6S 3S 4D TD", "QD TH 7S TS 3D AC 7H 6C 5D QC", "TC QD AD 9C QS 5C 8D KD 3D 3C", "9D 8H AS 3S 7C 8S JD 2D 8D KC", "4C TH AC QH JS 8D 7D 7S 9C KH", "9D 8D 4C JH 2C 2S QD KD TS 4H", "4D 6D 5D 2D JH 3S 8S 3H TC KH", "AD 4D 2C QS 8C KD JH JD AH 5C", "5C 6C 5H 2H JH 4H KS 7C TC 3H", "3C 4C QC 5D JH 9C QD KH 8D TC", "3H 9C JS 7H QH AS 7C 9H 5H JC", "2D 5S QD 4S 3C KC 6S 6C 5C 4C", "5D KH 2D TS 8S 9C AS 9S 7C 4C", "7C AH 8C 8D 5S KD QH QS JH 2C", "8C 9D AH 2H AC QC 5S 8H 7H 2C", "QD 9H 5S QS QC 9C 5H JC TH 4H", "6C 6S 3H 5H 3S 6H KS 8D AC 7S", "AC QH 7H 8C 4S KC 6C 3D 3S TC", "9D 3D JS TH AC 5H 3H 8S 3S TC", "QD KH JS KS 9S QC 8D AH 3C AC", "5H 6C KH 3S 9S JH 2D QD AS 8C", "6C 4D 7S 7H 5S JC 6S 9H 4H JH", "AH 5S 6H 9S AD 3S TH 2H 9D 8C", "4C 8D 9H 7C QC AD 4S 9C KC 5S", "9D 6H 4D TC 4C JH 2S 5D 3S AS", "2H 6C 7C KH 5C AD QS TH JD 8S", "3S 4S 7S AH AS KC JS 2S AD TH", "JS KC 2S 7D 8C 5C 9C TS 5H 9D", "7S 9S 4D TD JH JS KH 6H 5D 2C", "JD JS JC TH 2D 3D QD 8C AC 5H", "7S KH 5S 9D 5D TD 4S 6H 3C 2D", "4S 5D AC 8D 4D 7C AD AS AH 9C", "6S TH TS KS 2C QC AH AS 3C 4S", "2H 8C 3S JC 5C 7C 3H 3C KH JH", "7S 3H JC 5S 6H 4C 2S 4D KC 7H", "4D 7C 4H 9S 8S 6S AD TC 6C JC", "KH QS 3S TC 4C 8H 8S AC 3C TS", "QD QS TH 3C TS 7H 7D AH TD JC", "TD JD QC 4D 9S 7S TS AD 7D AC", "AH 7H 4S 6D 7C 2H 9D KS JC TD", "7C AH JD 4H 6D QS TS 2H 2C 5C", "TC KC 8C 9S 4C JS 3C JC 6S AH", "AS 7D QC 3D 5S JC JD 9D TD KH", "TH 3C 2S 6H AH AC 5H 5C 7S 8H", "QC 2D AC QD 2S 3S JD QS 6S 8H", "KC 4H 3C 9D JS 6H 3S 8S AS 8C", "7H KC 7D JD 2H JC QH 5S 3H QS", "9H TD 3S 8H 7S AC 5C 6C AH 7C", "8D 9H AH JD TD QS 7D 3S 9C 8S", "AH QH 3C JD KC 4S 5S 5D TD KS", "9H 7H 6S JH TH 4C 7C AD 5C 2D", "7C KD 5S TC 9D 6S 6C 5D 2S TH", "KC 9H 8D 5H 7H 4H QC 3D 7C AS", "6S 8S QC TD 4S 5C TH QS QD 2S", "8S 5H TH QC 9H 6S KC 7D 7C 5C", "7H KD AH 4D KH 5C 4S 2D KC QH", "6S 2C TD JC AS 4D 6C 8C 4H 5S", "JC TC JD 5S 6S 8D AS 9D AD 3S", "6D 6H 5D 5S TC 3D 7D QS 9D QD", "4S 6C 8S 3S 7S AD KS 2D 7D 7C", "KC QH JC AC QD 5D 8D QS 7H 7D", "JS AH 8S 5H 3D TD 3H 4S 6C JH", "4S QS 7D AS 9H JS KS 6D TC 5C", "2D 5C 6H TC 4D QH 3D 9H 8S 6C", "6D 7H TC TH 5S JD 5C 9C KS KD", "8D TD QH 6S 4S 6C 8S KC 5C TC", "5S 3D KS AC 4S 7D QD 4C TH 2S", "TS 8H 9S 6S 7S QH 3C AH 7H 8C", "4C 8C TS JS QC 3D 7D 5D 7S JH", "8S 7S 9D QC AC 7C 6D 2H JH KC", "JS KD 3C 6S 4S 7C AH QC KS 5H", "KS 6S 4H JD QS TC 8H KC 6H AS", "KH 7C TC 6S TD JC 5C 7D AH 3S", "3H 4C 4H TC TH 6S 7H 6D 9C QH", "7D 5H 4S 8C JS 4D 3D 8S QH KC", "3H 6S AD 7H 3S QC 8S 4S 7S JS", "3S JD KH TH 6H QS 9C 6C 2D QD", "4S QH 4D 5H KC 7D 6D 8D TH 5S", "TD AD 6S 7H KD KH 9H 5S KC JC", "3H QC AS TS 4S QD KS 9C 7S KC", "TS 6S QC 6C TH TC 9D 5C 5D KD", "JS 3S 4H KD 4C QD 6D 9S JC 9D", "8S JS 6D 4H JH 6H 6S 6C KS KH", "AC 7D 5D TC 9S KH 6S QD 6H AS", "AS 7H 6D QH 8D TH 2S KH 5C 5H", "4C 7C 3D QC TC 4S KH 8C 2D JS", "6H 5D 7S 5H 9C 9H JH 8S TH 7H", "AS JS 2S QD KH 8H 4S AC 8D 8S", "3H 4C TD KD 8C JC 5C QS 2D JD", "TS 7D 5D 6C 2C QS 2H 3C AH KS", "4S 7C 9C 7D JH 6C 5C 8H 9D QD", "2S TD 7S 6D 9C 9S QS KH QH 5C", "JC 6S 9C QH JH 8D 7S JS KH 2H", "8D 5H TH KC 4D 4S 3S 6S 3D QS", "2D JD 4C TD 7C 6D TH 7S JC AH", "QS 7S 4C TH 9D TS AD 4D 3H 6H", "2D 3H 7D JD 3D AS 2S 9C QC 8S", "4H 9H 9C 2C 7S JH KD 5C 5D 6H", "TC 9H 8H JC 3C 9S 8D KS AD KC", "TS 5H JD QS QH QC 8D 5D KH AH", "5D AS 8S 6S 4C AH QC QD TH 7H", "3H 4H 7D 6S 4S 9H AS 8H JS 9D", "JD 8C 2C 9D 7D 5H 5S 9S JC KD", "KD 9C 4S QD AH 7C AD 9D AC TD", "6S 4H 4S 9C 8D KS TC 9D JH 7C", "5S JC 5H 4S QH AC 2C JS 2S 9S", "8C 5H AS QD AD 5C 7D 8S QC TD", "JC 4C 8D 5C KH QS 4D 6H 2H 2C", "TH 4S 2D KC 3H QD AC 7H AD 9D", "KH QD AS 8H TH KC 8D 7S QH 8C", "JC 6C 7D 8C KH AD QS 2H 6S 2D", "JC KH 2D 7D JS QC 5H 4C 5D AD", "TS 3S AD 4S TD 2D TH 6S 9H JH", "9H 2D QS 2C 4S 3D KH AS AC 9D", "KH 6S 8H 4S KD 7D 9D TS QD QC", "JH 5H AH KS AS AD JC QC 5S KH", "5D 7D 6D KS KD 3D 7C 4D JD 3S", "AC JS 8D 5H 9C 3H 4H 4D TS 2C", "6H KS KH 9D 7C 2S 6S 8S 2H 3D", "6H AC JS 7S 3S TD 8H 3H 4H TH", "9H TC QC KC 5C KS 6H 4H AC 8S", "TC 7D QH 4S JC TS 6D 6C AC KH", "QH 7D 7C JH QS QD TH 3H 5D KS", "3D 5S 8D JS 4C 2C KS 7H 9C 4H", "5H 8S 4H TD 2C 3S QD QC 3H KC", "QC JS KD 9C AD 5S 9D 7D 7H TS", "8C JC KH 7C 7S 6C TS 2C QD TH", "5S 9D TH 3C 7S QH 8S 9C 2H 5H", "5D 9H 6H 2S JS KH 3H 7C 2H 5S", "JD 5D 5S 2C TC 2S 6S 6C 3C 8S", "4D KH 8H 4H 2D KS 3H 5C 2S 9H", "3S 2D TD 7H 8S 6H JD KC 9C 8D", "6S QD JH 7C 9H 5H 8S 8H TH TD", "QS 7S TD 7D TS JC KD 7C 3C 2C", "3C JD 8S 4H 2D 2S TD AS 4D AC", "AH KS 6C 4C 4S 7D 8C 9H 6H AS", "5S 3C 9S 2C QS KD 4D 4S AC 5D", "2D TS 2C JS KH QH 5D 8C AS KC", "KD 3H 6C TH 8S 7S KH 6H 9S AC", "6H 7S 6C QS AH 2S 2H 4H 5D 5H", "5H JC QD 2C 2S JD AS QC 6S 7D", "6C TC AS KD 8H 9D 2C 7D JH 9S", "2H 4C 6C AH 8S TD 3H TH 7C TS", "KD 4S TS 6C QH 8D 9D 9C AH 7D", "6D JS 5C QD QC 9C 5D 8C 2H KD", "3C QH JH AD 6S AH KC 8S 6D 6H", "3D 7C 4C 7S 5S 3S 6S 5H JC 3C", "QH 7C 5H 3C 3S 8C TS 4C KD 9C", "QD 3S 7S 5H 7H QH JC 7C 8C KD", "3C KD KH 2S 4C TS AC 6S 2C 7C", "2C KH 3C 4C 6H 4D 5H 5S 7S QD", "4D 7C 8S QD TS 9D KS 6H KD 3C", "QS 4D TS 7S 4C 3H QD 8D 9S TC", "TS QH AC 6S 3C 9H 9D QS 8S 6H", "3S 7S 5D 4S JS 2D 6C QH 6S TH", "4C 4H AS JS 5D 3D TS 9C AC 8S", "6S 9C 7C 3S 5C QS AD AS 6H 3C", "9S 8C 7H 3H 6S 7C AS 9H JD KH", "3D 3H 7S 4D 6C 7C AC 2H 9C TH", "4H 5S 3H AC TC TH 9C 9H 9S 8D", "8D 9H 5H 4D 6C 2H QD 6S 5D 3S", "4C 5C JD QS 4D 3H TH AC QH 8C", "QC 5S 3C 7H AD 4C KS 4H JD 6D", "QS AH 3H KS 9H 2S JS JH 5H 2H", "2H 5S TH 6S TS 3S KS 3C 5H JS", "2D 9S 7H 3D KC JH 6D 7D JS TD", "AC JS 8H 2C 8C JH JC 2D TH 7S", "5D 9S 8H 2H 3D TC AH JC KD 9C", "9D QD JC 2H 6D KH TS 9S QH TH", "2C 8D 4S JD 5H 3H TH TC 9C KC", "AS 3D 9H 7D 4D TH KH 2H 7S 3H", "4H 7S KS 2S JS TS 8S 2H QD 8D", "5S 6H JH KS 8H 2S QC AC 6S 3S", "JC AS AD QS 8H 6C KH 4C 4D QD", "2S 3D TS TD 9S KS 6S QS 5C 8D", "3C 6D 4S QC KC JH QD TH KH AD", "9H AH 4D KS 2S 8D JH JC 7C QS", "2D 6C TH 3C 8H QD QH 2S 3S KS", "6H 5D 9S 4C TS TD JS QD 9D JD", "5H 8H KH 8S KS 7C TD AD 4S KD", "2C 7C JC 5S AS 6C 7D 8S 5H 9C", "6S QD 9S TS KH QS 5S QH 3C KC", "7D 3H 3C KD 5C AS JH 7H 6H JD", "9D 5C 9H KC 8H KS 4S AD 4D 2S", "3S JD QD 8D 2S 7C 5S 6S 5H TS", "6D 9S KC TD 3S 6H QD JD 5C 8D", "5H 9D TS KD 8D 6H TD QC 4C 7D", "6D 4S JD 9D AH 9S AS TD 9H QD", "2D 5S 2H 9C 6H 9S TD QC 7D TC", "3S 2H KS TS 2C 9C 8S JS 9D 7D", "3C KC 6D 5D 6C 6H 8S AS 7S QS", "JH 9S 2H 8D 4C 8H 9H AD TH KH", "QC AS 2S JS 5C 6H KD 3H 7H 2C", "QD 8H 2S 8D 3S 6D AH 2C TC 5C", "JD JS TS 8S 3H 5D TD KC JC 6H", "6S QS TC 3H 5D AH JC 7C 7D 4H", "7C 5D 8H 9C 2H 9H JH KH 5S 2C", "9C 7H 6S TH 3S QC QD 4C AC JD", "2H 5D 9S 7D KC 3S QS 2D AS KH", "2S 4S 2H 7D 5C TD TH QH 9S 4D", "6D 3S TS 6H 4H KS 9D 8H 5S 2D", "9H KS 4H 3S 5C 5D KH 6H 6S JS", "KC AS 8C 4C JC KH QC TH QD AH", "6S KH 9S 2C 5H TC 3C 7H JC 4D", "JD 4S 6S 5S 8D 7H 7S 4D 4C 2H", "7H 9H 5D KH 9C 7C TS TC 7S 5H", "4C 8D QC TS 4S 9H 3D AD JS 7C", "8C QS 5C 5D 3H JS AH KC 4S 9D", "TS JD 8S QS TH JH KH 2D QD JS", "JD QC 5D 6S 9H 3S 2C 8H 9S TS", "2S 4C AD 7H JC 5C 2D 6D 4H 3D", "7S JS 2C 4H 8C AD QD 9C 3S TD", "JD TS 4C 6H 9H 7D QD 6D 3C AS", "AS 7C 4C 6S 5D 5S 5C JS QC 4S", "KD 6S 9S 7C 3C 5S 7D JH QD JS", "4S 7S JH 2C 8S 5D 7H 3D QH AD", "TD 6H 2H 8D 4H 2D 7C AD KH 5D", "TS 3S 5H 2C QD AH 2S 5C KH TD", "KC 4D 8C 5D AS 6C 2H 2S 9H 7C", "KD JS QC TS QS KH JH 2C 5D AD", "3S 5H KC 6C 9H 3H 2H AD 7D 7S", "7S JS JH KD 8S 7D 2S 9H 7C 2H", "9H 2D 8D QC 6S AD AS 8H 5H 6C", "2S 7H 6C 6D 7D 8C 5D 9D JC 3C", "7C 9C 7H JD 2H KD 3S KH AD 4S", "QH AS 9H 4D JD KS KD TS KH 5H", "4C 8H 5S 3S 3D 7D TD AD 7S KC", "JS 8S 5S JC 8H TH 9C 4D 5D KC", "7C 5S 9C QD 2C QH JS 5H 8D KH", "TD 2S KS 3D AD KC 7S TC 3C 5D", "4C 2S AD QS 6C 9S QD TH QH 5C", "8C AD QS 2D 2S KC JD KS 6C JC", "8D 4D JS 2H 5D QD 7S 7D QH TS", "6S 7H 3S 8C 8S 9D QS 8H 6C 9S", "4S TC 2S 5C QD 4D QS 6D TH 6S", "3S 5C 9D 6H 8D 4C 7D TC 7C TD", "AH 6S AS 7H 5S KD 3H 5H AC 4C", "8D 8S AH KS QS 2C AD 6H 7D 5D", "6H 9H 9S 2H QS 8S 9C 5D 2D KD", "TS QC 5S JH 7D 7S TH 9S 9H AC", "7H 3H 6S KC 4D 6D 5C 4S QD TS", "TD 2S 7C QD 3H JH 9D 4H 7S 7H", "KS 3D 4H 5H TC 2S AS 2D 6D 7D", "8H 3C 7H TD 3H AD KC TH 9C KH", "TC 4C 2C 9S 9D 9C 5C 2H JD 3C", "3H AC TS 5D AD 8D 6H QC 6S 8C", "2S TS 3S JD 7H 8S QH 4C 5S 8D", "AC 4S 6C 3C KH 3D 7C 2D 8S 2H", "4H 6C 8S TH 2H 4S 8H 9S 3H 7S", "7C 4C 9C 2C 5C AS 5D KD 4D QH", "9H 4H TS AS 7D 8D 5D 9S 8C 2H", "QC KD AC AD 2H 7S AS 3S 2D 9S", "2H QC 8H TC 6D QD QS 5D KH 3C", "TH JD QS 4C 2S 5S AD 7H 3S AS", "7H JS 3D 6C 3S 6D AS 9S AC QS", "9C TS AS 8C TC 8S 6H 9D 8D 6C", "4D JD 9C KC 7C 6D KS 3S 8C AS", "3H 6S TC 8D TS 3S KC 9S 7C AS", "8C QC 4H 4S 8S 6C 3S TC AH AC", "4D 7D 5C AS 2H 6S TS QC AD TC", "QD QC 8S 4S TH 3D AH TS JH 4H", "5C 2D 9S 2C 3H 3C 9D QD QH 7D", "KC 9H 6C KD 7S 3C 4D AS TC 2D", "3D JS 4D 9D KS 7D TH QC 3H 3C", "8D 5S 2H 9D 3H 8C 4C 4H 3C TH", "JC TH 4S 6S JD 2D 4D 6C 3D 4C", "TS 3S 2D 4H AC 2C 6S 2H JH 6H", "TD 8S AD TC AH AC JH 9S 6S 7S", "6C KC 4S JD 8D 9H 5S 7H QH AH", "KD 8D TS JH 5C 5H 3H AD AS JS", "2D 4H 3D 6C 8C 7S AD 5D 5C 8S", "TD 5D 7S 9C 4S 5H 6C 8C 4C 8S", "JS QH 9C AS 5C QS JC 3D QC 7C", "JC 9C KH JH QS QC 2C TS 3D AD", "5D JH AC 5C 9S TS 4C JD 8C KS", "KC AS 2D KH 9H 2C 5S 4D 3D 6H", "TH AH 2D 8S JC 3D 8C QH 7S 3S", "8H QD 4H JC AS KH KS 3C 9S 6D", "9S QH 7D 9C 4S AC 7H KH 4D KD", "AH AD TH 6D 9C 9S KD KS QH 4H", "QD 6H 9C 7C QS 6D 6S 9D 5S JH", "AH 8D 5H QD 2H JC KS 4H KH 5S", "5C 2S JS 8D 9C 8C 3D AS KC AH", "JD 9S 2H QS 8H 5S 8C TH 5C 4C", "QC QS 8C 2S 2C 3S 9C 4C KS KH", "2D 5D 8S AH AD TD 2C JS KS 8C", "TC 5S 5H 8H QC 9H 6H JD 4H 9S", "3C JH 4H 9H AH 4S 2H 4C 8D AC", "8S TH 4D 7D 6D QD QS 7S TC 7C", "KH 6D 2D JD 5H JS QD JH 4H 4S", "9C 7S JH 4S 3S TS QC 8C TC 4H", "QH 9D 4D JH QS 3S 2C 7C 6C 2D", "4H 9S JD 5C 5H AH 9D TS 2D 4C", "KS JH TS 5D 2D AH JS 7H AS 8D", "JS AH 8C AD KS 5S 8H 2C 6C TH", "2H 5D AD AC KS 3D 8H TS 6H QC", "6D 4H TS 9C 5H JS JH 6S JD 4C", "JH QH 4H 2C 6D 3C 5D 4C QS KC", "6H 4H 6C 7H 6S 2S 8S KH QC 8C", "3H 3D 5D KS 4H TD AD 3S 4D TS", "5S 7C 8S 7D 2C KS 7S 6C 8C JS", "5D 2H 3S 7C 5C QD 5H 6D 9C 9H", "JS 2S KD 9S 8D TD TS AC 8C 9D", "5H QD 2S AC 8C 9H KS 7C 4S 3C", "KH AS 3H 8S 9C JS QS 4S AD 4D", "AS 2S TD AD 4D 9H JC 4C 5H QS", "5D 7C 4H TC 2D 6C JS 4S KC 3S", "4C 2C 5D AC 9H 3D JD 8S QS QH", "2C 8S 6H 3C QH 6D TC KD AC AH", "QC 6C 3S QS 4S AC 8D 5C AD KH", "5S 4C AC KH AS QC 2C 5C 8D 9C", "8H JD 3C KH 8D 5C 9C QD QH 9D", "7H TS 2C 8C 4S TD JC 9C 5H QH", "JS 4S 2C 7C TH 6C AS KS 7S JD", "JH 7C 9H 7H TC 5H 3D 6D 5D 4D", "2C QD JH 2H 9D 5S 3D TD AD KS", "JD QH 3S 4D TH 7D 6S QS KS 4H", "TC KS 5S 8D 8H AD 2S 2D 4C JH", "5S JH TC 3S 2D QS 9D 4C KD 9S", "AC KH 3H AS 9D KC 9H QD 6C 6S", "9H 7S 3D 5C 7D KC TD 8H 4H 6S", "3C 7H 8H TC QD 4D 7S 6S QH 6C", "6D AD 4C QD 6C 5D 7D 9D KS TS", "JH 2H JD 9S 7S TS KH 8D 5D 8H", "2D 9S 4C 7D 9D 5H QD 6D AC 6S", "7S 6D JC QD JH 4C 6S QS 2H 7D", "8C TD JH KD 2H 5C QS 2C JS 7S", "TC 5H 4H JH QD 3S 5S 5D 8S KH", "KS KH 7C 2C 5D JH 6S 9C 6D JC", "5H AH JD 9C JS KC 2H 6H 4D 5S", "AS 3C TH QC 6H 9C 8S 8C TD 7C", "KC 2C QD 9C KH 4D 7S 3C TS 9H", "9C QC 2S TS 8C TD 9S QD 3S 3C", "4D 9D TH JH AH 6S 2S JD QH JS", "QD 9H 6C KD 7D 7H 5D 6S 8H AH", "8H 3C 4S 2H 5H QS QH 7S 4H AC", "QS 3C 7S 9S 4H 3S AH KS 9D 7C", "AD 5S 6S 2H 2D 5H TC 4S 3C 8C", "QH TS 6S 4D JS KS JH AS 8S 6D", "2C 8S 2S TD 5H AS TC TS 6C KC", "KC TS 8H 2H 3H 7C 4C 5S TH TD", "KD AD KH 7H 7S 5D 5H 5S 2D 9C", "AD 9S 3D 7S 8C QC 7C 9C KD KS", "3C QC 9S 8C 4D 5C AS QD 6C 2C", "2H KC 8S JD 7S AC 8D 5C 2S 4D", "9D QH 3D 2S TC 3S KS 3C 9H TD", "KD 6S AC 2C 7H 5H 3S 6C 6H 8C", "QH TC 8S 6S KH TH 4H 5D TS 4D", "8C JS 4H 6H 2C 2H 7D AC QD 3D", "QS KC 6S 2D 5S 4H TD 3H JH 4C", "7S 5H 7H 8H KH 6H QS TH KD 7D", "5H AD KD 7C KH 5S TD 6D 3C 6C", "8C 9C 5H JD 7C KC KH 7H 2H 3S", "7S 4H AD 4D 8S QS TH 3D 7H 5S", "8D TC KS KD 9S 6D AD JD 5C 2S", "7H 8H 6C QD 2H 6H 9D TC 9S 7C", "8D 6D 4C 7C 6C 3C TH KH JS JH", "5S 3S 8S JS 9H AS AD 8H 7S KD", "JH 7C 2C KC 5H AS AD 9C 9S JS", "AD AC 2C 6S QD 7C 3H TH KS KD", "9D JD 4H 8H 4C KH 7S TS 8C KC", "3S 5S 2H 7S 6H 7D KS 5C 6D AD", "5S 8C 9H QS 7H 7S 2H 6C 7D TD", "QS 5S TD AC 9D KC 3D TC 2D 4D", "TD 2H 7D JD QD 4C 7H 5D KC 3D", "4C 3H 8S KD QH 5S QC 9H TC 5H", "9C QD TH 5H TS 5C 9H AH QH 2C", "4D 6S 3C AC 6C 3D 2C 2H TD TH", "AC 9C 5D QC 4D AD 8D 6D 8C KC", "AD 3C 4H AC 8D 8H 7S 9S TD JC", "4H 9H QH JS 2D TH TD TC KD KS", "5S 6S 9S 8D TH AS KH 5H 5C 8S", "JD 2S 9S 6S 5S 8S 5D 7S 7H 9D", "5D 8C 4C 9D AD TS 2C 7D KD TC", "8S QS 4D KC 5C 8D 4S KH JD KD", "AS 5C AD QH 7D 2H 9S 7H 7C TC", "2S 8S JD KH 7S 6C 6D AD 5D QC", "9H 6H 3S 8C 8H AH TC 4H JS TD", "2C TS 4D 7H 2D QC 9C 5D TH 7C", "6C 8H QC 5D TS JH 5C 5H 9H 4S", "2D QC 7H AS JS 8S 2H 4C 4H 8D", "JS 6S AC KD 3D 3C 4S 7H TH KC", "QH KH 6S QS 5S 4H 3C QD 3S 3H", "7H AS KH 8C 4H 9C 5S 3D 6S TS", "9C 7C 3H 5S QD 2C 3D AD AC 5H", "JH TD 2D 4C TS 3H KH AD 3S 7S", "AS 4C 5H 4D 6S KD JC 3C 6H 2D", "3H 6S 8C 2D TH 4S AH QH AD 5H", "7C 2S 9H 7H KC 5C 6D 5S 3H JC", "3C TC 9C 4H QD TD JH 6D 9H 5S", "7C 6S 5C 5D 6C 4S 7H 9H 6H AH", "AD 2H 7D KC 2C 4C 2S 9S 7H 3S", "TH 4C 8S 6S 3S AD KS AS JH TD", "5C TD 4S 4D AD 6S 5D TC 9C 7D", "8H 3S 4D 4S 5S 6H 5C AC 3H 3D", "9H 3C AC 4S QS 8S 9D QH 5H 4D", "JC 6C 5H TS AC 9C JD 8C 7C QD", "8S 8H 9C JD 2D QC QH 6H 3C 8D", "KS JS 2H 6H 5H QH QS 3H 7C 6D", "TC 3H 4S 7H QC 2H 3S 8C JS KH", "AH 8H 5S 4C 9H JD 3H 7S JC AC", "3C 2D 4C 5S 6C 4S QS 3S JD 3D", "5H 2D TC AH KS 6D 7H AD 8C 6H", "6C 7S 3C JD 7C 8H KS KH AH 6D", "AH 7D 3H 8H 8S 7H QS 5H 9D 2D", "JD AC 4H 7S 8S 9S KS AS 9D QH", "7S 2C 8S 5S JH QS JC AH KD 4C", "AH 2S 9H 4H 8D TS TD 6H QH JD", "4H JC 3H QS 6D 7S 9C 8S 9D 8D", "5H TD 4S 9S 4C 8C 8D 7H 3H 3D", "QS KH 3S 2C 2S 3C 7S TD 4S QD", "7C TD 4D 5S KH AC AS 7H 4C 6C", "2S 5H 6D JD 9H QS 8S 2C 2H TD", "2S TS 6H 9H 7S 4H JC 4C 5D 5S", "2C 5H 7D 4H 3S QH JC JS 6D 8H", "4C QH 7C QD 3S AD TH 8S 5S TS", "9H TC 2S TD JC 7D 3S 3D TH QH", "7D 4C 8S 5C JH 8H 6S 3S KC 3H", "JC 3H KH TC QH TH 6H 2C AC 5H", "QS 2H 9D 2C AS 6S 6C 2S 8C 8S", "9H 7D QC TH 4H KD QS AC 7S 3C", "4D JH 6S 5S 8H KS 9S QC 3S AS", "JD 2D 6S 7S TC 9H KC 3H 7D KD", "2H KH 7C 4D 4S 3H JS QD 7D KC", "4C JC AS 9D 3C JS 6C 8H QD 4D", "AH JS 3S 6C 4C 3D JH 6D 9C 9H", "9H 2D 8C 7H 5S KS 6H 9C 2S TC", "6C 8C AD 7H 6H 3D KH AS 5D TH", "KS 8C 3S TS 8S 4D 5S 9S 6C 4H", "9H 4S 4H 5C 7D KC 2D 2H 9D JH", "5C JS TC 9D 9H 5H 7S KH JC 6S", "7C 9H 8H 4D JC KH JD 2H TD TC", "8H 6C 2H 2C KH 6H 9D QS QH 5H", "AC 7D 2S 3D QD JC 2D 8D JD JH", "2H JC 2D 7H 2C 3C 8D KD TD 4H", "3S 4H 6D 8D TS 3H TD 3D 6H TH", "JH JC 3S AC QH 9H 7H 8S QC 2C", "7H TD QS 4S 8S 9C 2S 5D 4D 2H", "3D TS 3H 2S QC 8H 6H KC JC KS", "5D JD 7D TC 8C 6C 9S 3D 8D AC", "8H 6H JH 6C 5D 8D 8S 4H AD 2C", "9D 4H 2D 2C 3S TS AS TC 3C 5D", "4D TH 5H KS QS 6C 4S 2H 3D AD", "5C KC 6H 2C 5S 3C 4D 2D 9H 9S", "JD 4C 3H TH QH 9H 5S AH 8S AC", "7D 9S 6S 2H TD 9C 4H 8H QS 4C", "3C 6H 5D 4H 8C 9C KC 6S QD QS", "3S 9H KD TC 2D JS 8C 6S 4H 4S", "2S 4C 8S QS 6H KH 3H TH 8C 5D", "2C KH 5S 3S 7S 7H 6C 9D QD 8D", "8H KS AC 2D KH TS 6C JS KC 7H", "9C KS 5C TD QC AH 6C 5H 9S 7C", "5D 4D 3H 4H 6S 7C 7S AH QD TD", "2H 7D QC 6S TC TS AH 7S 9D 3H", "TH 5H QD 9S KS 7S 7C 6H 8C TD", "TH 2D 4D QC 5C 7D JD AH 9C 4H", "4H 3H AH 8D 6H QC QH 9H 2H 2C", "2D AD 4C TS 6H 7S TH 4H QS TD", "3C KD 2H 3H QS JD TC QC 5D 8H", "KS JC QD TH 9S KD 8D 8C 2D 9C", "3C QD KD 6D 4D 8D AH AD QC 8S", "8H 3S 9D 2S 3H KS 6H 4C 7C KC", "TH 9S 5C 3D 7D 6H AC 7S 4D 2C", "5C 3D JD 4D 2D 6D 5H 9H 4C KH", "AS 7H TD 6C 2H 3D QD KS 4C 4S", "JC 3C AC 7C JD JS 8H 9S QC 5D", "JD 6S 5S 2H AS 8C 7D 5H JH 3D", "8D TC 5S 9S 8S 3H JC 5H 7S AS", "5C TD 3D 7D 4H 8D 7H 4D 5D JS", "QS 9C KS TD 2S 8S 5C 2H 4H AS", "TH 7S 4H 7D 3H JD KD 5D 2S KC", "JD 7H 4S 8H 4C JS 6H QH 5S 4H", "2C QS 8C 5S 3H QC 2S 6C QD AD", "8C 3D JD TC 4H 2H AD 5S AC 2S", "5D 2C JS 2D AD 9D 3D 4C 4S JH", "8D 5H 5D 6H 7S 4D KS 9D TD JD", "3D 6D 9C 2S AS 7D 5S 5C 8H JD", "7C 8S 3S 6S 5H JD TC AD 7H 7S", "2S 9D TS 4D AC 8D 6C QD JD 3H", "9S KH 2C 3C AC 3D 5H 6H 8D 5D", "KS 3D 2D 6S AS 4C 2S 7C 7H KH", "AC 2H 3S JC 5C QH 4D 2D 5H 7S", "TS AS JD 8C 6H JC 8S 5S 2C 5D", "7S QH 7H 6C QC 8H 2D 7C JD 2S", "2C QD 2S 2H JC 9C 5D 2D JD JH", "7C 5C 9C 8S 7D 6D 8D 6C 9S JH", "2C AD 6S 5H 3S KS 7S 9D KH 4C", "7H 6C 2C 5C TH 9D 8D 3S QC AH", "5S KC 6H TC 5H 8S TH 6D 3C AH", "9C KD 4H AD TD 9S 4S 7D 6H 5D", "7H 5C 5H 6D AS 4C KD KH 4H 9D", "3C 2S 5C 6C JD QS 2H 9D 7D 3H", "AC 2S 6S 7S JS QD 5C QS 6H AD", "5H TH QC 7H TC 3S 7C 6D KC 3D", "4H 3D QC 9S 8H 2C 3S JC KS 5C", "4S 6S 2C 6H 8S 3S 3D 9H 3H JS", "4S 8C 4D 2D 8H 9H 7D 9D AH TS", "9S 2C 9H 4C 8D AS 7D 3D 6D 5S", "6S 4C 7H 8C 3H 5H JC AH 9D 9C", "2S 7C 5S JD 8C 3S 3D 4D 7D 6S", "3C KC 4S 5D 7D 3D JD 7H 3H 4H", "9C 9H 4H 4D TH 6D QD 8S 9S 7S", "2H AC 8S 4S AD 8C 2C AH 7D TC", "TS 9H 3C AD KS TC 3D 8C 8H JD", "QC 8D 2C 3C 7D 7C JD 9H 9C 6C", "AH 6S JS JH 5D AS QC 2C JD TD", "9H KD 2H 5D 2D 3S 7D TC AH TS", "TD 8H AS 5D AH QC AC 6S TC 5H", "KS 4S 7H 4D 8D 9C TC 2H 6H 3H", "3H KD 4S QD QH 3D 8H 8C TD 7S", "8S JD TC AH JS QS 2D KH KS 4D", "3C AD JC KD JS KH 4S TH 9H 2C", "QC 5S JS 9S KS AS 7C QD 2S JD", "KC 5S QS 3S 2D AC 5D 9H 8H KS", "6H 9C TC AD 2C 6D 5S JD 6C 7C", "QS KH TD QD 2C 3H 8S 2S QC AH", "9D 9H JH TC QH 3C 2S JS 5C 7H", "6C 3S 3D 2S 4S QD 2D TH 5D 2C", "2D 6H 6D 2S JC QH AS 7H 4H KH", "5H 6S KS AD TC TS 7C AC 4S 4H", "AD 3C 4H QS 8C 9D KS 2H 2D 4D", "4S 9D 6C 6D 9C AC 8D 3H 7H KD", "JC AH 6C TS JD 6D AD 3S 5D QD", "JC JH JD 3S 7S 8S JS QC 3H 4S", "JD TH 5C 2C AD JS 7H 9S 2H 7S", "8D 3S JH 4D QC AS JD 2C KC 6H", "2C AC 5H KD 5S 7H QD JH AH 2D", "JC QH 8D 8S TC 5H 5C AH 8C 6C", "3H JS 8S QD JH 3C 4H 6D 5C 3S", "6D 4S 4C AH 5H 5S 3H JD 7C 8D", "8H AH 2H 3H JS 3C 7D QC 4H KD", "6S 2H KD 5H 8H 2D 3C 8S 7S QD", "2S 7S KC QC AH TC QS 6D 4C 8D", "5S 9H 2C 3S QD 7S 6C 2H 7C 9D", "3C 6C 5C 5S JD JC KS 3S 5D TS", "7C KS 6S 5S 2S 2D TC 2H 5H QS", "AS 7H 6S TS 5H 9S 9D 3C KD 2H", "4S JS QS 3S 4H 7C 2S AC 6S 9D", "8C JH 2H 5H 7C 5D QH QS KH QC", "3S TD 3H 7C KC 8D 5H 8S KH 8C", "4H KH JD TS 3C 7H AS QC JS 5S", "AH 9D 2C 8D 4D 2D 6H 6C KC 6S", "2S 6H 9D 3S 7H 4D KH 8H KD 3D", "9C TC AC JH KH 4D JD 5H TD 3S", "7S 4H 9D AS 4C 7D QS 9S 2S KH", "3S 8D 8S KS 8C JC 5C KH 2H 5D", "8S QH 2C 4D KC JS QC 9D AC 6H", "8S 8C 7C JS JD 6S 4C 9C AC 4S", "QH 5D 2C 7D JC 8S 2D JS JH 4C", "JS 4C 7S TS JH KC KH 5H QD 4S", "QD 8C 8D 2D 6S TD 9D AC QH 5S", "QH QC JS 3D 3C 5C 4H KH 8S 7H", "7C 2C 5S JC 8S 3H QC 5D 2H KC", "5S 8D KD 6H 4H QD QH 6D AH 3D", "7S KS 6C 2S 4D AC QS 5H TS JD", "7C 2D TC 5D QS AC JS QC 6C KC", "2C KS 4D 3H TS 8S AD 4H 7S 9S", "QD 9H QH 5H 4H 4D KH 3S JC AD", "4D AC KC 8D 6D 4C 2D KH 2C JD", "2C 9H 2D AH 3H 6D 9C 7D TC KS", "8C 3H KD 7C 5C 2S 4S 5H AS AH", "TH JD 4H KD 3H TC 5C 3S AC KH", "6D 7H AH 7S QC 6H 2D TD JD AS", "JH 5D 7H TC 9S 7D JC AS 5S KH", "2H 8C AD TH 6H QD KD 9H 6S 6C", "QH KC 9D 4D 3S JS JH 4H 2C 9H", "TC 7H KH 4H JC 7D 9S 3H QS 7S", "AD 7D JH 6C 7H 4H 3S 3H 4D QH", "JD 2H 5C AS 6C QC 4D 3C TC JH", "AC JD 3H 6H 4C JC AD 7D 7H 9H", "4H TC TS 2C 8C 6S KS 2H JD 9S", "4C 3H QS QC 9S 9H 6D KC 9D 9C", "5C AD 8C 2C QH TH QD JC 8D 8H", "QC 2C 2S QD 9C 4D 3S 8D JH QS", "9D 3S 2C 7S 7C JC TD 3C TC 9H", "3C TS 8H 5C 4C 2C 6S 8D 7C 4H", "KS 7H 2H TC 4H 2C 3S AS AH QS", "8C 2D 2H 2C 4S 4C 6S 7D 5S 3S", "TH QC 5D TD 3C QS KD KC KS AS", "4D AH KD 9H KS 5C 4C 6H JC 7S", "KC 4H 5C QS TC 2H JC 9S AH QH", "4S 9H 3H 5H 3C QD 2H QC JH 8H", "5D AS 7H 2C 3D JH 6H 4C 6S 7D", "9C JD 9H AH JS 8S QH 3H KS 8H", "3S AC QC TS 4D AD 3D AH 8S 9H", "7H 3H QS 9C 9S 5H JH JS AH AC", "8D 3C JD 2H AC 9C 7H 5S 4D 8H", "7C JH 9H 6C JS 9S 7H 8C 9D 4H", "2D AS 9S 6H 4D JS JH 9H AD QD", "6H 7S JH KH AH 7H TD 5S 6S 2C", "8H JH 6S 5H 5S 9D TC 4C QC 9S", "7D 2C KD 3H 5H AS QD 7H JS 4D", "TS QH 6C 8H TH 5H 3C 3H 9C 9D", "AD KH JS 5D 3H AS AC 9S 5C KC", "2C KH 8C JC QS 6D AH 2D KC TC", "9D 3H 2S 7C 4D 6D KH KS 8D 7D", "9H 2S TC JH AC QC 3H 5S 3S 8H", "3S AS KD 8H 4C 3H 7C JH QH TS", "7S 6D 7H 9D JH 4C 3D 3S 6C AS", "4S 2H 2C 4C 8S 5H KC 8C QC QD", "3H 3S 6C QS QC 2D 6S 5D 2C 9D", "2H 8D JH 2S 3H 2D 6C 5C 7S AD", "9H JS 5D QH 8S TS 2H 7S 6S AD", "6D QC 9S 7H 5H 5C 7D KC JD 4H", "QC 5S 9H 9C 4D 6S KS 2S 4C 7C", "9H 7C 4H 8D 3S 6H 5C 8H JS 7S", "2D 6H JS TD 4H 4D JC TH 5H KC", "AC 7C 8D TH 3H 9S 2D 4C KC 4D", "KD QS 9C 7S 3D KS AD TS 4C 4H", "QH 9C 8H 2S 7D KS 7H 5D KD 4C", "9C 2S 2H JC 6S 6C TC QC JH 5C", "7S AC 8H KC 8S 6H QS JC 3D 6S", "JS 2D JH 8C 4S 6H 8H 6D 5D AD", "6H 7D 2S 4H 9H 7C AS AC 8H 5S", "3C JS 4S 6D 5H 2S QH 6S 9C 2C", "3D 5S 6S 9S 4C QS 8D QD 8S TC", "9C 3D AH 9H 5S 2C 7D AD JC 3S", "7H TC AS 3C 6S 6D 7S KH KC 9H", "3S TC 8H 6S 5H JH 8C 7D AC 2S", "QD 9D 9C 3S JC 8C KS 8H 5D 4D", "JS AH JD 6D 9D 8C 9H 9S 8H 3H", "2D 6S 4C 4D 8S AD 4S TC AH 9H", "TS AC QC TH KC 6D 4H 7S 8C 2H", "3C QD JS 9D 5S JC AH 2H TS 9H", "3H 4D QH 5D 9C 5H 7D 4S JC 3S", "8S TH 3H 7C 2H JD JS TS AC 8D", "9C 2H TD KC JD 2S 8C 5S AD 2C", "3D KD 7C 5H 4D QH QD TC 6H 7D", "7H 2C KC 5S KD 6H AH QC 7S QH", "6H 5C AC 5H 2C 9C 2D 7C TD 2S", "4D 9D AH 3D 7C JD 4H 8C 4C KS", "TH 3C JS QH 8H 4C AS 3D QS QC", "4D 7S 5H JH 6D 7D 6H JS KH 3C", "QD 8S 7D 2H 2C 7C JC 2S 5H 8C", "QH 8S 9D TC 2H AD 7C 8D QD 6S", "3S 7C AD 9H 2H 9S JD TS 4C 2D", "3S AS 4H QC 2C 8H 8S 7S TD TC", "JH TH TD 3S 4D 4H 5S 5D QS 2C", "8C QD QH TC 6D 4S 9S 9D 4H QC", "8C JS 9D 6H JD 3H AD 6S TD QC", "KC 8S 3D 7C TD 7D 8D 9H 4S 3S", "6C 4S 3D 9D KD TC KC KS AC 5S", "7C 6S QH 3D JS KD 6H 6D 2D 8C", "JD 2S 5S 4H 8S AC 2D 6S TS 5C", "5H 8C 5S 3C 4S 3D 7C 8D AS 3H", "AS TS 7C 3H AD 7D JC QS 6C 6H", "3S 9S 4C AC QH 5H 5D 9H TS 4H", "6C 5C 7H 7S TD AD JD 5S 2H 2S", "7D 6C KC 3S JD 8D 8S TS QS KH", "8S QS 8D 6C TH AC AH 2C 8H 9S", "7H TD KH QH 8S 3D 4D AH JD AS", "TS 3D 2H JC 2S JH KH 6C QC JS", "KC TH 2D 6H 7S 2S TC 8C 9D QS", "3C 9D 6S KH 8H 6D 5D TH 2C 2H", "6H TC 7D AD 4D 8S TS 9H TD 7S", "JS 6D JD JC 2H AC 6C 3D KH 8D", "KH JD 9S 5D 4H 4C 3H 7S QS 5C", "4H JD 5D 3S 3C 4D KH QH QS 7S", "JD TS 8S QD AH 4C 6H 3S 5S 2C", "QS 3D JD AS 8D TH 7C 6S QC KS", "7S 2H 8C QC 7H AC 6D 2D TH KH", "5S 6C 7H KH 7D AH 8C 5C 7S 3D", "3C KD AD 7D 6C 4D KS 2D 8C 4S", "7C 8D 5S 2D 2S AH AD 2C 9D TD", "3C AD 4S KS JH 7C 5C 8C 9C TH", "AS TD 4D 7C JD 8C QH 3C 5H 9S", "3H 9C 8S 9S 6S QD KS AH 5H JH", "QC 9C 5S 4H 2H TD 7D AS 8C 9D", "8C 2C 9D KD TC 7S 3D KH QC 3C", "4D AS 4C QS 5S 9D 6S JD QH KS", "6D AH 6C 4C 5H TS 9H 7D 3D 5S", "QS JD 7C 8D 9C AC 3S 6S 6C KH", "8H JH 5D 9S 6D AS 6S 3S QC 7H", "QD AD 5C JH 2H AH 4H AS KC 2C", "JH 9C 2C 6H 2D JS 5D 9H KC 6D", "7D 9D KD TH 3H AS 6S QC 6H AD", "JD 4H 7D KC 3H JS 3C TH 3D QS", "4C 3H 8C QD 5H 6H AS 8H AD JD", "TH 8S KD 5D QC 7D JS 5S 5H TS", "7D KC 9D QS 3H 3C 6D TS 7S AH", "7C 4H 7H AH QC AC 4D 5D 6D TH", "3C 4H 2S KD 8H 5H JH TC 6C JD", "4S 8C 3D 4H JS TD 7S JH QS KD", "7C QC KD 4D 7H 6S AD TD TC KH", "5H 9H KC 3H 4D 3D AD 6S QD 6H", "TH 7C 6H TS QH 5S 2C KC TD 6S", "7C 4D 5S JD JH 7D AC KD KH 4H", "7D 6C 8D 8H 5C JH 8S QD TH JD", "8D 7D 6C 7C 9D KD AS 5C QH JH", "9S 2C 8C 3C 4C KS JH 2D 8D 4H", "7S 6C JH KH 8H 3H 9D 2D AH 6D", "4D TC 9C 8D 7H TD KS TH KD 3C", "JD 9H 8D QD AS KD 9D 2C 2S 9C", "8D 3H 5C 7H KS 5H QH 2D 8C 9H", "2D TH 6D QD 6C KC 3H 3S AD 4C", "4H 3H JS 9D 3C TC 5H QH QC JC", "3D 5C 6H 3S 3C JC 5S 7S 2S QH", "AC 5C 8C 4D 5D 4H 2S QD 3C 3H", "2C TD AH 9C KD JS 6S QD 4C QC", "QS 8C 3S 4H TC JS 3H 7C JC AD", "5H 4D 9C KS JC TD 9S TS 8S 9H", "QD TS 7D AS AC 2C TD 6H 8H AH", "6S AD 8C 4S 9H 8D 9D KH 8S 3C", "QS 4D 2D 7S KH JS JC AD 4C 3C", "QS 9S 7H KC TD TH 5H JS AC JH", "6D AC 2S QS 7C AS KS 6S KH 5S", "6D 8H KH 3C QS 2H 5C 9C 9D 6C", "JS 2C 4C 6H 7D JC AC QD TD 3H", "4H QC 8H JD 4C KD KS 5C KC 7S", "6D 2D 3H 2S QD 5S 7H AS TH 6S", "AS 6D 8D 2C 8S TD 8H QD JC AH", "9C 9H 2D TD QH 2H 5C TC 3D 8H", "KC 8S 3D KH 2S TS TC 6S 4D JH", "9H 9D QS AC KC 6H 5D 4D 8D AH", "9S 5C QS 4H 7C 7D 2H 8S AD JS", "3D AC 9S AS 2C 2D 2H 3H JC KH", "7H QH KH JD TC KS 5S 8H 4C 8D", "2H 7H 3S 2S 5H QS 3C AS 9H KD", "AD 3D JD 6H 5S 9C 6D AC 9S 3S", "3D 5D 9C 2D AC 4S 2S AD 6C 6S", "QC 4C 2D 3H 6S KC QH QD 2H JH", "QC 3C 8S 4D 9S 2H 5C 8H QS QD", "6D KD 6S 7H 3S KH 2H 5C JC 6C", "3S 9S TC 6S 8H 2D AD 7S 8S TS", "3C 6H 9C 3H 5C JC 8H QH TD QD", "3C JS QD 5D TD 2C KH 9H TH AS", "9S TC JD 3D 5C 5H AD QH 9H KC", "TC 7H 4H 8H 3H TD 6S AC 7C 2S", "QS 9D 5D 3C JC KS 4D 6C JH 2S", "9S 6S 3C 7H TS 4C KD 6D 3D 9C", "2D 9H AH AC 7H 2S JH 3S 7C QC", "QD 9H 3C 2H AC AS 8S KD 8C KH", "2D 7S TD TH 6D JD 8D 4D 2H 5S", "8S QH KD JD QS JH 4D KC 5H 3S", "3C KH QC 6D 8H 3S AH 7D TD 2D", "5S 9H QH 4S 6S 6C 6D TS TH 7S", "6C 4C 6D QS JS 9C TS 3H 8D 8S", "JS 5C 7S AS 2C AH 2H AD 5S TC", "KD 6C 9C 9D TS 2S JC 4H 2C QD", "QS 9H TC 3H KC KS 4H 3C AD TH", "KH 9C 2H KD 9D TC 7S KC JH 2D", "7C 3S KC AS 8C 5D 9C 9S QH 3H", "2D 8C TD 4C 2H QC 5D TC 2C 7D", "KS 4D 6C QH TD KH 5D 7C AD 8D", "2S 9S 8S 4C 8C 3D 6H QD 7C 7H", "6C 8S QH 5H TS 5C 3C 4S 2S 2H", "8S 6S 2H JC 3S 3H 9D 8C 2S 7H", "QC 2C 8H 9C AC JD 4C 4H 6S 3S", "3H 3S 7D 4C 9S 5H 8H JC 3D TC", "QH 2S 2D 9S KD QD 9H AD 6D 9C", "8D 2D KS 9S JC 4C JD KC 4S TH", "KH TS 6D 4D 5C KD 5H AS 9H AD", "QD JS 7C 6D 5D 5C TH 5H QH QS", "9D QH KH 5H JH 4C 4D TC TH 6C", "KH AS TS 9D KD 9C 7S 4D 8H 5S", "KH AS 2S 7D 9D 4C TS TH AH 7C", "KS 4D AC 8S 9S 8D TH QH 9D 5C", "5D 5C 8C QS TC 4C 3D 3S 2C 8D", "9D KS 2D 3C KC 4S 8C KH 6C JC", "8H AH 6H 7D 7S QD 3C 4C 6C KC", "3H 2C QH 8H AS 7D 4C 8C 4H KC", "QD 5S 4H 2C TD AH JH QH 4C 8S", "3H QS 5S JS 8H 2S 9H 9C 3S 2C", "6H TS 7S JC QD AC TD KC 5S 3H", "QH AS QS 7D JC KC 2C 4C 5C 5S", "QH 3D AS JS 4H 8D 7H JC 2S 9C", "5D 4D 2S 4S 9D 9C 2D QS 8H 7H", "6D 7H 3H JS TS AC 2D JH 7C 8S", "JH 5H KC 3C TC 5S 9H 4C 8H 9D", "8S KC 5H 9H AD KS 9D KH 8D AH", "JC 2H 9H KS 6S 3H QC 5H AH 9C", "5C KH 5S AD 6C JC 9H QC 9C TD", "5S 5D JC QH 2D KS 8H QS 2H TS", "JH 5H 5S AH 7H 3C 8S AS TD KH", "6H 3D JD 2C 4C KC 7S AH 6C JH", "4C KS 9D AD 7S KC 7D 8H 3S 9C", "7H 5C 5H 3C 8H QC 3D KH 6D JC", "2D 4H 5D 7D QC AD AH 9H QH 8H", "KD 8C JS 9D 3S 3C 2H 5D 6D 2S", "8S 6S TS 3C 6H 8D 5S 3H TD 6C", "KS 3D JH 9C 7C 9S QS 5S 4H 6H", "7S 6S TH 4S KC KD 3S JC JH KS", "7C 3C 2S 6D QH 2C 7S 5H 8H AH", "KC 8D QD 6D KH 5C 7H 9D 3D 9C", "6H 2D 8S JS 9S 2S 6D KC 7C TC", "KD 9C JH 7H KC 8S 2S 7S 3D 6H", "4H 9H 2D 4C 8H 7H 5S 8S 2H 8D", "AD 7C 3C 7S 5S 4D 9H 3D JC KH", "5D AS 7D 6D 9C JC 4C QH QS KH", "KD JD 7D 3D QS QC 8S 6D JS QD", "6S 8C 5S QH TH 9H AS AC 2C JD", "QC KS QH 7S 3C 4C 5C KC 5D AH", "6C 4H 9D AH 2C 3H KD 3D TS 5C", "TD 8S QS AS JS 3H KD AC 4H KS", "7D 5D TS 9H 4H 4C 9C 2H 8C QC", "2C 7D 9H 4D KS 4C QH AD KD JS", "QD AD AH KH 9D JS 9H JC KD JD", "8S 3C 4S TS 7S 4D 5C 2S 6H 7C", "JS 7S 5C KD 6D QH 8S TD 2H 6S", "QH 6C TC 6H TD 4C 9D 2H QC 8H", "3D TS 4D 2H 6H 6S 2C 7H 8S 6C", "9H 9D JD JH 3S AH 2C 6S 3H 8S", "2C QS 8C 5S 3H 2S 7D 3C AD 4S", "5C QC QH AS TS 4S 6S 4C 5H JS", "JH 5C TD 4C 6H JS KD KH QS 4H", "TC KH JC 4D 9H 9D 8D KC 3C 8H", "2H TC 8S AD 9S 4H TS 7H 2C 5C", "4H 2S 6C 5S KS AH 9C 7C 8H KD", "TS QH TD QS 3C JH AH 2C 8D 7D", "5D KC 3H 5S AC 4S 7H QS 4C 2H", "3D 7D QC KH JH 6D 6C TD TH KD", "5S 8D TH 6C 9D 7D KH 8C 9S 6D", "JD QS 7S QC 2S QH JC 4S KS 8D", "7S 5S 9S JD KD 9C JC AD 2D 7C", "4S 5H AH JH 9C 5D TD 7C 2D 6S", "KC 6C 7H 6S 9C QD 5S 4H KS TD", "6S 8D KS 2D TH TD 9H JD TS 3S", "KH JS 4H 5D 9D TC TD QC JD TS", "QS QD AC AD 4C 6S 2D AS 3H KC", "4C 7C 3C TD QS 9C KC AS 8D AD", "KC 7H QC 6D 8H 6S 5S AH 7S 8C", "3S AD 9H JC 6D JD AS KH 6S JH", "AD 3D TS KS 7H JH 2D JS QD AC", "9C JD 7C 6D TC 6H 6C JC 3D 3S", "QC KC 3S JC KD 2C 8D AH QS TS", "AS KD 3D JD 8H 7C 8C 5C QD 6C"};
-
-	public static void main(String[] args) {
-		System.out.println(new p054().run());
-	}
-
-	// Returns a score for the given hand. If handX beats handY then getScore(handX) > getScore(handY), and if
-	// handX is a draw with handY then getScore(handX) = getScore(handY) (even if the hands have different cards).
-	// Note that scores need not be consecutive - for example even if scores 1 and 3 exist, there might be no
-	// hand that produces a score of 2. The comparison property is the only guarantee provided by getScore().
-	private static int getScore(@NotNull Card[] hand) {
-		assert hand.length == 5;
-		int[] rankCounts = new int[13]; // rankCounts[i] is the number of cards with the rank of i
-		int flushSuit = hand[0].suit; // flushSuit is in the range [0,3] if all cards have that suit; otherwise -1
-		for (var card : hand) {
-			rankCounts[card.rank]++;
-			if (card.suit != flushSuit) flushSuit = -1;
-		}
-		// rankCountHist[i] is the number of times a rank count of i occurs.
-		// For example if there is exactly one triplet, then rankCountHist[3] = 1.
-		int[] rankCountHist = new int[6];
-		for (int count : rankCounts) rankCountHist[count]++;
-		int bestCards = get5FrequentHighestCards(rankCounts, rankCountHist);
-		int straightHighRank = getStraightHighRank(rankCounts);
-		// Main idea: Encode the hand type in the top bits, then encode up to 5 cards in big-endian (4 bits each).
-		if ((straightHighRank != -1) && (flushSuit != -1)) return 8388608 | straightHighRank; // Straight flush
-		else if (rankCountHist[4] == 1) return 7340032 | bestCards;   // Four of a kind
-		else if ((rankCountHist[3] == 1) && (rankCountHist[2] == 1)) return 6291456 | bestCards;   // Full house
-		else if (flushSuit != -1) return 5242880 | bestCards;   // Flush
-		else if (straightHighRank != -1) return 4194304 | straightHighRank; // Straight
-		else if (rankCountHist[3] == 1) return 3145728 | bestCards;   // Three of a kind
-		else if (rankCountHist[2] == 2) return 2097152 | bestCards;   // Two pairs
-		else if (rankCountHist[2] == 1) return 1048576 | bestCards;   // One pair
-		else return bestCards;   // High card
-	}
-
-	// Encodes 5 card ranks into 20 bits in big-endian, starting with the most frequent cards,
-	// breaking ties by highest rank. For example, the set of ranks {5,5,T,8,T} is encoded as
-	// the sequence [T,T,5,5,8] because pairs come before singles and highest pairs come first.
-	@Contract(pure = true)
-	private static int get5FrequentHighestCards(int[] ranks, @NotNull int[] ranksHist) {
-		int result = 0;
-		int count = 0;
-		for (int i = ranksHist.length - 1; i >= 0; i--)
-			for (int j = ranks.length - 1; j >= 0; j--)
-				if (ranks[j] == i) for (int k = 0; k < i && count < 5; k++, count++) result = (result << 4) | j;
-		assert count == 5;
-		return result;
-	}
-
-	// Returns the rank of the highest card in the straight, or -1 if the set of cards does not form a straight.
-	// This takes into account the fact that ace can be rank 0 (i.e. face value 1) or rank 13 (value immediately after king).
-	@Contract(pure = true)
-	private static int getStraightHighRank(int[] ranks) {
-		outer:
-		for (int i = ranks.length - 1; i >= 3; i--) {
-			for (int j = 0; j < 5; j++)
-				if (ranks[(i - j + 13) % 13] == 0) continue outer; // Current offset is not a straight
-			return i; // Straight found
-		}
-		return -1;
-	}
-
-	@NotNull String run() {
-		int count = 0;
-		for (String hand : HANDS) {
-			// Parse cards and divide among players
-			var cards = hand.split(" ");
-			assert cards.length == 10;
-			var player1 = new Card[5];
-			var player2 = new Card[5];
-			for (int i = 0; i < 5; i++) {
-				player1[i] = new Card(cards[i]);
-				player2[i] = new Card(cards[i + 5]);
-			}
-			// Compare hand scores
-			if (getScore(player1) > getScore(player2)) count++;
-		}
-		return Integer.toString(count);
-	}
-
-	private static final class Card {
-		final int rank;
-		final int suit;
-
-		@Contract(pure = true)
-		Card(int rank, int suit) {
-			assert (rank >= 0) && (rank < 13) && (suit >= 0) && (suit < 4);
-			this.rank = rank;
-			this.suit = suit;
-		}
-
-		Card(@NotNull String str) {
-			this("23456789TJQKA".indexOf(str.charAt(0)), "SHCD".indexOf(str.charAt(1)));
-		}
-
-		@Contract(value = "null -> false", pure = true)
-		public boolean equals(Object obj) {
-			if (!(obj instanceof Card)) return false;
-			Card other = (Card) obj;
-			return (rank == other.rank) && (suit == other.suit);
-		}
-
-		@Contract(pure = true)
-		public int hashCode() {
-			return (rank << 2) + suit;
-		}
-	}
-}
Index: Random_Work/src/projectEuler/programs/p062.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p062.java b/Random_Work/src/projectEuler/programs/p062.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p062.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,52 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.HashMap;
-
-import static java.lang.Integer.MAX_VALUE;
-import static java.lang.Math.min;
-import static java.math.BigInteger.valueOf;
-import static java.util.Arrays.sort;
-
-public final class p062 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p062().run());
-	}
-
-	@NotNull
-	@Contract("_ -> new")
-	private static String getCubeNumberClass(int x) {
-		char[] digits = cube(x).toString().toCharArray();
-		sort(digits);
-		return new String(digits);
-	}
-
-	private static BigInteger cube(int x) {
-		return valueOf(x).pow(3);
-	}
-
-	String run() {
-		int numDigits = 0;
-		HashMap<String, Integer> lowest = new HashMap<>(), counts = new HashMap<>();
-		for (int i = 0; ; i++) {
-			String numClass = getCubeNumberClass(i);
-			if (numClass.length() > numDigits) {
-				// Process and flush data for smaller number of digits
-				int min = MAX_VALUE;
-				for (String nc : counts.keySet()) if (counts.get(nc) == 5) min = min(lowest.get(nc), min);
-				if (min != MAX_VALUE) return cube(min).toString();
-				lowest.clear();
-				counts.clear();
-				numDigits = numClass.length();
-			}
-			if (!lowest.containsKey(numClass)) {
-				lowest.put(numClass, i);
-				counts.put(numClass, 0);
-			}
-			counts.put(numClass, counts.get(numClass) + 1);
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p070.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p070.java b/Random_Work/src/projectEuler/programs/p070.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p070.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,40 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.Arrays;
-
-import static java.util.Arrays.sort;
-import static projectEuler.programs.Library.listTotients;
-import static projectEuler.programs.Library.pow;
-
-public final class p070 extends EulerSolution {
-	private static final int LIMIT = pow(10, 7);
-
-	public static void main(String[] args) {
-		System.out.println(new p070().run());
-	}
-
-	private static boolean hasSameDigits(int x, int y) {
-		char[] xdigits = Integer.toString(x).toCharArray();
-		char[] ydigits = Integer.toString(y).toCharArray();
-		sort(xdigits);
-		sort(ydigits);
-		return Arrays.equals(xdigits, ydigits);
-	}
-
-	@NotNull String run() {
-		int minNumer = 1; // Initially infinity
-		int minDenom = 0;
-		int[] totients = listTotients(LIMIT - 1);
-		for (int n = 2; n < totients.length; n++) {
-			int tot = totients[n];
-			if ((((long) n * minDenom) < ((long) minNumer * tot)) && hasSameDigits(n, tot)) {
-				minNumer = n;
-				minDenom = tot;
-			}
-		}
-		assert minDenom != 0 : "Not found";
-		return Integer.toString(minNumer);
-	}
-}
\ No newline at end of file
Index: .idea/kotlinc.xml
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
deleted file mode 100644
--- a/.idea/kotlinc.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,6 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-	<component name="Kotlin2JvmCompilerArguments">
-		<option name="jvmTarget" value="1.8"/>
-	</component>
-</project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p038.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p038.java b/Random_Work/src/projectEuler/programs/p038.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p038.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,31 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Integer.parseInt;
-import static java.lang.Math.max;
-import static java.util.Arrays.sort;
-
-public final class p038 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p038().run());
-	}
-
-	private static boolean isPandigital(@NotNull String s) {
-		if (s.length() != 9) return false;
-		char[] temp = s.toCharArray();
-		sort(temp);
-		return new String(temp).equals("123456789");
-	}
-
-	@NotNull String run() {
-		int max = -1;
-		for (int n = 2; n <= 9; n++)
-			for (int i = 1; i < Library.pow(10, 9 / n); i++) {
-				var concat = new StringBuilder();
-				for (int j = 1; j <= n; j++) concat.append(i * j);
-				if (isPandigital(concat.toString())) max = max(parseInt(concat.toString()), max);
-			}
-		return Integer.toString(max);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p046.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p046.java b/Random_Work/src/projectEuler/programs/p046.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p046.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,23 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.isPrime;
-
-public final class p046 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p046().run());
-	}
-
-	private static boolean satisfiesConjecture(int n) {
-		if (n % 2 == 0 || isPrime(n)) return true;
-		// Now n is an odd composite number
-		return IntStream.iterate(1, i -> (i * i * 2) <= n, i -> i + 1).anyMatch(i -> isPrime(n - (i * i * 2)));
-	}
-
-	@NotNull String run() {
-		for (int i = 9; ; i += 2) if (!satisfiesConjecture(i)) return Integer.toString(i);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p066.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p066.java b/Random_Work/src/projectEuler/programs/p066.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p066.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,142 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.List;
-
-import static java.math.BigInteger.*;
-import static java.util.stream.Stream.of;
-import static projectEuler.programs.Library.isSquare;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p066 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p066().run());
-	}
-
-	// Returns the smallest x such that x > 0 and there exists some y such that x^2 - n y^2 = 1.
-	// Requires n to not be a perfect square.
-	private static BigInteger smallestSolutionX(int n) {
-		List<BigInteger>[] contFrac = sqrtToContinuedFraction(n);
-		ArrayList<BigInteger> temp = new ArrayList<>();
-		temp.addAll(contFrac[0]);
-		temp.addAll(contFrac[1].subList(0, contFrac[1].size() - 1));
-		Fraction val = new Fraction(temp.get(temp.size() - 1));
-		for (int i = temp.size() - 2; i >= 0; i--)
-			val = new Fraction(val.denominator, val.numerator).add(new Fraction(temp.get(i)));
-		return ((contFrac[1].size() % 2) == 0) ? val.numerator : val.numerator.pow(2).add(val.denominator.pow(2).multiply(valueOf(n)));
-	}
-
-	// Returns the periodic continued fraction of sqrt(n). Requires n to not be a perfect square.
-	// result[0] is the minimal non-periodic prefix, and result[1] is the minimal periodic tail.
-	@Contract("_ -> new")
-	private static List<BigInteger>[] sqrtToContinuedFraction(int n) {
-		ArrayList<BigInteger> terms = new ArrayList<>();
-		HashMap<QuadraticSurd, Integer> seen = new HashMap<>();
-		QuadraticSurd val = new QuadraticSurd(ZERO, ONE, ONE, valueOf(n));
-		do {
-			seen.put(val, seen.size());
-			BigInteger flr = val.floor();
-			terms.add(flr);
-			val = val.subtract(new QuadraticSurd(flr, ZERO, ONE, val.d)).reciprocal();
-		} while (!seen.containsKey(val));
-		return new List[]{terms.subList(0, seen.get(val)), terms.subList(seen.get(val), terms.size())};
-	}
-
-	/*
-	 * Based on this insane theorem: Suppose D > 1 is an integer, non-perfect-square.
-	 *
-	 * Express sqrt(D) as the continued fraction (a0, a1, ..., a_{n-1}, (b0, b1, ..., b_{m-1})),
-	 * where the sequence of b's is the periodic part.
-	 *
-	 * Let p/q (in lowest terms) = (a0, a1, ..., a_{n-1}, b0, b1, ..., b_{m-2}).
-	 * (This is a truncation of the continued fraction with only one period minus the last term.)
-	 *
-	 * Then the minimum solution (x, y) for Pell's equation is given by:
-	 * - (p, q) if m is even
-	 * - (p^2 + D q^2, 2pq) if m is odd
-	 */
-	@NotNull String run() {
-		int minN = -1;
-		BigInteger maxX = ZERO;
-		for (int n = 2; n <= 1000; n++) {
-			if (isSquare(n)) continue;
-			BigInteger x = smallestSolutionX(n);
-			if (x.compareTo(maxX) > 0) {
-				minN = n;
-				maxX = x;
-			}
-		}
-		return Integer.toString(minN);
-	}
-
-	// Represents (a + b * sqrt(d)) / c. d must not be a perfect square.
-	private static final class QuadraticSurd {
-		final BigInteger a;
-		final BigInteger b;
-		final BigInteger c;
-		final BigInteger d;
-
-		QuadraticSurd(BigInteger a, BigInteger b, @NotNull BigInteger c, BigInteger d) {
-			assert c.signum() != 0;
-			// Simplify
-			if (c.signum() == -1) {
-				a = a.negate();
-				b = b.negate();
-				c = c.negate();
-			}
-			BigInteger gcd = a.gcd(b).gcd(c);
-			if (!gcd.equals(ONE)) {
-				a = a.divide(gcd);
-				b = b.divide(gcd);
-				c = c.divide(gcd);
-			}
-			this.a = a;
-			this.b = b;
-			this.c = c;
-			this.d = d;
-		}
-
-		@NotNull
-		@Contract("_ -> new")
-		QuadraticSurd subtract(@NotNull QuadraticSurd other) {
-			assert d.equals(other.d);
-			return new QuadraticSurd(a.multiply(other.c).subtract(other.a.multiply(c)), b.multiply(other.c).subtract(other.b.multiply(c)), c.multiply(other.c), d);
-		}
-
-		@NotNull
-		@Contract(" -> new")
-		QuadraticSurd reciprocal() {
-			return new QuadraticSurd(a.multiply(c).negate(), b.multiply(c), b.multiply(b).multiply(d).subtract(a.multiply(a)), d);
-		}
-
-		BigInteger floor() {
-			BigInteger temp = sqrt(b.multiply(b).multiply(d));
-			if (b.signum() == -1) temp = temp.add(ONE).negate();
-			temp = temp.add(a);
-			if (temp.signum() == -1) temp = temp.subtract(c.subtract(ONE));
-			return temp.divide(c);
-		}
-
-		@Contract(value = "null -> false", pure = true)
-		public boolean equals(Object obj) {
-			if (!(obj instanceof QuadraticSurd)) return false;
-			else {
-				var other = (QuadraticSurd) obj;
-				return a.equals(other.a) && b.equals(other.b) && c.equals(other.c) && d.equals(other.d);
-			}
-		}
-
-		public int hashCode() {
-			return of(a, b, c, d).mapToInt(BigInteger::hashCode).sum();
-		}
-
-		public String toString() {
-			return String.format("(%d + %d*sqrt(%d)) / %d", a, b, d, c);
-		}
-	}
-}
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-frame.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-frame.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-frame.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/overview-frame.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,50 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Overview List
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TH ALIGN="left" NOWRAP><span CLASS="FrameTitleFont" style="font-size: larger; ">
-			<B></B></span></TH>
-	</TR>
-</TABLE>
-
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameItemFont"><A HREF="allclasses-frame.html" target="packageFrame">All
-			Classes</A></span>
-			<P>
-				<span CLASS="FrameHeadingFont" style="font-size: larger; ">
-					Packages</span>
-				<BR>
-				<span CLASS="FrameItemFont"><A HREF="info/gridworld/actor/package-frame.html"
-				                               target="packageFrame">info.gridworld.actor</A></span>
-				<BR>
-				<span CLASS="FrameItemFont"><A HREF="info/gridworld/grid/package-frame.html"
-				                               target="packageFrame">info.gridworld.grid</A></span>
-				<BR>
-				<span CLASS="FrameItemFont"><A HREF="info/gridworld/world/package-frame.html"
-				                               target="packageFrame">info.gridworld.world</A></span>
-				<BR>
-		</TD>
-	</TR>
-</TABLE>
-
-<P>
-	&nbsp;
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p005.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p005.java b/Random_Work/src/projectEuler/programs/p005.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p005.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,31 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.ONE;
-import static java.math.BigInteger.valueOf;
-
-public final class p005 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p005().run());
-	}
-
-	private static BigInteger lcm(@NotNull BigInteger x, BigInteger y) {
-		return x.divide(x.gcd(y)).multiply(y);
-	}
-
-	/*
-	 * The smallest number n that is evenly divisible by every number in a set {k1, k2, ..., k_m}
-	 * is also known as the lowest common multiple (LCM) of the set of numbers.
-	 * The LCM of two natural numbers x and y is given by LCM(x, y) = x * y / GCD(x, y).
-	 * When LCM is applied to a collection of numbers, it is commutative, associative, and idempotent.
-	 * Hence LCM(k1, k2, ..., k_m) = LCM(...(LCM(LCM(k1, k2), k3)...), k_m).
-	 */
-	String run() {
-		BigInteger allLcm = ONE;
-		for (int i = 1; i <= 20; i++) allLcm = lcm(valueOf(i), allLcm);
-		return allLcm.toString();
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p080.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p080.java b/Random_Work/src/projectEuler/programs/p080.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p080.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,51 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-import java.util.stream.IntStream;
-
-import static java.math.BigInteger.*;
-
-public final class p080 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p080().run());
-	}
-
-	private static BigInteger sqrt(BigInteger x) {
-		// Find leftmost position
-		int i = 0;
-		while (TEN.pow(i * 2).compareTo(x) <= 0) i++;
-		// Extract square root from left to right using an algorithm like long division
-		BigInteger y = ZERO;
-		for (; i >= 0; i--) {
-			// Try every value for next digit
-			int j;
-			BigInteger delta = null;
-			for (j = 9; j >= 0; j--) {
-				BigInteger temp = valueOf(j).multiply(TEN.pow(i));
-				delta = y.shiftLeft(1).add(temp).multiply(temp);
-				if (delta.compareTo(x) <= 0) break;
-			}
-			assert j >= 0;
-			x = x.subtract(delta); // Adjust the remainder
-			y = y.add(valueOf(j).multiply(TEN.pow(i))); // Add the new digit
-		}
-
-		return y;
-	}
-
-	@NotNull String run() {
-		int sum = 0;
-		for (int i = 1; i <= 100; i++) {
-			BigInteger x = valueOf(i).multiply(TEN.pow(100 * 2)); // Shift left so that we can obtain 100 digits after the decimal point
-			BigInteger y = sqrt(x);
-			if (!y.multiply(y).equals(x)) { // Skip perfect squares
-				// Strip rightmost digits so that we have exactly 100 decimal digits (some are before the decimal point)
-				String s = y.toString().substring(0, 100);
-				sum += IntStream.range(0, s.length()).map(j -> s.charAt(j) - '0').sum();
-			}
-		}
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p043.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p043.java b/Random_Work/src/projectEuler/programs/p043.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p043.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,33 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.nextPermutation;
-
-public final class p043 extends EulerSolution {
-	private static final int[] DIVISIBILITY_TESTS = {2, 3, 5, 7, 11, 13, 17}; // First 7 primes
-
-	public static void main(String[] args) {
-		System.out.println(new p043().run());
-	}
-
-	@Contract(pure = true)
-	private static long toInteger(int[] digits, int off, int len) {
-		long result = 0;
-		for (int i = off; i < off + len; i++) result = (result * 10) + digits[i];
-		return result;
-	}
-
-	@NotNull String run() {
-		long sum = 0;
-		int[] digits = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
-		outer:
-		do {
-			for (int i = 0; i < DIVISIBILITY_TESTS.length; i++)
-				if (toInteger(digits, i + 1, 3) % DIVISIBILITY_TESTS[i] != 0) continue outer;
-			sum += toInteger(digits, 0, digits.length);
-		} while (nextPermutation(digits));
-		return Long.toString(sum);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-frame.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-frame.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-frame.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/world/package-frame.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,33 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		info.gridworld.world
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-
-</HEAD>
-
-<BODY BGCOLOR="white">
-<span CLASS="FrameTitleFont" style="font-size: larger; ">
-	<A HREF="../../../info/gridworld/world/package-summary.html" target="classFrame">info.gridworld.world</A></span>
-<TABLE BORDER="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD NOWRAP><span CLASS="FrameHeadingFont" style="font-size: larger; ">
-			Classes</span>&nbsp;
-			<span CLASS="FrameItemFont">
-				<BR>
-				<A HREF="World.html" target="classFrame" title="class in info.gridworld.world">World</A></span>
-		</TD>
-	</TR>
-</TABLE>
-
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p058.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p058.java b/Random_Work/src/projectEuler/programs/p058.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p058.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,30 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static projectEuler.programs.Library.isPrime;
-
-public final class p058 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p058().run());
-	}
-
-	/*
-	 * From the diagram, let's observe the four corners of an n * n square (where n is odd).
-	 * It's not hard to convince yourself that:
-	 * - The bottom right corner always has the value n^2.
-	 * Working clockwise (backwards):
-	 * - The bottom left corner has the value n^2 - (n - 1).
-	 * - The top left corner has the value n^2 - 2(n - 1).
-	 * - The top right has the value n^2 - 3(n - 1).
-	 *
-	 * Furthermore, the number of elements on the diagonal is 2n - 1.
-	 */
-	@NotNull String run() {
-		int numPrimes = 0;
-		for (int n = 1; ; n += 2) {
-			for (int i = 0; i < 4; i++) if (isPrime(n * n - i * (n - 1))) numPrimes++;
-			if (n > 1 && numPrimes * 10 < n * 2 - 1) return Integer.toString(n);
-		}
-	}
-}
Index: Random_Work/src/projectEuler/programs/p035.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p035.java b/Random_Work/src/projectEuler/programs/p035.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p035.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,25 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.Integer.parseInt;
-import static java.util.stream.IntStream.range;
-
-public final class p035 extends EulerSolution {
-	private static final int LIMIT = Library.pow(10, 6);
-	private final boolean[] isPrime = Library.listPrimality(LIMIT - 1);
-
-	public static void main(String[] args) {
-		System.out.println(new p035().run());
-	}
-
-	@NotNull String run() {
-		int count = (int) range(0, isPrime.length).filter(this::isCircularPrime).count();
-		return Integer.toString(count);
-	}
-
-	private boolean isCircularPrime(int n) {
-		String s = Integer.toString(n);
-		return range(0, s.length()).allMatch(i -> isPrime[parseInt(s.substring(i) + s.substring(0, i))]);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p074.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p074.java b/Random_Work/src/projectEuler/programs/p074.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p074.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,37 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.HashSet;
-import java.util.stream.IntStream;
-
-public final class p074 extends EulerSolution {
-	private static final int LIMIT = Library.pow(10, 6);
-	// Hard-coded values for factorial(0), factorial(1), ..., factorial(9)
-	private static final int[] FACTORIAL = {1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
-
-	public static void main(String[] args) {
-		System.out.println(new p074().run());
-	}
-
-	private static int getChainLength(int n) {
-		HashSet<Integer> seen = new HashSet<>();
-		while (true) {
-			if (!seen.add(n)) return seen.size();
-			n = factorialize(n);
-		}
-	}
-
-	@Contract(pure = true)
-	private static int factorialize(int n) {
-		int sum = 0;
-		for (; n != 0; n /= 10) sum += FACTORIAL[n % 10];
-		return sum;
-	}
-
-	@NotNull String run() {
-		int count = (int) IntStream.range(0, LIMIT).filter(i -> getChainLength(i) == 60).count();
-		return Integer.toString(count);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p011.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p011.java b/Random_Work/src/projectEuler/programs/p011.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p011.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,44 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-
-import static java.lang.Math.max;
-
-public final class p011 extends EulerSolution {
-	/*
-	 * We visit each grid cell and compute the product in the 4 directions starting from that cell.
-	 * Note that the maximum product is 99^4 = 96059601, which fits in a Java int type.
-	 */
-	private static final int CONSECUTIVE = 4;
-	private static final int[][] SQUARE = {{8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8}, {49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0}, {81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65}, {52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91}, {22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80}, {24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50}, {32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70}, {67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21}, {24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72}, {21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95}, {78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92}, {16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57}, {86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58}, {19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40}, {4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66}, {88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69}, {4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36}, {20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16}, {20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54}, {1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48},};
-
-	public static void main(String[] args) {
-		System.out.println(new p011().run());
-	}
-
-	@Contract(pure = true)
-	private static int product(int x, int y, int dx, int dy) {
-		// First endpoint is assumed to be in bounds. Check if second endpoint is in bounds.
-		if (!isInBounds(x + ((CONSECUTIVE - 1) * dx), y + ((CONSECUTIVE - 1) * dy))) return -1;
-		int prod = 1;
-		for (int i = 0; i < CONSECUTIVE; i++, x += dx, y += dy) prod *= SQUARE[y][x];
-		return prod;
-	}
-
-	@Contract(pure = true)
-	private static boolean isInBounds(int x, int y) {
-		return (0 <= y) && (y < SQUARE.length) && (0 <= x) && (x < SQUARE[y].length);
-	}
-
-	String run() {
-		int max = -1;
-		for (int y = 0; y < SQUARE.length; y++)
-			for (int x = 0; x < SQUARE[y].length; x++) {
-				max = max(product(x, y, 1, 0), max);
-				max = max(product(x, y, 0, 1), max);
-				max = max(product(x, y, 1, 1), max);
-				max = max(product(x, y, 1, -1), max);
-			}
-		return Integer.toString(max);
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p041.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p041.java b/Random_Work/src/projectEuler/programs/p041.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p041.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,33 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import java.util.stream.IntStream;
-
-import static projectEuler.programs.Library.isPrime;
-import static projectEuler.programs.Library.nextPermutation;
-
-public final class p041 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p041().run());
-	}
-
-	@Contract(pure = true)
-	private static int toInteger(@NotNull int[] digits) {
-		int result = 0;
-		for (int x : digits) result = (result * 10) + x;
-		return result;
-	}
-
-	@NotNull String run() {
-		for (int n = 9; n >= 1; n--) {
-			int[] digits = IntStream.range(0, n).map(i -> i + 1).toArray();
-			int result = -1;
-			do if (isPrime(toInteger(digits))) result = toInteger(digits);
-			while (nextPermutation(digits));
-			if (result != -1) return Integer.toString(result);
-		}
-		throw new RuntimeException("Not found");
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/deprecated-list.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/deprecated-list.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/deprecated-list.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/deprecated-list.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,164 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Deprecated List
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Deprecated List";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Deprecated</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?deprecated-list.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="deprecated-list.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<div style="text-align: center;">
-	<H2>
-		<B>Deprecated API</B></H2>
-</div>
-<HR NOSHADE SIZE="4">
-<B>Contents</B>
-<UL>
-</UL>
-
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span
-							CLASS="NavBarFont1Rev"><B>Deprecated</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="index.html?deprecated-list.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="deprecated-list.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/ActorWorld.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/ActorWorld.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/ActorWorld.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/ActorWorld.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,545 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		ActorWorld
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "ActorWorld";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Bug.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/ActorWorld.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="ActorWorld.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class ActorWorld</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><A HREF="../../../info/gridworld/world/World.html"
-                                                                  title="class in info.gridworld.world">info.gridworld.world.World</A>&lt;<A
-		HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;
-      <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.ActorWorld</B>
-</PRE>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>ActorWorld</B>
-	<DT>extends <A HREF="../../../info/gridworld/world/World.html" title="class in info.gridworld.world">World</A>&lt;<A
-			HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;
-</DL>
-
-<P>
-	An <code>ActorWorld</code> is occupied by actors. <br/>
-	This class is not tested on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/ActorWorld.html#ActorWorld()">ActorWorld</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs an actor world with a default grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/ActorWorld.html#ActorWorld(info.gridworld.grid.Grid)">ActorWorld</A></B>(<A
-				HREF="../../../info/gridworld/grid/Grid.html"
-				title="interface in info.gridworld.grid">Grid</A>&lt;<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;grid)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs an actor world with a given grid.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/ActorWorld.html#add(info.gridworld.actor.Actor)">add</A></B>(<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&nbsp;occupant)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds an occupant at a random empty location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/ActorWorld.html#add(info.gridworld.grid.Location, info.gridworld.actor.Actor)">add</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-			<A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&nbsp;occupant)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Adds an actor to this world at a given location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/actor/Actor.html"
-			               title="class in info.gridworld.actor">Actor</A></CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/ActorWorld.html#remove(info.gridworld.grid.Location)">remove</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes an actor from this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/ActorWorld.html#show()">show</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs and shows a frame for this world.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/ActorWorld.html#step()">step</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;This method is called when the user clicks on
-			the step button, or when
-			run mode has been activated by clicking the run button.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_info.gridworld.world.World"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class info.gridworld.world.<A
-				HREF="../../../info/gridworld/world/World.html" title="class in info.gridworld.world">World</A></B>
-		</TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="../../../info/gridworld/world/World.html#addGridClass(java.lang.String)">addGridClass</A>,
-			<A
-					HREF="../../../info/gridworld/world/World.html#addOccupantClass(java.lang.String)">addOccupantClass</A>,
-			<A HREF="../../../info/gridworld/world/World.html#getGrid()">getGrid</A>, <A
-					HREF="../../../info/gridworld/world/World.html#getGridClasses()">getGridClasses</A>, <A
-					HREF="../../../info/gridworld/world/World.html#getMessage()">getMessage</A>, <A
-					HREF="../../../info/gridworld/world/World.html#getOccupantClasses()">getOccupantClasses</A>, <A
-					HREF="../../../info/gridworld/world/World.html#getRandomEmptyLocation()">getRandomEmptyLocation</A>,
-			<A HREF="../../../info/gridworld/world/World.html#keyPressed(java.lang.String, info.gridworld.grid.Location)">keyPressed</A>,
-			<A HREF="../../../info/gridworld/world/World.html#locationClicked(info.gridworld.grid.Location)">locationClicked</A>,
-			<A HREF="../../../info/gridworld/world/World.html#setGrid(info.gridworld.grid.Grid)">setGrid</A>, <A
-					HREF="../../../info/gridworld/world/World.html#setMessage(java.lang.String)">setMessage</A>, <A
-					HREF="../../../info/gridworld/world/World.html#toString()">toString</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="ActorWorld()"><!-- --></A>
-<H3>
-	ActorWorld</H3>
-<PRE>
-public <B>ActorWorld</B>()</PRE>
-<DL>
-	<DD>Constructs an actor world with a default grid.
-		<P>
-</DL>
-<HR>
-
-<A NAME="ActorWorld(info.gridworld.grid.Grid)"><!-- --></A>
-<H3>
-	ActorWorld</H3>
-<PRE>
-public <B>ActorWorld</B>(<A HREF="../../../info/gridworld/grid/Grid.html"
-                            title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/actor/Actor.html"
-		title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;grid)</PRE>
-<DL>
-	<DD>Constructs an actor world with a given grid.
-		<P>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>grid</CODE> - the grid for this world.
-		</DL>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="show()"><!-- --></A>
-<H3>
-	show</H3>
-<PRE>
-public void <B>show</B>()</PRE>
-<DL>
-	<DD><B>Description copied from class: <CODE><A
-			HREF="../../../info/gridworld/world/World.html#show()">World</A></CODE></B></DD>
-	<DD>Constructs and shows a frame for this world.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/world/World.html#show()">show</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/world/World.html"
-					title="class in info.gridworld.world">World</A>&lt;<A
-					HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="step()"><!-- --></A>
-<H3>
-	step</H3>
-<PRE>
-public void <B>step</B>()</PRE>
-<DL>
-	<DD><B>Description copied from class: <CODE><A
-			HREF="../../../info/gridworld/world/World.html#step()">World</A></CODE></B></DD>
-	<DD>This method is called when the user clicks on the step button, or when
-		run mode has been activated by clicking the run button.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A HREF="../../../info/gridworld/world/World.html#step()">step</A></CODE> in class <CODE><A
-					HREF="../../../info/gridworld/world/World.html"
-					title="class in info.gridworld.world">World</A>&lt;<A
-					HREF="../../../info/gridworld/actor/Actor.html"
-					title="class in info.gridworld.actor">Actor</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="add(info.gridworld.grid.Location, info.gridworld.actor.Actor)"><!-- --></A>
-<H3>
-	add</H3>
-<PRE>
-public void <B>add</B>(<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc,
-                <A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&nbsp;occupant)</PRE>
-<DL>
-	<DD>Adds an actor to this world at a given location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="../../../info/gridworld/world/World.html#add(info.gridworld.grid.Location, T)">add</A></CODE>
-				in class <CODE><A HREF="../../../info/gridworld/world/World.html"
-				                  title="class in info.gridworld.world">World</A>&lt;<A
-						HREF="../../../info/gridworld/actor/Actor.html"
-						title="class in info.gridworld.actor">Actor</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location at which to add the actor
-			<DD><CODE>occupant</CODE> - the actor to add
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="add(info.gridworld.actor.Actor)"><!-- --></A>
-<H3>
-	add</H3>
-<PRE>
-public void <B>add</B>(<A HREF="../../../info/gridworld/actor/Actor.html"
-                          title="class in info.gridworld.actor">Actor</A>&nbsp;occupant)</PRE>
-<DL>
-	<DD>Adds an occupant at a random empty location.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>occupant</CODE> - the occupant to add
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="remove(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	remove</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/actor/Actor.html"
-          title="class in info.gridworld.actor">Actor</A> <B>remove</B>(<A
-		HREF="../../../info/gridworld/grid/Location.html"
-		title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Removes an actor from this world.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="../../../info/gridworld/world/World.html#remove(info.gridworld.grid.Location)">remove</A></CODE>
-				in class <CODE><A HREF="../../../info/gridworld/world/World.html"
-				                  title="class in info.gridworld.world">World</A>&lt;<A
-						HREF="../../../info/gridworld/actor/Actor.html"
-						title="class in info.gridworld.actor">Actor</A>&gt;</CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>loc</CODE> - the location from which to remove an actor
-			<DT><B>Returns:</B>
-			<DD>the removed actor, or null if there was no actor at the given
-				location.
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;<A HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor"><B>PREV
-			CLASS</B></A>&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/Bug.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/ActorWorld.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="ActorWorld.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p013.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p013.java b/Random_Work/src/projectEuler/programs/p013.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p013.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,24 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import java.math.BigInteger;
-
-import static java.math.BigInteger.valueOf;
-
-public final class p013 extends EulerSolution {
-	private static final String[] NUMBERS = {"37107287533902102798797998220837590246510135740250", "46376937677490009712648124896970078050417018260538", "74324986199524741059474233309513058123726617309629", "91942213363574161572522430563301811072406154908250", "23067588207539346171171980310421047513778063246676", "89261670696623633820136378418383684178734361726757", "28112879812849979408065481931592621691275889832738", "44274228917432520321923589422876796487670272189318", "47451445736001306439091167216856844588711603153276", "70386486105843025439939619828917593665686757934951", "62176457141856560629502157223196586755079324193331", "64906352462741904929101432445813822663347944758178", "92575867718337217661963751590579239728245598838407", "58203565325359399008402633568948830189458628227828", "80181199384826282014278194139940567587151170094390", "35398664372827112653829987240784473053190104293586", "86515506006295864861532075273371959191420517255829", "71693888707715466499115593487603532921714970056938", "54370070576826684624621495650076471787294438377604", "53282654108756828443191190634694037855217779295145", "36123272525000296071075082563815656710885258350721", "45876576172410976447339110607218265236877223636045", "17423706905851860660448207621209813287860733969412", "81142660418086830619328460811191061556940512689692", "51934325451728388641918047049293215058642563049483", "62467221648435076201727918039944693004732956340691", "15732444386908125794514089057706229429197107928209", "55037687525678773091862540744969844508330393682126", "18336384825330154686196124348767681297534375946515", "80386287592878490201521685554828717201219257766954", "78182833757993103614740356856449095527097864797581", "16726320100436897842553539920931837441497806860984", "48403098129077791799088218795327364475675590848030", "87086987551392711854517078544161852424320693150332", "59959406895756536782107074926966537676326235447210", "69793950679652694742597709739166693763042633987085", "41052684708299085211399427365734116182760315001271", "65378607361501080857009149939512557028198746004375", "35829035317434717326932123578154982629742552737307", "94953759765105305946966067683156574377167401875275", "88902802571733229619176668713819931811048770190271", "25267680276078003013678680992525463401061632866526", "36270218540497705585629946580636237993140746255962", "24074486908231174977792365466257246923322810917141", "91430288197103288597806669760892938638285025333403", "34413065578016127815921815005561868836468420090470", "23053081172816430487623791969842487255036638784583", "11487696932154902810424020138335124462181441773470", "63783299490636259666498587618221225225512486764533", "67720186971698544312419572409913959008952310058822", "95548255300263520781532296796249481641953868218774", "76085327132285723110424803456124867697064507995236", "37774242535411291684276865538926205024910326572967", "23701913275725675285653248258265463092207058596522", "29798860272258331913126375147341994889534765745501", "18495701454879288984856827726077713721403798879715", "38298203783031473527721580348144513491373226651381", "34829543829199918180278916522431027392251122869539", "40957953066405232632538044100059654939159879593635", "29746152185502371307642255121183693803580388584903", "41698116222072977186158236678424689157993532961922", "62467957194401269043877107275048102390895523597457", "23189706772547915061505504953922979530901129967519", "86188088225875314529584099251203829009407770775672", "11306739708304724483816533873502340845647058077308", "82959174767140363198008187129011875491310547126581", "97623331044818386269515456334926366572897563400500", "42846280183517070527831839425882145521227251250327", "55121603546981200581762165212827652751691296897789", "32238195734329339946437501907836945765883352399886", "75506164965184775180738168837861091527357929701337", "62177842752192623401942399639168044983993173312731", "32924185707147349566916674687634660915035914677504", "99518671430235219628894890102423325116913619626622", "73267460800591547471830798392868535206946944540724", "76841822524674417161514036427982273348055556214818", "97142617910342598647204516893989422179826088076852", "87783646182799346313767754307809363333018982642090", "10848802521674670883215120185883543223812876952786", "71329612474782464538636993009049310363619763878039", "62184073572399794223406235393808339651327408011116", "66627891981488087797941876876144230030984490851411", "60661826293682836764744779239180335110989069790714", "85786944089552990653640447425576083659976645795096", "66024396409905389607120198219976047599490197230297", "64913982680032973156037120041377903785566085089252", "16730939319872750275468906903707539413042652315011", "94809377245048795150954100921645863754710598436791", "78639167021187492431995700641917969777599028300699", "15368713711936614952811305876380278410754449733078", "40789923115535562561142322423255033685442488917353", "44889911501440648020369068063960672322193204149535", "41503128880339536053299340368006977710650566631954", "81234880673210146739058568557934581403627822703280", "82616570773948327592232845941706525094512325230608", "22918802058777319719839450180888072429661980811197", "77158542502016545090413245809786882778948721859617", "72107838435069186155435662884062257473692284509516", "20849603980134001723930671666823555245252804609722", "53503534226472524250874054075591789781264330331690",};
-
-	public static void main(String[] args) {
-		System.out.println(new p013().run());
-	}
-
-	/*
-	 * We do a straightforward sum with help from Java's BigInteger type.
-	 */
-	@NotNull String run() {
-		BigInteger sum = valueOf(0);
-		for (String num : NUMBERS) sum = sum.add(new BigInteger(num));
-		return sum.toString().substring(0, 10);
-	}
-}
\ No newline at end of file
Index: Hello_World/src/HelloWorld.java
===================================================================
diff --git a/Hello_World/src/HelloWorld.java b/Hello_World/src/HelloWorld.java
deleted file mode 100644
--- a/Hello_World/src/HelloWorld.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,32 +0,0 @@
-import static java.lang.System.out;
-import static java.lang.Thread.sleep;
-
-class HelloWorld {
-	public static void main(String... args) throws InterruptedException {
-		var var1 = "Hello world!";
-		var var2 = "My name is Chirag.";
-		var var3 = "This just happens to be my first Java project.";
-		out.println(var1);
-		sleep(1250);
-		out.println(var2);
-		sleep(1250);
-		out.println(var3);
-		sleep(1250);
-		for (int a = 0; a < var3.length(); a++) {
-			out.print(var1.charAt(a));
-			sleep(150);
-		}
-		sleep(450);
-		out.println();
-		for (int a = 0; a < var3.length(); a++) {
-			out.print(var2.charAt(a));
-			sleep(150);
-		}
-		sleep(450);
-		out.println();
-		for (int a = 0; a < var3.length(); a++) {
-			out.print(var3.charAt(a));
-			sleep(150);
-		}
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Actor.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Actor.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Actor.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/info/gridworld/actor/Actor.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,632 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:12 PST 2007 -->
-	<TITLE>
-		Actor
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="../../../stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) parent.document.title = "Actor";
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Actor.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Actor.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<HR>
-<!-- ======== START OF CLASS DATA ======== -->
-<H2>
-	<span SIZE="-1">
-		info.gridworld.actor</span>
-	<BR>
-	Class Actor</H2>
-<PRE>
-<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-   title="class or interface in java.lang">java.lang.Object</A>
-  <IMG ALT="extended by " SRC="../../../resources/inherit.gif"><B>info.gridworld.actor.Actor</B>
-</PRE>
-<DL>
-	<DT><B>Direct Known Subclasses:</B>
-	<DD><A HREF="../../../info/gridworld/actor/Bug.html" title="class in info.gridworld.actor">Bug</A>, <A
-			HREF="../../../info/gridworld/actor/Critter.html" title="class in info.gridworld.actor">Critter</A>, <A
-			HREF="../../../info/gridworld/actor/Flower.html" title="class in info.gridworld.actor">Flower</A>, <A
-			HREF="../../../info/gridworld/actor/Rock.html" title="class in info.gridworld.actor">Rock</A></DD>
-</DL>
-<HR>
-<DL>
-	<DT>
-		<PRE>public class <B>Actor</B>
-	extends <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-	           title="class or interface in java.lang">Object</A></PRE>
-	</DT>
-
-</DL>
-
-<P>
-	An <code>Actor</code> is an entity with a color and direction that can act.
-	<br/>
-	The API of this class is testable on the AP CS A and AB exams.
-<P>
-
-<P>
-<HR>
-
-<P>
-
-	<!-- ======== CONSTRUCTOR SUMMARY ======== -->
-
-	<A NAME="constructor_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Constructor Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#Actor()">Actor</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Constructs a blue actor that is facing north.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;
-<!-- ========== METHOD SUMMARY =========== -->
-
-<A NAME="method_summary"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="2"><span SIZE="+2">
-			<B>Method Summary</B></span></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#act()">act</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Reverses the direction of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-			               title="class or interface in java.awt">Color</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#getColor()">getColor</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the color of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;int</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#getDirection()">getDirection</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the current direction of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Grid.html"
-			               title="interface in info.gridworld.grid">Grid</A>&lt;<A
-					HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;</CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#getGrid()">getGrid</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the grid in which this actor is located.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A></CODE></span>
-		</TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#getLocation()">getLocation</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Gets the location of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)">moveTo</A></B>(<A
-				HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;newLocation)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Moves this actor to a new location.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)">putSelfInGrid</A></B>(<A
-				HREF="../../../info/gridworld/grid/Grid.html"
-				title="interface in info.gridworld.grid">Grid</A>&lt;<A
-				HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;gr,
-			<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Puts this actor into a grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A
-				HREF="../../../info/gridworld/actor/Actor.html#removeSelfFromGrid()">removeSelfFromGrid</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Removes this actor from its grid.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#setColor(java.awt.Color)">setColor</A></B>(<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-				title="class or interface in java.awt">Color</A>&nbsp;newColor)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the color of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;void</CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#setDirection(int)">setDirection</A></B>(int&nbsp;newDirection)</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Sets the current direction of this actor.
-		</TD>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD ALIGN="right" VALIGN="top" WIDTH="1%"><span SIZE="-1">
-			<CODE>&nbsp;<A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-			               title="class or interface in java.lang">String</A></CODE></span></TD>
-		<TD><CODE><B><A HREF="../../../info/gridworld/actor/Actor.html#toString()">toString</A></B>()</CODE>
-
-			<BR>
-			&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Creates a string that describes this actor.
-		</TD>
-	</TR>
-</TABLE>
-&nbsp;<A NAME="methods_inherited_from_class_java.lang.Object"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#EEEEFF" CLASS="TableSubHeadingColor">
-		<TH ALIGN="left"><B>Methods inherited from class java.lang.<A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-				title="class or interface in java.lang">Object</A></B></TH>
-	</TR>
-	<TR BGCOLOR="white" CLASS="TableRowColor">
-		<TD><CODE><A HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#clone()"
-		             title="class or interface in java.lang">clone</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#equals(java.lang.Object)"
-				title="class or interface in java.lang">equals</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#finalize()"
-				title="class or interface in java.lang">finalize</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#getClass()"
-				title="class or interface in java.lang">getClass</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#hashCode()"
-				title="class or interface in java.lang">hashCode</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notify()"
-				title="class or interface in java.lang">notify</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#notifyAll()"
-				title="class or interface in java.lang">notifyAll</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait()"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long)"
-				title="class or interface in java.lang">wait</A>, <A
-				HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#wait(long, int)"
-				title="class or interface in java.lang">wait</A></CODE></TD>
-	</TR>
-</TABLE>
-&nbsp;
-<P>
-
-	<!-- ========= CONSTRUCTOR DETAIL ======== -->
-
-	<A NAME="constructor_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Constructor Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="Actor()"><!-- --></A>
-<H3>
-	Actor</H3>
-<PRE>
-public <B>Actor</B>()</PRE>
-<DL>
-	<DD>Constructs a blue actor that is facing north.
-		<P>
-</DL>
-
-<!-- ============ METHOD DETAIL ========== -->
-
-<A NAME="method_detail"><!-- --></A>
-<TABLE BORDER="1" CELLPADDING="3" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR BGCOLOR="#CCCCFF" CLASS="TableHeadingColor">
-		<TH ALIGN="left" COLSPAN="1"><span SIZE="+2">
-			<B>Method Detail</B></span></TH>
-	</TR>
-</TABLE>
-
-<A NAME="getColor()"><!-- --></A>
-<H3>
-	getColor</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-          title="class or interface in java.awt">Color</A> <B>getColor</B>()</PRE>
-<DL>
-	<DD>Gets the color of this actor.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the color of this actor
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="setColor(java.awt.Color)"><!-- --></A>
-<H3>
-	setColor</H3>
-<PRE>
-public void <B>setColor</B>(<A HREF="http://java.sun.com/javase/6/docs/api/java/awt/Color.html?is-external=true"
-                               title="class or interface in java.awt">Color</A>&nbsp;newColor)</PRE>
-<DL>
-	<DD>Sets the color of this actor.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>newColor</CODE> - the new color
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getDirection()"><!-- --></A>
-<H3>
-	getDirection</H3>
-<PRE>
-public int <B>getDirection</B>()</PRE>
-<DL>
-	<DD>Gets the current direction of this actor.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the direction of this actor, an angle between 0 and 359 degrees
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="setDirection(int)"><!-- --></A>
-<H3>
-	setDirection</H3>
-<PRE>
-public void <B>setDirection</B>(int&nbsp;newDirection)</PRE>
-<DL>
-	<DD>Sets the current direction of this actor.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>newDirection</CODE> - the new direction. The direction of this actor is set
-				to the angle between 0 and 359 degrees that is equivalent to
-				<code>newDirection</code>.
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getGrid()"><!-- --></A>
-<H3>
-	getGrid</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/actor/Actor.html"
-		title="class in info.gridworld.actor">Actor</A>&gt; <B>getGrid</B>()</PRE>
-<DL>
-	<DD>Gets the grid in which this actor is located.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the grid of this actor, or <code>null</code> if this actor is
-				not contained in a grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="getLocation()"><!-- --></A>
-<H3>
-	getLocation</H3>
-<PRE>
-public <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A> <B>getLocation</B>()</PRE>
-<DL>
-	<DD>Gets the location of this actor.
-		<P>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>the location of this actor, or <code>null</code> if this actor is
-				not contained in a grid
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	putSelfInGrid</H3>
-<PRE>
-public void <B>putSelfInGrid</B>(<A HREF="../../../info/gridworld/grid/Grid.html"
-                                    title="interface in info.gridworld.grid">Grid</A>&lt;<A
-		HREF="../../../info/gridworld/actor/Actor.html" title="class in info.gridworld.actor">Actor</A>&gt;&nbsp;gr,
-                          <A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;loc)</PRE>
-<DL>
-	<DD>Puts this actor into a grid. If there is another actor at the given
-		location, it is removed. <br/>
-		Precondition: (1) This actor is not contained in a grid (2)
-		<code>loc</code> is valid in <code>gr</code>
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>gr</CODE> - the grid into which this actor should be placed
-			<DD><CODE>loc</CODE> - the location into which the actor should be placed
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="removeSelfFromGrid()"><!-- --></A>
-<H3>
-	removeSelfFromGrid</H3>
-<PRE>
-public void <B>removeSelfFromGrid</B>()</PRE>
-<DL>
-	<DD>Removes this actor from its grid. <br/>
-		Precondition: This actor is contained in a grid
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="moveTo(info.gridworld.grid.Location)"><!-- --></A>
-<H3>
-	moveTo</H3>
-<PRE>
-public void <B>moveTo</B>(<A HREF="../../../info/gridworld/grid/Location.html" title="class in info.gridworld.grid">Location</A>&nbsp;newLocation)</PRE>
-<DL>
-	<DD>Moves this actor to a new location. If there is another actor at the
-		given location, it is removed. <br/>
-		Precondition: (1) This actor is contained in a grid (2)
-		<code>newLocation</code> is valid in the grid of this actor
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Parameters:</B>
-			<DD><CODE>newLocation</CODE> - the new location
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="act()"><!-- --></A>
-<H3>
-	act</H3>
-<PRE>
-public void <B>act</B>()</PRE>
-<DL>
-	<DD>Reverses the direction of this actor. Override this method in subclasses
-		of <code>Actor</code> to define types of actors with different behavior
-		<P>
-	<DD>
-		<DL>
-		</DL>
-	</DD>
-</DL>
-<HR>
-
-<A NAME="toString()"><!-- --></A>
-<H3>
-	toString</H3>
-<PRE>
-public <A HREF="http://java.sun.com/javase/6/docs/api/java/lang/String.html?is-external=true"
-          title="class or interface in java.lang">String</A> <B>toString</B>()</PRE>
-<DL>
-	<DD>Creates a string that describes this actor.
-		<P>
-	<DD>
-		<DL>
-			<DT><B>Overrides:</B>
-			<DD><CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true#toString()"
-					title="class or interface in java.lang">toString</A></CODE> in class <CODE><A
-					HREF="http://java.sun.com/javase/6/docs/api/java/lang/Object.html?is-external=true"
-					title="class or interface in java.lang">Object</A></CODE>
-		</DL>
-	</DD>
-	<DD>
-		<DL>
-
-			<DT><B>Returns:</B>
-			<DD>a string with the location, direction, and color of this actor
-		</DL>
-	</DD>
-</DL>
-<!-- ========= END OF CLASS DATA ========= -->
-<HR>
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-summary.html"><span
-							CLASS="NavBarFont1"><B>Package</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Class</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="package-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../index-all.html"><span
-							CLASS="NavBarFont1"><B>Index</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="../../../help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV CLASS&nbsp;
-			&nbsp;<A HREF="../../../info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor"><B>NEXT
-			CLASS</B></A></span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="../../../index.html?info/gridworld/actor/Actor.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="Actor.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="../../../allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-		</span></TD>
-	</TR>
-	<TR>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			SUMMARY:&nbsp;NESTED&nbsp;|&nbsp;FIELD&nbsp;|&nbsp;<A
-				HREF="#constructor_summary">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_summary">METHOD</A></span></TD>
-		<TD CLASS="NavBarCell3" VALIGN="top"><span SIZE="-2">
-			DETAIL:&nbsp;FIELD&nbsp;|&nbsp;<A HREF="#constructor_detail">CONSTR</A>&nbsp;|&nbsp;<A
-				HREF="#method_detail">METHOD</A></span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-<HR>
-</BODY>
-</HTML>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
deleted file mode 100644
--- a/.idea/inspectionProfiles/Project_Default.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,54 +0,0 @@
-<component name="InspectionProjectProfileManager">
-  <profile version="1.0">
-    <option name="myName" value="Project Default" />
-    <inspection_tool class="DuplicatedCode" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <Languages>
-        <language minSize="144" name="Java" />
-      </Languages>
-    </inspection_tool>
-    <inspection_tool class="HtmlUnknownAttribute" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="myValues">
-        <value>
-          <list size="3">
-            <item index="0" class="java.lang.String" itemvalue="disabled" />
-            <item index="1" class="java.lang.String" itemvalue="msallowcapture" />
-            <item index="2" class="java.lang.String" itemvalue="size" />
-          </list>
-        </value>
-      </option>
-      <option name="myCustomValuesEnabled" value="true" />
-    </inspection_tool>
-    <inspection_tool class="HtmlUnknownTag" enabled="true" level="WARNING" enabled_by_default="true">
-      <option name="myValues">
-        <value>
-          <list size="14">
-            <item index="0" class="java.lang.String" itemvalue="nobr" />
-            <item index="1" class="java.lang.String" itemvalue="noembed" />
-            <item index="2" class="java.lang.String" itemvalue="comment" />
-            <item index="3" class="java.lang.String" itemvalue="noscript" />
-            <item index="4" class="java.lang.String" itemvalue="embed" />
-            <item index="5" class="java.lang.String" itemvalue="script" />
-            <item index="6" class="java.lang.String" itemvalue="unnamed" />
-            <item index="7" class="java.lang.String" itemvalue="pre" />
-            <item index="8" class="java.lang.String" itemvalue="img" />
-            <item index="9" class="java.lang.String" itemvalue="p" />
-            <item index="10" class="java.lang.String" itemvalue="h2" />
-            <item index="11" class="java.lang.String" itemvalue="li" />
-            <item index="12" class="java.lang.String" itemvalue="ul" />
-            <item index="13" class="java.lang.String" itemvalue="a" />
-          </list>
-        </value>
-      </option>
-      <option name="myCustomValuesEnabled" value="true" />
-    </inspection_tool>
-    <inspection_tool class="IfStatementWithIdenticalBranches" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="myHighlightWhenLastStatementIsCall" value="false" />
-    </inspection_tool>
-    <inspection_tool class="UnusedLibrary" enabled="true" level="WARNING" enabled_by_default="true" />
-    <inspection_tool class="WeakerAccess" enabled="true" level="WEAK WARNING" enabled_by_default="true">
-      <option name="SUGGEST_PACKAGE_LOCAL_FOR_MEMBERS" value="true" />
-      <option name="SUGGEST_PACKAGE_LOCAL_FOR_TOP_CLASSES" value="true" />
-      <option name="SUGGEST_PRIVATE_FOR_INNERS" value="false" />
-    </inspection_tool>
-  </profile>
-</component>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p021.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p021.java b/Random_Work/src/projectEuler/programs/p021.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p021.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,28 +0,0 @@
-package projectEuler.programs;
-
-import java.util.stream.IntStream;
-
-public final class p021 extends EulerSolution {
-	public static void main(String[] args) {
-		System.out.println(new p021().run());
-	}
-
-	/*
-	 * We find the sum of proper divisors of a number by brute force,
-	 * and apply the definition of an amicable number straightforwardly.
-	 */
-
-	private static boolean isAmicable(int n) {
-		int m = divisorSum(n);
-		return (m != n) && (divisorSum(m) == n);
-	}
-
-	private static int divisorSum(int n) {
-		return IntStream.range(1, n).filter(i -> (n % i) == 0).sum();
-	}
-
-	String run() {
-		int sum = IntStream.range(1, 10000).filter(p021::isAmicable).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: .idea/kotlinCodeInsightSettings.xml
===================================================================
diff --git a/.idea/kotlinCodeInsightSettings.xml b/.idea/kotlinCodeInsightSettings.xml
deleted file mode 100644
--- a/.idea/kotlinCodeInsightSettings.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-	<component name="KotlinCodeInsightWorkspaceSettings">
-		<option name="addUnambiguousImportsOnTheFly" value="true"/>
-		<option name="optimizeImportsOnTheFly" value="true"/>
-	</component>
-</project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p003.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p003.java b/Random_Work/src/projectEuler/programs/p003.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p003.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,36 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.Contract;
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-import static projectEuler.programs.Library.sqrt;
-
-public final class p003 extends EulerSolution {
-	public static void main(String[] args) {
-		out.println(new p003().run());
-	}
-
-	// Returns the smallest factor of n, which is in the range [2, n]. The result is always prime.
-	@Contract(pure = true)
-	private static long smallestFactor(long n) {
-		assert n > 1;
-		for (long i = 2, end = sqrt(n); i <= end; i++) if (n % i == 0) return i;
-		return n; // n itself is prime
-	}
-
-	/*
-	 * By the fundamental theorem of arithmetic, every integer n > 1 has a unique factorization as a product of prime numbers.
-	 * In other words, the theorem says that n = p_0 * p_1 * ... * p_{m-1}, where each p_i > 1 is prime but not necessarily unique.
-	 * Now if we take the number n and repeatedly divide out its smallest factor (which must also be prime), then the last
-	 * factor that we divide out must be the largest prime factor of n. For reference, 600851475143 = 71 * 839 * 1471 * 6857.
-	 */
-	@NotNull String run() {
-		long n = 600851475143L;
-		while (true) {
-			long p = smallestFactor(n);
-			if (p < n) n /= p;
-			else return Long.toString(n);
-		}
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/EulerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/EulerTest.java b/Random_Work/src/projectEuler/programs/EulerTest.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/EulerTest.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,1027 +0,0 @@
-package projectEuler.programs;
-
-import org.junit.Test;
-
-import static org.junit.Assert.assertEquals;
-
-public final class EulerTest {
-	@Test
-	public void testP001() {
-		assertEquals("233168", new p001().run());
-	}
-
-	@Test
-	public void testP002() {
-		assertEquals("4613732", new p002().run());
-	}
-
-	@Test
-	public void testP003() {
-		assertEquals("6857", new p003().run());
-	}
-
-	@Test
-	public void testP004() {
-		assertEquals("906609", new p004().run());
-	}
-
-	@Test
-	public void testP005() {
-		assertEquals("232792560", new p005().run());
-	}
-
-	@Test
-	public void testP006() {
-		assertEquals("25164150", new p006().run());
-	}
-
-	@Test
-	public void testP007() {
-		assertEquals("104743", new p007().run());
-	}
-
-	@Test
-	public void testP008() {
-		assertEquals("23514624000", new p008().run());
-	}
-
-	@Test
-	public void testP009() {
-		assertEquals("31875000", new p009().run());
-	}
-
-	@Test
-	public void testP010() {
-		assertEquals("142913828922", new p010().run());
-	}
-
-	@Test
-	public void testP011() {
-		assertEquals("70600674", new p011().run());
-	}
-
-	@Test
-	public void testP012() {
-		assertEquals("76576500", new p012().run());
-	}
-
-	@Test
-	public void testP013() {
-		assertEquals("5537376230", new p013().run());
-	}
-
-	@Test
-	public void testP014() {
-		assertEquals("837799", new p014().run());
-	}
-
-	@Test
-	public void testP015() {
-		assertEquals("137846528820", new p015().run());
-	}
-
-	@Test
-	public void testP016() {
-		assertEquals("1366", new p016().run());
-	}
-
-	@Test
-	public void testP017() {
-		assertEquals("21124", new p017().run());
-	}
-
-	@Test
-	public void testP018() {
-		assertEquals("1074", new p018().run());
-	}
-
-	@Test
-	public void testP019() {
-		assertEquals("171", new p019().run());
-	}
-
-	@Test
-	public void testP020() {
-		assertEquals("648", new p020().run());
-	}
-
-	@Test
-	public void testP021() {
-		assertEquals("31626", new p021().run());
-	}
-
-	@Test
-	public void testP022() {
-		assertEquals("871198282", new p022().run());
-	}
-
-	@Test
-	public void testP023() {
-		assertEquals("4179871", new p023().run());
-	}
-
-	@Test
-	public void testP024() {
-		assertEquals("2783915460", new p024().run());
-	}
-
-	@Test
-	public void testP025() {
-		assertEquals("4782", new p025().run());
-	}
-
-	@Test
-	public void testP026() {
-		assertEquals("983", new p026().run());
-	}
-
-	@Test
-	public void testP027() {
-		assertEquals("-59231", new p027().run());
-	}
-
-	@Test
-	public void testP028() {
-		assertEquals("669171001", new p028().run());
-	}
-
-	@Test
-	public void testP029() {
-		assertEquals("9183", new p029().run());
-	}
-
-	@Test
-	public void testP030() {
-		assertEquals("443839", new p030().run());
-	}
-
-	@Test
-	public void testP031() {
-		assertEquals("73682", new p031().run());
-	}
-
-	@Test
-	public void testP032() {
-		assertEquals("45228", new p032().run());
-	}
-
-	@Test
-	public void testP033() {
-		assertEquals("100", new p033().run());
-	}
-
-	@Test
-	public void testP034() {
-		assertEquals("40730", new p034().run());
-	}
-
-	@Test
-	public void testP035() {
-		assertEquals("55", new p035().run());
-	}
-
-	@Test
-	public void testP036() {
-		assertEquals("872187", new p036().run());
-	}
-
-	@Test
-	public void testP037() {
-		assertEquals("748317", new p037().run());
-	}
-
-	@Test
-	public void testP038() {
-		assertEquals("932718654", new p038().run());
-	}
-
-	@Test
-	public void testP039() {
-		assertEquals("840", new p039().run());
-	}
-
-	@Test
-	public void testP040() {
-		assertEquals("210", new p040().run());
-	}
-
-	@Test
-	public void testP041() {
-		assertEquals("7652413", new p041().run());
-	}
-
-	@Test
-	public void testP042() {
-		assertEquals("162", new p042().run());
-	}
-
-	@Test
-	public void testP043() {
-		assertEquals("16695334890", new p043().run());
-	}
-
-	@Test
-	public void testP044() {
-		assertEquals("5482660", new p044().run());
-	}
-
-	@Test
-	public void testP045() {
-		assertEquals("1533776805", new p045().run());
-	}
-
-	@Test
-	public void testP046() {
-		assertEquals("5777", new p046().run());
-	}
-
-	@Test
-	public void testP047() {
-		assertEquals("134043", new p047().run());
-	}
-
-	@Test
-	public void testP048() {
-		assertEquals("9110846700", new p048().run());
-	}
-
-	@Test
-	public void testP049() {
-		assertEquals("296962999629", new p049().run());
-	}
-
-	@Test
-	public void testP050() {
-		assertEquals("997651", new p050().run());
-	}
-
-	@Test
-	public void testP051() {
-		assertEquals("121313", new p051().run());
-	}
-
-	@Test
-	public void testP052() {
-		assertEquals("142857", new p052().run());
-	}
-
-	@Test
-	public void testP053() {
-		assertEquals("4075", new p053().run());
-	}
-
-	@Test
-	public void testP054() {
-		assertEquals("376", new p054().run());
-	}
-
-	@Test
-	public void testP055() {
-		assertEquals("249", new p055().run());
-	}
-
-	@Test
-	public void testP056() {
-		assertEquals("972", new p056().run());
-	}
-
-	@Test
-	public void testP057() {
-		assertEquals("153", new p057().run());
-	}
-
-	@Test
-	public void testP058() {
-		assertEquals("26241", new p058().run());
-	}
-
-	@Test
-	public void testP059() {
-		assertEquals("129448", new p059().run());
-	}
-
-	@Test
-	public void testP060() {
-		assertEquals("26033", new p060().run());
-	}
-
-	@Test
-	public void testP061() {
-		assertEquals("28684", new p061().run());
-	}
-
-	@Test
-	public void testP062() {
-		assertEquals("127035954683", new p062().run());
-	}
-
-	@Test
-	public void testP063() {
-		assertEquals("49", new p063().run());
-	}
-
-	@Test
-	public void testP064() {
-		assertEquals("1322", new p064().run());
-	}
-
-	@Test
-	public void testP065() {
-		assertEquals("272", new p065().run());
-	}
-
-	@Test
-	public void testP066() {
-		assertEquals("661", new p066().run());
-	}
-
-	@Test
-	public void testP067() {
-		assertEquals("7273", new p067().run());
-	}
-
-	@Test
-	public void testP068() {
-		assertEquals("6531031914842725", new p068().run());
-	}
-
-	@Test
-	public void testP069() {
-		assertEquals("510510", new p069().run());
-	}
-
-	@Test
-	public void testP070() {
-		assertEquals("8319823", new p070().run());
-	}
-
-	@Test
-	public void testP071() {
-		assertEquals("428570", new p071().run());
-	}
-
-	@Test
-	public void testP072() {
-		assertEquals("303963552391", new p072().run());
-	}
-
-	@Test
-	public void testP073() {
-		assertEquals("7295372", new p073().run());
-	}
-
-	@Test
-	public void testP074() {
-		assertEquals("402", new p074().run());
-	}
-
-	@Test
-	public void testP075() {
-		assertEquals("161667", new p075().run());
-	}
-
-	@Test
-	public void testP076() {
-		assertEquals("190569291", new p076().run());
-	}
-
-	@Test
-	public void testP077() {
-		assertEquals("71", new p077().run());
-	}
-
-	@Test
-	public void testP078() {
-		assertEquals("55374", new p078().run());
-	}
-
-	@Test
-	public void testP079() {
-		assertEquals("73162890", new p079().run());
-	}
-
-	@Test
-	public void testP080() {
-		assertEquals("40886", new p080().run());
-	}
-
-	@Test
-	public void testP081() {
-		assertEquals("427337", new p081().run());
-	}
-
-	@Test
-	public void testP082() {
-		assertEquals("260324", new p082().run());
-	}
-
-	@Test
-	public void testP083() {
-		assertEquals("425185", new p083().run());
-	}
-
-	@Test
-	public void testP084() {
-		assertEquals("101524", new p084().run());
-	}
-
-	@Test
-	public void testP085() {
-		assertEquals("2772", new p085().run());
-	}
-
-	@Test
-	public void testP086() {
-		assertEquals("1818", new p086().run());
-	}
-
-	@Test
-	public void testP087() {
-		assertEquals("1097343", new p087().run());
-	}
-
-	@Test
-	public void testP088() {
-		assertEquals("7587457", new p088().run());
-	}
-
-	@Test
-	public void testP089() {
-		assertEquals("743", new p089().run());
-	}
-
-	@Test
-	public void testP090() {
-		assertEquals("1217", new p090().run());
-	}
-
-	@Test
-	public void testP091() {
-		assertEquals("14234", new p091().run());
-	}
-
-	@Test
-	public void testP092() {
-		assertEquals("8581146", new p092().run());
-	}
-
-	@Test
-	public void testP093() {
-		assertEquals("1258", new p093().run());
-	}
-
-	@Test
-	public void testP094() {
-		assertEquals("518408346", new p094().run());
-	}
-
-	@Test
-	public void testP095() {
-		assertEquals("14316", new p095().run());
-	}
-
-	@Test
-	public void testP096() {
-		assertEquals("24702", new p096().run());
-	}
-
-	@Test
-	public void testP097() {
-		assertEquals("8739992577", new p097().run());
-	}
-
-	@Test
-	public void testP098() {
-		assertEquals("18769", new p098().run());
-	}
-
-	@Test
-	public void testP099() {
-		assertEquals("709", new p099().run());
-	}
-
-	@Test
-	public void testP100() {
-		assertEquals("756872327473", new p100().run());
-	}
-
-	@Test
-	public void testP101() {
-		assertEquals("37076114526", new p101().run());
-	}
-
-	@Test
-	public void testP102() {
-		assertEquals("228", new p102().run());
-	}
-
-	@Test
-	public void testP103() {
-		assertEquals("20313839404245", new p103().run());
-	}
-
-	@Test
-	public void testP104() {
-		assertEquals("329468", new p104().run());
-	}
-
-	@Test
-	public void testP105() {
-		assertEquals("73702", new p105().run());
-	}
-
-	@Test
-	public void testP106() {
-		assertEquals("21384", new p106().run());
-	}
-
-	@Test
-	public void testP107() {
-		assertEquals("259679", new p107().run());
-	}
-
-	@Test
-	public void testP108() {
-		assertEquals("180180", new p108().run());
-	}
-
-	@Test
-	public void testP109() {
-		assertEquals("38182", new p109().run());
-	}
-
-	@Test
-	public void testP111() {
-		assertEquals("612407567715", new p111().run());
-	}
-
-	@Test
-	public void testP112() {
-		assertEquals("1587000", new p112().run());
-	}
-
-	@Test
-	public void testP113() {
-		assertEquals("51161058134250", new p113().run());
-	}
-
-	@Test
-	public void testP114() {
-		assertEquals("16475640049", new p114().run());
-	}
-
-	@Test
-	public void testP115() {
-		assertEquals("168", new p115().run());
-	}
-
-	@Test
-	public void testP116() {
-		assertEquals("20492570929", new p116().run());
-	}
-
-	@Test
-	public void testP117() {
-		assertEquals("100808458960497", new p117().run());
-	}
-
-	@Test
-	public void testP118() {
-		assertEquals("44680", new p118().run());
-	}
-
-	@Test
-	public void testP119() {
-		assertEquals("248155780267521", new p119().run());
-	}
-
-	@Test
-	public void testP120() {
-		assertEquals("333082500", new p120().run());
-	}
-
-	@Test
-	public void testP121() {
-		assertEquals("2269", new p121().run());
-	}
-
-	@Test
-	public void testP122() {
-		assertEquals("1582", new p122().run());
-	}
-
-	@Test
-	public void testP123() {
-		assertEquals("21035", new p123().run());
-	}
-
-	@Test
-	public void testP124() {
-		assertEquals("21417", new p124().run());
-	}
-
-	@Test
-	public void testP125() {
-		assertEquals("2906969179", new p125().run());
-	}
-
-	@Test
-	public void testP127() {
-		assertEquals("18407904", new p127().run());
-	}
-
-	@Test
-	public void testP128() {
-		assertEquals("14516824220", new p128().run());
-	}
-
-	@Test
-	public void testP129() {
-		assertEquals("1000023", new p129().run());
-	}
-
-	@Test
-	public void testP130() {
-		assertEquals("149253", new p130().run());
-	}
-
-	@Test
-	public void testP132() {
-		assertEquals("843296", new p132().run());
-	}
-
-	@Test
-	public void testP133() {
-		assertEquals("453647705", new p133().run());
-	}
-
-	@Test
-	public void testP134() {
-		assertEquals("18613426663617118", new p134().run());
-	}
-
-	@Test
-	public void testP135() {
-		assertEquals("4989", new p135().run());
-	}
-
-	@Test
-	public void testP139() {
-		assertEquals("10057761", new p139().run());
-	}
-
-	@Test
-	public void testP142() {
-		assertEquals("1006193", new p142().run());
-	}
-
-	@Test
-	public void testP145() {
-		assertEquals("608720", new p145().run());
-	}
-
-	@Test
-	public void testP146() {
-		assertEquals("676333270", new p146().run());
-	}
-
-	@Test
-	public void testP149() {
-		assertEquals("52852124", new p149().run());
-	}
-
-	@Test
-	public void testP150() {
-		assertEquals("-271248680", new p150().run());
-	}
-
-	@Test
-	public void testP151() {
-		assertEquals("0.464399", new p151().run());
-	}
-
-	@Test
-	public void testP155() {
-		assertEquals("3857447", new p155().run());
-	}
-
-	@Test
-	public void testP160() {
-		assertEquals("16576", new p160().run());
-	}
-
-	@Test
-	public void testP162() {
-		assertEquals("3D58725572C62302", new p162().run());
-	}
-
-	@Test
-	public void testP164() {
-		assertEquals("378158756814587", new p164().run());
-	}
-
-	@Test
-	public void testP166() {
-		assertEquals("7130034", new p166().run());
-	}
-
-	@Test
-	public void testP169() {
-		assertEquals("178653872807", new p169().run());
-	}
-
-	@Test
-	public void testP171() {
-		assertEquals("142989277", new p171().run());
-	}
-
-	@Test
-	public void testP172() {
-		assertEquals("227485267000992000", new p172().run());
-	}
-
-	@Test
-	public void testP173() {
-		assertEquals("1572729", new p173().run());
-	}
-
-	@Test
-	public void testP174() {
-		assertEquals("209566", new p174().run());
-	}
-
-	@Test
-	public void testP178() {
-		assertEquals("126461847755", new p178().run());
-	}
-
-	@Test
-	public void testP179() {
-		assertEquals("986262", new p179().run());
-	}
-
-	@Test
-	public void testP182() {
-		assertEquals("399788195976", new p182().run());
-	}
-
-	@Test
-	public void testP186() {
-		assertEquals("2325629", new p186().run());
-	}
-
-	@Test
-	public void testP187() {
-		assertEquals("17427258", new p187().run());
-	}
-
-	@Test
-	public void testP188() {
-		assertEquals("95962097", new p188().run());
-	}
-
-	@Test
-	public void testP191() {
-		assertEquals("1918080160", new p191().run());
-	}
-
-	@Test
-	public void testP197() {
-		assertEquals("1.710637717", new p197().run());
-	}
-
-	@Test
-	public void testP203() {
-		assertEquals("34029210557338", new p203().run());
-	}
-
-	@Test
-	public void testP204() {
-		assertEquals("2944730", new p204().run());
-	}
-
-	@Test
-	public void testP205() {
-		assertEquals("0.5731441", new p205().run());
-	}
-
-	@Test
-	public void testP206() {
-		assertEquals("1389019170", new p206().run());
-	}
-
-	@Test
-	public void testP208() {
-		assertEquals("331951449665644800", new p208().run());
-	}
-
-	@Test
-	public void testP211() {
-		assertEquals("1922364685", new p211().run());
-	}
-
-	@Test
-	public void testP214() {
-		assertEquals("1677366278943", new p214().run());
-	}
-
-	@Test
-	public void testP215() {
-		assertEquals("806844323190414", new p215().run());
-	}
-
-	@Test
-	public void testP216() {
-		assertEquals("5437849", new p216().run());
-	}
-
-	@Test
-	public void testP218() {
-		assertEquals("0", new p218().run());
-	}
-
-	@Test
-	public void testP222() {
-		assertEquals("1590933", new p222().run());
-	}
-
-	@Test
-	public void testP225() {
-		assertEquals("2009", new p225().run());
-	}
-
-	@Test
-	public void testP231() {
-		assertEquals("7526965179680", new p231().run());
-	}
-
-	@Test
-	public void testP243() {
-		assertEquals("892371480", new p243().run());
-	}
-
-	@Test
-	public void testP249() {
-		assertEquals("9275262564250418", new p249().run());
-	}
-
-	@Test
-	public void testP250() {
-		assertEquals("1425480602091519", new p250().run());
-	}
-
-	@Test
-	public void testP265() {
-		assertEquals("209110240768", new p265().run());
-	}
-
-	@Test
-	public void testP267() {
-		assertEquals("0.999992836187", new p267().run());
-	}
-
-	@Test
-	public void testP271() {
-		assertEquals("4617456485273129588", new p271().run());
-	}
-
-	@Test
-	public void testP280() {
-		assertEquals("430.088247", new p280().run());
-	}
-
-	@Test
-	public void testP287() {
-		assertEquals("313135496", new p287().run());
-	}
-
-	@Test
-	public void testP301() {
-		assertEquals("2178309", new p301().run());
-	}
-
-	@Test
-	public void testP303() {
-		assertEquals("1111981904675169", new p303().run());
-	}
-
-	@Test
-	public void testP304() {
-		assertEquals("283988410192", new p304().run());
-	}
-
-	@Test
-	public void testP315() {
-		assertEquals("13625242", new p315().run());
-	}
-
-	@Test
-	public void testP323() {
-		assertEquals("6.3551758451", new p323().run());
-	}
-
-	@Test
-	public void testP329() {
-		assertEquals("199740353/29386561536000", new p329().run());
-	}
-
-	@Test
-	public void testP345() {
-		assertEquals("13938", new p345().run());
-	}
-
-	@Test
-	public void testP346() {
-		assertEquals("336108797689259276", new p346().run());
-	}
-
-	@Test
-	public void testP347() {
-		assertEquals("11109800204052", new p347().run());
-	}
-
-	@Test
-	public void testP348() {
-		assertEquals("1004195061", new p348().run());
-	}
-
-	@Test
-	public void testP357() {
-		assertEquals("1739023853137", new p357().run());
-	}
-
-	@Test
-	public void testP381() {
-		assertEquals("139602943319822", new p381().run());
-	}
-
-	@Test
-	public void testP387() {
-		assertEquals("696067597313468", new p387().run());
-	}
-
-	@Test
-	public void testP401() {
-		assertEquals("281632621", new p401().run());
-	}
-
-	@Test
-	public void testP407() {
-		assertEquals("39782849136421", new p407().run());
-	}
-
-	@Test
-	public void testP417() {
-		assertEquals("446572970925740", new p417().run());
-	}
-
-	@Test
-	public void testP425() {
-		assertEquals("46479497324", new p425().run());
-	}
-
-	@Test
-	public void testP429() {
-		assertEquals("98792821", new p429().run());
-	}
-
-	@Test
-	public void testP431() {
-		assertEquals("23.386029052", new p431().run());
-	}
-
-	@Test
-	public void testP433() {
-		assertEquals("326624372659664", new p433().run());
-	}
-
-	@Test
-	public void testP451() {
-		assertEquals("153651073760956", new p451().run());
-	}
-
-	@Test
-	public void testP493() {
-		assertEquals("6.818741802", new p493().run());
-	}
-
-	@Test
-	public void testP500() {
-		assertEquals("35407281", new p500().run());
-	}
-
-	@Test
-	public void testP518() {
-		assertEquals("100315739184392", new p518().run());
-	}
-
-	@Test
-	public void testP549() {
-		assertEquals("476001479068717", new p549().run());
-	}
-
-	@Test
-	public void testP587() {
-		assertEquals("2240", new p587().run());
-	}
-}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p001.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p001.java b/Random_Work/src/projectEuler/programs/p001.java
deleted file mode 100644
--- a/Random_Work/src/projectEuler/programs/p001.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,21 +0,0 @@
-package projectEuler.programs;
-
-import org.jetbrains.annotations.NotNull;
-
-import static java.lang.System.out;
-import static java.util.stream.IntStream.range;
-
-public final class p001 extends EulerSolution {
-	public static void main(String[] args) {
-		out.println(new p001().run());
-	}
-
-	/*
-	 * Computers are fast, so we can implement this solution directly without any clever math.
-	 * A conservative upper bound for the sum is 1000 * 1000, which fits in a Java int type.
-	 */
-	@NotNull String run() {
-		int sum = range(0, 1000).filter(i -> i % 3 == 0 || i % 5 == 0).sum();
-		return Integer.toString(sum);
-	}
-}
\ No newline at end of file
Index: out/production/Java_Development/objectOriented/gridWorld/javadoc/index-all.html
===================================================================
diff --git a/out/production/Java_Development/objectOriented/gridWorld/javadoc/index-all.html b/out/production/Java_Development/objectOriented/gridWorld/javadoc/index-all.html
deleted file mode 100644
--- a/out/production/Java_Development/objectOriented/gridWorld/javadoc/index-all.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ /dev/null	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
@@ -1,847 +0,0 @@
-<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
-<!--NewPage-->
-<HTML lang="en">
-<HEAD>
-	<!-- Generated by javadoc (build 1.6.0_01) on Mon Apr 16 06:49:13 PST 2007 -->
-	<TITLE>
-		Index
-	</TITLE>
-
-	<META CONTENT="2007-04-16" NAME="date">
-
-	<LINK HREF="./stylesheet.css" REL="stylesheet" TITLE="Style" TYPE="text/css">
-
-	<SCRIPT type="text/javascript">
-        function windowTitle() {
-            if (location.href.indexOf('is-external=true') === -1) {
-                parent.document.title = "Index";
-            }
-        }
-	</SCRIPT>
-	<NOSCRIPT>
-	</NOSCRIPT>
-
-</HEAD>
-
-<BODY BGCOLOR="white" onload="windowTitle();">
-<HR>
-
-
-<!-- ========= START OF TOP NAVBAR ======= -->
-<A NAME="navbar_top"><!-- --></A>
-<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_top_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Index</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="./index.html?index-all.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="index-all.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="./allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="./allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_top"></A>
-<!-- ========= END OF TOP NAVBAR ========= -->
-
-<A HREF="#_A_">A</A> <A HREF="#_B_">B</A> <A HREF="#_C_">C</A> <A HREF="#_E_">E</A> <A HREF="#_F_">F</A> <A
-		HREF="#_G_">G</A>
-<A HREF="#_H_">H</A> <A HREF="#_I_">I</A> <A HREF="#_K_">K</A> <A HREF="#_L_">L</A> <A HREF="#_M_">M</A> <A
-		HREF="#_N_">N</A>
-<A HREF="#_P_">P</A> <A HREF="#_R_">R</A> <A HREF="#_S_">S</A> <A HREF="#_T_">T</A> <A HREF="#_U_">U</A> <A
-		HREF="#_W_">W</A>
-<HR>
-<A NAME="_A_"><!-- --></A>
-<H2>
-	<B>A</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html"
-	       title="class in info.gridworld.grid"><B>AbstractGrid</B></A>&lt;<A
-			HREF="./info/gridworld/grid/AbstractGrid.html" title="type parameter in AbstractGrid">E</A>&gt; - Class
-		in
-		<A HREF="./info/gridworld/grid/package-summary.html">info.gridworld.grid</A>
-	<DD><code>AbstractGrid</code> contains the methods that are common to grid
-		implementations.
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html#AbstractGrid()"><B>AbstractGrid()</B></A> -
-		Constructor for class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                             title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/actor/Actor.html#act()"><B>act()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Reverses the direction of this actor.
-	<DT><A HREF="./info/gridworld/actor/Bug.html#act()"><B>act()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                        title="class in info.gridworld.actor">Bug</A>
-	<DD>Moves if it can move, turns otherwise.
-	<DT><A HREF="./info/gridworld/actor/Critter.html#act()"><B>act()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>A critter acts by getting a list of other actors, processing that list,
-		getting locations to move to, selecting one of them, and moving to the
-		selected location.
-	<DT><A HREF="./info/gridworld/actor/Flower.html#act()"><B>act()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Flower.html"
-		                                        title="class in info.gridworld.actor">Flower</A>
-	<DD>Causes the color of this flower to darken.
-	<DT><A HREF="./info/gridworld/actor/Rock.html#act()"><B>act()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Rock.html"
-		                                        title="class in info.gridworld.actor">Rock</A>
-	<DD>Overrides the <code>act</code> method in the <code>Actor</code> class
-		to do nothing.
-	<DT><A HREF="./info/gridworld/actor/Actor.html" title="class in info.gridworld.actor"><B>Actor</B></A> - Class
-		in <A
-				HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>An <code>Actor</code> is an entity with a color and direction that can act.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#Actor()"><B>Actor()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                              title="class in info.gridworld.actor">Actor</A>
-	<DD>Constructs a blue actor that is facing north.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html" title="class in info.gridworld.actor"><B>ActorWorld</B></A>
-		-
-		Class in <A HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>An <code>ActorWorld</code> is occupied by actors.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html#ActorWorld()"><B>ActorWorld()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                              title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>Constructs an actor world with a default grid.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html#ActorWorld(info.gridworld.grid.Grid)"><B>ActorWorld(Grid&lt;Actor&gt;)</B></A>
-		-
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                              title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>Constructs an actor world with a given grid.
-	<DT>
-		<A HREF="./info/gridworld/actor/ActorWorld.html#add(info.gridworld.grid.Location, info.gridworld.actor.Actor)"><B>add(Location,
-			Actor)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                        title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>Adds an actor to this world at a given location.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html#add(info.gridworld.actor.Actor)"><B>add(Actor)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                        title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>Adds an occupant at a random empty location.
-	<DT><A HREF="./info/gridworld/world/World.html#add(info.gridworld.grid.Location, T)"><B>add(Location, T)</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Adds an occupant at a given location.
-	<DT><A HREF="./info/gridworld/world/World.html#addGridClass(java.lang.String)"><B>addGridClass(String)</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Adds a class to be shown in the "Set grid" menu.
-	<DT>
-		<A HREF="./info/gridworld/world/World.html#addOccupantClass(java.lang.String)"><B>addOccupantClass(String)</B></A>
-		-
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Adds a class to be shown when clicking on an empty location.
-	<DT><A HREF="./info/gridworld/grid/Location.html#AHEAD"><B>AHEAD</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for making no turn.
-</DL>
-<HR>
-<A NAME="_B_"><!-- --></A>
-<H2>
-	<B>B</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html" title="class in info.gridworld.grid"><B>BoundedGrid</B></A>&lt;<A
-			HREF="./info/gridworld/grid/BoundedGrid.html" title="type parameter in BoundedGrid">E</A>&gt; - Class in
-		<A
-				HREF="./info/gridworld/grid/package-summary.html">info.gridworld.grid</A>
-	<DD>A <code>BoundedGrid</code> is a rectangular grid with a finite number of
-		rows and columns.
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#BoundedGrid(int, int)"><B>BoundedGrid(int, int)</B></A> -
-		Constructor for class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                             title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>Constructs an empty bounded grid with the given dimensions.
-	<DT><A HREF="./info/gridworld/actor/Bug.html" title="class in info.gridworld.actor"><B>Bug</B></A> - Class in <A
-			HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>A <code>Bug</code> is an actor that can move and turn.
-	<DT><A HREF="./info/gridworld/actor/Bug.html#Bug()"><B>Bug()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                              title="class in info.gridworld.actor">Bug</A>
-	<DD>Constructs a red bug.
-	<DT><A HREF="./info/gridworld/actor/Bug.html#Bug(java.awt.Color)"><B>Bug(Color)</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                              title="class in info.gridworld.actor">Bug</A>
-	<DD>Constructs a bug of a given color.
-</DL>
-<HR>
-<A NAME="_C_"><!-- --></A>
-<H2>
-	<B>C</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/Bug.html#canMove()"><B>canMove()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                        title="class in info.gridworld.actor">Bug</A>
-	<DD>Tests whether this bug can move forward into a location that is empty or
-		contains a flower.
-	<DT><A HREF="./info/gridworld/grid/Location.html#compareTo(java.lang.Object)"><B>compareTo(Object)</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Compares this location to <code>other</code> for ordering.
-	<DT><A HREF="./info/gridworld/actor/Critter.html" title="class in info.gridworld.actor"><B>Critter</B></A> -
-		Class
-		in <A HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>A <code>Critter</code> is an actor that moves through its world, processing
-		other actors in some way and then moving to a new location.
-	<DT><A HREF="./info/gridworld/actor/Critter.html#Critter()"><B>Critter()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                              title="class in info.gridworld.actor">Critter</A>
-	<DD>&nbsp;
-</DL>
-<HR>
-<A NAME="_E_"><!-- --></A>
-<H2>
-	<B>E</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/Location.html#EAST"><B>EAST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for east.
-	<DT><A HREF="./info/gridworld/grid/Location.html#equals(java.lang.Object)"><B>equals(Object)</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Indicates whether some other <code>Location</code> object is "equal to"
-		this one.
-</DL>
-<HR>
-<A NAME="_F_"><!-- --></A>
-<H2>
-	<B>F</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/Flower.html" title="class in info.gridworld.actor"><B>Flower</B></A> - Class
-		in
-		<A HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>A <code>Flower</code> is an actor that darkens over time.
-	<DT><A HREF="./info/gridworld/actor/Flower.html#Flower()"><B>Flower()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Flower.html"
-		                                              title="class in info.gridworld.actor">Flower</A>
-	<DD>Constructs a pink flower.
-	<DT><A HREF="./info/gridworld/actor/Flower.html#Flower(java.awt.Color)"><B>Flower(Color)</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Flower.html"
-		                                              title="class in info.gridworld.actor">Flower</A>
-	<DD>Constructs a flower of a given color.
-	<DT><A HREF="./info/gridworld/grid/Location.html#FULL_CIRCLE"><B>FULL_CIRCLE</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning a full circle.
-</DL>
-<HR>
-<A NAME="_G_"><!-- --></A>
-<H2>
-	<B>G</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#get(info.gridworld.grid.Location)"><B>get(Location)</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#get(info.gridworld.grid.Location)"><B>get(Location)</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Returns the object at a given location in this grid.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#get(info.gridworld.grid.Location)"><B>get(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/actor/Critter.html#getActors()"><B>getActors()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>Gets the actors for processing.
-	<DT><A HREF="./info/gridworld/grid/Location.html#getAdjacentLocation(int)"><B>getAdjacentLocation(int)</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Gets the adjacent location in any one of the eight compass directions.
-	<DT><A HREF="./info/gridworld/grid/Location.html#getCol()"><B>getCol()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Gets the column coordinate.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#getColor()"><B>getColor()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Gets the color of this actor.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#getDirection()"><B>getDirection()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Gets the current direction of this actor.
-	<DT><A HREF="./info/gridworld/grid/Location.html#getDirectionToward(info.gridworld.grid.Location)"><B>getDirectionToward(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Returns the direction from this location toward another location.
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)"><B>getEmptyAdjacentLocations(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                       title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getEmptyAdjacentLocations(info.gridworld.grid.Location)"><B>getEmptyAdjacentLocations(Location)</B></A>
-		-
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Gets the valid empty locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest).
-	<DT><A HREF="./info/gridworld/actor/Actor.html#getGrid()"><B>getGrid()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Gets the grid in which this actor is located.
-	<DT><A HREF="./info/gridworld/world/World.html#getGrid()"><B>getGrid()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Gets the grid managed by this world.
-	<DT><A HREF="./info/gridworld/world/World.html#getGridClasses()"><B>getGridClasses()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Gets a set of grid classes that should be used by the world frame for
-		this world.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#getLocation()"><B>getLocation()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Gets the location of this actor.
-	<DT><A HREF="./info/gridworld/world/World.html#getMessage()"><B>getMessage()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Gets the message to be displayed in the world frame above the grid.
-	<DT><A HREF="./info/gridworld/actor/Critter.html#getMoveLocations()"><B>getMoveLocations()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>Gets a list of possible locations for the next move.
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html#getNeighbors(info.gridworld.grid.Location)"><B>getNeighbors(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                       title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>&nbsp;
-	<DT>
-		<A HREF="./info/gridworld/grid/Grid.html#getNeighbors(info.gridworld.grid.Location)"><B>getNeighbors(Location)</B></A>
-		-
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Gets the neighboring occupants in all eight compass directions (north,
-		northeast, east, southeast, south, southwest, west, and northwest).
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#getNumCols()"><B>getNumCols()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getNumCols()"><B>getNumCols()</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Returns the number of columns in this grid.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#getNumCols()"><B>getNumCols()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#getNumRows()"><B>getNumRows()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getNumRows()"><B>getNumRows()</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Returns the number of rows in this grid.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#getNumRows()"><B>getNumRows()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#getOccupantClasses()"><B>getOccupantClasses()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Gets a set of occupant classes that should be used by the world frame for
-		this world.
-	<DT>
-		<A HREF="./info/gridworld/grid/AbstractGrid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)"><B>getOccupiedAdjacentLocations(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                       title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getOccupiedAdjacentLocations(info.gridworld.grid.Location)"><B>getOccupiedAdjacentLocations(Location)</B></A>
-		-
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Gets the valid occupied locations adjacent to a given location in all
-		eight compass directions (north, northeast, east, southeast, south,
-		southwest, west, and northwest).
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#getOccupiedLocations()"><B>getOccupiedLocations()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getOccupiedLocations()"><B>getOccupiedLocations()</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Gets the locations in this grid that contain objects.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#getOccupiedLocations()"><B>getOccupiedLocations()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#getRandomEmptyLocation()"><B>getRandomEmptyLocation()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Gets a random empty location in this world.
-	<DT><A HREF="./info/gridworld/grid/Location.html#getRow()"><B>getRow()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Gets the row coordinate.
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html#getValidAdjacentLocations(info.gridworld.grid.Location)"><B>getValidAdjacentLocations(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                       title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#getValidAdjacentLocations(info.gridworld.grid.Location)"><B>getValidAdjacentLocations(Location)</B></A>
-		-
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Gets the valid locations adjacent to a given location in all eight
-		compass directions (north, northeast, east, southeast, south, southwest,
-		west, and northwest).
-	<DT><A HREF="./info/gridworld/grid/Grid.html" title="interface in info.gridworld.grid"><B>Grid</B></A>&lt;<A
-			HREF="./info/gridworld/grid/Grid.html" title="type parameter in Grid">E</A>&gt; - Interface in <A
-			HREF="./info/gridworld/grid/package-summary.html">info.gridworld.grid</A>
-	<DD><code>Grid</code> provides an interface for a two-dimensional, grid-like
-		environment containing arbitrary objects.
-</DL>
-<HR>
-<A NAME="_H_"><!-- --></A>
-<H2>
-	<B>H</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/Location.html#HALF_CIRCLE"><B>HALF_CIRCLE</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning a half circle.
-	<DT><A HREF="./info/gridworld/grid/Location.html#HALF_LEFT"><B>HALF_LEFT</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning 45 degrees to the left.
-	<DT><A HREF="./info/gridworld/grid/Location.html#HALF_RIGHT"><B>HALF_RIGHT</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning 45 degrees to the right.
-	<DT><A HREF="./info/gridworld/grid/Location.html#hashCode()"><B>hashCode()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Generates a hash code.
-</DL>
-<HR>
-<A NAME="_I_"><!-- --></A>
-<H2>
-	<B>I</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/package-summary.html"><B>info.gridworld.actor</B></A> - package
-		info.gridworld.actor
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/package-summary.html"><B>info.gridworld.grid</B></A> - package
-		info.gridworld.grid
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/package-summary.html"><B>info.gridworld.world</B></A> - package
-		info.gridworld.world
-	<DD>&nbsp;
-	<DT>
-		<A HREF="./info/gridworld/grid/BoundedGrid.html#isValid(info.gridworld.grid.Location)"><B>isValid(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#isValid(info.gridworld.grid.Location)"><B>isValid(Location)</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Checks whether a location is valid in this grid.
-	<DT>
-		<A HREF="./info/gridworld/grid/UnboundedGrid.html#isValid(info.gridworld.grid.Location)"><B>isValid(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-</DL>
-<HR>
-<A NAME="_K_"><!-- --></A>
-<H2>
-	<B>K</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/world/World.html#keyPressed(java.lang.String, info.gridworld.grid.Location)"><B>keyPressed(String,
-		Location)</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>This method is called when a key was pressed.
-</DL>
-<HR>
-<A NAME="_L_"><!-- --></A>
-<H2>
-	<B>L</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/Location.html#LEFT"><B>LEFT</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning 90 degrees to the left.
-	<DT><A HREF="./info/gridworld/grid/Location.html" title="class in info.gridworld.grid"><B>Location</B></A> -
-		Class
-		in <A HREF="./info/gridworld/grid/package-summary.html">info.gridworld.grid</A>
-	<DD>A <code>Location</code> object represents the row and column of a location
-		in a two-dimensional grid.
-	<DT><A HREF="./info/gridworld/grid/Location.html#Location(int, int)"><B>Location(int, int)</B></A> -
-		Constructor for class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                             title="class in info.gridworld.grid">Location</A>
-	<DD>Constructs a location with given row and column coordinates.
-	<DT><A HREF="./info/gridworld/world/World.html#locationClicked(info.gridworld.grid.Location)"><B>locationClicked(Location)</B></A>
-		-
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>This method is called when the user clicks on a location in the
-		WorldFrame.
-</DL>
-<HR>
-<A NAME="_M_"><!-- --></A>
-<H2>
-	<B>M</B></H2>
-<DL>
-	<DT>
-		<A HREF="./info/gridworld/actor/Critter.html#makeMove(info.gridworld.grid.Location)"><B>makeMove(Location)</B></A>
-		-
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>Moves this critter to the given location <code>loc</code>, or removes
-		this critter from its grid if <code>loc</code> is <code>null</code>.
-	<DT><A HREF="./info/gridworld/actor/Bug.html#move()"><B>move()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                        title="class in info.gridworld.actor">Bug</A>
-	<DD>Moves the bug forward, putting a flower into the location it previously
-		occupied.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#moveTo(info.gridworld.grid.Location)"><B>moveTo(Location)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Moves this actor to a new location.
-</DL>
-<HR>
-<A NAME="_N_"><!-- --></A>
-<H2>
-	<B>N</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/Location.html#NORTH"><B>NORTH</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for north.
-	<DT><A HREF="./info/gridworld/grid/Location.html#NORTHEAST"><B>NORTHEAST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for northeast.
-	<DT><A HREF="./info/gridworld/grid/Location.html#NORTHWEST"><B>NORTHWEST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for northwest.
-</DL>
-<HR>
-<A NAME="_P_"><!-- --></A>
-<H2>
-	<B>P</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/Critter.html#processActors(java.util.ArrayList)"><B>processActors(ArrayList&lt;Actor&gt;)</B></A>
-		-
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>Processes the elements of <code>actors</code>.
-	<DT><A HREF="./info/gridworld/grid/BoundedGrid.html#put(info.gridworld.grid.Location, E)"><B>put(Location,
-		E)</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#put(info.gridworld.grid.Location, E)"><B>put(Location, E)</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Puts an object at a given location in this grid.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#put(info.gridworld.grid.Location, E)"><B>put(Location,
-		E)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT>
-		<A HREF="./info/gridworld/actor/Actor.html#putSelfInGrid(info.gridworld.grid.Grid, info.gridworld.grid.Location)"><B>putSelfInGrid(Grid&lt;Actor&gt;,
-			Location)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Puts this actor into a grid.
-</DL>
-<HR>
-<A NAME="_R_"><!-- --></A>
-<H2>
-	<B>R</B></H2>
-<DL>
-	<DT>
-		<A HREF="./info/gridworld/actor/ActorWorld.html#remove(info.gridworld.grid.Location)"><B>remove(Location)</B></A>
-		-
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                        title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>Removes an actor from this world.
-	<DT>
-		<A HREF="./info/gridworld/grid/BoundedGrid.html#remove(info.gridworld.grid.Location)"><B>remove(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/BoundedGrid.html"
-		                                       title="class in info.gridworld.grid">BoundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/grid/Grid.html#remove(info.gridworld.grid.Location)"><B>remove(Location)</B></A> -
-		Method in interface info.gridworld.grid.<A HREF="./info/gridworld/grid/Grid.html"
-		                                           title="interface in info.gridworld.grid">Grid</A>
-	<DD>Removes the object at a given location from this grid.
-	<DT>
-		<A HREF="./info/gridworld/grid/UnboundedGrid.html#remove(info.gridworld.grid.Location)"><B>remove(Location)</B></A>
-		-
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                       title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#remove(info.gridworld.grid.Location)"><B>remove(Location)</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Removes an occupant from a given location.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#removeSelfFromGrid()"><B>removeSelfFromGrid()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Removes this actor from its grid.
-	<DT><A HREF="./info/gridworld/grid/Location.html#RIGHT"><B>RIGHT</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The turn angle for turning 90 degrees to the right.
-	<DT><A HREF="./info/gridworld/actor/Rock.html" title="class in info.gridworld.actor"><B>Rock</B></A> - Class in
-		<A
-				HREF="./info/gridworld/actor/package-summary.html">info.gridworld.actor</A>
-	<DD>A <code>Rock</code> is an actor that does nothing.
-	<DT><A HREF="./info/gridworld/actor/Rock.html#Rock()"><B>Rock()</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Rock.html"
-		                                              title="class in info.gridworld.actor">Rock</A>
-	<DD>Constructs a black rock.
-	<DT><A HREF="./info/gridworld/actor/Rock.html#Rock(java.awt.Color)"><B>Rock(Color)</B></A> -
-		Constructor for class info.gridworld.actor.<A HREF="./info/gridworld/actor/Rock.html"
-		                                              title="class in info.gridworld.actor">Rock</A>
-	<DD>Constructs a rock of a given color.
-</DL>
-<HR>
-<A NAME="_S_"><!-- --></A>
-<H2>
-	<B>S</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/Critter.html#selectMoveLocation(java.util.ArrayList)"><B>selectMoveLocation(ArrayList&lt;Location&gt;)</B></A>
-		-
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Critter.html"
-		                                        title="class in info.gridworld.actor">Critter</A>
-	<DD>Selects the location for the next move.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#setColor(java.awt.Color)"><B>setColor(Color)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Sets the color of this actor.
-	<DT><A HREF="./info/gridworld/actor/Actor.html#setDirection(int)"><B>setDirection(int)</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Sets the current direction of this actor.
-	<DT>
-		<A HREF="./info/gridworld/world/World.html#setGrid(info.gridworld.grid.Grid)"><B>setGrid(Grid&lt;T&gt;)</B></A>
-		-
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Sets the grid managed by this world.
-	<DT><A HREF="./info/gridworld/world/World.html#setMessage(java.lang.String)"><B>setMessage(String)</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Sets the message to be displayed in the world frame above the grid.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html#show()"><B>show()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                        title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#show()"><B>show()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Constructs and shows a frame for this world.
-	<DT><A HREF="./info/gridworld/grid/Location.html#SOUTH"><B>SOUTH</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for south.
-	<DT><A HREF="./info/gridworld/grid/Location.html#SOUTHEAST"><B>SOUTHEAST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for southeast.
-	<DT><A HREF="./info/gridworld/grid/Location.html#SOUTHWEST"><B>SOUTHWEST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for southwest.
-	<DT><A HREF="./info/gridworld/actor/ActorWorld.html#step()"><B>step()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/ActorWorld.html"
-		                                        title="class in info.gridworld.actor">ActorWorld</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#step()"><B>step()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>This method is called when the user clicks on the step button, or when
-		run mode has been activated by clicking the run button.
-</DL>
-<HR>
-<A NAME="_T_"><!-- --></A>
-<H2>
-	<B>T</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/actor/Actor.html#toString()"><B>toString()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Actor.html"
-		                                        title="class in info.gridworld.actor">Actor</A>
-	<DD>Creates a string that describes this actor.
-	<DT><A HREF="./info/gridworld/grid/AbstractGrid.html#toString()"><B>toString()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/AbstractGrid.html"
-		                                       title="class in info.gridworld.grid">AbstractGrid</A>
-	<DD>Creates a string that describes this grid.
-	<DT><A HREF="./info/gridworld/grid/Location.html#toString()"><B>toString()</B></A> -
-		Method in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                       title="class in info.gridworld.grid">Location</A>
-	<DD>Creates a string that describes this location.
-	<DT><A HREF="./info/gridworld/world/World.html#toString()"><B>toString()</B></A> -
-		Method in class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                        title="class in info.gridworld.world">World</A>
-	<DD>Returns a string that shows the positions of the grid occupants.
-	<DT><A HREF="./info/gridworld/actor/Bug.html#turn()"><B>turn()</B></A> -
-		Method in class info.gridworld.actor.<A HREF="./info/gridworld/actor/Bug.html"
-		                                        title="class in info.gridworld.actor">Bug</A>
-	<DD>Turns the bug 45 degrees to the right without changing its location.
-</DL>
-<HR>
-<A NAME="_U_"><!-- --></A>
-<H2>
-	<B>U</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html" title="class in info.gridworld.grid"><B>UnboundedGrid</B></A>&lt;<A
-			HREF="./info/gridworld/grid/UnboundedGrid.html" title="type parameter in UnboundedGrid">E</A>&gt; -
-		Class in
-		<A HREF="./info/gridworld/grid/package-summary.html">info.gridworld.grid</A>
-	<DD>An <code>UnboundedGrid</code> is a rectangular grid with an unbounded number of rows and
-		columns.
-	<DT><A HREF="./info/gridworld/grid/UnboundedGrid.html#UnboundedGrid()"><B>UnboundedGrid()</B></A> -
-		Constructor for class info.gridworld.grid.<A HREF="./info/gridworld/grid/UnboundedGrid.html"
-		                                             title="class in info.gridworld.grid">UnboundedGrid</A>
-	<DD>Constructs an empty unbounded grid.
-</DL>
-<HR>
-<A NAME="_W_"><!-- --></A>
-<H2>
-	<B>W</B></H2>
-<DL>
-	<DT><A HREF="./info/gridworld/grid/Location.html#WEST"><B>WEST</B></A> -
-		Static variable in class info.gridworld.grid.<A HREF="./info/gridworld/grid/Location.html"
-		                                                title="class in info.gridworld.grid">Location</A>
-	<DD>The compass direction for west.
-	<DT><A HREF="./info/gridworld/world/World.html" title="class in info.gridworld.world"><B>World</B></A>&lt;<A
-			HREF="./info/gridworld/world/World.html" title="type parameter in World">T</A>&gt; - Class in <A
-			HREF="./info/gridworld/world/package-summary.html">info.gridworld.world</A>
-	<DD>A <code>World</code> is the mediator between a grid and the GridWorld GUI.
-	<DT><A HREF="./info/gridworld/world/World.html#World()"><B>World()</B></A> -
-		Constructor for class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                              title="class in info.gridworld.world">World</A>
-	<DD>&nbsp;
-	<DT><A HREF="./info/gridworld/world/World.html#World(info.gridworld.grid.Grid)"><B>World(Grid&lt;T&gt;)</B></A> -
-		Constructor for class info.gridworld.world.<A HREF="./info/gridworld/world/World.html"
-		                                              title="class in info.gridworld.world">World</A>
-	<DD>&nbsp;
-</DL>
-<HR>
-<A HREF="#_A_">A</A> <A HREF="#_B_">B</A> <A HREF="#_C_">C</A> <A HREF="#_E_">E</A> <A HREF="#_F_">F</A> <A
-		HREF="#_G_">G</A>
-<A HREF="#_H_">H</A> <A HREF="#_I_">I</A> <A HREF="#_K_">K</A> <A HREF="#_L_">L</A> <A HREF="#_M_">M</A> <A
-		HREF="#_N_">N</A>
-<A HREF="#_P_">P</A> <A HREF="#_R_">R</A> <A HREF="#_S_">S</A> <A HREF="#_T_">T</A> <A HREF="#_U_">U</A> <A
-		HREF="#_W_">W</A>
-
-<!-- ======= START OF BOTTOM NAVBAR ====== -->
-<A NAME="navbar_bottom"><!-- --></A>
-<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
-<TABLE BORDER="0" CELLPADDING="1" CELLSPACING="0" SUMMARY="" WIDTH="100%">
-	<TR>
-		<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1" COLSPAN=2>
-			<A NAME="navbar_bottom_firstrow"><!-- --></A>
-			<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
-				<TR ALIGN="center" VALIGN="top">
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./overview-summary.html"><span
-							CLASS="NavBarFont1"><B>Overview</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Package</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><span CLASS="NavBarFont1">Class</span>&nbsp;</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./overview-tree.html"><span
-							CLASS="NavBarFont1"><B>Tree</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./deprecated-list.html"><span
-							CLASS="NavBarFont1"><B>Deprecated</B></span></A>&nbsp;
-					</TD>
-					<TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<span CLASS="NavBarFont1Rev"><B>Index</B></span>&nbsp;
-					</TD>
-					<TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1"><A HREF="./help-doc.html"><span
-							CLASS="NavBarFont1"><B>Help</B></span></A>&nbsp;
-					</TD>
-				</TR>
-			</TABLE>
-		</TD>
-		<TD ALIGN="right" ROWSPAN=3 VALIGN="top"><EM>
-		</EM>
-		</TD>
-	</TR>
-
-	<TR>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			&nbsp;PREV&nbsp;
-			&nbsp;NEXT</span></TD>
-		<TD BGCOLOR="white" CLASS="NavBarCell2"><span SIZE="-2">
-			<A HREF="./index.html?index-all.html" target="_top"><B>FRAMES</B></A> &nbsp;
-			&nbsp;<A HREF="index-all.html" target="_top"><B>NO FRAMES</B></A> &nbsp;
-			&nbsp;<SCRIPT type="text/javascript">
-			<!--
-            if (window === top) {
-                document.writeln('<A HREF="./allclasses-noframe.html"><B>All Classes</B></A>');
-            }
-            //-->
-		</SCRIPT>
-			<NOSCRIPT>
-				<A HREF="./allclasses-noframe.html"><B>All Classes</B></A>
-			</NOSCRIPT>
-
-
-		</span></TD>
-	</TR>
-</TABLE>
-<A NAME="skip-navbar_bottom"></A>
-<!-- ======== END OF BOTTOM NAVBAR ======= -->
-
-<HR>
-
-</BODY>
-</HTML>
Index: Random_Work/src/projectEuler/programs/p050.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p050.kt b/Random_Work/src/projectEuler/programs/p050.kt
new file mode 100644
--- /dev/null	(date 1614951975973)
+++ b/Random_Work/src/projectEuler/programs/p050.kt	(date 1614951975973)
@@ -0,0 +1,34 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimality
+import projectEuler.programs.Library.listPrimes
+import projectEuler.programs.Library.pow
+
+class p050 : EulerSolution() {
+	override fun run(): String {
+		val isPrime = listPrimality(LIMIT)
+		val primes = listPrimes(LIMIT)
+		var maxSum: Long = 0
+		var maxRun = -1
+		for (i in primes.indices) { // For each index of a starting prime number
+			var sum = 0
+			for (j in i until primes.size) { // For each end index (inclusive)
+				sum += primes[j]
+				if (sum > LIMIT) break else if (j - i > maxRun && sum > maxSum && isPrime[sum]) {
+					maxSum = sum.toLong()
+					maxRun = j - i
+				}
+			}
+		}
+		return java.lang.Long.toString(maxSum)
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 6)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p050().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p347.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\nimport static projectEuler.programs.Library.listPrimes;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p347 extends EulerSolution {\r\n\tprivate static final int LIMIT = 10000000;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p347().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tSet<Integer> possible = new HashSet<>();\r\n\t\tint[] primes = listPrimes(LIMIT / 2);\r\n\t\tfor (int i = 0, end = sqrt(LIMIT); i < primes.length; i++) {\r\n\t\t\tint p = primes[i];\r\n\t\t\tif (p > end) break;\r\n\t\t\tfor (int j = i + 1; j < primes.length; j++) {\r\n\t\t\t\tint q = primes[j];\r\n\t\t\t\tint lcm = p * q;\r\n\t\t\t\tif (lcm > LIMIT) break;\r\n\t\t\t\tint multLimit = LIMIT / lcm;\r\n\t\t\t\tint multiplier = 1;\r\n\t\t\t\twhile (multiplier * p <= multLimit) multiplier *= p;\r\n\t\t\t\tint maxMult = multiplier;\r\n\t\t\t\twhile (multiplier % p == 0) {\r\n\t\t\t\t\tmultiplier /= p;\r\n\t\t\t\t\twhile (multiplier * q <= multLimit) multiplier *= q;\r\n\t\t\t\t\tmaxMult = Math.max(multiplier, maxMult);\r\n\t\t\t\t}\r\n\t\t\t\tpossible.add(maxMult * lcm);\r\n\t\t\t}\r\n\t\t}\r\n\t\tlong sum = possible.stream().mapToInt(x -> x).asLongStream().sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p347.java b/Random_Work/src/projectEuler/programs/p347.java
--- a/Random_Work/src/projectEuler/programs/p347.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p347.java	(date 1614915693356)
@@ -5,6 +5,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
+import static java.math.BigInteger.valueOf;
 import static projectEuler.programs.Library.listPrimes;
 import static projectEuler.programs.Library.sqrt;
 
@@ -18,7 +19,7 @@
 	@NotNull String run() {
 		Set<Integer> possible = new HashSet<>();
 		int[] primes = listPrimes(LIMIT / 2);
-		for (int i = 0, end = sqrt(LIMIT); i < primes.length; i++) {
+		for (int i = 0, end = sqrt(valueOf(LIMIT)).intValue(); i < primes.length; i++) {
 			int p = primes[i];
 			if (p > end) break;
 			for (int j = i + 1; j < primes.length; j++) {
Index: Random_Work/src/projectEuler/programs/p111.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.*;\r\nimport static java.util.stream.IntStream.range;\r\nimport static projectEuler.programs.Library.*;\r\n\r\npublic final class p111 extends EulerSolution {\r\n\tprivate static final int DIGITS = 10;\r\n\tprivate int[] primes;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p111().run());\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate static long toInteger(@NotNull int[] digits) {\r\n\t\tlong result = 0;\r\n\t\tfor (int x : digits) result = (result * 10) + x;\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate static long pow(int x, int y) {\r\n\t\treturn range(0, y).mapToLong(i -> x).reduce(1, (a, b) -> a * b);\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tprimes = listPrimes((int) sqrt(pow(10, DIGITS)));\r\n\t\tlong total = 0;\r\n\t\tfor (int digit = 0; digit < 10; digit++) { // For each repeating digit\r\n\t\t\tfor (int rep = DIGITS; rep >= 0; rep--) { // Search by the number of repetitions in decreasing order\r\n\t\t\t\tlong sum = 0;\r\n\t\t\t\tint[] digits = new int[DIGITS];\r\n\t\t\t\tlong count = pow(9, DIGITS - rep);\r\n\t\t\t\tlevel2:\r\n\t\t\t\tfor (long i = 0; i < count; i++) { // Try all possibilities for filling the non-repeating digits\r\n\t\t\t\t\t// Build initial array. For example, if DIGITS=7, digit=5, rep=4, i=123, then the array will be filled with 5,5,5,5,1,4,7.\r\n\t\t\t\t\tfill(digits, 0, rep, digit);\r\n\t\t\t\t\tlong temp = i;\r\n\t\t\t\t\tfor (int j = 0; j < DIGITS - rep; j++) {\r\n\t\t\t\t\t\tint d = (int) (temp % 9);\r\n\t\t\t\t\t\t// Skip the repeating digit\r\n\t\t\t\t\t\tif (d >= digit) d++;\r\n\t\t\t\t\t\t// If this is true, then after sorting, the array will be in an already-tried configuration\r\n\t\t\t\t\t\tif (j > 0 && d > digits[DIGITS - j]) continue level2;\r\n\t\t\t\t\t\tdigits[DIGITS - 1 - j] = d;\r\n\t\t\t\t\t\ttemp /= 9;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsort(digits); // Start at lowest permutation\r\n\t\t\t\t\tdo { // Go through all permutations\r\n\t\t\t\t\t\tif (digits[0] > 0) { // Skip if the number has a leading zero, which means it has less than DIGIT digits\r\n\t\t\t\t\t\t\tlong num = toInteger(digits);\r\n\t\t\t\t\t\t\tif (isPrime(num)) sum += num;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} while (nextPermutation(digits));\r\n\t\t\t\t}\r\n\t\t\t\tif (sum > 0) { // Primes found; skip all lesser repetitions\r\n\t\t\t\t\ttotal += sum;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Long.toString(total);\r\n\t}\r\n\r\n\t// Only valid if 1 < n <= 10^DIGITS\r\n\t@Contract(pure = true)\r\n\tprivate boolean isPrime(long n) {\r\n\t\treturn stream(primes).noneMatch(p -> n % p == 0);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p111.java b/Random_Work/src/projectEuler/programs/p111.java
--- a/Random_Work/src/projectEuler/programs/p111.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p111.java	(date 1614915693367)
@@ -3,6 +3,8 @@
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 
+import java.math.BigInteger;
+
 import static java.util.Arrays.*;
 import static java.util.stream.IntStream.range;
 import static projectEuler.programs.Library.*;
@@ -28,7 +30,7 @@
 	}
 
 	@NotNull String run() {
-		primes = listPrimes((int) sqrt(pow(10, DIGITS)));
+		primes = listPrimes(sqrt(BigInteger.valueOf(pow(10, DIGITS))).intValue());
 		long total = 0;
 		for (int digit = 0; digit < 10; digit++) { // For each repeating digit
 			for (int rep = DIGITS; rep >= 0; rep--) { // Search by the number of repetitions in decreasing order
Index: Random_Work/src/projectEuler/programs/p186.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.lang.Math.pow;\r\nimport static java.util.stream.IntStream.range;\r\n\r\npublic final class p186 extends EulerSolution {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p186().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tDisjointSet ds = new DisjointSet(1000000);\r\n\t\tLfgRandom rand = new LfgRandom();\r\n\t\tint i = 0;\r\n\t\twhile (ds.size(524287) < 990000) {\r\n\t\t\tint caller = rand.next();\r\n\t\t\tint callee = rand.next();\r\n\t\t\tif (caller != callee) {\r\n\t\t\t\tds.union(caller, callee);\r\n\t\t\t\ti++;\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Integer.toString(i);\r\n\t}\r\n\r\n\tprivate static final class DisjointSet {\r\n\t\tprivate final Node[] nodes;\r\n\r\n\t\tDisjointSet(int size) {\r\n\t\t\tnodes = new Node[size];\r\n\t\t\trange(0, size).forEachOrdered(i -> nodes[i] = new Node());\r\n\t\t}\r\n\r\n\t\tprivate static Node find(@NotNull Node node) {\r\n\t\t\tif (node.parent != node) node.parent = find(node.parent); // Path compression\r\n\t\t\treturn node.parent;\r\n\t\t}\r\n\r\n\t\tprivate Node find(int i) {\r\n\t\t\treturn find(nodes[i]);\r\n\t\t}\r\n\r\n\t\tvoid union(int i, int j) {\r\n\t\t\tNode x = find(i);\r\n\t\t\tNode y = find(j);\r\n\t\t\tif (x == y) return;\r\n\t\t\tif (x.rank == y.rank) x.rank++;\r\n\t\t\telse if (x.rank < y.rank) {\r\n\t\t\t\tNode z = x;\r\n\t\t\t\tx = y;\r\n\t\t\t\ty = z;\r\n\t\t\t}\r\n\t\t\ty.parent = x;\r\n\t\t\tx.size += y.size;\r\n\t\t\ty.size = 0;\r\n\t\t}\r\n\r\n\t\tint size(int i) {\r\n\t\t\treturn find(i).size;\r\n\t\t}\r\n\r\n\t\tprivate static final class Node {\r\n\t\t\tNode parent;\r\n\t\t\tint rank;\r\n\t\t\tint size;\r\n\r\n\t\t\t@Contract(pure = true)\r\n\t\t\tNode() {\r\n\t\t\t\tparent = this;\r\n\t\t\t\trank = 0;\r\n\t\t\t\tsize = 1;\r\n\t\t\t}\r\n\t\t}\r\n\t}// Lagged Fibonacci generator\r\n\r\n\tprivate static final class LfgRandom {\r\n\t\tprivate final int[] history; // Circular buffer\r\n\t\tprivate int k;\r\n\t\tprivate int index;\r\n\r\n\t\t@Contract(pure = true)\r\n\t\tLfgRandom() {\r\n\t\t\tk = 1;\r\n\t\t\thistory = new int[55];\r\n\t\t\tindex = 0;\r\n\t\t}\r\n\r\n\t\tint next() {\r\n\t\t\tint result;\r\n\t\t\tif (k <= 55) {\r\n\t\t\t\tresult = (int) (((100003L - (200003L * k)) + (300007L * pow(k, 3))) % 1000000);\r\n\t\t\t\tk++;\r\n\t\t\t} else result = (getHistory(24) + getHistory(55)) % 1000000;\r\n\r\n\t\t\thistory[index] = result;\r\n\t\t\tindex++;\r\n\t\t\tif (index == history.length) index = 0;\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t@Contract(pure = true)\r\n\t\tprivate int getHistory(int n) {\r\n\t\t\tint i = index - n;\r\n\t\t\tif (i < 0) i += history.length;\r\n\t\t\treturn history[i];\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p186.java b/Random_Work/src/projectEuler/programs/p186.java
--- a/Random_Work/src/projectEuler/programs/p186.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p186.java	(date 1614916524403)
@@ -12,10 +12,10 @@
 	}
 
 	@NotNull String run() {
-		DisjointSet ds = new DisjointSet(1000000);
+		DisjointSet ds = new DisjointSet();
 		LfgRandom rand = new LfgRandom();
 		int i = 0;
-		while (ds.size(524287) < 990000) {
+		while (ds.size() < 990000) {
 			int caller = rand.next();
 			int callee = rand.next();
 			if (caller != callee) {
@@ -29,9 +29,9 @@
 	private static final class DisjointSet {
 		private final Node[] nodes;
 
-		DisjointSet(int size) {
-			nodes = new Node[size];
-			range(0, size).forEachOrdered(i -> nodes[i] = new Node());
+		DisjointSet() {
+			nodes = new Node[1000000];
+			range(0, 1000000).forEachOrdered(i -> nodes[i] = new Node());
 		}
 
 		private static Node find(@NotNull Node node) {
@@ -58,8 +58,8 @@
 			y.size = 0;
 		}
 
-		int size(int i) {
-			return find(i).size;
+		int size() {
+			return find(524287).size;
 		}
 
 		private static final class Node {
Index: Random_Work/src/projectEuler/programs/p103.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\nimport org.jetbrains.annotations.Nullable;\r\n\r\nimport static java.lang.Math.max;\r\nimport static java.lang.Math.min;\r\nimport static java.util.Arrays.copyOf;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.stream.Collectors.joining;\r\n\r\npublic final class p103 extends EulerSolution {\r\n\tprivate static final int TARGET_SIZE = 7;\r\n\r\n\t/*\r\n\t * We start with three pedantic lemmas to constrain the nature of possible solutions.\r\n\t *\r\n\t * No-zero lemma:\r\n\t * A special sum set (SSS) should not contain the value 0. The problem statement\r\n\t * doesn't say this explicitly, but it is implied in the numerical examples.\r\n\t * Proof:\r\n\t * - For size n = 0, {} technically qualifies as an SSS, and is trivially optimum.\r\n\t *  But the problem statement does not mention the n = 0 case at all.\r\n\t * - For size n = 1, {0} has sum 0, which is better than the SSS {1} given in the\r\n\t *  problem statement, yet this violates no properties. Even though the subsets\r\n\t *  {} and {0} have the same sum of 0, the properties only apply to non-empty subsets.\r\n\t * - For size n = 2, {0,1} has sum 1, which is better than the SSS {1,2} given in\r\n\t *  the problem statement, yet this still violates no properties. There is exactly\r\n\t *  one possible pair of non-empty disjoint subsets, namely {0} vs. {1}, and\r\n\t *  this pair satisfies both properties.\r\n\t * - For sizes n >= 3, having 0 in the set would violate property (ii) for the pair of\r\n\t * \tsubsets {0,a} and {b}, where 0 and a and b are distinct elements of the set and a < b.\r\n\t * Hence for 0 <= n <= 2, allowing 0 would produce a more optimum solution than the\r\n\t * examples given in the problem statement, and for n >= 3 an SSS can never contain 0.\r\n\t *\r\n\t * As for negative numbers, the intent of the problem statement readily suggests that elements\r\n\t * are never negative. Furthermore, having negative numbers in a set would either affect the\r\n\t * sum by only a small amount or violate property (ii), making the problem uninteresting.\r\n\t *\r\n\t * Upper bound lemma:\r\n\t * For each natural number n >= 0, there exists a special sum set\r\n\t * whose size is n and whose sum is (n + 1) * 2^n - 1.\r\n\t * Proof:\r\n\t * - For each index i (counting from 0), let element i equal 2^n + 2^i.\r\n\t * - The sum of all the elements is (2^n + 2^0) + (2^n + 2^1) + ... + (2^n + 2^(n-1))\r\n\t *  = n * 2^n + (2^0 + 2^1 + ... + 2^(n-1)) = n * 2^n + 2^n - 1 = (n + 1) * 2^n - 1.\r\n\t * - For example with n = 4, the elements expressed in binary are {10001,\r\n\t *  10010, 10100, 11000}. Their sum is 1001111 (binary) = 79 (decimal).\r\n\t * - Notice that when summing a subset of (distinct) elements, the bottom n bits\r\n\t *  never produce a carry. This means the bottom n bits behave like a set union,\r\n\t *  and the activity in the bottom n bits never affect the 2^n term or above.\r\n\t * - Property (i) is satisfied because for any subset B, the bottommost n bits of S(B)\r\n\t *  encode which elements are present. Thus any two unequal subsets will have unequal sums.\r\n\t * - Property (ii) is satisfied because for any subset B, the value floor(S(B) / 2^n)\r\n\t *  (i.e. dropping the bottommost n bits) encodes the size of B.\r\n\t * Corollaries:\r\n\t * - For any given upper bound, there are a finite number of {{sets of positive integers}\r\n\t *  whose sum doesn't exceed the upper bound}. Thus once we find an SSS with a certain sum,\r\n\t *  we can argue by finite search that there must exist an optimum SSS whose sum is\r\n\t *  less than or equal to the aforementioned sum.\r\n\t * - For size 7, we know there exists an SSS of sum exactly (7 + 1) * 2^7 - 1 = 1023.\r\n\t *  Hence we don't need to search any larger sums or use wide integer types.\r\n\t *\r\n\t * Lower bound lemma:\r\n\t * For each n >= 3, each special sum set of size n must have sum at least 2^n.\r\n\t * Proof:\r\n\t * - A set of size n has exactly 2^n - 1 non-empty subsets\r\n\t *  (the kind relevant to the problem statement).\r\n\t * - Because all elements are positive integers, the lowest possible\r\n\t *  subset sum is 1, and the highest sum is the sum of all elements.\r\n\t * - To satisfy property (i) and give each non-empty subset a unique sum, the\r\n\t *  set of sums with the smallest maximum value is {1, 2, 3, ..., 2^n - 1}.\r\n\t * - To achieve the aforementioned set of subset sums using positive elements,\r\n\t *  the one and only solution is the set {1, 2, 4, 8, ..., 2^(n-1)}.\r\n\t * - But for n >= 3, the pair of subsets {1,2} and {4} violates property (ii).\r\n\t * - Hence the set cannot have sum 2^n - 1. It must have a sum of at least 2^n.\r\n\t * Corollary:\r\n\t * We can begin searching for an optimum SSS with the initial maximum sum set to 2^n.\r\n\t */\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p103().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\t// At the top level, we try to find a special sum set with sum at most s,\r\n\t\t// incrementing the bound s until we succeed. When we find a solution\r\n\t\t// with sum at most s, but find none with sum at most s - 1, it implies\r\n\t\t// that the optimum set's sum is exactly s.\r\n\t\t// Note: A set of n positive integers must have a sum of at least 1 + 2 + 3\r\n\t\t// + ... + n = n * (n + 1) / 2. If the search specifies a maximum sum lower\r\n\t\t// than this, then no solution can exist. But for simplicity we just start\r\n\t\t// searching from a maximum sum of 0.\r\n\t\tfor (int maxSum = 0; ; maxSum++) {\r\n\t\t\tSpecialSumSet set = SpecialSumSet.makeSet(TARGET_SIZE, maxSum);\r\n\t\t\t// Solution found; concatenate numbers into a string\r\n\t\t\tif (set != null) return stream(set.values).mapToObj(String::valueOf).collect(joining());\r\n\t\t}\r\n\t}\r\n\r\n\t// This helper class represents a finite sequence of distinct positive integers\r\n\t// that satisfies properties (i) and (ii) given in the problem statement.\r\n\t// Objects of the class are immutable. Objects also keep track of extra data to\r\n\t// make it easier to check if adding a new element would violate the properties,\r\n\t// without explicitly checking every non-empty disjoint subset pair by brute force.\r\n\tprivate static final class SpecialSumSet {\r\n\r\n\t\t// Positive numbers in strict ascending order. Length 0 or more.\r\n\t\tfinal int[] values;\r\n\t\t// For indexes i from 0 to sum(values) inclusive, sumPossible[i]\r\n\t\t// is true iff there exists a subset of 'values' whose sum is i.\r\n\t\tprivate final boolean[] sumPossible;\r\n\r\n\t\t// Note: All fields are conceptually immutable\r\n\t\t// For i from 0 to values.length (inclusive), minimumSum[i] is the minimum sum\r\n\t\t// among all possible subsets of 'values' of size i, and likewise for maximumSum[i].\r\n\t\tprivate final int[] minimumSum;\r\n\t\tprivate final int[] maximumSum;\r\n\r\n\t\t// Creates an empty set, which is a valid state.\r\n\t\t@Contract(pure = true)\r\n\t\tSpecialSumSet() {\r\n\t\t\tthis(new int[]{}, new boolean[]{true}, new int[]{0}, new int[]{0});\r\n\t\t}\r\n\r\n\t\t// Internal constructor. The contents of the given array objects must not change.\r\n\t\t@Contract(pure = true)\r\n\t\tprivate SpecialSumSet(int[] vals, boolean[] sumPosb, int[] minSum, int[] maxSum) {\r\n\t\t\tvalues = vals;\r\n\t\t\tsumPossible = sumPosb;\r\n\t\t\tminimumSum = minSum;\r\n\t\t\tmaximumSum = maxSum;\r\n\t\t}\r\n\r\n\t\t// Returns the lexicographically lowest special sum set with the given size\r\n\t\t// and with a sum of at most maximumSum, or null if no such set exists.\r\n\t\tstatic SpecialSumSet makeSet(int targetSize, int maximumSum) {\r\n\t\t\treturn makeSet(new SpecialSumSet(), targetSize, maximumSum, 1);\r\n\t\t}\r\n\r\n\t\t// Returns the lexicographically lowest special sum set by adding exactly sizeRemain elements\r\n\t\t// to the given set, such that the sum of the additional elements is at most sumRemain,\r\n\t\t// and the next element to be added is at least startVal. Returns null if no such set exists.\r\n\t\t@Nullable\r\n\t\tprivate static SpecialSumSet makeSet(SpecialSumSet set, int sizeRemain, int sumRemain, int startVal) {\r\n\t\t\t// In summary, this procedure takes a partial answer (prefix) and some parameters,\r\n\t\t\t// and tries to extend the answer by performing depth-first search through recursion.\r\n\t\t\t// Base case - success\r\n\t\t\tif (sizeRemain == 0) return set;\r\n\t\t\t// Optimization: If we still need to add at least 2 elements, then the next element\r\n\t\t\t// will be at least startVal, the one after will be at least startVal + 1,\r\n\t\t\t// thereafter is at least startVal + 2, et cetera. The sum of the elements\r\n\t\t\t// to be added is strictly greater than startVal * sizeRemain, which we can\r\n\t\t\t// check against sumRemain and bail out early if a solution is impossible.\r\n\t\t\tif (sizeRemain >= 2 && startVal * sizeRemain >= sumRemain) return null;\r\n\t\t\tint endVal = sumRemain;\r\n\t\t\t// Optimization: If the partial set has at least two elements a and b, then by the\r\n\t\t\t// property (ii), S({a, b}) = a + b must be greater than any single element of the set.\r\n\t\t\t// We use the foremost two elements, which have the smallest values - this makes\r\n\t\t\t// endVal as small and restrictive as possible compared to other choices of elements.\r\n\t\t\tif (set.values.length >= 2) endVal = min(set.values[0] + set.values[1] - 1, endVal);\r\n\t\t\t// Consider each possible value for the next element\r\n\t\t\tfor (int val = startVal; val <= endVal; val++) {\r\n\t\t\t\t// Try adding the value and see if any property is violated\r\n\t\t\t\tSpecialSumSet temp = set.add(val);\r\n\t\t\t\tif (temp == null) continue;\r\n\t\t\t\t// Recurse and see if a solution is found down the call tree\r\n\t\t\t\ttemp = makeSet(temp, sizeRemain - 1, sumRemain - val, val + 1);\r\n\t\t\t\tif (temp != null) return temp;\r\n\t\t\t}\r\n\t\t\treturn null; // No solution for the given current state\r\n\t\t}\r\n\r\n\t\t// Attempts to add the given value to this set, returning a new set\r\n\t\t// if successful. Otherwise returns null if any property is violated.\r\n\t\t@Nullable SpecialSumSet add(int val) {\r\n\t\t\t// Simple checks on the value\r\n\t\t\tassert val > 0 : \"Value must be positive\";\r\n\t\t\tint size = values.length;\r\n\t\t\tassert (size < 1) || (val > values[size - 1]) : \"Must add values in ascending order\";\r\n\t\t\t// Check if adding val to any subset of this set would create a duplicate sum\r\n\t\t\tfor (int i = val; i < sumPossible.length; i++) if (sumPossible[i] & sumPossible[i - val]) return null;\r\n\t\t\t// Compute minimum and maximum sums for each subset size, with help from old data.\r\n\t\t\t// The idea is that by introducing the new value val, each subset of the new set\r\n\t\t\t// either contains val or doesn't. All old subsets are still possible, so we copy\r\n\t\t\t// the old tables of minima and maxima. Each new subset contains val plus an old subset\r\n\t\t\t// (possibly empty). Hence we look at the existing minima and maxima, add val to the sum,\r\n\t\t\t// add 1 to the size, and merge the values into the table of minima and maxima.\r\n\t\t\tint newSize = size + 1;\r\n\t\t\tint[] newMin = new int[newSize + 1];\r\n\t\t\tint[] newMax = new int[newSize + 1];\r\n\t\t\tfor (int i = 1; i < newSize; i++) {\r\n\t\t\t\tnewMin[i] = min(minimumSum[i], minimumSum[i - 1] + val);\r\n\t\t\t\tnewMax[i] = max(maximumSum[i], maximumSum[i - 1] + val);\r\n\t\t\t}\r\n\t\t\tnewMin[newSize] = minimumSum[newSize - 1] + val;\r\n\t\t\tnewMax[newSize] = maximumSum[newSize - 1] + val;\r\n\t\t\t// Check iff property (ii) '|B| > |C| implies S(B) > S(C)' is violated\r\n\t\t\tfor (int i = 0; i < newSize; i++) if (newMax[i] >= newMin[i + 1]) return null;\r\n\t\t\t// Compute all possible new subset sums, with help from old data. This is the\r\n\t\t\t// classic table-based algorithm for solving the subset sum or knapsack problem.\r\n\t\t\tboolean[] newPosb = copyOf(sumPossible, sumPossible.length + val);\r\n\t\t\tfor (int i = newPosb.length - 1; i >= val; i--) newPosb[i] |= newPosb[i - val];\r\n\t\t\t// Append given value to the new set\r\n\t\t\tint[] newVals = copyOf(values, newSize);\r\n\t\t\tnewVals[size] = val;\r\n\t\t\treturn new SpecialSumSet(newVals, newPosb, newMin, newMax);\r\n\t\t}\r\n\r\n\t\t/*\r\n\t\t * An illustrative example for SpecialSumSet and add():\r\n\t\t *\r\n\t\t * Suppose our current set is {3, 5, 6}. All its subsets and their sums are:\r\n\t\t * - S({}) = 0.\r\n\t\t * - S({3}) = 3.\r\n\t\t * - S({5}) = 5.\r\n\t\t * - S({6}) = 6.\r\n\t\t * - S({3, 5}) = 8.\r\n\t\t * - S({3, 6}) = 9.\r\n\t\t * - S({5, 6}) = 11.\r\n\t\t * - S({3, 5, 6}) = 14.\r\n\t\t *\r\n\t\t * Therefore, the data arrays have the following values:\r\n\t\t * - sumPossible = [T, F, F, T, F, T, T, F, T, T, F, T, F, F, T].\r\n\t\t * (Sum legend: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14)\r\n\t\t * - minimumSums = [0, 3, 8, 14].\r\n\t\t * - maximumSums = [0, 6, 11, 14].\r\n\t\t * - (Size legend: 0 1 2 3)\r\n\t\t *\r\n\t\t * Now suppose we want to add the value 7 to the set. Here is what happens:\r\n\t\t * - First we check that in sumPossible, no pair of 'true' elements are\r\n\t\t * separated by a distance of 7. This ensures that if we take any particular\r\n\t\t * subset and add 7 to it, its sum won't equal another existing subset sum.\r\n\t\t * - Let the new set S' = S union {7} = {3, 5, 6, 7}. What are\r\n\t\t * the minimum and maximum subset sums for each subset size k?\r\n\t\t * - If k = 0, the min and max are both clearly 0.\r\n\t\t * - If k = |S| = 4, then min and max are the sum of all elements, thus 21.\r\n\t\t * - Otherwise with k > 0, consider an arbitrary subset A of S' where |A| = k.\r\n\t\t *  - If A does not contain 7, then A is a subset of S, so A's\r\n\t\t *  minimum sum is minimumSums[k] and A's maximum sum is maximumSums[k].\r\n\t\t *  - Otherwise split A = {7} union B, where B does not contain 7.\r\n\t\t *  B is a subset of S, and |B| = k - 1. So A's minimum sum is\r\n\t\t *  7 + minimumSums[k - 1], and A's maximum sum is 7 + maximumSums[k - 1].\r\n\t\t *  Hence newMinimumSums[k] = min(minimumSums[k], 7 + minimumSums[k - 1]),\r\n\t\t *  and newMaximumSums[k] = max(maximumSums[k], 7 + maximumSums[k - 1]).\r\n\t\t * For each size k that is not out of bounds, if maximumSums[k] >= minimumSums[k + 1],\r\n\t\t * then there exists some set of size k with some set of size k + 1 fails property (ii).\r\n\t\t * Otherwise property (ii) is upheld in all subset pairs (including empty subsets).\r\n\t\t * - Finally, we compute the new sumPossible table (which is guaranteed to\r\n\t\t * have no conflicts), and finish creating the new set with the added element.\r\n\t\t */\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p103.java b/Random_Work/src/projectEuler/programs/p103.java
--- a/Random_Work/src/projectEuler/programs/p103.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p103.java	(date 1614916524371)
@@ -93,7 +93,7 @@
 		// than this, then no solution can exist. But for simplicity we just start
 		// searching from a maximum sum of 0.
 		for (int maxSum = 0; ; maxSum++) {
-			SpecialSumSet set = SpecialSumSet.makeSet(TARGET_SIZE, maxSum);
+			SpecialSumSet set = SpecialSumSet.makeSet(maxSum);
 			// Solution found; concatenate numbers into a string
 			if (set != null) return stream(set.values).mapToObj(String::valueOf).collect(joining());
 		}
@@ -135,8 +135,8 @@
 
 		// Returns the lexicographically lowest special sum set with the given size
 		// and with a sum of at most maximumSum, or null if no such set exists.
-		static SpecialSumSet makeSet(int targetSize, int maximumSum) {
-			return makeSet(new SpecialSumSet(), targetSize, maximumSum, 1);
+		static SpecialSumSet makeSet(int maximumSum) {
+			return makeSet(new SpecialSumSet(), p103.TARGET_SIZE, maximumSum, 1);
 		}
 
 		// Returns the lexicographically lowest special sum set by adding exactly sizeRemain elements
Index: Random_Work/src/projectEuler/programs/p133.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.math.BigInteger;\r\nimport java.util.Arrays;\r\n\r\nimport static java.math.BigInteger.TEN;\r\nimport static java.math.BigInteger.valueOf;\r\nimport static projectEuler.programs.Library.listPrimes;\r\n\r\npublic final class p133 extends EulerSolution {\r\n\tprivate static final BigInteger EXPONENT = TEN.pow(16);\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p133().run());\r\n\t}\r\n\r\n\t// Tests whether there exists a k such that R(10^k) is a multiple of p\r\n\tprivate static boolean hasDivisibleRepunit(int p) {\r\n\t\treturn (((TEN.modPow(EXPONENT, valueOf(p * 9)).intValue() - 1) / 9) % p) == 0;\r\n\t}\r\n\r\n\t/*\r\n\t * Repunit formula: R(k) = (10^k - 1) / 9. (Using geometric series)\r\n\t *\r\n\t * For the rest of the argument, let n be an arbitrary integer that is coprime with 10.\r\n\t *\r\n\t * Let k = A(n) be the smallest positive integer such that R(k) = 0 mod n.\r\n\t * From problem #129, we know k exists and satisfies 1 <= k <= n.\r\n\t *\r\n\t * Lemma: For each natural number m, R(m) = 0 mod n if and only if m is a multiple of k.\r\n\t * Proof:\r\n\t * Backward direction:\r\n\t *  Assume m is a multiple of k. Then factorize m = jk, where j is an integer.\r\n\t *  Look at R(m) = R(jk) = 1...1 ... 1...1 (j groups of k 1's) = 10...010...010...01 * R(k) (informally)\r\n\t *     = (sum of 10^(ik) for i = 0 to s-1) * R(k).\r\n\t *  We already have R(k) = 0 mod n, thus (sum of 10^(ik) for i = 0 to s-1) * R(k) = R(m) = 0 mod n.\r\n\t * Forward direction (by converse):\r\n\t *  Assume m is not a multiple of k. Suppose for contradiction that R(m) = 0 mod n.\r\n\t *  Similar the previous argument, we can zeroize blocks of k 1's while preserving the value of R(m) mod n.\r\n\t *  Namely, we delete the top k 1's by subtracting R(k) * 10^(m-k), which is 0 mod n because R(k) = 0 mod n.\r\n\t *  After repeated deletion of the most significant 1's, we can get m' = m mod k, so that 0 < m' < k.\r\n\t *  (m' != 0 because we assumed m is not a multiple of k.) But with R(m') = R(m) = 0 mod n, and m' < k,\r\n\t *  this contradicts the definition of k = A(n), the smallest value such that R(k) = 0 mod n.\r\n\t *  Hence the supposition that R(m) = 0 mod n is false.\r\n\t *\r\n\t * Does there exist an x such that R(10^x) is a multiple of n? By the lemma, this is true if and only if\r\n\t * there exists an x such that 10^x is a multiple of k. This means k must be a product of 2's and 5's.\r\n\t *\r\n\t * Actually, we don't need to compute k = A(n) to perform this test. If k = 2^a * 5^b, then all sufficiently large\r\n\t * powers of 10 are a multiple of k. (If k has other prime factors, then no power of 10 is a multiple of k.)\r\n\t * We know 1 <= k < n, so in this problem 1 <= k < 10^5. For k in this range, the largest exponent among a and b is 16\r\n\t * (for the number 2^16 = 65536). (In general, the largest exponent is floor(log2(limit)); in this case limit = 10^5.)\r\n\t * So we only need to test if 10^16 is a multiple of k, equivalent to testing if R(10^16) is a multiple of n.\r\n\t */\r\n\t@NotNull String run() {\r\n\t\tlong sum = Arrays.stream(listPrimes(100000)).filter(p -> (p == 2) || (p == 5) || !hasDivisibleRepunit(p)).asLongStream().sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p133.java b/Random_Work/src/projectEuler/programs/p133.java
--- a/Random_Work/src/projectEuler/programs/p133.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p133.java	(date 1614916387952)
@@ -18,7 +18,7 @@
 
 	// Tests whether there exists a k such that R(10^k) is a multiple of p
 	private static boolean hasDivisibleRepunit(int p) {
-		return (((TEN.modPow(EXPONENT, valueOf(p * 9)).intValue() - 1) / 9) % p) == 0;
+		return (((TEN.modPow(EXPONENT, valueOf(p * 9L)).intValue() - 1) / 9) % p) == 0;
 	}
 
 	/*
Index: Random_Work/src/projectEuler/programs/p135.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.stream;\r\n\r\npublic final class p135 extends EulerSolution {\r\n\tprivate static final int LIMIT = Library.pow(10, 6);\r\n\r\n\t/*\r\n\t * Let x = m, y = m - k, z = m - 2k (this is an arithmetic sequence).\r\n\t * By tedious but straightforward algebra, x^2 - y^2 - z^2 = (m - k)(5k - m).\r\n\t *\r\n\t * For the sequence to have positive descending terms, we require m > 0, k > 0, and 2k < m.\r\n\t * We know y = m - k > 0, so this term in the product (m - k)(5k - m) is positive.\r\n\t * Since we want x^2 - y^2 - z^2 > 0, this means we also require the term (5k - m) > 0, so 5k > m.\r\n\t * Putting these facts together, we have m/5 < k < m/2. Note: k > m/5 is equivalent to k >= floor(m/5) + 1.\r\n\t *\r\n\t * As for the search range of m, since (m - k) and (5k - m) are both positive integers,\r\n\t * we know that (m - k)(5k - m) >= m - k > m/2. So m/2 < x^2 - y^2 - z^2 < 10^6.\r\n\t * This means we search with 0 < m < 2 * 10^6.\r\n\t */\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p135().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tint[] solutions = new int[LIMIT];\r\n\t\tfor (int m = 1; m < LIMIT * 2; m++)\r\n\t\t\tfor (int k = m / 5 + 1; k * 2 < m; k++) {\r\n\t\t\t\tlong temp = (long) (m - k) * ((k * 5) - m);\r\n\t\t\t\tif (temp >= solutions.length) break;\r\n\t\t\t\tsolutions[(int) temp]++;\r\n\t\t\t}\r\n\t\tint count = (int) stream(solutions).filter(x -> x == 10).count();\r\n\t\treturn Integer.toString(count);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p135.java b/Random_Work/src/projectEuler/programs/p135.java
--- a/Random_Work/src/projectEuler/programs/p135.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p135.java	(date 1614916387433)
@@ -29,7 +29,7 @@
 		int[] solutions = new int[LIMIT];
 		for (int m = 1; m < LIMIT * 2; m++)
 			for (int k = m / 5 + 1; k * 2 < m; k++) {
-				long temp = (long) (m - k) * ((k * 5) - m);
+				long temp = (long) (m - k) * ((k * 5L) - m);
 				if (temp >= solutions.length) break;
 				solutions[(int) temp]++;
 			}
Index: Random_Work/src/projectEuler/programs/p280.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\nimport static java.lang.Integer.*;\r\nimport static java.util.stream.IntStream.range;\r\n\r\npublic final class p280 extends EulerSolution {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p280().run());\r\n\t}\r\n\r\n\t// Model the problem as a Markov process, and solve using dynamic programming\r\n\tString run() {\r\n\t\t// Memoize the successors of each valid state\r\n\t\tint[][] successors = new int[State.ID_LIMIT][];\r\n\t\tfor (var st : State.listAllStates()) {\r\n\t\t\tvar suc = st.getSuccessors();\r\n\t\t\tvar it = suc.iterator();\r\n\t\t\tint[] sucIds = range(0, suc.size()).map(i -> it.next().id).toArray();\r\n\t\t\tsuccessors[st.id] = sucIds;\r\n\t\t}\r\n\t\t// Run the simulation\r\n\t\tdouble sum = 0;\r\n\t\tdouble[] probs = new double[State.ID_LIMIT]; // The current probability of being in each state\r\n\t\tprobs[State.START_STATE.id] = 1;\r\n\t\tfor (int i = 1; ; i++) {\r\n\t\t\t// Note: The done state has no outgoing neighbors,\r\n\t\t\t// so its probability disappears in the next iteration\r\n\t\t\tdouble[] nextProbs = new double[probs.length];\r\n\t\t\tfor (int j = 0; j < probs.length; j++)\r\n\t\t\t\tif (probs[j] > 0) {\r\n\t\t\t\t\tint[] suc = successors[j];\r\n\t\t\t\t\tfor (int k : suc) nextProbs[k] += probs[j] / suc.length;\r\n\t\t\t\t}\r\n\t\t\tdouble doneNow = nextProbs[State.DONE_STATE.id];\r\n\t\t\t// Note: Minimum completion is 44 steps break;\r\n\t\t\tif (i > 44 && doneNow < 1e-20) sum += doneNow * i;\r\n\t\t\tprobs = nextProbs;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Represents the global state of the system, including the ant and seeds. Immutable.\r\n\t */\r\n\tprivate static final class State {\r\n\t\t/*-- Static members --*/\r\n\t\t// All valid state IDs are in the range [0, ID_LIMIT). Not every number in the range is a valid state.\r\n\t\tstatic final int ID_LIMIT = 51201;\r\n\t\t// Special states.\r\n\t\tstatic final State START_STATE = new State(false, 2, 2, new boolean[]{false, false, false, false, false, true, true, true, true, true, false});\r\n\t\tstatic final State DONE_STATE = new State(true, 0, 0, new boolean[]{true, true, true, true, true, false, false, false, false, false, false});\r\n\t\t// A number in the range [0, ID_LIMIT) such that each distinct state has a different ID.\r\n\t\tfinal int id;\r\n\t\t/*-- Instance members --*/\r\n\t\t// When the system is done, the ant's position is ignored. Thus there is only 1 done state, not 5.\r\n\t\t// Moreover when done, hasSeed must equal [T T T T T, F F F F F, F].\r\n\t\tprivate final boolean isDone;\r\n\t\t// The ant's position on the grid. Both numbers are in the range [0, 5).\r\n\t\tprivate final int antX;\r\n\t\tprivate final int antY; // 0 represents the top row, 4 is the bottom row.\r\n\t\t// Indices 0 to 4 are for the top row, 5 to 9 for the bottom row, and 10 for the ant.\r\n\t\t// Exactly 5 elements are true, and the other 6 are false.\r\n\t\tprivate final boolean[] hasSeed;\r\n\r\n\t\t@Contract(pure = true)\r\n\t\tState(boolean done, int x, int y, boolean[] seed) {\r\n\t\t\tisDone = done;\r\n\t\t\tantX = x;\r\n\t\t\tantY = y;\r\n\t\t\thasSeed = seed;\r\n\t\t\tif (done) id = 25 * (1 << seed.length);\r\n\t\t\telse {\r\n\t\t\t\tvar temp = range(0, seed.length).map(i -> (seed[i] ? 1 : 0) << i).reduce(0, (a, b) -> a | b);\r\n\t\t\t\tid = x + (y * 5) + (temp * 25);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Returns a set of all valid states.\r\n\t\t@NotNull\r\n\t\tstatic Set<State> listAllStates() {\r\n\t\t\tvar result = new HashSet<State>();\r\n\t\t\t// Try all 2^11 ways for which cells (or ant) hold a seed\r\n\t\t\tfor (int i = 0; i < (1 << 11); i++) {\r\n\t\t\t\tif (bitCount(i) != 5) continue; // Invalid state if not 5 things hold a seed\r\n\t\t\t\t// For all 5*5 possible ant positions\r\n\t\t\t\tfor (int y = 0; y < 5; y++)\r\n\t\t\t\t\tfor (int x = 0; x < 5; x++) {\r\n\t\t\t\t\t\tboolean[] seed = new boolean[11];\r\n\t\t\t\t\t\tfor (int j = 0; j < seed.length; j++) seed[j] = ((i >>> j) & 1) != 0;\r\n\t\t\t\t\t\tresult.add(new State(false, x, y, seed));\r\n\t\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tresult.add(DONE_STATE);\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\t// Returns a set (of size 0 to 4) containing this state's successors.\r\n\t\t// Remember that this state transitions to a successor with equal probability.\r\n\t\t@NotNull Set<State> getSuccessors() {\r\n\t\t\tHashSet<State> result = new HashSet<>();\r\n\t\t\tif (!isDone) {\r\n\t\t\t\ttryAddSuccessor(-1, 0, result);\r\n\t\t\t\ttryAddSuccessor(+1, 0, result);\r\n\t\t\t\ttryAddSuccessor(0, -1, result);\r\n\t\t\t\ttryAddSuccessor(0, +1, result);\r\n\t\t\t}\r\n\t\t\treturn result;\r\n\t\t}\r\n\r\n\t\tprivate void tryAddSuccessor(int dx, int dy, Set<State> result) {\r\n\t\t\tint x = antX + dx;\r\n\t\t\tint y = antY + dy;\r\n\t\t\tif ((x < 0) || (x >= 5) || (y < 0) || (y >= 5)) return; // Ant moves off the grid\r\n\t\t\tboolean[] seed = hasSeed.clone();\r\n\t\t\tboolean done = false;\r\n\t\t\tif (!seed[10] && y == 4 && seed[5 + x]) { // Pick up seed\r\n\t\t\t\tseed[5 + x] = false;\r\n\t\t\t\tseed[10] = true;\r\n\t\t\t} else if (seed[10] && y == 0 && !seed[x]) { // Drop off seed\r\n\t\t\t\tseed[10] = false;\r\n\t\t\t\tseed[x] = true;\r\n\t\t\t\tdone = seed[0] & seed[1] & seed[2] & seed[3] & seed[4];\r\n\t\t\t}\r\n\t\t\tresult.add(new State(done, x, y, seed));\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p280.java b/Random_Work/src/projectEuler/programs/p280.java
--- a/Random_Work/src/projectEuler/programs/p280.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p280.java	(date 1614951980102)
@@ -6,7 +6,7 @@
 import java.util.HashSet;
 import java.util.Set;
 
-import static java.lang.Integer.*;
+import static java.lang.Integer.bitCount;
 import static java.util.stream.IntStream.range;
 
 public final class p280 extends EulerSolution {
Index: Random_Work/src/projectEuler/programs/p089.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.stream;\r\n\r\npublic final class p089 extends EulerSolution {\r\n\tprivate static final Object[][] PREFIXES = {{\"M\", 1000}, {\"CM\", 900}, {\"D\", 500}, {\"CD\", 400}, {\"C\", 100}, {\"XC\", 90}, {\"L\", 50}, {\"XL\", 40}, {\"X\", 10}, {\"IX\", 9}, {\"V\", 5}, {\"IV\", 4}, {\"I\", 1}};\r\n\t// e.g. (empty), I, II, III, IV, V, VI, VII, VIII, IX\r\n\tprivate static final int[] DIGIT_LENGTHS = {0, 1, 2, 3, 2, 1, 2, 3, 4, 2};\r\n\tprivate static final String[] TO_SIMPLIFY = {\"MMMMDCLXXII\", \"MMDCCCLXXXIII\", \"MMMDLXVIIII\", \"MMMMDXCV\", \"DCCCLXXII\", \"MMCCCVI\", \"MMMCDLXXXVII\", \"MMMMCCXXI\", \"MMMCCXX\", \"MMMMDCCCLXXIII\", \"MMMCCXXXVII\", \"MMCCCLXXXXIX\", \"MDCCCXXIIII\", \"MMCXCVI\", \"CCXCVIII\", \"MMMCCCXXXII\", \"MDCCXXX\", \"MMMDCCCL\", \"MMMMCCLXXXVI\", \"MMDCCCXCVI\", \"MMMDCII\", \"MMMCCXII\", \"MMMMDCCCCI\", \"MMDCCCXCII\", \"MDCXX\", \"CMLXXXVII\", \"MMMXXI\", \"MMMMCCCXIV\", \"MLXXII\", \"MCCLXXVIIII\", \"MMMMCCXXXXI\", \"MMDCCCLXXII\", \"MMMMXXXI\", \"MMMDCCLXXX\", \"MMDCCCLXXIX\", \"MMMMLXXXV\", \"MCXXI\", \"MDCCCXXXVII\", \"MMCCCLXVII\", \"MCDXXXV\", \"CCXXXIII\", \"CMXX\", \"MMMCLXIV\", \"MCCCLXXXVI\", \"DCCCXCVIII\", \"MMMDCCCCXXXIV\", \"CDXVIIII\", \"MMCCXXXV\", \"MDCCCXXXII\", \"MMMMD\", \"MMDCCLXIX\", \"MMMMCCCLXXXXVI\", \"MMDCCXLII\", \"MMMDCCCVIIII\", \"DCCLXXXIIII\", \"MDCCCCXXXII\", \"MMCXXVII\", \"DCCCXXX\", \"CCLXIX\", \"MMMXI\", \"MMMMCMLXXXXVIII\", \"MMMMDLXXXVII\", \"MMMMDCCCLX\", \"MMCCLIV\", \"CMIX\", \"MMDCCCLXXXIIII\", \"CLXXXII\", \"MMCCCCXXXXV\", \"MMMMDLXXXVIIII\", \"MMMDCCCXXI\", \"MMDCCCCLXXVI\", \"MCCCCLXX\", \"MMCDLVIIII\", \"MMMDCCCLIX\", \"MMMMCCCCXIX\", \"MMMDCCCLXXV\", \"XXXI\", \"CDLXXXIII\", \"MMMCXV\", \"MMDCCLXIII\", \"MMDXXX\", \"MMMMCCCLVII\", \"MMMDCI\", \"MMMMCDLXXXIIII\", \"MMMMCCCXVI\", \"CCCLXXXVIII\", \"MMMMCML\", \"MMMMXXIV\", \"MMMCCCCXXX\", \"DCCX\", \"MMMCCLX\", \"MMDXXXIII\", \"CCCLXIII\", \"MMDCCXIII\", \"MMMCCCXLIV\", \"CLXXXXI\", \"CXVI\", \"MMMMCXXXIII\", \"CLXX\", \"DCCCXVIII\", \"MLXVII\", \"DLXXXX\", \"MMDXXI\", \"MMMMDLXXXXVIII\", \"MXXII\", \"LXI\", \"DCCCCXLIII\", \"MMMMDV\", \"MMMMXXXIV\", \"MDCCCLVIII\", \"MMMCCLXXII\", \"MMMMDCCXXXVI\", \"MMMMLXXXIX\", \"MDCCCLXXXI\", \"MMMMDCCCXV\", \"MMMMCCCCXI\", \"MMMMCCCLIII\", \"MDCCCLXXI\", \"MMCCCCXI\", \"MLXV\", \"MMCDLXII\", \"MMMMDXXXXII\", \"MMMMDCCCXL\", \"MMMMCMLVI\", \"CCLXXXIV\", \"MMMDCCLXXXVI\", \"MMCLII\", \"MMMCCCCXV\", \"MMLXXXIII\", \"MMMV\", \"MMMV\", \"DCCLXII\", \"MMDCCCCXVI\", \"MMDCXLVIII\", \"CCLIIII\", \"CCCXXV\", \"MMDCCLXXXVIIII\", \"MMMMDCLXXVIII\", \"MMMMDCCCXCI\", \"MMMMCCCXX\", \"MMCCXLV\", \"MMMDCCCLXIX\", \"MMCCLXIIII\", \"MMMDCCCXLIX\", \"MMMMCCCLXIX\", \"CMLXXXXI\", \"MCMLXXXIX\", \"MMCDLXI\", \"MMDCLXXVIII\", \"MMMMDCCLXI\", \"MCDXXV\", \"DL\", \"CCCLXXII\", \"MXVIIII\", \"MCCCCLXVIII\", \"CIII\", \"MMMDCCLXXIIII\", \"MMMDVIII\", \"MMMMCCCLXXXXVII\", \"MMDXXVII\", \"MMDCCLXXXXV\", \"MMMMCXLVI\", \"MMMDCCLXXXII\", \"MMMDXXXVI\", \"MCXXII\", \"CLI\", \"DCLXXXIX\", \"MMMCLI\", \"MDCLXIII\", \"MMMMDCCXCVII\", \"MMCCCLXXXV\", \"MMMDCXXVIII\", \"MMMCDLX\", \"MMMCMLII\", \"MMMIV\", \"MMMMDCCCLVIII\", \"MMMDLXXXVIII\", \"MCXXIV\", \"MMMMLXXVI\", \"CLXXIX\", \"MMMCCCCXXVIIII\", \"DCCLXXXV\", \"MMMDCCCVI\", \"LI\", \"CLXXXVI\", \"MMMMCCCLXXVI\", \"MCCCLXVI\", \"CCXXXIX\", \"MMDXXXXI\", \"MMDCCCXLI\", \"DCCCLXXXVIII\", \"MMMMDCCCIV\", \"MDCCCCXV\", \"MMCMVI\", \"MMMMCMLXXXXV\", \"MMDCCLVI\", \"MMMMCCXLVIII\", \"DCCCCIIII\", \"MMCCCCIII\", \"MMMDCCLXXXVIIII\", \"MDCCCLXXXXV\", \"DVII\", \"MMMV\", \"DCXXV\", \"MMDCCCXCV\", \"DCVIII\", \"MMCDLXVI\", \"MCXXVIII\", \"MDCCXCVIII\", \"MMDCLX\", \"MMMDCCLXIV\", \"MMCDLXXVII\", \"MMDLXXXIIII\", \"MMMMCCCXXII\", \"MMMDCCCXLIIII\", \"DCCCCLXVII\", \"MMMCLXXXXIII\", \"MCCXV\", \"MMMMDCXI\", \"MMMMDCLXXXXV\", \"MMMCCCLII\", \"MMCMIX\", \"MMDCCXXV\", \"MMDLXXXVI\", \"MMMMDCXXVIIII\", \"DCCCCXXXVIIII\", \"MMCCXXXIIII\", \"MMDCCLXXVIII\", \"MDCCLXVIIII\", \"MMCCLXXXV\", \"MMMMDCCCLXXXVIII\", \"MMCMXCI\", \"MDXLII\", \"MMMMDCCXIV\", \"MMMMLI\", \"DXXXXIII\", \"MMDCCXI\", \"MMMMCCLXXXIII\", \"MMMDCCCLXXIII\", \"MDCLVII\", \"MMCD\", \"MCCCXXVII\", \"MMMMDCCIIII\", \"MMMDCCXLVI\", \"MMMCLXXXVII\", \"MMMCCVIIII\", \"MCCCCLXXIX\", \"DL\", \"DCCCLXXVI\", \"MMDXCI\", \"MMMMDCCCCXXXVI\", \"MMCII\", \"MMMDCCCXXXXV\", \"MMMCDXLV\", \"MMDCXXXXIV\", \"MMD\", \"MDCCCLXXXX\", \"MMDCXLIII\", \"MMCCXXXII\", \"MMDCXXXXVIIII\", \"DCCCLXXI\", \"MDXCVIIII\", \"MMMMCCLXXVIII\", \"MDCLVIIII\", \"MMMCCCLXXXIX\", \"MDCLXXXV\", \"MDLVIII\", \"MMMMCCVII\", \"MMMMDCXIV\", \"MMMCCCLXIIII\", \"MMIIII\", \"MMMMCCCLXXIII\", \"CCIII\", \"MMMCCLV\", \"MMMDXIII\", \"MMMCCCXC\", \"MMMDCCCXXI\", \"MMMMCCCCXXXII\", \"CCCLVI\", \"MMMCCCLXXXVI\", \"MXVIIII\", \"MMMCCCCXIIII\", \"CLXVII\", \"MMMCCLXX\", \"CCCCLXIV\", \"MMXXXXII\", \"MMMMCCLXXXX\", \"MXL\", \"CCXVI\", \"CCCCLVIIII\", \"MMCCCII\", \"MCCCLVIII\", \"MMMMCCCX\", \"MCDLXXXXIV\", \"MDCCCXIII\", \"MMDCCCXL\", \"MMMMCCCXXIII\", \"DXXXIV\", \"CVI\", \"MMMMDCLXXX\", \"DCCCVII\", \"MMCMLXIIII\", \"MMMDCCCXXXIII\", \"DCCC\", \"MDIII\", \"MMCCCLXVI\", \"MMMCCCCLXXI\", \"MMDCCCCXVIII\", \"CCXXXVII\", \"CCCXXV\", \"MDCCCXII\", \"MMMCMV\", \"MMMMCMXV\", \"MMMMDCXCI\", \"DXXI\", \"MMCCXLVIIII\", \"MMMMCMLII\", \"MDLXXX\", \"MMDCLXVI\", \"CXXI\", \"MMMDCCCLIIII\", \"MMMCXXI\", \"MCCIII\", \"MMDCXXXXI\", \"CCXCII\", \"MMMMDXXXV\", \"MMMCCCLXV\", \"MMMMDLXV\", \"MMMCCCCXXXII\", \"MMMCCCVIII\", \"DCCCCLXXXXII\", \"MMCLXIV\", \"MMMMCXI\", \"MLXXXXVII\", \"MMMCDXXXVIII\", \"MDXXII\", \"MLV\", \"MMMMDLXVI\", \"MMMCXII\", \"XXXIII\", \"MMMMDCCCXXVI\", \"MMMLXVIIII\", \"MMMLX\", \"MMMCDLXVII\", \"MDCCCLVII\", \"MMCXXXVII\", \"MDCCCCXXX\", \"MMDCCCLXIII\", \"MMMMDCXLIX\", \"MMMMCMXLVIII\", \"DCCCLXXVIIII\", \"MDCCCLIII\", \"MMMCMLXI\", \"MMMMCCLXI\", \"MMDCCCLIII\", \"MMMDCCCVI\", \"MMDXXXXIX\", \"MMCLXXXXV\", \"MMDXXX\", \"MMMXIII\", \"DCLXXIX\", \"DCCLXII\", \"MMMMDCCLXVIII\", \"MDCCXXXXIII\", \"CCXXXII\", \"MMMMDCXXV\", \"MMMCCCXXVIII\", \"MDCVIII\", \"MMMCLXXXXIIII\", \"CLXXXI\", \"MDCCCCXXXIII\", \"MMMMDCXXX\", \"MMMDCXXIV\", \"MMMCCXXXVII\", \"MCCCXXXXIIII\", \"CXVIII\", \"MMDCCCCIV\", \"MMMMCDLXXV\", \"MMMDLXIV\", \"MDXCIII\", \"MCCLXXXI\", \"MMMDCCCXXIV\", \"MCXLIII\", \"MMMDCCCI\", \"MCCLXXX\", \"CCXV\", \"MMDCCLXXI\", \"MMDLXXXIII\", \"MMMMDCXVII\", \"MMMCMLXV\", \"MCLXVIII\", \"MMMMCCLXXVI\", \"MMMDCCLXVIIII\", \"MMMMDCCCIX\", \"DLXXXXIX\", \"DCCCXXII\", \"MMMMIII\", \"MMMMCCCLXXVI\", \"DCCCXCIII\", \"DXXXI\", \"MXXXIIII\", \"CCXII\", \"MMMDCCLXXXIIII\", \"MMMCXX\", \"MMMCMXXVII\", \"DCCCXXXX\", \"MMCDXXXVIIII\", \"MMMMDCCXVIII\", \"LV\", \"MMMDCCCCVI\", \"MCCCII\", \"MMCMLXVIIII\", \"MDCCXI\", \"MMMMDLXVII\", \"MMCCCCLXI\", \"MMDCCV\", \"MMMCCCXXXIIII\", \"MMMMDI\", \"MMMDCCCXCV\", \"MMDCCLXXXXI\", \"MMMDXXVI\", \"MMMDCCCLVI\", \"MMDCXXX\", \"MCCCVII\", \"MMMMCCCLXII\", \"MMMMXXV\", \"MMCMXXV\", \"MMLVI\", \"MMDXXX\", \"MMMMCVII\", \"MDC\", \"MCCIII\", \"MMMMDCC\", \"MMCCLXXV\", \"MMDCCCXXXXVI\", \"MMMMCCCLXV\", \"CDXIIII\", \"MLXIIII\", \"CCV\", \"MMMCMXXXI\", \"CCCCLXVI\", \"MDXXXII\", \"MMMMCCCLVIII\", \"MMV\", \"MMMCLII\", \"MCMLI\", \"MMDCCXX\", \"MMMMCCCCXXXVI\", \"MCCLXXXI\", \"MMMCMVI\", \"DCCXXX\", \"MMMMCCCLXV\", \"DCCCXI\", \"MMMMDCCCXIV\", \"CCCXXI\", \"MMDLXXV\", \"CCCCLXXXX\", \"MCCCLXXXXII\", \"MMDCIX\", \"DCCXLIIII\", \"DXIV\", \"MMMMCLII\", \"CDLXI\", \"MMMCXXVII\", \"MMMMDCCCCLXIII\", \"MMMDCLIIII\", \"MCCCCXXXXII\", \"MMCCCLX\", \"CCCCLIII\", \"MDCCLXXVI\", \"MCMXXIII\", \"MMMMDLXXVIII\", \"MMDCCCCLX\", \"MMMCCCLXXXX\", \"MMMCDXXVI\", \"MMMDLVIII\", \"CCCLXI\", \"MMMMDCXXII\", \"MMDCCCXXI\", \"MMDCCXIII\", \"MMMMCLXXXVI\", \"MDCCCCXXVI\", \"MDV\", \"MMDCCCCLXXVI\", \"MMMMCCXXXVII\", \"MMMDCCLXXVIIII\", \"MMMCCCCLXVII\", \"DCCXLI\", \"MMCLXXXVIII\", \"MCCXXXVI\", \"MMDCXLVIII\", \"MMMMCXXXII\", \"MMMMDCCLXVI\", \"MMMMCMLI\", \"MMMMCLXV\", \"MMMMDCCCXCIV\", \"MCCLXXVII\", \"LXXVIIII\", \"DCCLII\", \"MMMCCCXCVI\", \"MMMCLV\", \"MMDCCCXXXXVIII\", \"DCCCXV\", \"MXC\", \"MMDCCLXXXXVII\", \"MMMMCML\", \"MMDCCCLXXVIII\", \"DXXI\", \"MCCCXLI\", \"DCLXXXXI\", \"MMCCCLXXXXVIII\", \"MDCCCCLXXVIII\", \"MMMMDXXV\", \"MMMDCXXXVI\", \"MMMCMXCVII\", \"MMXVIIII\", \"MMMDCCLXXIV\", \"MMMCXXV\", \"DXXXVIII\", \"MMMMCLXVI\", \"MDXII\", \"MMCCCLXX\", \"CCLXXI\", \"DXIV\", \"MMMCLIII\", \"DLII\", \"MMMCCCXLIX\", \"MMCCCCXXVI\", \"MMDCXLIII\", \"MXXXXII\", \"CCCLXXXV\", \"MDCLXXVI\", \"MDCXII\", \"MMMCCCLXXXIII\", \"MMDCCCCLXXXII\", \"MMMMCCCLXXXV\", \"MMDCXXI\", \"DCCCXXX\", \"MMMDCCCCLII\", \"MMMDCCXXII\", \"MMMMCDXCVIII\", \"MMMCCLXVIIII\", \"MMXXV\", \"MMMMCDXIX\", \"MMMMCCCX\", \"MMMCCCCLXVI\", \"MMMMDCLXXVIIII\", \"MMMMDCXXXXIV\", \"MMMCMXII\", \"MMMMXXXIII\", \"MMMMDLXXXII\", \"DCCCLIV\", \"MDXVIIII\", \"MMMCLXXXXV\", \"CCCCXX\", \"MMDIX\", \"MMCMLXXXVIII\", \"DCCXLIII\", \"DCCLX\", \"D\", \"MCCCVII\", \"MMMMCCCLXXXIII\", \"MDCCCLXXIIII\", \"MMMDCCCCLXXXVII\", \"MMMMCCCVII\", \"MMMDCCLXXXXVI\", \"CDXXXIV\", \"MCCLXVIII\", \"MMMMDLX\", \"MMMMDXII\", \"MMMMCCCCLIIII\", \"MCMLXXXXIII\", \"MMMMDCCCIII\", \"MMDCLXXXIII\", \"MDCCCXXXXIV\", \"XXXXVII\", \"MMMDCCCXXXII\", \"MMMDCCCXLII\", \"MCXXXV\", \"MDCXXVIIII\", \"MMMCXXXXIIII\", \"MMMMCDXVII\", \"MMMDXXIII\", \"MMMMCCCCLXI\", \"DCLXXXXVIIII\", \"LXXXXI\", \"CXXXIII\", \"MCDX\", \"MCCLVII\", \"MDCXXXXII\", \"MMMCXXIV\", \"MMMMLXXXX\", \"MMDCCCCXLV\", \"MLXXX\", \"MMDCCCCLX\", \"MCDLIII\", \"MMMCCCLXVII\", \"MMMMCCCLXXIV\", \"MMMDCVIII\", \"DCCCCXXIII\", \"MMXCI\", \"MMDCCIV\", \"MMMMDCCCXXXIV\", \"CCCLXXI\", \"MCCLXXXII\", \"MCMIII\", \"CCXXXI\", \"DCCXXXVIII\", \"MMMMDCCXLVIIII\", \"MMMMCMXXXV\", \"DCCCLXXV\", \"DCCXCI\", \"MMMMDVII\", \"MMMMDCCCLXVIIII\", \"CCCXCV\", \"MMMMDCCXX\", \"MCCCCII\", \"MMMCCCXC\", \"MMMCCCII\", \"MMDCCLXXVII\", \"MMDCLIIII\", \"CCXLIII\", \"MMMDCXVIII\", \"MMMCCCIX\", \"MCXV\", \"MMCCXXV\", \"MLXXIIII\", \"MDCCXXVI\", \"MMMCCCXX\", \"MMDLXX\", \"MMCCCCVI\", \"MMDCCXX\", \"MMMMDCCCCXCV\", \"MDCCCXXXII\", \"MMMMDCCCCXXXX\", \"XCIV\", \"MMCCCCLX\", \"MMXVII\", \"MLXXI\", \"MMMDXXVIII\", \"MDCCCCII\", \"MMMCMLVII\", \"MMCLXXXXVIII\", \"MDCCCCLV\", \"MCCCCLXXIIII\", \"MCCCLII\", \"MCDXLVI\", \"MMMMDXVIII\", \"DCCLXXXIX\", \"MMMDCCLXIV\", \"MDCCCCXLIII\", \"CLXXXXV\", \"MMMMCCXXXVI\", \"MMMDCCCXXI\", \"MMMMCDLXXVII\", \"MCDLIII\", \"MMCCXLVI\", \"DCCCLV\", \"MCDLXX\", \"DCLXXVIII\", \"MMDCXXXIX\", \"MMMMDCLX\", \"MMDCCLI\", \"MMCXXXV\", \"MMMCCXII\", \"MMMMCMLXII\", \"MMMMCCV\", \"MCCCCLXIX\", \"MMMMCCIII\", \"CLXVII\", \"MCCCLXXXXIIII\", \"MMMMDCVIII\", \"MMDCCCLXI\", \"MMLXXIX\", \"CMLXIX\", \"MMDCCCXLVIIII\", \"DCLXII\", \"MMMCCCXLVII\", \"MDCCCXXXV\", \"MMMMDCCXCVI\", \"DCXXX\", \"XXVI\", \"MMLXIX\", \"MMCXI\", \"DCXXXVII\", \"MMMMCCCXXXXVIII\", \"MMMMDCLXI\", \"MMMMDCLXXIIII\", \"MMMMVIII\", \"MMMMDCCCLXII\", \"MDCXCI\", \"MMCCCXXIIII\", \"CCCCXXXXV\", \"MMDCCCXXI\", \"MCVI\", \"MMDCCLXVIII\", \"MMMMCXL\", \"MLXVIII\", \"CMXXVII\", \"CCCLV\", \"MDCCLXXXIX\", \"MMMCCCCLXV\", \"MMDCCLXII\", \"MDLXVI\", \"MMMCCCXVIII\", \"MMMMCCLXXXI\", \"MMCXXVII\", \"MMDCCCLXVIII\", \"MMMCXCII\", \"MMMMDCLVIII\", \"MMMMDCCCXXXXII\", \"MMDCCCCLXXXXVI\", \"MDCCXL\", \"MDCCLVII\", \"MMMMDCCCLXXXVI\", \"DCCXXXIII\", \"MMMMDCCCCLXXXV\", \"MMCCXXXXVIII\", \"MMMCCLXXVIII\", \"MMMDCLXXVIII\", \"DCCCI\", \"MMMMLXXXXVIIII\", \"MMMCCCCLXXII\", \"MMCLXXXVII\", \"CCLXVI\", \"MCDXLIII\", \"MMCXXVIII\", \"MDXIV\", \"CCCXCVIII\", \"CLXXVIII\", \"MMCXXXXVIIII\", \"MMMDCLXXXIV\", \"CMLVIII\", \"MCDLIX\", \"MMMMDCCCXXXII\", \"MMMMDCXXXIIII\", \"MDCXXI\", \"MMMDCXLV\", \"MCLXXVIII\", \"MCDXXII\", \"IV\", \"MCDLXXXXIII\", \"MMMMDCCLXV\", \"CCLI\", \"MMMMDCCCXXXVIII\", \"DCLXII\", \"MCCCLXVII\", \"MMMMDCCCXXXVI\", \"MMDCCXLI\", \"MLXI\", \"MMMCDLXVIII\", \"MCCCCXCIII\", \"XXXIII\", \"MMMDCLXIII\", \"MMMMDCL\", \"DCCCXXXXIIII\", \"MMDLVII\", \"DXXXVII\", \"MCCCCXXIIII\", \"MCVII\", \"MMMMDCCXL\", \"MMMMCXXXXIIII\", \"MCCCCXXIV\", \"MMCLXVIII\", \"MMXCIII\", \"MDCCLXXX\", \"MCCCLIIII\", \"MMDCLXXI\", \"MXI\", \"MCMLIV\", \"MMMCCIIII\", \"DCCLXXXVIIII\", \"MDCLIV\", \"MMMDCXIX\", \"CMLXXXI\", \"DCCLXXXVII\", \"XXV\", \"MMMXXXVI\", \"MDVIIII\", \"CLXIII\", \"MMMCDLVIIII\", \"MMCCCCVII\", \"MMMLXX\", \"MXXXXII\", \"MMMMCCCLXVIII\", \"MMDCCCXXVIII\", \"MMMMDCXXXXI\", \"MMMMDCCCXXXXV\", \"MMMXV\", \"MMMMCCXVIIII\", \"MMDCCXIIII\", \"MMMXXVII\", \"MDCCLVIIII\", \"MMCXXIIII\", \"MCCCLXXIV\", \"DCLVIII\", \"MMMLVII\", \"MMMCXLV\", \"MMXCVII\", \"MMMCCCLXXXVII\", \"MMMMCCXXII\", \"DXII\", \"MMMDLV\", \"MCCCLXXVIII\", \"MMMCLIIII\", \"MMMMCLXXXX\", \"MMMCLXXXIIII\", \"MDCXXIII\", \"MMMMCCXVI\", \"MMMMDLXXXIII\", \"MMMDXXXXIII\", \"MMMMCCCCLV\", \"MMMDLXXXI\", \"MMMCCLXXVI\", \"MMMMXX\", \"MMMMDLVI\", \"MCCCCLXXX\", \"MMMXXII\", \"MMXXII\", \"MMDCCCCXXXI\", \"MMMDXXV\", \"MMMDCLXXXVIIII\", \"MMMDLXXXXVII\", \"MDLXIIII\", \"CMXC\", \"MMMXXXVIII\", \"MDLXXXVIII\", \"MCCCLXXVI\", \"MMCDLIX\", \"MMDCCCXVIII\", \"MDCCCXXXXVI\", \"MMMMCMIV\", \"MMMMDCIIII\", \"MMCCXXXV\", \"XXXXVI\", \"MMMMCCXVII\", \"MMCCXXIV\", \"MCMLVIIII\", \"MLXXXIX\", \"MMMMLXXXIX\", \"CLXXXXIX\", \"MMMDCCCCLVIII\", \"MMMMCCLXXIII\", \"MCCCC\", \"DCCCLIX\", \"MMMCCCLXXXII\", \"MMMCCLXVIIII\", \"MCLXXXV\", \"CDLXXXVII\", \"DCVI\", \"MMX\", \"MMCCXIII\", \"MMMMDCXX\", \"MMMMXXVIII\", \"DCCCLXII\", \"MMMMCCCXLIII\", \"MMMMCLXV\", \"DXCI\", \"MMMMCLXXX\", \"MMMDCCXXXXI\", \"MMMMXXXXVI\", \"DCLX\", \"MMMCCCXI\", \"MCCLXXX\", \"MMCDLXXII\", \"DCCLXXI\", \"MMMCCCXXXVI\", \"MCCCCLXXXVIIII\", \"CDLVIII\", \"DCCLVI\", \"MMMMDCXXXVIII\", \"MMCCCLXXXIII\", \"MMMMDCCLXXV\", \"MMMXXXVI\", \"CCCLXXXXIX\", \"CV\", \"CCCCXIII\", \"CCCCXVI\", \"MDCCCLXXXIIII\", \"MMDCCLXXXII\", \"MMMMCCCCLXXXI\", \"MXXV\", \"MMCCCLXXVIIII\", \"MMMCCXII\", \"MMMMCCXXXIII\", \"MMCCCLXXXVI\", \"MMMDCCCLVIIII\", \"MCCXXXVII\", \"MDCLXXV\", \"XXXV\", \"MMDLI\", \"MMMCCXXX\", \"MMMMCXXXXV\", \"CCCCLIX\", \"MMMMDCCCLXXIII\", \"MMCCCXVII\", \"DCCCXVI\", \"MMMCCCXXXXV\", \"MDCCCCXCV\", \"CLXXXI\", \"MMMMDCCLXX\", \"MMMDCCCIII\", \"MMCLXXVII\", \"MMMDCCXXIX\", \"MMDCCCXCIIII\", \"MMMCDXXIIII\", \"MMMMXXVIII\", \"MMMMDCCCCLXVIII\", \"MDCCCXX\", \"MMMMCDXXI\", \"MMMMDLXXXIX\", \"CCXVI\", \"MDVIII\", \"MMCCLXXI\", \"MMMDCCCLXXI\", \"MMMCCCLXXVI\", \"MMCCLXI\", \"MMMMDCCCXXXIV\", \"DLXXXVI\", \"MMMMDXXXII\", \"MMMXXIIII\", \"MMMMCDIV\", \"MMMMCCCXLVIII\", \"MMMMCXXXVIII\", \"MMMCCCLXVI\", \"MDCCXVIII\", \"MMCXX\", \"CCCLIX\", \"MMMMDCCLXXII\", \"MDCCCLXXV\", \"MMMMDCCCXXIV\", \"DCCCXXXXVIII\", \"MMMDCCCCXXXVIIII\", \"MMMMCCXXXV\", \"MDCLXXXIII\", \"MMCCLXXXIV\", \"MCLXXXXIIII\", \"DXXXXIII\", \"MCCCXXXXVIII\", \"MMCLXXIX\", \"MMMMCCLXIV\", \"MXXII\", \"MMMCXIX\", \"MDCXXXVII\", \"MMDCCVI\", \"MCLXXXXVIII\", \"MMMCXVI\", \"MCCCLX\", \"MMMCDX\", \"CCLXVIIII\", \"MMMCCLX\", \"MCXXVIII\", \"LXXXII\", \"MCCCCLXXXI\", \"MMMI\", \"MMMCCCLXIV\", \"MMMCCCXXVIIII\", \"CXXXVIII\", \"MMCCCXX\", \"MMMCCXXVIIII\", \"MCCLXVI\", \"MMMCCCCXXXXVI\", \"MMDCCXCIX\", \"MCMLXXI\", \"MMCCLXVIII\", \"CDLXXXXIII\", \"MMMMDCCXXII\", \"MMMMDCCLXXXVII\", \"MMMDCCLIV\", \"MMCCLXIII\", \"MDXXXVII\", \"DCCXXXIIII\", \"MCII\", \"MMMDCCCLXXI\", \"MMMLXXIII\", \"MDCCCLIII\", \"MMXXXVIII\", \"MDCCXVIIII\", \"MDCCCCXXXVII\", \"MMCCCXVI\", \"MCMXXII\", \"MMMCCCLVIII\", \"MMMMDCCCXX\", \"MCXXIII\", \"MMMDLXI\", \"MMMMDXXII\", \"MDCCCX\", \"MMDXCVIIII\", \"MMMDCCCCVIII\", \"MMMMDCCCCXXXXVI\", \"MMDCCCXXXV\", \"MMCXCIV\", \"MCMLXXXXIII\", \"MMMCCCLXXVI\", \"MMMMDCLXXXV\", \"CMLXIX\", \"DCXCII\", \"MMXXVIII\", \"MMMMCCCXXX\", \"XXXXVIIII\"};\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p089().run());\r\n\t}\r\n\r\n\tprivate static int parseRomanNumeral(String s) {\r\n\t\tint result = 0;\r\n\t\touter:\r\n\t\twhile (s.length() > 0) {\r\n\t\t\tfor (Object[] prefix : PREFIXES)\r\n\t\t\t\tif (s.startsWith((String) prefix[0])) {\r\n\t\t\t\t\tresult += (Integer) prefix[1];\r\n\t\t\t\t\ts = s.substring(((String) prefix[0]).length());\r\n\t\t\t\t\tcontinue outer;\r\n\t\t\t\t}\r\n\t\t\tthrow new IllegalArgumentException(\"Cannot parse Roman numeral\");\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate static int romanNumeralLength(int n) {\r\n\t\tassert n > 0 && n < 5000;\r\n\t\tint count = 0;\r\n\t\t// 4000 is MMMM, which doesn't have a two-letter form\r\n\t\tif (n >= 4000) count += 2; // Compensate for this fact\r\n\t\tfor (; n != 0; n /= 10) count += DIGIT_LENGTHS[n % 10];\r\n\t\treturn count;\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tint sum = stream(TO_SIMPLIFY).mapToInt(s -> s.length() - romanNumeralLength(parseRomanNumeral(s))).sum();\r\n\t\treturn Integer.toString(sum);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p089.java b/Random_Work/src/projectEuler/programs/p089.java
--- a/Random_Work/src/projectEuler/programs/p089.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p089.java	(date 1617055703392)
@@ -40,7 +40,8 @@
 		return count;
 	}
 
-	@NotNull String run() {
+	@NotNull
+	public String run() {
 		int sum = stream(TO_SIMPLIFY).mapToInt(s -> s.length() - romanNumeralLength(parseRomanNumeral(s))).sum();
 		return Integer.toString(sum);
 	}
Index: Random_Work/src/projectEuler/programs/p187.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.binarySearch;\r\nimport static projectEuler.programs.Library.*;\r\n\r\npublic final class p187 extends EulerSolution {\r\n\tprivate static final int LIMIT = pow(10, 8) - 1;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p187().run());\r\n\t}\r\n\r\n\t/*\r\n\t * LIMIT is the highest number that we will test for being semiprime.\r\n\t * Make a list of primes: 2, 3, 5, 7, ... . Stop beyond LIMIT/2, because one of the prime factors in the semiprime is at least 2.\r\n\t * For each prime p in the list, look at the set of numbers q such that q >= p and pq <= LIMIT.\r\n\t * Actually, we can stop when p^2 > LIMIT, as we'll see later.\r\n\t * In this algorithm, we find the index 'end' such that primes[i] * primes[end] > LIMIT.\r\n\t * So for that p, we have (end - i) different choices for q. Since q >= p, all these pairs are unique.\r\n\t * Furthermore, by the fundamental theorem of arithmetic, all the products pq are unique.\r\n\t */\r\n\t@NotNull String run() {\r\n\t\tint count = 0;\r\n\t\tint[] primes = listPrimes(LIMIT / 2);\r\n\t\tfor (int i = 0, sqrt = sqrt(LIMIT); (i < primes.length) && (primes[i] <= sqrt); i++) {\r\n\t\t\tint end = binarySearch(primes, LIMIT / primes[i]);\r\n\t\t\tif (end >= 0) end++;\r\n\t\t\telse end = -end - 1;\r\n\t\t\tcount += end - i;\r\n\t\t}\r\n\t\treturn Integer.toString(count);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p187.java b/Random_Work/src/projectEuler/programs/p187.java
--- a/Random_Work/src/projectEuler/programs/p187.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p187.java	(date 1614915693294)
@@ -2,6 +2,8 @@
 
 import org.jetbrains.annotations.NotNull;
 
+import java.math.BigInteger;
+
 import static java.util.Arrays.binarySearch;
 import static projectEuler.programs.Library.*;
 
@@ -24,7 +26,7 @@
 	@NotNull String run() {
 		int count = 0;
 		int[] primes = listPrimes(LIMIT / 2);
-		for (int i = 0, sqrt = sqrt(LIMIT); (i < primes.length) && (primes[i] <= sqrt); i++) {
+		for (int i = 0, sqrt = sqrt(BigInteger.valueOf(LIMIT)).intValue(); (i < primes.length) && (primes[i] <= sqrt); i++) {
 			int end = binarySearch(primes, LIMIT / primes[i]);
 			if (end >= 0) end++;
 			else end = -end - 1;
Index: Random_Work/src/projectEuler/programs/p093.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Stack;\r\n\r\nimport static java.math.BigInteger.ONE;\r\nimport static java.math.BigInteger.valueOf;\r\nimport static projectEuler.programs.Library.nextPermutation;\r\n\r\npublic final class p093 extends EulerSolution {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p093().run());\r\n\t}\r\n\r\n\t// Assumes 1 <= a < b < c < d <= 9\r\n\tprivate static int longestConsecutive(int a, int b, int c, int d) {\r\n\t\tHashSet<Integer> expressible = new HashSet<>();\r\n\t\t// Try all possible orderings of operands and operators\r\n\t\tint[] ops = {0, 0, 0, a, b, c, d}; // 0 = operator slot, 1 to 9 = literal operand\r\n\t\touter:\r\n\t\tdo {\r\n\t\t\t// Try all possibilities for the 3 operators\r\n\t\t\tinner:\r\n\t\t\tfor (int i = 0; i < 64; i++) {\r\n\t\t\t\tStack<Fraction> stack = new Stack<>();\r\n\t\t\t\tint j = 0; // Operator index\r\n\t\t\t\tfor (int op : ops) {\r\n\t\t\t\t\t// Operand\r\n\t\t\t\t\tif (1 <= op && op <= 9) stack.push(new Fraction(valueOf(op)));\r\n\t\t\t\t\telse if (op == 0) { // Operator\r\n\t\t\t\t\t\tif (stack.size() < 2) continue outer; // Stack underflow; skip this ordering\r\n\t\t\t\t\t\tFraction right = stack.pop();\r\n\t\t\t\t\t\tFraction left = stack.pop();\r\n\t\t\t\t\t\tswitch ((i >>> (j * 2)) & 3) {\r\n\t\t\t\t\t\t\tcase 0:\r\n\t\t\t\t\t\t\t\tstack.push(left.add(right));\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t\t\tstack.push(left.subtract(right));\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 2:\r\n\t\t\t\t\t\t\t\tstack.push(left.multiply(right));\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase 3:\r\n\t\t\t\t\t\t\t\tif (right.numerator.signum() == 0)\r\n\t\t\t\t\t\t\t\t\tcontinue inner; // Division by zero; skip the result for this case\r\n\t\t\t\t\t\t\t\tstack.push(left.divide(right));\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\t\tthrow new AssertionError();\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tj++; // Consume an operator\r\n\t\t\t\t\t} else throw new AssertionError();\r\n\t\t\t\t}\r\n\t\t\t\tif (stack.size() != 1) throw new AssertionError();\r\n\t\t\t\tFraction result = stack.pop();\r\n\t\t\t\tif (result.denominator.equals(ONE)) expressible.add(result.numerator.intValue());\r\n\t\t\t}\r\n\t\t} while (nextPermutation(ops));\r\n\t\t// Find largest set of consecutive expressible integers starting from 1\r\n\t\tfor (int i = 0; ; i++) if (!expressible.contains(i + 1)) return i;\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tint longest = 0;\r\n\t\tint abcd = -1;\r\n\t\tfor (int a = 1; a <= 9; a++)\r\n\t\t\tfor (int b = a + 1; b <= 9; b++)\r\n\t\t\t\tfor (int c = b + 1; c <= 9; c++)\r\n\t\t\t\t\tfor (int d = c + 1; d <= 9; d++) {\r\n\t\t\t\t\t\tint consec = longestConsecutive(a, b, c, d);\r\n\t\t\t\t\t\tif (consec > longest) {\r\n\t\t\t\t\t\t\tlongest = consec;\r\n\t\t\t\t\t\t\tabcd = (a * 1000) + (b * 100) + (c * 10) + d;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\treturn Integer.toString(abcd);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p093.java b/Random_Work/src/projectEuler/programs/p093.java
--- a/Random_Work/src/projectEuler/programs/p093.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p093.java	(date 1614916388131)
@@ -34,22 +34,15 @@
 						Fraction right = stack.pop();
 						Fraction left = stack.pop();
 						switch ((i >>> (j * 2)) & 3) {
-							case 0:
-								stack.push(left.add(right));
-								break;
-							case 1:
-								stack.push(left.subtract(right));
-								break;
-							case 2:
-								stack.push(left.multiply(right));
-								break;
-							case 3:
+							case 0 -> stack.push(left.add(right));
+							case 1 -> stack.push(left.subtract(right));
+							case 2 -> stack.push(left.multiply(right));
+							case 3 -> {
 								if (right.numerator.signum() == 0)
 									continue inner; // Division by zero; skip the result for this case
 								stack.push(left.divide(right));
-								break;
-							default:
-								throw new AssertionError();
+							}
+							default -> throw new AssertionError();
 						}
 						j++; // Consume an operator
 					} else throw new AssertionError();
Index: Random_Work/src/projectEuler/programs/p065.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p065.kt b/Random_Work/src/projectEuler/programs/p065.kt
new file mode 100644
--- /dev/null	(date 1614951977629)
+++ b/Random_Work/src/projectEuler/programs/p065.kt	(date 1614951977629)
@@ -0,0 +1,35 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.math.BigInteger
+
+class p065 : EulerSolution() {
+	override fun run(): String {
+		var n = BigInteger.ONE
+		var d = BigInteger.ZERO
+		for (i in 99 downTo 0) {
+			val temp = BigInteger.valueOf(continuedFractionTerm(i).toLong()).multiply(n).add(d)
+			d = n
+			n = temp
+		}
+		var sum = 0
+		while (n != BigInteger.ZERO) {
+			val divrem = n.divideAndRemainder(BigInteger.TEN)
+			sum += divrem[1].toInt()
+			n = divrem[0]
+		}
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p065().run())
+		}
+
+		@Contract(pure = true)
+		private fun continuedFractionTerm(i: Int): Int {
+			return if (i == 0) 2 else if (i % 3 == 2) i / 3 * 2 + 2 else 1
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p022.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p022.kt b/Random_Work/src/projectEuler/programs/p022.kt
new file mode 100644
--- /dev/null	(date 1614951980409)
+++ b/Random_Work/src/projectEuler/programs/p022.kt	(date 1614951980409)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import java.util.*
+
+class p022 : EulerSolution() {
+	//	Mutable array
+	private val names = arrayOf("MARY", "PATRICIA", "LINDA", "BARBARA", "ELIZABETH", "JENNIFER", "MARIA", "SUSAN", "MARGARET", "DOROTHY", "LISA", "NANCY", "KAREN", "BETTY", "HELEN", "SANDRA", "DONNA", "CAROL", "RUTH", "SHARON", "MICHELLE", "LAURA", "SARAH", "KIMBERLY", "DEBORAH", "JESSICA", "SHIRLEY", "CYNTHIA", "ANGELA", "MELISSA", "BRENDA", "AMY", "ANNA", "REBECCA", "VIRGINIA", "KATHLEEN", "PAMELA", "MARTHA", "DEBRA", "AMANDA", "STEPHANIE", "CAROLYN", "CHRISTINE", "MARIE", "JANET", "CATHERINE", "FRANCES", "ANN", "JOYCE", "DIANE", "ALICE", "JULIE", "HEATHER", "TERESA", "DORIS", "GLORIA", "EVELYN", "JEAN", "CHERYL", "MILDRED", "KATHERINE", "JOAN", "ASHLEY", "JUDITH", "ROSE", "JANICE", "KELLY", "NICOLE", "JUDY", "CHRISTINA", "KATHY", "THERESA", "BEVERLY", "DENISE", "TAMMY", "IRENE", "JANE", "LORI", "RACHEL", "MARILYN", "ANDREA", "KATHRYN", "LOUISE", "SARA", "ANNE", "JACQUELINE", "WANDA", "BONNIE", "JULIA", "RUBY", "LOIS", "TINA", "PHYLLIS", "NORMA", "PAULA", "DIANA", "ANNIE", "LILLIAN", "EMILY", "ROBIN", "PEGGY", "CRYSTAL", "GLADYS", "RITA", "DAWN", "CONNIE", "FLORENCE", "TRACY", "EDNA", "TIFFANY", "CARMEN", "ROSA", "CINDY", "GRACE", "WENDY", "VICTORIA", "EDITH", "KIM", "SHERRY", "SYLVIA", "JOSEPHINE", "THELMA", "SHANNON", "SHEILA", "ETHEL", "ELLEN", "ELAINE", "MARJORIE", "CARRIE", "CHARLOTTE", "MONICA", "ESTHER", "PAULINE", "EMMA", "JUANITA", "ANITA", "RHONDA", "HAZEL", "AMBER", "EVA", "DEBBIE", "APRIL", "LESLIE", "CLARA", "LUCILLE", "JAMIE", "JOANNE", "ELEANOR", "VALERIE", "DANIELLE", "MEGAN", "ALICIA", "SUZANNE", "MICHELE", "GAIL", "BERTHA", "DARLENE", "VERONICA", "JILL", "ERIN", "GERALDINE", "LAUREN", "CATHY", "JOANN", "LORRAINE", "LYNN", "SALLY", "REGINA", "ERICA", "BEATRICE", "DOLORES", "BERNICE", "AUDREY", "YVONNE", "ANNETTE", "JUNE", "SAMANTHA", "MARION", "DANA", "STACY", "ANA", "RENEE", "IDA", "VIVIAN", "ROBERTA", "HOLLY", "BRITTANY", "MELANIE", "LORETTA", "YOLANDA", "JEANETTE", "LAURIE", "KATIE", "KRISTEN", "VANESSA", "ALMA", "SUE", "ELSIE", "BETH", "JEANNE", "VICKI", "CARLA", "TARA", "ROSEMARY", "EILEEN", "TERRI", "GERTRUDE", "LUCY", "TONYA", "ELLA", "STACEY", "WILMA", "GINA", "KRISTIN", "JESSIE", "NATALIE", "AGNES", "VERA", "WILLIE", "CHARLENE", "BESSIE", "DELORES", "MELINDA", "PEARL", "ARLENE", "MAUREEN", "COLLEEN", "ALLISON", "TAMARA", "JOY", "GEORGIA", "CONSTANCE", "LILLIE", "CLAUDIA", "JACKIE", "MARCIA", "TANYA", "NELLIE", "MINNIE", "MARLENE", "HEIDI", "GLENDA", "LYDIA", "VIOLA", "COURTNEY", "MARIAN", "STELLA", "CAROLINE", "DORA", "JO", "VICKIE", "MATTIE", "TERRY", "MAXINE", "IRMA", "MABEL", "MARSHA", "MYRTLE", "LENA", "CHRISTY", "DEANNA", "PATSY", "HILDA", "GWENDOLYN", "JENNIE", "NORA", "MARGIE", "NINA", "CASSANDRA", "LEAH", "PENNY", "KAY", "PRISCILLA", "NAOMI", "CAROLE", "BRANDY", "OLGA", "BILLIE", "DIANNE", "TRACEY", "LEONA", "JENNY", "FELICIA", "SONIA", "MIRIAM", "VELMA", "BECKY", "BOBBIE", "VIOLET", "KRISTINA", "TONI", "MISTY", "MAE", "SHELLY", "DAISY", "RAMONA", "SHERRI", "ERIKA", "KATRINA", "CLAIRE", "LINDSEY", "LINDSAY", "GENEVA", "GUADALUPE", "BELINDA", "MARGARITA", "SHERYL", "CORA", "FAYE", "ADA", "NATASHA", "SABRINA", "ISABEL", "MARGUERITE", "HATTIE", "HARRIET", "MOLLY", "CECILIA", "KRISTI", "BRANDI", "BLANCHE", "SANDY", "ROSIE", "JOANNA", "IRIS", "EUNICE", "ANGIE", "INEZ", "LYNDA", "MADELINE", "AMELIA", "ALBERTA", "GENEVIEVE", "MONIQUE", "JODI", "JANIE", "MAGGIE", "KAYLA", "SONYA", "JAN", "LEE", "KRISTINE", "CANDACE", "FANNIE", "MARYANN", "OPAL", "ALISON", "YVETTE", "MELODY", "LUZ", "SUSIE", "OLIVIA", "FLORA", "SHELLEY", "KRISTY", "MAMIE", "LULA", "LOLA", "VERNA", "BEULAH", "ANTOINETTE", "CANDICE", "JUANA", "JEANNETTE", "PAM", "KELLI", "HANNAH", "WHITNEY", "BRIDGET", "KARLA", "CELIA", "LATOYA", "PATTY", "SHELIA", "GAYLE", "DELLA", "VICKY", "LYNNE", "SHERI", "MARIANNE", "KARA", "JACQUELYN", "ERMA", "BLANCA", "MYRA", "LETICIA", "PAT", "KRISTA", "ROXANNE", "ANGELICA", "JOHNNIE", "ROBYN", "FRANCIS", "ADRIENNE", "ROSALIE", "ALEXANDRA", "BROOKE", "BETHANY", "SADIE", "BERNADETTE", "TRACI", "JODY", "KENDRA", "JASMINE", "NICHOLE", "RACHAEL", "CHELSEA", "MABLE", "ERNESTINE", "MURIEL", "MARCELLA", "ELENA", "KRYSTAL", "ANGELINA", "NADINE", "KARI", "ESTELLE", "DIANNA", "PAULETTE", "LORA", "MONA", "DOREEN", "ROSEMARIE", "ANGEL", "DESIREE", "ANTONIA", "HOPE", "GINGER", "JANIS", "BETSY", "CHRISTIE", "FREDA", "MERCEDES", "MEREDITH", "LYNETTE", "TERI", "CRISTINA", "EULA", "LEIGH", "MEGHAN", "SOPHIA", "ELOISE", "ROCHELLE", "GRETCHEN", "CECELIA", "RAQUEL", "HENRIETTA", "ALYSSA", "JANA", "KELLEY", "GWEN", "KERRY", "JENNA", "TRICIA", "LAVERNE", "OLIVE", "ALEXIS", "TASHA", "SILVIA", "ELVIRA", "CASEY", "DELIA", "SOPHIE", "KATE", "PATTI", "LORENA", "KELLIE", "SONJA", "LILA", "LANA", "DARLA", "MAY", "MINDY", "ESSIE", "MANDY", "LORENE", "ELSA", "JOSEFINA", "JEANNIE", "MIRANDA", "DIXIE", "LUCIA", "MARTA", "FAITH", "LELA", "JOHANNA", "SHARI", "CAMILLE", "TAMI", "SHAWNA", "ELISA", "EBONY", "MELBA", "ORA", "NETTIE", "TABITHA", "OLLIE", "JAIME", "WINIFRED", "KRISTIE", "MARINA", "ALISHA", "AIMEE", "RENA", "MYRNA", "MARLA", "TAMMIE", "LATASHA", "BONITA", "PATRICE", "RONDA", "SHERRIE", "ADDIE", "FRANCINE", "DELORIS", "STACIE", "ADRIANA", "CHERI", "SHELBY", "ABIGAIL", "CELESTE", "JEWEL", "CARA", "ADELE", "REBEKAH", "LUCINDA", "DORTHY", "CHRIS", "EFFIE", "TRINA", "REBA", "SHAWN", "SALLIE", "AURORA", "LENORA", "ETTA", "LOTTIE", "KERRI", "TRISHA", "NIKKI", "ESTELLA", "FRANCISCA", "JOSIE", "TRACIE", "MARISSA", "KARIN", "BRITTNEY", "JANELLE", "LOURDES", "LAUREL", "HELENE", "FERN", "ELVA", "CORINNE", "KELSEY", "INA", "BETTIE", "ELISABETH", "AIDA", "CAITLIN", "INGRID", "IVA", "EUGENIA", "CHRISTA", "GOLDIE", "CASSIE", "MAUDE", "JENIFER", "THERESE", "FRANKIE", "DENA", "LORNA", "JANETTE", "LATONYA", "CANDY", "MORGAN", "CONSUELO", "TAMIKA", "ROSETTA", "DEBORA", "CHERIE", "POLLY", "DINA", "JEWELL", "FAY", "JILLIAN", "DOROTHEA", "NELL", "TRUDY", "ESPERANZA", "PATRICA", "KIMBERLEY", "SHANNA", "HELENA", "CAROLINA", "CLEO", "STEFANIE", "ROSARIO", "OLA", "JANINE", "MOLLIE", "LUPE", "ALISA", "LOU", "MARIBEL", "SUSANNE", "BETTE", "SUSANA", "ELISE", "CECILE", "ISABELLE", "LESLEY", "JOCELYN", "PAIGE", "JONI", "RACHELLE", "LEOLA", "DAPHNE", "ALTA", "ESTER", "PETRA", "GRACIELA", "IMOGENE", "JOLENE", "KEISHA", "LACEY", "GLENNA", "GABRIELA", "KERI", "URSULA", "LIZZIE", "KIRSTEN", "SHANA", "ADELINE", "MAYRA", "JAYNE", "JACLYN", "GRACIE", "SONDRA", "CARMELA", "MARISA", "ROSALIND", "CHARITY", "TONIA", "BEATRIZ", "MARISOL", "CLARICE", "JEANINE", "SHEENA", "ANGELINE", "FRIEDA", "LILY", "ROBBIE", "SHAUNA", "MILLIE", "CLAUDETTE", "CATHLEEN", "ANGELIA", "GABRIELLE", "AUTUMN", "KATHARINE", "SUMMER", "JODIE", "STACI", "LEA", "CHRISTI", "JIMMIE", "JUSTINE", "ELMA", "LUELLA", "MARGRET", "DOMINIQUE", "SOCORRO", "RENE", "MARTINA", "MARGO", "MAVIS", "CALLIE", "BOBBI", "MARITZA", "LUCILE", "LEANNE", "JEANNINE", "DEANA", "AILEEN", "LORIE", "LADONNA", "WILLA", "MANUELA", "GALE", "SELMA", "DOLLY", "SYBIL", "ABBY", "LARA", "DALE", "IVY", "DEE", "WINNIE", "MARCY", "LUISA", "JERI", "MAGDALENA", "OFELIA", "MEAGAN", "AUDRA", "MATILDA", "LEILA", "CORNELIA", "BIANCA", "SIMONE", "BETTYE", "RANDI", "VIRGIE", "LATISHA", "BARBRA", "GEORGINA", "ELIZA", "LEANN", "BRIDGETTE", "RHODA", "HALEY", "ADELA", "NOLA", "BERNADINE", "FLOSSIE", "ILA", "GRETA", "RUTHIE", "NELDA", "MINERVA", "LILLY", "TERRIE", "LETHA", "HILARY", "ESTELA", "VALARIE", "BRIANNA", "ROSALYN", "EARLINE", "CATALINA", "AVA", "MIA", "CLARISSA", "LIDIA", "CORRINE", "ALEXANDRIA", "CONCEPCION", "TIA", "SHARRON", "RAE", "DONA", "ERICKA", "JAMI", "ELNORA", "CHANDRA", "LENORE", "NEVA", "MARYLOU", "MELISA", "TABATHA", "SERENA", "AVIS", "ALLIE", "SOFIA", "JEANIE", "ODESSA", "NANNIE", "HARRIETT", "LORAINE", "PENELOPE", "MILAGROS", "EMILIA", "BENITA", "ALLYSON", "ASHLEE", "TANIA", "TOMMIE", "ESMERALDA", "KARINA", "EVE", "PEARLIE", "ZELMA", "MALINDA", "NOREEN", "TAMEKA", "SAUNDRA", "HILLARY", "AMIE", "ALTHEA", "ROSALINDA", "JORDAN", "LILIA", "ALANA", "GAY", "CLARE", "ALEJANDRA", "ELINOR", "MICHAEL", "LORRIE", "JERRI", "DARCY", "EARNESTINE", "CARMELLA", "TAYLOR", "NOEMI", "MARCIE", "LIZA", "ANNABELLE", "LOUISA", "EARLENE", "MALLORY", "CARLENE", "NITA", "SELENA", "TANISHA", "KATY", "JULIANNE", "JOHN", "LAKISHA", "EDWINA", "MARICELA", "MARGERY", "KENYA", "DOLLIE", "ROXIE", "ROSLYN", "KATHRINE", "NANETTE", "CHARMAINE", "LAVONNE", "ILENE", "KRIS", "TAMMI", "SUZETTE", "CORINE", "KAYE", "JERRY", "MERLE", "CHRYSTAL", "LINA", "DEANNE", "LILIAN", "JULIANA", "ALINE", "LUANN", "KASEY", "MARYANNE", "EVANGELINE", "COLETTE", "MELVA", "LAWANDA", "YESENIA", "NADIA", "MADGE", "KATHIE", "EDDIE", "OPHELIA", "VALERIA", "NONA", "MITZI", "MARI", "GEORGETTE", "CLAUDINE", "FRAN", "ALISSA", "ROSEANN", "LAKEISHA", "SUSANNA", "REVA", "DEIDRE", "CHASITY", "SHEREE", "CARLY", "JAMES", "ELVIA", "ALYCE", "DEIRDRE", "GENA", "BRIANA", "ARACELI", "KATELYN", "ROSANNE", "WENDI", "TESSA", "BERTA", "MARVA", "IMELDA", "MARIETTA", "MARCI", "LEONOR", "ARLINE", "SASHA", "MADELYN", "JANNA", "JULIETTE", "DEENA", "AURELIA", "JOSEFA", "AUGUSTA", "LILIANA", "YOUNG", "CHRISTIAN", "LESSIE", "AMALIA", "SAVANNAH", "ANASTASIA", "VILMA", "NATALIA", "ROSELLA", "LYNNETTE", "CORINA", "ALFREDA", "LEANNA", "CAREY", "AMPARO", "COLEEN", "TAMRA", "AISHA", "WILDA", "KARYN", "CHERRY", "QUEEN", "MAURA", "MAI", "EVANGELINA", "ROSANNA", "HALLIE", "ERNA", "ENID", "MARIANA", "LACY", "JULIET", "JACKLYN", "FREIDA", "MADELEINE", "MARA", "HESTER", "CATHRYN", "LELIA", "CASANDRA", "BRIDGETT", "ANGELITA", "JANNIE", "DIONNE", "ANNMARIE", "KATINA", "BERYL", "PHOEBE", "MILLICENT", "KATHERYN", "DIANN", "CARISSA", "MARYELLEN", "LIZ", "LAURI", "HELGA", "GILDA", "ADRIAN", "RHEA", "MARQUITA", "HOLLIE", "TISHA", "TAMERA", "ANGELIQUE", "FRANCESCA", "BRITNEY", "KAITLIN", "LOLITA", "FLORINE", "ROWENA", "REYNA", "TWILA", "FANNY", "JANELL", "INES", "CONCETTA", "BERTIE", "ALBA", "BRIGITTE", "ALYSON", "VONDA", "PANSY", "ELBA", "NOELLE", "LETITIA", "KITTY", "DEANN", "BRANDIE", "LOUELLA", "LETA", "FELECIA", "SHARLENE", "LESA", "BEVERLEY", "ROBERT", "ISABELLA", "HERMINIA", "TERRA", "CELINA", "TORI", "OCTAVIA", "JADE", "DENICE", "GERMAINE", "SIERRA", "MICHELL", "CORTNEY", "NELLY", "DORETHA", "SYDNEY", "DEIDRA", "MONIKA", "LASHONDA", "JUDI", "CHELSEY", "ANTIONETTE", "MARGOT", "BOBBY", "ADELAIDE", "NAN", "LEEANN", "ELISHA", "DESSIE", "LIBBY", "KATHI", "GAYLA", "LATANYA", "MINA", "MELLISA", "KIMBERLEE", "JASMIN", "RENAE", "ZELDA", "ELDA", "MA", "JUSTINA", "GUSSIE", "EMILIE", "CAMILLA", "ABBIE", "ROCIO", "KAITLYN", "JESSE", "EDYTHE", "ASHLEIGH", "SELINA", "LAKESHA", "GERI", "ALLENE", "PAMALA", "MICHAELA", "DAYNA", "CARYN", "ROSALIA", "SUN", "JACQULINE", "REBECA", "MARYBETH", "KRYSTLE", "IOLA", "DOTTIE", "BENNIE", "BELLE", "AUBREY", "GRISELDA", "ERNESTINA", "ELIDA", "ADRIANNE", "DEMETRIA", "DELMA", "CHONG", "JAQUELINE", "DESTINY", "ARLEEN", "VIRGINA", "RETHA", "FATIMA", "TILLIE", "ELEANORE", "CARI", "TREVA", "BIRDIE", "WILHELMINA", "ROSALEE", "MAURINE", "LATRICE", "YONG", "JENA", "TARYN", "ELIA", "DEBBY", "MAUDIE", "JEANNA", "DELILAH", "CATRINA", "SHONDA", "HORTENCIA", "THEODORA", "TERESITA", "ROBBIN", "DANETTE", "MARYJANE", "FREDDIE", "DELPHINE", "BRIANNE", "NILDA", "DANNA", "CINDI", "BESS", "IONA", "HANNA", "ARIEL", "WINONA", "VIDA", "ROSITA", "MARIANNA", "WILLIAM", "RACHEAL", "GUILLERMINA", "ELOISA", "CELESTINE", "CAREN", "MALISSA", "LONA", "CHANTEL", "SHELLIE", "MARISELA", "LEORA", "AGATHA", "SOLEDAD", "MIGDALIA", "IVETTE", "CHRISTEN", "ATHENA", "JANEL", "CHLOE", "VEDA", "PATTIE", "TESSIE", "TERA", "MARILYNN", "LUCRETIA", "KARRIE", "DINAH", "DANIELA", "ALECIA", "ADELINA", "VERNICE", "SHIELA", "PORTIA", "MERRY", "LASHAWN", "DEVON", "DARA", "TAWANA", "OMA", "VERDA", "CHRISTIN", "ALENE", "ZELLA", "SANDI", "RAFAELA", "MAYA", "KIRA", "CANDIDA", "ALVINA", "SUZAN", "SHAYLA", "LYN", "LETTIE", "ALVA", "SAMATHA", "ORALIA", "MATILDE", "MADONNA", "LARISSA", "VESTA", "RENITA", "INDIA", "DELOIS", "SHANDA", "PHILLIS", "LORRI", "ERLINDA", "CRUZ", "CATHRINE", "BARB", "ZOE", "ISABELL", "IONE", "GISELA", "CHARLIE", "VALENCIA", "ROXANNA", "MAYME", "KISHA", "ELLIE", "MELLISSA", "DORRIS", "DALIA", "BELLA", "ANNETTA", "ZOILA", "RETA", "REINA", "LAURETTA", "KYLIE", "CHRISTAL", "PILAR", "CHARLA", "ELISSA", "TIFFANI", "TANA", "PAULINA", "LEOTA", "BREANNA", "JAYME", "CARMEL", "VERNELL", "TOMASA", "MANDI", "DOMINGA", "SANTA", "MELODIE", "LURA", "ALEXA", "TAMELA", "RYAN", "MIRNA", "KERRIE", "VENUS", "NOEL", "FELICITA", "CRISTY", "CARMELITA", "BERNIECE", "ANNEMARIE", "TIARA", "ROSEANNE", "MISSY", "CORI", "ROXANA", "PRICILLA", "KRISTAL", "JUNG", "ELYSE", "HAYDEE", "ALETHA", "BETTINA", "MARGE", "GILLIAN", "FILOMENA", "CHARLES", "ZENAIDA", "HARRIETTE", "CARIDAD", "VADA", "UNA", "ARETHA", "PEARLINE", "MARJORY", "MARCELA", "FLOR", "EVETTE", "ELOUISE", "ALINA", "TRINIDAD", "DAVID", "DAMARIS", "CATHARINE", "CARROLL", "BELVA", "NAKIA", "MARLENA", "LUANNE", "LORINE", "KARON", "DORENE", "DANITA", "BRENNA", "TATIANA", "SAMMIE", "LOUANN", "LOREN", "JULIANNA", "ANDRIA", "PHILOMENA", "LUCILA", "LEONORA", "DOVIE", "ROMONA", "MIMI", "JACQUELIN", "GAYE", "TONJA", "MISTI", "JOE", "GENE", "CHASTITY", "STACIA", "ROXANN", "MICAELA", "NIKITA", "MEI", "VELDA", "MARLYS", "JOHNNA", "AURA", "LAVERN", "IVONNE", "HAYLEY", "NICKI", "MAJORIE", "HERLINDA", "GEORGE", "ALPHA", "YADIRA", "PERLA", "GREGORIA", "DANIEL", "ANTONETTE", "SHELLI", "MOZELLE", "MARIAH", "JOELLE", "CORDELIA", "JOSETTE", "CHIQUITA", "TRISTA", "LOUIS", "LAQUITA", "GEORGIANA", "CANDI", "SHANON", "LONNIE", "HILDEGARD", "CECIL", "VALENTINA", "STEPHANY", "MAGDA", "KAROL", "GERRY", "GABRIELLA", "TIANA", "ROMA", "RICHELLE", "RAY", "PRINCESS", "OLETA", "JACQUE", "IDELLA", "ALAINA", "SUZANNA", "JOVITA", "BLAIR", "TOSHA", "RAVEN", "NEREIDA", "MARLYN", "KYLA", "JOSEPH", "DELFINA", "TENA", "STEPHENIE", "SABINA", "NATHALIE", "MARCELLE", "GERTIE", "DARLEEN", "THEA", "SHARONDA", "SHANTEL", "BELEN", "VENESSA", "ROSALINA", "ONA", "GENOVEVA", "COREY", "CLEMENTINE", "ROSALBA", "RENATE", "RENATA", "MI", "IVORY", "GEORGIANNA", "FLOY", "DORCAS", "ARIANA", "TYRA", "THEDA", "MARIAM", "JULI", "JESICA", "DONNIE", "VIKKI", "VERLA", "ROSELYN", "MELVINA", "JANNETTE", "GINNY", "DEBRAH", "CORRIE", "ASIA", "VIOLETA", "MYRTIS", "LATRICIA", "COLLETTE", "CHARLEEN", "ANISSA", "VIVIANA", "TWYLA", "PRECIOUS", "NEDRA", "LATONIA", "LAN", "HELLEN", "FABIOLA", "ANNAMARIE", "ADELL", "SHARYN", "CHANTAL", "NIKI", "MAUD", "LIZETTE", "LINDY", "KIA", "KESHA", "JEANA", "DANELLE", "CHARLINE", "CHANEL", "CARROL", "VALORIE", "LIA", "DORTHA", "CRISTAL", "SUNNY", "LEONE", "LEILANI", "GERRI", "DEBI", "ANDRA", "KESHIA", "IMA", "EULALIA", "EASTER", "DULCE", "NATIVIDAD", "LINNIE", "KAMI", "GEORGIE", "CATINA", "BROOK", "ALDA", "WINNIFRED", "SHARLA", "RUTHANN", "MEAGHAN", "MAGDALENE", "LISSETTE", "ADELAIDA", "VENITA", "TRENA", "SHIRLENE", "SHAMEKA", "ELIZEBETH", "DIAN", "SHANTA", "MICKEY", "LATOSHA", "CARLOTTA", "WINDY", "SOON", "ROSINA", "MARIANN", "LEISA", "JONNIE", "DAWNA", "CATHIE", "BILLY", "ASTRID", "SIDNEY", "LAUREEN", "JANEEN", "HOLLI", "FAWN", "VICKEY", "TERESSA", "SHANTE", "RUBYE", "MARCELINA", "CHANDA", "CARY", "TERESE", "SCARLETT", "MARTY", "MARNIE", "LULU", "LISETTE", "JENIFFER", "ELENOR", "DORINDA", "DONITA", "CARMAN", "BERNITA", "ALTAGRACIA", "ALETA", "ADRIANNA", "ZORAIDA", "RONNIE", "NICOLA", "LYNDSEY", "KENDALL", "JANINA", "CHRISSY", "AMI", "STARLA", "PHYLIS", "PHUONG", "KYRA", "CHARISSE", "BLANCH", "SANJUANITA", "RONA", "NANCI", "MARILEE", "MARANDA", "CORY", "BRIGETTE", "SANJUANA", "MARITA", "KASSANDRA", "JOYCELYN", "IRA", "FELIPA", "CHELSIE", "BONNY", "MIREYA", "LORENZA", "KYONG", "ILEANA", "CANDELARIA", "TONY", "TOBY", "SHERIE", "OK", "MARK", "LUCIE", "LEATRICE", "LAKESHIA", "GERDA", "EDIE", "BAMBI", "MARYLIN", "LAVON", "HORTENSE", "GARNET", "EVIE", "TRESSA", "SHAYNA", "LAVINA", "KYUNG", "JEANETTA", "SHERRILL", "SHARA", "PHYLISS", "MITTIE", "ANABEL", "ALESIA", "THUY", "TAWANDA", "RICHARD", "JOANIE", "TIFFANIE", "LASHANDA", "KARISSA", "ENRIQUETA", "DARIA", "DANIELLA", "CORINNA", "ALANNA", "ABBEY", "ROXANE", "ROSEANNA", "MAGNOLIA", "LIDA", "KYLE", "JOELLEN", "ERA", "CORAL", "CARLEEN", "TRESA", "PEGGIE", "NOVELLA", "NILA", "MAYBELLE", "JENELLE", "CARINA", "NOVA", "MELINA", "MARQUERITE", "MARGARETTE", "JOSEPHINA", "EVONNE", "DEVIN", "CINTHIA", "ALBINA", "TOYA", "TAWNYA", "SHERITA", "SANTOS", "MYRIAM", "LIZABETH", "LISE", "KEELY", "JENNI", "GISELLE", "CHERYLE", "ARDITH", "ARDIS", "ALESHA", "ADRIANE", "SHAINA", "LINNEA", "KAROLYN", "HONG", "FLORIDA", "FELISHA", "DORI", "DARCI", "ARTIE", "ARMIDA", "ZOLA", "XIOMARA", "VERGIE", "SHAMIKA", "NENA", "NANNETTE", "MAXIE", "LOVIE", "JEANE", "JAIMIE", "INGE", "FARRAH", "ELAINA", "CAITLYN", "STARR", "FELICITAS", "CHERLY", "CARYL", "YOLONDA", "YASMIN", "TEENA", "PRUDENCE", "PENNIE", "NYDIA", "MACKENZIE", "ORPHA", "MARVEL", "LIZBETH", "LAURETTE", "JERRIE", "HERMELINDA", "CAROLEE", "TIERRA", "MIRIAN", "META", "MELONY", "KORI", "JENNETTE", "JAMILA", "ENA", "ANH", "YOSHIKO", "SUSANNAH", "SALINA", "RHIANNON", "JOLEEN", "CRISTINE", "ASHTON", "ARACELY", "TOMEKA", "SHALONDA", "MARTI", "LACIE", "KALA", "JADA", "ILSE", "HAILEY", "BRITTANI", "ZONA", "SYBLE", "SHERRYL", "RANDY", "NIDIA", "MARLO", "KANDICE", "KANDI", "DEB", "DEAN", "AMERICA", "ALYCIA", "TOMMY", "RONNA", "NORENE", "MERCY", "JOSE", "INGEBORG", "GIOVANNA", "GEMMA", "CHRISTEL", "AUDRY", "ZORA", "VITA", "VAN", "TRISH", "STEPHAINE", "SHIRLEE", "SHANIKA", "MELONIE", "MAZIE", "JAZMIN", "INGA", "HOA", "HETTIE", "GERALYN", "FONDA", "ESTRELLA", "ADELLA", "SU", "SARITA", "RINA", "MILISSA", "MARIBETH", "GOLDA", "EVON", "ETHELYN", "ENEDINA", "CHERISE", "CHANA", "VELVA", "TAWANNA", "SADE", "MIRTA", "LI", "KARIE", "JACINTA", "ELNA", "DAVINA", "CIERRA", "ASHLIE", "ALBERTHA", "TANESHA", "STEPHANI", "NELLE", "MINDI", "LU", "LORINDA", "LARUE", "FLORENE", "DEMETRA", "DEDRA", "CIARA", "CHANTELLE", "ASHLY", "SUZY", "ROSALVA", "NOELIA", "LYDA", "LEATHA", "KRYSTYNA", "KRISTAN", "KARRI", "DARLINE", "DARCIE", "CINDA", "CHEYENNE", "CHERRIE", "AWILDA", "ALMEDA", "ROLANDA", "LANETTE", "JERILYN", "GISELE", "EVALYN", "CYNDI", "CLETA", "CARIN", "ZINA", "ZENA", "VELIA", "TANIKA", "PAUL", "CHARISSA", "THOMAS", "TALIA", "MARGARETE", "LAVONDA", "KAYLEE", "KATHLENE", "JONNA", "IRENA", "ILONA", "IDALIA", "CANDIS", "CANDANCE", "BRANDEE", "ANITRA", "ALIDA", "SIGRID", "NICOLETTE", "MARYJO", "LINETTE", "HEDWIG", "CHRISTIANA", "CASSIDY", "ALEXIA", "TRESSIE", "MODESTA", "LUPITA", "LITA", "GLADIS", "EVELIA", "DAVIDA", "CHERRI", "CECILY", "ASHELY", "ANNABEL", "AGUSTINA", "WANITA", "SHIRLY", "ROSAURA", "HULDA", "EUN", "BAILEY", "YETTA", "VERONA", "THOMASINA", "SIBYL", "SHANNAN", "MECHELLE", "LUE", "LEANDRA", "LANI", "KYLEE", "KANDY", "JOLYNN", "FERNE", "EBONI", "CORENE", "ALYSIA", "ZULA", "NADA", "MOIRA", "LYNDSAY", "LORRETTA", "JUAN", "JAMMIE", "HORTENSIA", "GAYNELL", "CAMERON", "ADRIA", "VINA", "VICENTA", "TANGELA", "STEPHINE", "NORINE", "NELLA", "LIANA", "LESLEE", "KIMBERELY", "ILIANA", "GLORY", "FELICA", "EMOGENE", "ELFRIEDE", "EDEN", "EARTHA", "CARMA", "BEA", "OCIE", "MARRY", "LENNIE", "KIARA", "JACALYN", "CARLOTA", "ARIELLE", "YU", "STAR", "OTILIA", "KIRSTIN", "KACEY", "JOHNETTA", "JOEY", "JOETTA", "JERALDINE", "JAUNITA", "ELANA", "DORTHEA", "CAMI", "AMADA", "ADELIA", "VERNITA", "TAMAR", "SIOBHAN", "RENEA", "RASHIDA", "OUIDA", "ODELL", "NILSA", "MERYL", "KRISTYN", "JULIETA", "DANICA", "BREANNE", "AUREA", "ANGLEA", "SHERRON", "ODETTE", "MALIA", "LORELEI", "LIN", "LEESA", "KENNA", "KATHLYN", "FIONA", "CHARLETTE", "SUZIE", "SHANTELL", "SABRA", "RACQUEL", "MYONG", "MIRA", "MARTINE", "LUCIENNE", "LAVADA", "JULIANN", "JOHNIE", "ELVERA", "DELPHIA", "CLAIR", "CHRISTIANE", "CHAROLETTE", "CARRI", "AUGUSTINE", "ASHA", "ANGELLA", "PAOLA", "NINFA", "LEDA", "LAI", "EDA", "SUNSHINE", "STEFANI", "SHANELL", "PALMA", "MACHELLE", "LISSA", "KECIA", "KATHRYNE", "KARLENE", "JULISSA", "JETTIE", "JENNIFFER", "HUI", "CORRINA", "CHRISTOPHER", "CAROLANN", "ALENA", "TESS", "ROSARIA", "MYRTICE", "MARYLEE", "LIANE", "KENYATTA", "JUDIE", "JANEY", "IN", "ELMIRA", "ELDORA", "DENNA", "CRISTI", "CATHI", "ZAIDA", "VONNIE", "VIVA", "VERNIE", "ROSALINE", "MARIELA", "LUCIANA", "LESLI", "KARAN", "FELICE", "DENEEN", "ADINA", "WYNONA", "TARSHA", "SHERON", "SHASTA", "SHANITA", "SHANI", "SHANDRA", "RANDA", "PINKIE", "PARIS", "NELIDA", "MARILOU", "LYLA", "LAURENE", "LACI", "JOI", "JANENE", "DOROTHA", "DANIELE", "DANI", "CAROLYNN", "CARLYN", "BERENICE", "AYESHA", "ANNELIESE", "ALETHEA", "THERSA", "TAMIKO", "RUFINA", "OLIVA", "MOZELL", "MARYLYN", "MADISON", "KRISTIAN", "KATHYRN", "KASANDRA", "KANDACE", "JANAE", "GABRIEL", "DOMENICA", "DEBBRA", "DANNIELLE", "CHUN", "BUFFY", "BARBIE", "ARCELIA", "AJA", "ZENOBIA", "SHAREN", "SHAREE", "PATRICK", "PAGE", "MY", "LAVINIA", "KUM", "KACIE", "JACKELINE", "HUONG", "FELISA", "EMELIA", "ELEANORA", "CYTHIA", "CRISTIN", "CLYDE", "CLARIBEL", "CARON", "ANASTACIA", "ZULMA", "ZANDRA", "YOKO", "TENISHA", "SUSANN", "SHERILYN", "SHAY", "SHAWANDA", "SABINE", "ROMANA", "MATHILDA", "LINSEY", "KEIKO", "JOANA", "ISELA", "GRETTA", "GEORGETTA", "EUGENIE", "DUSTY", "DESIRAE", "DELORA", "CORAZON", "ANTONINA", "ANIKA", "WILLENE", "TRACEE", "TAMATHA", "REGAN", "NICHELLE", "MICKIE", "MAEGAN", "LUANA", "LANITA", "KELSIE", "EDELMIRA", "BREE", "AFTON", "TEODORA", "TAMIE", "SHENA", "MEG", "LINH", "KELI", "KACI", "DANYELLE", "BRITT", "ARLETTE", "ALBERTINE", "ADELLE", "TIFFINY", "STORMY", "SIMONA", "NUMBERS", "NICOLASA", "NICHOL", "NIA", "NAKISHA", "MEE", "MAIRA", "LOREEN", "KIZZY", "JOHNNY", "JAY", "FALLON", "CHRISTENE", "BOBBYE", "ANTHONY", "YING", "VINCENZA", "TANJA", "RUBIE", "RONI", "QUEENIE", "MARGARETT", "KIMBERLI", "IRMGARD", "IDELL", "HILMA", "EVELINA", "ESTA", "EMILEE", "DENNISE", "DANIA", "CARL", "CARIE", "ANTONIO", "WAI", "SANG", "RISA", "RIKKI", "PARTICIA", "MUI", "MASAKO", "MARIO", "LUVENIA", "LOREE", "LONI", "LIEN", "KEVIN", "GIGI", "FLORENCIA", "DORIAN", "DENITA", "DALLAS", "CHI", "BILLYE", "ALEXANDER", "TOMIKA", "SHARITA", "RANA", "NIKOLE", "NEOMA", "MARGARITE", "MADALYN", "LUCINA", "LAILA", "KALI", "JENETTE", "GABRIELE", "EVELYNE", "ELENORA", "CLEMENTINA", "ALEJANDRINA", "ZULEMA", "VIOLETTE", "VANNESSA", "THRESA", "RETTA", "PIA", "PATIENCE", "NOELLA", "NICKIE", "JONELL", "DELTA", "CHUNG", "CHAYA", "CAMELIA", "BETHEL", "ANYA", "ANDREW", "THANH", "SUZANN", "SPRING", "SHU", "MILA", "LILLA", "LAVERNA", "KEESHA", "KATTIE", "GIA", "GEORGENE", "EVELINE", "ESTELL", "ELIZBETH", "VIVIENNE", "VALLIE", "TRUDIE", "STEPHANE", "MICHEL", "MAGALY", "MADIE", "KENYETTA", "KARREN", "JANETTA", "HERMINE", "HARMONY", "DRUCILLA", "DEBBI", "CELESTINA", "CANDIE", "BRITNI", "BECKIE", "AMINA", "ZITA", "YUN", "YOLANDE", "VIVIEN", "VERNETTA", "TRUDI", "SOMMER", "PEARLE", "PATRINA", "OSSIE", "NICOLLE", "LOYCE", "LETTY", "LARISA", "KATHARINA", "JOSELYN", "JONELLE", "JENELL", "IESHA", "HEIDE", "FLORINDA", "FLORENTINA", "FLO", "ELODIA", "DORINE", "BRUNILDA", "BRIGID", "ASHLI", "ARDELLA", "TWANA", "THU", "TARAH", "SUNG", "SHEA", "SHAVON", "SHANE", "SERINA", "RAYNA", "RAMONITA", "NGA", "MARGURITE", "LUCRECIA", "KOURTNEY", "KATI", "JESUS", "JESENIA", "DIAMOND", "CRISTA", "AYANA", "ALICA", "ALIA", "VINNIE", "SUELLEN", "ROMELIA", "RACHELL", "PIPER", "OLYMPIA", "MICHIKO", "KATHALEEN", "JOLIE", "JESSI", "JANESSA", "HANA", "HA", "ELEASE", "CARLETTA", "BRITANY", "SHONA", "SALOME", "ROSAMOND", "REGENA", "RAINA", "NGOC", "NELIA", "LOUVENIA", "LESIA", "LATRINA", "LATICIA", "LARHONDA", "JINA", "JACKI", "HOLLIS", "HOLLEY", "EMMY", "DEEANN", "CORETTA", "ARNETTA", "VELVET", "THALIA", "SHANICE", "NETA", "MIKKI", "MICKI", "LONNA", "LEANA", "LASHUNDA", "KILEY", "JOYE", "JACQULYN", "IGNACIA", "HYUN", "HIROKO", "HENRY", "HENRIETTE", "ELAYNE", "DELINDA", "DARNELL", "DAHLIA", "COREEN", "CONSUELA", "CONCHITA", "CELINE", "BABETTE", "AYANNA", "ANETTE", "ALBERTINA", "SKYE", "SHAWNEE", "SHANEKA", "QUIANA", "PAMELIA", "MIN", "MERRI", "MERLENE", "MARGIT", "KIESHA", "KIERA", "KAYLENE", "JODEE", "JENISE", "ERLENE", "EMMIE", "ELSE", "DARYL", "DALILA", "DAISEY", "CODY", "CASIE", "BELIA", "BABARA", "VERSIE", "VANESA", "SHELBA", "SHAWNDA", "SAM", "NORMAN", "NIKIA", "NAOMA", "MARNA", "MARGERET", "MADALINE", "LAWANA", "KINDRA", "JUTTA", "JAZMINE", "JANETT", "HANNELORE", "GLENDORA", "GERTRUD", "GARNETT", "FREEDA", "FREDERICA", "FLORANCE", "FLAVIA", "DENNIS", "CARLINE", "BEVERLEE", "ANJANETTE", "VALDA", "TRINITY", "TAMALA", "STEVIE", "SHONNA", "SHA", "SARINA", "ONEIDA", "MICAH", "MERILYN", "MARLEEN", "LURLINE", "LENNA", "KATHERIN", "JIN", "JENI", "HAE", "GRACIA", "GLADY", "FARAH", "ERIC", "ENOLA", "EMA", "DOMINQUE", "DEVONA", "DELANA", "CECILA", "CAPRICE", "ALYSHA", "ALI", "ALETHIA", "VENA", "THERESIA", "TAWNY", "SONG", "SHAKIRA", "SAMARA", "SACHIKO", "RACHELE", "PAMELLA", "NICKY", "MARNI", "MARIEL", "MAREN", "MALISA", "LIGIA", "LERA", "LATORIA", "LARAE", "KIMBER", "KATHERN", "KAREY", "JENNEFER", "JANETH", "HALINA", "FREDIA", "DELISA", "DEBROAH", "CIERA", "CHIN", "ANGELIKA", "ANDREE", "ALTHA", "YEN", "VIVAN", "TERRESA", "TANNA", "SUK", "SUDIE", "SOO", "SIGNE", "SALENA", "RONNI", "REBBECCA", "MYRTIE", "MCKENZIE", "MALIKA", "MAIDA", "LOAN", "LEONARDA", "KAYLEIGH", "FRANCE", "ETHYL", "ELLYN", "DAYLE", "CAMMIE", "BRITTNI", "BIRGIT", "AVELINA", "ASUNCION", "ARIANNA", "AKIKO", "VENICE", "TYESHA", "TONIE", "TIESHA", "TAKISHA", "STEFFANIE", "SINDY", "SANTANA", "MEGHANN", "MANDA", "MACIE", "LADY", "KELLYE", "KELLEE", "JOSLYN", "JASON", "INGER", "INDIRA", "GLINDA", "GLENNIS", "FERNANDA", "FAUSTINA", "ENEIDA", "ELICIA", "DOT", "DIGNA", "DELL", "ARLETTA", "ANDRE", "WILLIA", "TAMMARA", "TABETHA", "SHERRELL", "SARI", "REFUGIO", "REBBECA", "PAULETTA", "NIEVES", "NATOSHA", "NAKITA", "MAMMIE", "KENISHA", "KAZUKO", "KASSIE", "GARY", "EARLEAN", "DAPHINE", "CORLISS", "CLOTILDE", "CAROLYNE", "BERNETTA", "AUGUSTINA", "AUDREA", "ANNIS", "ANNABELL", "YAN", "TENNILLE", "TAMICA", "SELENE", "SEAN", "ROSANA", "REGENIA", "QIANA", "MARKITA", "MACY", "LEEANNE", "LAURINE", "KYM", "JESSENIA", "JANITA", "GEORGINE", "GENIE", "EMIKO", "ELVIE", "DEANDRA", "DAGMAR", "CORIE", "COLLEN", "CHERISH", "ROMAINE", "PORSHA", "PEARLENE", "MICHELINE", "MERNA", "MARGORIE", "MARGARETTA", "LORE", "KENNETH", "JENINE", "HERMINA", "FREDERICKA", "ELKE", "DRUSILLA", "DORATHY", "DIONE", "DESIRE", "CELENA", "BRIGIDA", "ANGELES", "ALLEGRA", "THEO", "TAMEKIA", "SYNTHIA", "STEPHEN", "SOOK", "SLYVIA", "ROSANN", "REATHA", "RAYE", "MARQUETTA", "MARGART", "LING", "LAYLA", "KYMBERLY", "KIANA", "KAYLEEN", "KATLYN", "KARMEN", "JOELLA", "IRINA", "EMELDA", "ELENI", "DETRA", "CLEMMIE", "CHERYLL", "CHANTELL", "CATHEY", "ARNITA", "ARLA", "ANGLE", "ANGELIC", "ALYSE", "ZOFIA", "THOMASINE", "TENNIE", "SON", "SHERLY", "SHERLEY", "SHARYL", "REMEDIOS", "PETRINA", "NICKOLE", "MYUNG", "MYRLE", "MOZELLA", "LOUANNE", "LISHA", "LATIA", "LANE", "KRYSTA", "JULIENNE", "JOEL", "JEANENE", "JACQUALINE", "ISAURA", "GWENDA", "EARLEEN", "DONALD", "CLEOPATRA", "CARLIE", "AUDIE", "ANTONIETTA", "ALISE", "ALEX", "VERDELL", "VAL", "TYLER", "TOMOKO", "THAO", "TALISHA", "STEVEN", "SO", "SHEMIKA", "SHAUN", "SCARLET", "SAVANNA", "SANTINA", "ROSIA", "RAEANN", "ODILIA", "NANA", "MINNA", "MAGAN", "LYNELLE", "LE", "KARMA", "JOEANN", "IVANA", "INELL", "ILANA", "HYE", "HONEY", "HEE", "GUDRUN", "FRANK", "DREAMA", "CRISSY", "CHANTE", "CARMELINA", "ARVILLA", "ARTHUR", "ANNAMAE", "ALVERA", "ALEIDA", "AARON", "YEE", "YANIRA", "VANDA", "TIANNA", "TAM", "STEFANIA", "SHIRA", "PERRY", "NICOL", "NANCIE", "MONSERRATE", "MINH", "MELYNDA", "MELANY", "MATTHEW", "LOVELLA", "LAURE", "KIRBY", "KACY", "JACQUELYNN", "HYON", "GERTHA", "FRANCISCO", "ELIANA", "CHRISTENA", "CHRISTEEN", "CHARISE", "CATERINA", "CARLEY", "CANDYCE", "ARLENA", "AMMIE", "YANG", "WILLETTE", "VANITA", "TUYET", "TINY", "SYREETA", "SILVA", "SCOTT", "RONALD", "PENNEY", "NYLA", "MICHAL", "MAURICE", "MARYAM", "MARYA", "MAGEN", "LUDIE", "LOMA", "LIVIA", "LANELL", "KIMBERLIE", "JULEE", "DONETTA", "DIEDRA", "DENISHA", "DEANE", "DAWNE", "CLARINE", "CHERRYL", "BRONWYN", "BRANDON", "ALLA", "VALERY", "TONDA", "SUEANN", "SORAYA", "SHOSHANA", "SHELA", "SHARLEEN", "SHANELLE", "NERISSA", "MICHEAL", "MERIDITH", "MELLIE", "MAYE", "MAPLE", "MAGARET", "LUIS", "LILI", "LEONILA", "LEONIE", "LEEANNA", "LAVONIA", "LAVERA", "KRISTEL", "KATHEY", "KATHE", "JUSTIN", "JULIAN", "JIMMY", "JANN", "ILDA", "HILDRED", "HILDEGARDE", "GENIA", "FUMIKO", "EVELIN", "ERMELINDA", "ELLY", "DUNG", "DOLORIS", "DIONNA", "DANAE", "BERNEICE", "ANNICE", "ALIX", "VERENA", "VERDIE", "TRISTAN", "SHAWNNA", "SHAWANA", "SHAUNNA", "ROZELLA", "RANDEE", "RANAE", "MILAGRO", "LYNELL", "LUISE", "LOUIE", "LOIDA", "LISBETH", "KARLEEN", "JUNITA", "JONA", "ISIS", "HYACINTH", "HEDY", "GWENN", "ETHELENE", "ERLINE", "EDWARD", "DONYA", "DOMONIQUE", "DELICIA", "DANNETTE", "CICELY", "BRANDA", "BLYTHE", "BETHANN", "ASHLYN", "ANNALEE", "ALLINE", "YUKO", "VELLA", "TRANG", "TOWANDA", "TESHA", "SHERLYN", "NARCISA", "MIGUELINA", "MERI", "MAYBELL", "MARLANA", "MARGUERITA", "MADLYN", "LUNA", "LORY", "LORIANN", "LIBERTY", "LEONORE", "LEIGHANN", "LAURICE", "LATESHA", "LARONDA", "KATRICE", "KASIE", "KARL", "KALEY", "JADWIGA", "GLENNIE", "GEARLDINE", "FRANCINA", "EPIFANIA", "DYAN", "DORIE", "DIEDRE", "DENESE", "DEMETRICE", "DELENA", "DARBY", "CRISTIE", "CLEORA", "CATARINA", "CARISA", "BERNIE", "BARBERA", "ALMETA", "TRULA", "TEREASA", "SOLANGE", "SHEILAH", "SHAVONNE", "SANORA", "ROCHELL", "MATHILDE", "MARGARETA", "MAIA", "LYNSEY", "LAWANNA", "LAUNA", "KENA", "KEENA", "KATIA", "JAMEY", "GLYNDA", "GAYLENE", "ELVINA", "ELANOR", "DANUTA", "DANIKA", "CRISTEN", "CORDIE", "COLETTA", "CLARITA", "CARMON", "BRYNN", "AZUCENA", "AUNDREA", "ANGELE", "YI", "WALTER", "VERLIE", "VERLENE", "TAMESHA", "SILVANA", "SEBRINA", "SAMIRA", "REDA", "RAYLENE", "PENNI", "PANDORA", "NORAH", "NOMA", "MIREILLE", "MELISSIA", "MARYALICE", "LARAINE", "KIMBERY", "KARYL", "KARINE", "KAM", "JOLANDA", "JOHANA", "JESUSA", "JALEESA", "JAE", "JACQUELYNE", "IRISH", "ILUMINADA", "HILARIA", "HANH", "GENNIE", "FRANCIE", "FLORETTA", "EXIE", "EDDA", "DREMA", "DELPHA", "BEV", "BARBAR", "ASSUNTA", "ARDELL", "ANNALISA", "ALISIA", "YUKIKO", "YOLANDO", "WONDA", "WEI", "WALTRAUD", "VETA", "TEQUILA", "TEMEKA", "TAMEIKA", "SHIRLEEN", "SHENITA", "PIEDAD", "OZELLA", "MIRTHA", "MARILU", "KIMIKO", "JULIANE", "JENICE", "JEN", "JANAY", "JACQUILINE", "HILDE", "FE", "FAE", "EVAN", "EUGENE", "ELOIS", "ECHO", "DEVORAH", "CHAU", "BRINDA", "BETSEY", "ARMINDA", "ARACELIS", "APRYL", "ANNETT", "ALISHIA", "VEOLA", "USHA", "TOSHIKO", "THEOLA", "TASHIA", "TALITHA", "SHERY", "RUDY", "RENETTA", "REIKO", "RASHEEDA", "OMEGA", "OBDULIA", "MIKA", "MELAINE", "MEGGAN", "MARTIN", "MARLEN", "MARGET", "MARCELINE", "MANA", "MAGDALEN", "LIBRADA", "LEZLIE", "LEXIE", "LATASHIA", "LASANDRA", "KELLE", "ISIDRA", "ISA", "INOCENCIA", "GWYN", "FRANCOISE", "ERMINIA", "ERINN", "DIMPLE", "DEVORA", "CRISELDA", "ARMANDA", "ARIE", "ARIANE", "ANGELO", "ANGELENA", "ALLEN", "ALIZA", "ADRIENE", "ADALINE", "XOCHITL", "TWANNA", "TRAN", "TOMIKO", "TAMISHA", "TAISHA", "SUSY", "SIU", "RUTHA", "ROXY", "RHONA", "RAYMOND", "OTHA", "NORIKO", "NATASHIA", "MERRIE", "MELVIN", "MARINDA", "MARIKO", "MARGERT", "LORIS", "LIZZETTE", "LEISHA", "KAILA", "KA", "JOANNIE", "JERRICA", "JENE", "JANNET", "JANEE", "JACINDA", "HERTA", "ELENORE", "DORETTA", "DELAINE", "DANIELL", "CLAUDIE", "CHINA", "BRITTA", "APOLONIA", "AMBERLY", "ALEASE", "YURI", "YUK", "WEN", "WANETA", "UTE", "TOMI", "SHARRI", "SANDIE", "ROSELLE", "REYNALDA", "RAGUEL", "PHYLICIA", "PATRIA", "OLIMPIA", "ODELIA", "MITZIE", "MITCHELL", "MISS", "MINDA", "MIGNON", "MICA", "MENDY", "MARIVEL", "MAILE", "LYNETTA", "LAVETTE", "LAURYN", "LATRISHA", "LAKIESHA", "KIERSTEN", "KARY", "JOSPHINE", "JOLYN", "JETTA", "JANISE", "JACQUIE", "IVELISSE", "GLYNIS", "GIANNA", "GAYNELLE", "EMERALD", "DEMETRIUS", "DANYELL", "DANILLE", "DACIA", "CORALEE", "CHER", "CEOLA", "BRETT", "BELL", "ARIANNE", "ALESHIA", "YUNG", "WILLIEMAE", "TROY", "TRINH", "THORA", "TAI", "SVETLANA", "SHERIKA", "SHEMEKA", "SHAUNDA", "ROSELINE", "RICKI", "MELDA", "MALLIE", "LAVONNA", "LATINA", "LARRY", "LAQUANDA", "LALA", "LACHELLE", "KLARA", "KANDIS", "JOHNA", "JEANMARIE", "JAYE", "HANG", "GRAYCE", "GERTUDE", "EMERITA", "EBONIE", "CLORINDA", "CHING", "CHERY", "CAROLA", "BREANN", "BLOSSOM", "BERNARDINE", "BECKI", "ARLETHA", "ARGELIA", "ARA", "ALITA", "YULANDA", "YON", "YESSENIA", "TOBI", "TASIA", "SYLVIE", "SHIRL", "SHIRELY", "SHERIDAN", "SHELLA", "SHANTELLE", "SACHA", "ROYCE", "REBECKA", "REAGAN", "PROVIDENCIA", "PAULENE", "MISHA", "MIKI", "MARLINE", "MARICA", "LORITA", "LATOYIA", "LASONYA", "KERSTIN", "KENDA", "KEITHA", "KATHRIN", "JAYMIE", "JACK", "GRICELDA", "GINETTE", "ERYN", "ELINA", "ELFRIEDA", "DANYEL", "CHEREE", "CHANELLE", "BARRIE", "AVERY", "AURORE", "ANNAMARIA", "ALLEEN", "AILENE", "AIDE", "YASMINE", "VASHTI", "VALENTINE", "TREASA", "TORY", "TIFFANEY", "SHERYLL", "SHARIE", "SHANAE", "SAU", "RAISA", "PA", "NEDA", "MITSUKO", "MIRELLA", "MILDA", "MARYANNA", "MARAGRET", "MABELLE", "LUETTA", "LORINA", "LETISHA", "LATARSHA", "LANELLE", "LAJUANA", "KRISSY", "KARLY", "KARENA", "JON", "JESSIKA", "JERICA", "JEANELLE", "JANUARY", "JALISA", "JACELYN", "IZOLA", "IVEY", "GREGORY", "EUNA", "ETHA", "DREW", "DOMITILA", "DOMINICA", "DAINA", "CREOLA", "CARLI", "CAMIE", "BUNNY", "BRITTNY", "ASHANTI", "ANISHA", "ALEEN", "ADAH", "YASUKO", "WINTER", "VIKI", "VALRIE", "TONA", "TINISHA", "THI", "TERISA", "TATUM", "TANEKA", "SIMONNE", "SHALANDA", "SERITA", "RESSIE", "REFUGIA", "PAZ", "OLENE", "NA", "MERRILL", "MARGHERITA", "MANDIE", "MAN", "MAIRE", "LYNDIA", "LUCI", "LORRIANE", "LORETA", "LEONIA", "LAVONA", "LASHAWNDA", "LAKIA", "KYOKO", "KRYSTINA", "KRYSTEN", "KENIA", "KELSI", "JUDE", "JEANICE", "ISOBEL", "GEORGIANN", "GENNY", "FELICIDAD", "EILENE", "DEON", "DELOISE", "DEEDEE", "DANNIE", "CONCEPTION", "CLORA", "CHERILYN", "CHANG", "CALANDRA", "BERRY", "ARMANDINA", "ANISA", "ULA", "TIMOTHY", "TIERA", "THERESSA", "STEPHANIA", "SIMA", "SHYLA", "SHONTA", "SHERA", "SHAQUITA", "SHALA", "SAMMY", "ROSSANA", "NOHEMI", "NERY", "MORIAH", "MELITA", "MELIDA", "MELANI", "MARYLYNN", "MARISHA", "MARIETTE", "MALORIE", "MADELENE", "LUDIVINA", "LORIA", "LORETTE", "LORALEE", "LIANNE", "LEON", "LAVENIA", "LAURINDA", "LASHON", "KIT", "KIMI", "KEILA", "KATELYNN", "KAI", "JONE", "JOANE", "JI", "JAYNA", "JANELLA", "JA", "HUE", "HERTHA", "FRANCENE", "ELINORE", "DESPINA", "DELSIE", "DEEDRA", "CLEMENCIA", "CARRY", "CAROLIN", "CARLOS", "BULAH", "BRITTANIE", "BOK", "BLONDELL", "BIBI", "BEAULAH", "BEATA", "ANNITA", "AGRIPINA", "VIRGEN", "VALENE", "UN", "TWANDA", "TOMMYE", "TOI", "TARRA", "TARI", "TAMMERA", "SHAKIA", "SADYE", "RUTHANNE", "ROCHEL", "RIVKA", "PURA", "NENITA", "NATISHA", "MING", "MERRILEE", "MELODEE", "MARVIS", "LUCILLA", "LEENA", "LAVETA", "LARITA", "LANIE", "KEREN", "ILEEN", "GEORGEANN", "GENNA", "GENESIS", "FRIDA", "EWA", "EUFEMIA", "EMELY", "ELA", "EDYTH", "DEONNA", "DEADRA", "DARLENA", "CHANELL", "CHAN", "CATHERN", "CASSONDRA", "CASSAUNDRA", "BERNARDA", "BERNA", "ARLINDA", "ANAMARIA", "ALBERT", "WESLEY", "VERTIE", "VALERI", "TORRI", "TATYANA", "STASIA", "SHERISE", "SHERILL", "SEASON", "SCOTTIE", "SANDA", "RUTHE", "ROSY", "ROBERTO", "ROBBI", "RANEE", "QUYEN", "PEARLY", "PALMIRA", "ONITA", "NISHA", "NIESHA", "NIDA", "NEVADA", "NAM", "MERLYN", "MAYOLA", "MARYLOUISE", "MARYLAND", "MARX", "MARTH", "MARGENE", "MADELAINE", "LONDA", "LEONTINE", "LEOMA", "LEIA", "LAWRENCE", "LAURALEE", "LANORA", "LAKITA", "KIYOKO", "KETURAH", "KATELIN", "KAREEN", "JONIE", "JOHNETTE", "JENEE", "JEANETT", "IZETTA", "HIEDI", "HEIKE", "HASSIE", "HAROLD", "GIUSEPPINA", "GEORGANN", "FIDELA", "FERNANDE", "ELWANDA", "ELLAMAE", "ELIZ", "DUSTI", "DOTTY", "CYNDY", "CORALIE", "CELESTA", "ARGENTINA", "ALVERTA", "XENIA", "WAVA", "VANETTA", "TORRIE", "TASHINA", "TANDY", "TAMBRA", "TAMA", "STEPANIE", "SHILA", "SHAUNTA", "SHARAN", "SHANIQUA", "SHAE", "SETSUKO", "SERAFINA", "SANDEE", "ROSAMARIA", "PRISCILA", "OLINDA", "NADENE", "MUOI", "MICHELINA", "MERCEDEZ", "MARYROSE", "MARIN", "MARCENE", "MAO", "MAGALI", "MAFALDA", "LOGAN", "LINN", "LANNIE", "KAYCE", "KAROLINE", "KAMILAH", "KAMALA", "JUSTA", "JOLINE", "JENNINE", "JACQUETTA", "IRAIDA", "GERALD", "GEORGEANNA", "FRANCHESCA", "FAIRY", "EMELINE", "ELANE", "EHTEL", "EARLIE", "DULCIE", "DALENE", "CRIS", "CLASSIE", "CHERE", "CHARIS", "CAROYLN", "CARMINA", "CARITA", "BRIAN", "BETHANIE", "AYAKO", "ARICA", "AN", "ALYSA", "ALESSANDRA", "AKILAH", "ADRIEN", "ZETTA", "YOULANDA", "YELENA", "YAHAIRA", "XUAN", "WENDOLYN", "VICTOR", "TIJUANA", "TERRELL", "TERINA", "TERESIA", "SUZI", "SUNDAY", "SHERELL", "SHAVONDA", "SHAUNTE", "SHARDA", "SHAKITA", "SENA", "RYANN", "RUBI", "RIVA", "REGINIA", "REA", "RACHAL", "PARTHENIA", "PAMULA", "MONNIE", "MONET", "MICHAELE", "MELIA", "MARINE", "MALKA", "MAISHA", "LISANDRA", "LEO", "LEKISHA", "LEAN", "LAURENCE", "LAKENDRA", "KRYSTIN", "KORTNEY", "KIZZIE", "KITTIE", "KERA", "KENDAL", "KEMBERLY", "KANISHA", "JULENE", "JULE", "JOSHUA", "JOHANNE", "JEFFREY", "JAMEE", "HAN", "HALLEY", "GIDGET", "GALINA", "FREDRICKA", "FLETA", "FATIMAH", "EUSEBIA", "ELZA", "ELEONORE", "DORTHEY", "DORIA", "DONELLA", "DINORAH", "DELORSE", "CLARETHA", "CHRISTINIA", "CHARLYN", "BONG", "BELKIS", "AZZIE", "ANDERA", "AIKO", "ADENA", "YER", "YAJAIRA", "WAN", "VANIA", "ULRIKE", "TOSHIA", "TIFANY", "STEFANY", "SHIZUE", "SHENIKA", "SHAWANNA", "SHAROLYN", "SHARILYN", "SHAQUANA", "SHANTAY", "SEE", "ROZANNE", "ROSELEE", "RICKIE", "REMONA", "REANNA", "RAELENE", "QUINN", "PHUNG", "PETRONILA", "NATACHA", "NANCEY", "MYRL", "MIYOKO", "MIESHA", "MERIDETH", "MARVELLA", "MARQUITTA", "MARHTA", "MARCHELLE", "LIZETH", "LIBBIE", "LAHOMA", "LADAWN", "KINA", "KATHELEEN", "KATHARYN", "KARISA", "KALEIGH", "JUNIE", "JULIEANN", "JOHNSIE", "JANEAN", "JAIMEE", "JACKQUELINE", "HISAKO", "HERMA", "HELAINE", "GWYNETH", "GLENN", "GITA", "EUSTOLIA", "EMELINA", "ELIN", "EDRIS", "DONNETTE", "DONNETTA", "DIERDRE", "DENAE", "DARCEL", "CLAUDE", "CLARISA", "CINDERELLA", "CHIA", "CHARLESETTA", "CHARITA", "CELSA", "CASSY", "CASSI", "CARLEE", "BRUNA", "BRITTANEY", "BRANDE", "BILLI", "BAO", "ANTONETTA", "ANGLA", "ANGELYN", "ANALISA", "ALANE", "WENONA", "WENDIE", "VERONIQUE", "VANNESA", "TOBIE", "TEMPIE", "SUMIKO", "SULEMA", "SPARKLE", "SOMER", "SHEBA", "SHAYNE", "SHARICE", "SHANEL", "SHALON", "SAGE", "ROY", "ROSIO", "ROSELIA", "RENAY", "REMA", "REENA", "PORSCHE", "PING", "PEG", "OZIE", "ORETHA", "ORALEE", "ODA", "NU", "NGAN", "NAKESHA", "MILLY", "MARYBELLE", "MARLIN", "MARIS", "MARGRETT", "MARAGARET", "MANIE", "LURLENE", "LILLIA", "LIESELOTTE", "LAVELLE", "LASHAUNDA", "LAKEESHA", "KEITH", "KAYCEE", "KALYN", "JOYA", "JOETTE", "JENAE", "JANIECE", "ILLA", "GRISEL", "GLAYDS", "GENEVIE", "GALA", "FREDDA", "FRED", "ELMER", "ELEONOR", "DEBERA", "DEANDREA", "DAN", "CORRINNE", "CORDIA", "CONTESSA", "COLENE", "CLEOTILDE", "CHARLOTT", "CHANTAY", "CECILLE", "BEATRIS", "AZALEE", "ARLEAN", "ARDATH", "ANJELICA", "ANJA", "ALFREDIA", "ALEISHA", "ADAM", "ZADA", "YUONNE", "XIAO", "WILLODEAN", "WHITLEY", "VENNIE", "VANNA", "TYISHA", "TOVA", "TORIE", "TONISHA", "TILDA", "TIEN", "TEMPLE", "SIRENA", "SHERRIL", "SHANTI", "SHAN", "SENAIDA", "SAMELLA", "ROBBYN", "RENDA", "REITA", "PHEBE", "PAULITA", "NOBUKO", "NGUYET", "NEOMI", "MOON", "MIKAELA", "MELANIA", "MAXIMINA", "MARG", "MAISIE", "LYNNA", "LILLI", "LAYNE", "LASHAUN", "LAKENYA", "LAEL", "KIRSTIE", "KATHLINE", "KASHA", "KARLYN", "KARIMA", "JOVAN", "JOSEFINE", "JENNELL", "JACQUI", "JACKELYN", "HYO", "HIEN", "GRAZYNA", "FLORRIE", "FLORIA", "ELEONORA", "DWANA", "DORLA", "DONG", "DELMY", "DEJA", "DEDE", "DANN", "CRYSTA", "CLELIA", "CLARIS", "CLARENCE", "CHIEKO", "CHERLYN", "CHERELLE", "CHARMAIN", "CHARA", "CAMMY", "BEE", "ARNETTE", "ARDELLE", "ANNIKA", "AMIEE", "AMEE", "ALLENA", "YVONE", "YUKI", "YOSHIE", "YEVETTE", "YAEL", "WILLETTA", "VONCILE", "VENETTA", "TULA", "TONETTE", "TIMIKA", "TEMIKA", "TELMA", "TEISHA", "TAREN", "TA", "STACEE", "SHIN", "SHAWNTA", "SATURNINA", "RICARDA", "POK", "PASTY", "ONIE", "NUBIA", "MORA", "MIKE", "MARIELLE", "MARIELLA", "MARIANELA", "MARDELL", "MANY", "LUANNA", "LOISE", "LISABETH", "LINDSY", "LILLIANA", "LILLIAM", "LELAH", "LEIGHA", "LEANORA", "LANG", "KRISTEEN", "KHALILAH", "KEELEY", "KANDRA", "JUNKO", "JOAQUINA", "JERLENE", "JANI", "JAMIKA", "JAME", "HSIU", "HERMILA", "GOLDEN", "GENEVIVE", "EVIA", "EUGENA", "EMMALINE", "ELFREDA", "ELENE", "DONETTE", "DELCIE", "DEEANNA", "DARCEY", "CUC", "CLARINDA", "CIRA", "CHAE", "CELINDA", "CATHERYN", "CATHERIN", "CASIMIRA", "CARMELIA", "CAMELLIA", "BREANA", "BOBETTE", "BERNARDINA", "BEBE", "BASILIA", "ARLYNE", "AMAL", "ALAYNA", "ZONIA", "ZENIA", "YURIKO", "YAEKO", "WYNELL", "WILLOW", "WILLENA", "VERNIA", "TU", "TRAVIS", "TORA", "TERRILYN", "TERICA", "TENESHA", "TAWNA", "TAJUANA", "TAINA", "STEPHNIE", "SONA", "SOL", "SINA", "SHONDRA", "SHIZUKO", "SHERLENE", "SHERICE", "SHARIKA", "ROSSIE", "ROSENA", "RORY", "RIMA", "RIA", "RHEBA", "RENNA", "PETER", "NATALYA", "NANCEE", "MELODI", "MEDA", "MAXIMA", "MATHA", "MARKETTA", "MARICRUZ", "MARCELENE", "MALVINA", "LUBA", "LOUETTA", "LEIDA", "LECIA", "LAURAN", "LASHAWNA", "LAINE", "KHADIJAH", "KATERINE", "KASI", "KALLIE", "JULIETTA", "JESUSITA", "JESTINE", "JESSIA", "JEREMY", "JEFFIE", "JANYCE", "ISADORA", "GEORGIANNE", "FIDELIA", "EVITA", "EURA", "EULAH", "ESTEFANA", "ELSY", "ELIZABET", "ELADIA", "DODIE", "DION", "DIA", "DENISSE", "DELORAS", "DELILA", "DAYSI", "DAKOTA", "CURTIS", "CRYSTLE", "CONCHA", "COLBY", "CLARETTA", "CHU", "CHRISTIA", "CHARLSIE", "CHARLENA", "CARYLON", "BETTYANN", "ASLEY", "ASHLEA", "AMIRA", "AI", "AGUEDA", "AGNUS", "YUETTE", "VINITA", "VICTORINA", "TYNISHA", "TREENA", "TOCCARA", "TISH", "THOMASENA", "TEGAN", "SOILA", "SHILOH", "SHENNA", "SHARMAINE", "SHANTAE", "SHANDI", "SEPTEMBER", "SARAN", "SARAI", "SANA", "SAMUEL", "SALLEY", "ROSETTE", "ROLANDE", "REGINE", "OTELIA", "OSCAR", "OLEVIA", "NICHOLLE", "NECOLE", "NAIDA", "MYRTA", "MYESHA", "MITSUE", "MINTA", "MERTIE", "MARGY", "MAHALIA", "MADALENE", "LOVE", "LOURA", "LOREAN", "LEWIS", "LESHA", "LEONIDA", "LENITA", "LAVONE", "LASHELL", "LASHANDRA", "LAMONICA", "KIMBRA", "KATHERINA", "KARRY", "KANESHA", "JULIO", "JONG", "JENEVA", "JAQUELYN", "HWA", "GILMA", "GHISLAINE", "GERTRUDIS", "FRANSISCA", "FERMINA", "ETTIE", "ETSUKO", "ELLIS", "ELLAN", "ELIDIA", "EDRA", "DORETHEA", "DOREATHA", "DENYSE", "DENNY", "DEETTA", "DAINE", "CYRSTAL", "CORRIN", "CAYLA", "CARLITA", "CAMILA", "BURMA", "BULA", "BUENA", "BLAKE", "BARABARA", "AVRIL", "AUSTIN", "ALAINE", "ZANA", "WILHEMINA", "WANETTA", "VIRGIL", "VI", "VERONIKA", "VERNON", "VERLINE", "VASILIKI", "TONITA", "TISA", "TEOFILA", "TAYNA", "TAUNYA", "TANDRA", "TAKAKO", "SUNNI", "SUANNE", "SIXTA", "SHARELL", "SEEMA", "RUSSELL", "ROSENDA", "ROBENA", "RAYMONDE", "PEI", "PAMILA", "OZELL", "NEIDA", "NEELY", "MISTIE", "MICHA", "MERISSA", "MAURITA", "MARYLN", "MARYETTA", "MARSHALL", "MARCELL", "MALENA", "MAKEDA", "MADDIE", "LOVETTA", "LOURIE", "LORRINE", "LORILEE", "LESTER", "LAURENA", "LASHAY", "LARRAINE", "LAREE", "LACRESHA", "KRISTLE", "KRISHNA", "KEVA", "KEIRA", "KAROLE", "JOIE", "JINNY", "JEANNETTA", "JAMA", "HEIDY", "GILBERTE", "GEMA", "FAVIOLA", "EVELYNN", "ENDA", "ELLI", "ELLENA", "DIVINA", "DAGNY", "COLLENE", "CODI", "CINDIE", "CHASSIDY", "CHASIDY", "CATRICE", "CATHERINA", "CASSEY", "CAROLL", "CARLENA", "CANDRA", "CALISTA", "BRYANNA", "BRITTENY", "BEULA", "BARI", "AUDRIE", "AUDRIA", "ARDELIA", "ANNELLE", "ANGILA", "ALONA", "ALLYN", "DOUGLAS", "ROGER", "JONATHAN", "RALPH", "NICHOLAS", "BENJAMIN", "BRUCE", "HARRY", "WAYNE", "STEVE", "HOWARD", "ERNEST", "PHILLIP", "TODD", "CRAIG", "ALAN", "PHILIP", "EARL", "DANNY", "BRYAN", "STANLEY", "LEONARD", "NATHAN", "MANUEL", "RODNEY", "MARVIN", "VINCENT", "JEFFERY", "JEFF", "CHAD", "JACOB", "ALFRED", "BRADLEY", "HERBERT", "FREDERICK", "EDWIN", "DON", "RICKY", "RANDALL", "BARRY", "BERNARD", "LEROY", "MARCUS", "THEODORE", "CLIFFORD", "MIGUEL", "JIM", "TOM", "CALVIN", "BILL", "LLOYD", "DEREK", "WARREN", "DARRELL", "JEROME", "FLOYD", "ALVIN", "TIM", "GORDON", "GREG", "JORGE", "DUSTIN", "PEDRO", "DERRICK", "ZACHARY", "HERMAN", "GLEN", "HECTOR", "RICARDO", "RICK", "BRENT", "RAMON", "GILBERT", "MARC", "REGINALD", "RUBEN", "NATHANIEL", "RAFAEL", "EDGAR", "MILTON", "RAUL", "BEN", "CHESTER", "DUANE", "FRANKLIN", "BRAD", "RON", "ROLAND", "ARNOLD", "HARVEY", "JARED", "ERIK", "DARRYL", "NEIL", "JAVIER", "FERNANDO", "CLINTON", "TED", "MATHEW", "TYRONE", "DARREN", "LANCE", "KURT", "ALLAN", "NELSON", "GUY", "CLAYTON", "HUGH", "MAX", "DWAYNE", "DWIGHT", "ARMANDO", "FELIX", "EVERETT", "IAN", "WALLACE", "KEN", "BOB", "ALFREDO", "ALBERTO", "DAVE", "IVAN", "BYRON", "ISAAC", "MORRIS", "CLIFTON", "WILLARD", "ROSS", "ANDY", "SALVADOR", "KIRK", "SERGIO", "SETH", "KENT", "TERRANCE", "EDUARDO", "TERRENCE", "ENRIQUE", "WADE", "STUART", "FREDRICK", "ARTURO", "ALEJANDRO", "NICK", "LUTHER", "WENDELL", "JEREMIAH", "JULIUS", "OTIS", "TREVOR", "OLIVER", "LUKE", "HOMER", "GERARD", "DOUG", "KENNY", "HUBERT", "LYLE", "MATT", "ALFONSO", "ORLANDO", "REX", "CARLTON", "ERNESTO", "NEAL", "PABLO", "LORENZO", "OMAR", "WILBUR", "GRANT", "HORACE", "RODERICK", "ABRAHAM", "WILLIS", "RICKEY", "ANDRES", "CESAR", "JOHNATHAN", "MALCOLM", "RUDOLPH", "DAMON", "KELVIN", "PRESTON", "ALTON", "ARCHIE", "MARCO", "WM", "PETE", "RANDOLPH", "GARRY", "GEOFFREY", "JONATHON", "FELIPE", "GERARDO", "ED", "DOMINIC", "DELBERT", "COLIN", "GUILLERMO", "EARNEST", "LUCAS", "BENNY", "SPENCER", "RODOLFO", "MYRON", "EDMUND", "GARRETT", "SALVATORE", "CEDRIC", "LOWELL", "GREGG", "SHERMAN", "WILSON", "SYLVESTER", "ROOSEVELT", "ISRAEL", "JERMAINE", "FORREST", "WILBERT", "LELAND", "SIMON", "CLARK", "IRVING", "BRYANT", "OWEN", "RUFUS", "WOODROW", "KRISTOPHER", "MACK", "LEVI", "MARCOS", "GUSTAVO", "JAKE", "LIONEL", "GILBERTO", "CLINT", "NICOLAS", "ISMAEL", "ORVILLE", "ERVIN", "DEWEY", "AL", "WILFRED", "JOSH", "HUGO", "IGNACIO", "CALEB", "TOMAS", "SHELDON", "ERICK", "STEWART", "DOYLE", "DARREL", "ROGELIO", "TERENCE", "SANTIAGO", "ALONZO", "ELIAS", "BERT", "ELBERT", "RAMIRO", "CONRAD", "NOAH", "GRADY", "PHIL", "CORNELIUS", "LAMAR", "ROLANDO", "CLAY", "PERCY", "DEXTER", "BRADFORD", "DARIN", "AMOS", "MOSES", "IRVIN", "SAUL", "ROMAN", "RANDAL", "TIMMY", "DARRIN", "WINSTON", "BRENDAN", "ABEL", "DOMINICK", "BOYD", "EMILIO", "ELIJAH", "DOMINGO", "EMMETT", "MARLON", "EMANUEL", "JERALD", "EDMOND", "EMIL", "DEWAYNE", "WILL", "OTTO", "TEDDY", "REYNALDO", "BRET", "JESS", "TRENT", "HUMBERTO", "EMMANUEL", "STEPHAN", "VICENTE", "LAMONT", "GARLAND", "MILES", "EFRAIN", "HEATH", "RODGER", "HARLEY", "ETHAN", "ELDON", "ROCKY", "PIERRE", "JUNIOR", "FREDDY", "ELI", "BRYCE", "ANTOINE", "STERLING", "CHASE", "GROVER", "ELTON", "CLEVELAND", "DYLAN", "CHUCK", "DAMIAN", "REUBEN", "STAN", "AUGUST", "LEONARDO", "JASPER", "RUSSEL", "ERWIN", "BENITO", "HANS", "MONTE", "BLAINE", "ERNIE", "CURT", "QUENTIN", "AGUSTIN", "MURRAY", "JAMAL", "ADOLFO", "HARRISON", "TYSON", "BURTON", "BRADY", "ELLIOTT", "WILFREDO", "BART", "JARROD", "VANCE", "DENIS", "DAMIEN", "JOAQUIN", "HARLAN", "DESMOND", "ELLIOT", "DARWIN", "GREGORIO", "BUDDY", "XAVIER", "KERMIT", "ROSCOE", "ESTEBAN", "ANTON", "SOLOMON", "SCOTTY", "NORBERT", "ELVIN", "WILLIAMS", "NOLAN", "ROD", "QUINTON", "HAL", "BRAIN", "ROB", "ELWOOD", "KENDRICK", "DARIUS", "MOISES", "FIDEL", "THADDEUS", "CLIFF", "MARCEL", "JACKSON", "RAPHAEL", "BRYON", "ARMAND", "ALVARO", "JEFFRY", "DANE", "JOESPH", "THURMAN", "NED", "RUSTY", "MONTY", "FABIAN", "REGGIE", "MASON", "GRAHAM", "ISAIAH", "VAUGHN", "GUS", "LOYD", "DIEGO", "ADOLPH", "NORRIS", "MILLARD", "ROCCO", "GONZALO", "DERICK", "RODRIGO", "WILEY", "RIGOBERTO", "ALPHONSO", "TY", "NOE", "VERN", "REED", "JEFFERSON", "ELVIS", "BERNARDO", "MAURICIO", "HIRAM", "DONOVAN", "BASIL", "RILEY", "NICKOLAS", "MAYNARD", "SCOT", "VINCE", "QUINCY", "EDDY", "SEBASTIAN", "FEDERICO", "ULYSSES", "HERIBERTO", "DONNELL", "COLE", "DAVIS", "GAVIN", "EMERY", "WARD", "ROMEO", "JAYSON", "DANTE", "CLEMENT", "COY", "MAXWELL", "JARVIS", "BRUNO", "ISSAC", "DUDLEY", "BROCK", "SANFORD", "CARMELO", "BARNEY", "NESTOR", "STEFAN", "DONNY", "ART", "LINWOOD", "BEAU", "WELDON", "GALEN", "ISIDRO", "TRUMAN", "DELMAR", "JOHNATHON", "SILAS", "FREDERIC", "DICK", "IRWIN", "MERLIN", "CHARLEY", "MARCELINO", "HARRIS", "CARLO", "TRENTON", "KURTIS", "HUNTER", "AURELIO", "WINFRED", "VITO", "COLLIN", "DENVER", "CARTER", "LEONEL", "EMORY", "PASQUALE", "MOHAMMAD", "MARIANO", "DANIAL", "LANDON", "DIRK", "BRANDEN", "ADAN", "BUFORD", "GERMAN", "WILMER", "EMERSON", "ZACHERY", "FLETCHER", "JACQUES", "ERROL", "DALTON", "MONROE", "JOSUE", "EDWARDO", "BOOKER", "WILFORD", "SONNY", "SHELTON", "CARSON", "THERON", "RAYMUNDO", "DAREN", "HOUSTON", "ROBBY", "LINCOLN", "GENARO", "BENNETT", "OCTAVIO", "CORNELL", "HUNG", "ARRON", "ANTONY", "HERSCHEL", "GIOVANNI", "GARTH", "CYRUS", "CYRIL", "RONNY", "LON", "FREEMAN", "DUNCAN", "KENNITH", "CARMINE", "ERICH", "CHADWICK", "WILBURN", "RUSS", "REID", "MYLES", "ANDERSON", "MORTON", "JONAS", "FOREST", "MITCHEL", "MERVIN", "ZANE", "RICH", "JAMEL", "LAZARO", "ALPHONSE", "RANDELL", "MAJOR", "JARRETT", "BROOKS", "ABDUL", "LUCIANO", "SEYMOUR", "EUGENIO", "MOHAMMED", "VALENTIN", "CHANCE", "ARNULFO", "LUCIEN", "FERDINAND", "THAD", "EZRA", "ALDO", "RUBIN", "ROYAL", "MITCH", "EARLE", "ABE", "WYATT", "MARQUIS", "LANNY", "KAREEM", "JAMAR", "BORIS", "ISIAH", "EMILE", "ELMO", "ARON", "LEOPOLDO", "EVERETTE", "JOSEF", "ELOY", "RODRICK", "REINALDO", "LUCIO", "JERROD", "WESTON", "HERSHEL", "BARTON", "PARKER", "LEMUEL", "BURT", "JULES", "GIL", "ELISEO", "AHMAD", "NIGEL", "EFREN", "ANTWAN", "ALDEN", "MARGARITO", "COLEMAN", "DINO", "OSVALDO", "LES", "DEANDRE", "NORMAND", "KIETH", "TREY", "NORBERTO", "NAPOLEON", "JEROLD", "FRITZ", "ROSENDO", "MILFORD", "CHRISTOPER", "ALFONZO", "LYMAN", "JOSIAH", "BRANT", "WILTON", "RICO", "JAMAAL", "DEWITT", "BRENTON", "OLIN", "FOSTER", "FAUSTINO", "CLAUDIO", "JUDSON", "GINO", "EDGARDO", "ALEC", "TANNER", "JARRED", "DONN", "TAD", "PRINCE", "PORFIRIO", "ODIS", "LENARD", "CHAUNCEY", "TOD", "MEL", "MARCELO", "KORY", "AUGUSTUS", "KEVEN", "HILARIO", "BUD", "SAL", "ORVAL", "MAURO", "ZACHARIAH", "OLEN", "ANIBAL", "MILO", "JED", "DILLON", "AMADO", "NEWTON", "LENNY", "RICHIE", "HORACIO", "BRICE", "MOHAMED", "DELMER", "DARIO", "REYES", "MAC", "JONAH", "JERROLD", "ROBT", "HANK", "RUPERT", "ROLLAND", "KENTON", "DAMION", "ANTONE", "WALDO", "FREDRIC", "BRADLY", "KIP", "BURL", "WALKER", "TYREE", "JEFFEREY", "AHMED", "WILLY", "STANFORD", "OREN", "NOBLE", "MOSHE", "MIKEL", "ENOCH", "BRENDON", "QUINTIN", "JAMISON", "FLORENCIO", "DARRICK", "TOBIAS", "HASSAN", "GIUSEPPE", "DEMARCUS", "CLETUS", "TYRELL", "LYNDON", "KEENAN", "WERNER", "GERALDO", "COLUMBUS", "CHET", "BERTRAM", "MARKUS", "HUEY", "HILTON", "DWAIN", "DONTE", "TYRON", "OMER", "ISAIAS", "HIPOLITO", "FERMIN", "ADALBERTO", "BO", "BARRETT", "TEODORO", "MCKINLEY", "MAXIMO", "GARFIELD", "RALEIGH", "LAWERENCE", "ABRAM", "RASHAD", "KING", "EMMITT", "DARON", "SAMUAL", "MIQUEL", "EUSEBIO", "DOMENIC", "DARRON", "BUSTER", "WILBER", "RENATO", "JC", "HOYT", "HAYWOOD", "EZEKIEL", "CHAS", "FLORENTINO", "ELROY", "CLEMENTE", "ARDEN", "NEVILLE", "EDISON", "DESHAWN", "NATHANIAL", "JORDON", "DANILO", "CLAUD", "SHERWOOD", "RAYMON", "RAYFORD", "CRISTOBAL", "AMBROSE", "TITUS", "HYMAN", "FELTON", "EZEQUIEL", "ERASMO", "STANTON", "LONNY", "LEN", "IKE", "MILAN", "LINO", "JAROD", "HERB", "ANDREAS", "WALTON", "RHETT", "PALMER", "DOUGLASS", "CORDELL", "OSWALDO", "ELLSWORTH", "VIRGILIO", "TONEY", "NATHANAEL", "DEL", "BENEDICT", "MOSE", "JOHNSON", "ISREAL", "GARRET", "FAUSTO", "ASA", "ARLEN", "ZACK", "WARNER", "MODESTO", "FRANCESCO", "MANUAL", "GAYLORD", "GASTON", "FILIBERTO", "DEANGELO", "MICHALE", "GRANVILLE", "WES", "MALIK", "ZACKARY", "TUAN", "ELDRIDGE", "CRISTOPHER", "CORTEZ", "ANTIONE", "MALCOM", "LONG", "KOREY", "JOSPEH", "COLTON", "WAYLON", "VON", "HOSEA", "SHAD", "SANTO", "RUDOLF", "ROLF", "REY", "RENALDO", "MARCELLUS", "LUCIUS", "KRISTOFER", "BOYCE", "BENTON", "HAYDEN", "HARLAND", "ARNOLDO", "RUEBEN", "LEANDRO", "KRAIG", "JERRELL", "JEROMY", "HOBERT", "CEDRICK", "ARLIE", "WINFORD", "WALLY", "LUIGI", "KENETH", "JACINTO", "GRAIG", "FRANKLYN", "EDMUNDO", "SID", "PORTER", "LEIF", "JERAMY", "BUCK", "WILLIAN", "VINCENZO", "SHON", "LYNWOOD", "JERE", "HAI", "ELDEN", "DORSEY", "DARELL", "BRODERICK", "ALONSO")
+
+	override fun run(): String {
+		Arrays.sort(names)
+		var sum: Long = 0
+		for (i in names.indices) {
+			var value = 0
+			for (j in 0 until names[i].length) value += names[i][j] - 'A' + 1
+			sum += value.toLong() * (i + 1)
+		}
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		/*
+	 * We apply straightforward algorithms to sort the names, sum the letter values, and multiply by the position.
+	 */
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p022().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p146.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.binarySearch;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.stream.IntStream.iterate;\r\nimport static projectEuler.programs.Library.listPrimes;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p146 extends EulerSolution {\r\n\tprivate static final int LIMIT = 150000000;\r\n\r\n\t/*\r\n\t * Right off the bat, we can exclude 90% of the candidates by the following observations:\r\n\t * - If n = 1 mod 2, then n^2 + 1 = 0 mod 2 which is composite.\r\n\t * - Thus we require n = 0 mod 2.\r\n\t * - If n = 1 mod 5, then n^2 + 9 = 0 mod 5 which is composite.\r\n\t * - If n = 2 mod 5, then n^2 + 1 = 0 mod 5 which is composite.\r\n\t * - If n = 3 mod 5, then n^2 + 1 = 0 mod 5 which is composite.\r\n\t * - If n = 4 mod 5, then n^2 + 9 = 0 mod 5 which is composite.\r\n\t * - Thus we require n = 0 mod 5.\r\n\t * - Taking these two together and using the Chinese remainder theorem (CRT), we require n = 0 mod 10.\r\n\t *\r\n\t * For each value of n, after we generate the set {n^2 + 1, n^2 + 3, ..., n^2 + 27}, it's more efficient to take each\r\n\t * prime number and test whether it divides any number, rather than take each number and test it against all prime numbers.\r\n\t * This is because some numbers in this set are prime so the latter method tests some numbers against all the primes;\r\n\t * the former method will bail out early as soon as ~any~ number in the set has a small prime factor.\r\n\t *\r\n\t * The rest of the algorithm is implemented straightforwardly.\r\n\t */\r\n\tprivate static final long[] INCREMENTS = {1, 3, 7, 9, 13, 27}; // Must be in non-decreasing order\r\n\tprivate static final long maxNumber = (long) LIMIT * LIMIT + INCREMENTS[INCREMENTS.length - 1];\r\n\tprivate static final int[] primes = listPrimes((int) sqrt(maxNumber));\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p146().run());\r\n\t}\r\n\r\n\tprivate static boolean hasConsecutivePrimes(int n) {\r\n\t\t// Generate the set of numbers to test for primality\r\n\t\tlong n2 = (long) n * n;\r\n\t\tlong[] temp = stream(INCREMENTS).map(increment -> n2 + increment).toArray();\r\n\r\n\t\t// Test that each number is prime.\r\n\t\t// Note: The nesting of the loops can be reversed, but this way is much faster.\r\n\t\tfor (int p : primes) for (long x : temp) if (x != p && x % p == 0) return false;\r\n\r\n\t\t// Test that each number that is not an increment is composite.\r\n\t\t// This checks that the prime numbers we found are in fact consecutive.\r\n\t\treturn iterate(1, i -> i < INCREMENTS[INCREMENTS.length - 1], i -> i + 1).noneMatch(i -> (binarySearch(INCREMENTS, i) < 0) && isPrime(n2 + i));\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate static boolean isPrime(long n) {\r\n\t\tint end = (int) sqrt(n);\r\n\t\treturn stream(primes).takeWhile(p -> p <= end).noneMatch(p -> (n != p) && ((n % p) == 0));\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tlong sum = iterate(0, n -> n < LIMIT, n -> n + 10).filter(p146::hasConsecutivePrimes).asLongStream().sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p146.java b/Random_Work/src/projectEuler/programs/p146.java
--- a/Random_Work/src/projectEuler/programs/p146.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p146.java	(date 1614916387201)
@@ -3,6 +3,8 @@
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 
+import java.math.BigInteger;
+
 import static java.util.Arrays.binarySearch;
 import static java.util.Arrays.stream;
 import static java.util.stream.IntStream.iterate;
@@ -32,7 +34,7 @@
 	 */
 	private static final long[] INCREMENTS = {1, 3, 7, 9, 13, 27}; // Must be in non-decreasing order
 	private static final long maxNumber = (long) LIMIT * LIMIT + INCREMENTS[INCREMENTS.length - 1];
-	private static final int[] primes = listPrimes((int) sqrt(maxNumber));
+	private static final int[] primes = listPrimes(sqrt(BigInteger.valueOf(maxNumber)).intValue());
 
 	public static void main(String[] args) {
 		System.out.println(new p146().run());
@@ -54,7 +56,7 @@
 
 	@Contract(pure = true)
 	private static boolean isPrime(long n) {
-		int end = (int) sqrt(n);
+		int end = sqrt(BigInteger.valueOf(n)).intValue();
 		return stream(primes).takeWhile(p -> p <= end).noneMatch(p -> (n != p) && ((n % p) == 0));
 	}
 
Index: Random_Work/src/projectEuler/programs/p203.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.math.BigInteger;\r\nimport java.util.HashSet;\r\n\r\nimport static java.lang.Math.max;\r\nimport static java.lang.Math.round;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.stream.IntStream.range;\r\nimport static projectEuler.programs.Library.*;\r\n\r\npublic final class p203 extends EulerSolution {\r\n\tprivate long[] primesSquared;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p203().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\t// Collect unique numbers in Pascal's triangle\r\n\t\tvar numbers = new HashSet<Long>();\r\n\t\tlong max = 0;\r\n\t\tfor (int n = 0; n <= 50; n++)\r\n\t\t\tfor (int k = 0; k <= n; k++) {\r\n\t\t\t\tBigInteger x = binomial(n, k);\r\n\t\t\t\tassert x.bitLength() < 64 : \"Number too large to handle\";\r\n\t\t\t\tnumbers.add(x.longValue());\r\n\t\t\t\tmax = max(x.longValue(), max);\r\n\t\t\t}\r\n\t\t// Prepare list of squared primes\r\n\t\tint[] primes = listPrimes((int) sqrt(max));\r\n\t\tprimesSquared = new long[primes.length];\r\n\t\trange(0, primes.length).forEachOrdered(i -> primesSquared[i] = round(pow(primes[i], 2)));\r\n\t\t// Sum up the squarefree numbers\r\n\t\tlong sum = numbers.stream().mapToLong(n -> n).filter(this::isSquarefree).sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate boolean isSquarefree(long n) {\r\n\t\treturn stream(primesSquared).takeWhile(p2 -> p2 <= n).noneMatch(p2 -> n % p2 == 0);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p203.java b/Random_Work/src/projectEuler/programs/p203.java
--- a/Random_Work/src/projectEuler/programs/p203.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p203.java	(date 1614916388011)
@@ -31,7 +31,7 @@
 				max = max(x.longValue(), max);
 			}
 		// Prepare list of squared primes
-		int[] primes = listPrimes((int) sqrt(max));
+		int[] primes = listPrimes(sqrt(BigInteger.valueOf(max)).intValue());
 		primesSquared = new long[primes.length];
 		range(0, primes.length).forEachOrdered(i -> primesSquared[i] = round(pow(primes[i], 2)));
 		// Sum up the squarefree numbers
Index: Random_Work/src/projectEuler/programs/p211.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.Arrays.fill;\r\nimport static java.util.stream.IntStream.range;\r\n\r\npublic final class p211 extends EulerSolution {\r\n\tprivate static final int LIMIT = 64000000;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p211().run());\r\n\t}\r\n\r\n\t// Suppose i is the highest natural number such that k^i divides n.\r\n\t// Then this function returns k^(2*0) + k^(2*1) + k^(2*2) + ... + k^(2*i).\r\n\t// For example, with n=50 and k=5, i=2 because k^2 = 25 divides n = 50,\r\n\t// so the result is k^0 + k^2 + k^4 = 1 + 25 + 625 = 651.\r\n\t@Contract(pure = true)\r\n\tprivate static long powerSquareSum(int n, int k) {\r\n\t\tlong result = 1;\r\n\t\tlong k2 = (long) k * k;\r\n\t\twhile (n % k == 0) {\r\n\t\t\tn /= k;\r\n\t\t\tresult = result * k2 + 1;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// Requires about 512 MB of memory\r\n\t@NotNull String run() {\r\n\t\t// sigma2[i] is the sum of the square of i's divisors.\r\n\t\t// For example, sigma2[6] = 1^2 + 2^2 + 3^2 + 6^2 = 20.\r\n\t\t// Computing using a modification of the sieve of Eratosthenes.\r\n\t\tlong[] sigma2 = new long[LIMIT];\r\n\t\tfill(sigma2, 1, sigma2.length, 1);\r\n\t\tfor (int i = 2; i < sigma2.length; i++)\r\n\t\t\tif (sigma2[i] == 1) for (int j = i; j < sigma2.length; j += i) sigma2[j] *= powerSquareSum(j, i);\r\n\t\tlong sum;\r\n\t\tSquareTester sqt = new SquareTester(255255);\r\n\t\tsum = range(1, sigma2.length).filter(i -> sqt.isPerfectSquare(sigma2[i])).asLongStream().sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n\r\n\t// Consider the set of all squared natural numbers, i.e. {0, 1, 4, 9, 16, 25, ...}.\r\n\t// When this set is viewed modulo some number n, usually not every residue is in the set.\r\n\t// For example, all squares modulo 3 is {0, 1} - so a perfect square modulo 3 is never 2.\r\n\t// By choosing a suitably large modulus, we can quickly exclude many numbers that can't be perfect squares.\r\n\tprivate static final class SquareTester {\r\n\t\t// isResidue[i] is true iff there exists a natural number k such that i = k^2 mod modulus.\r\n\t\t// Hence for any i, if isResidue[i mod modulus] is false, then i is not a perfect square.\r\n\t\tprivate boolean[] isResidue;\r\n\r\n\t\t// Any product of unique small prime numbers excluding 2 makes a good modulus\r\n\t\t// that leads to fast tests. But the behavior is correct for any modulus >= 1.\r\n\t\tSquareTester(int modulus) {\r\n\t\t\tassert modulus >= 1;\r\n\t\t\tisResidue = new boolean[modulus];\r\n\t\t\trange(0, modulus).forEachOrdered(i -> isResidue[(int) (((long) i * i) % modulus)] = true);\r\n\t\t}\r\n\r\n\t\t@Contract(pure = true)\r\n\t\tboolean isPerfectSquare(long x) {\r\n\t\t\t// Reject many but not all numbers that aren't a perfect square.\r\n\t\t\t// This speed optimization can be omitted without affecting correctness.\r\n\t\t\tif (!isResidue[(int) (x % isResidue.length)]) return false;\r\n\t\t\t// A complete algorithm for detecting squares\r\n\t\t\tlong y = 0;\r\n\t\t\tfor (long i = -2147483648; i != 0; i >>>= 1) {\r\n\t\t\t\ty |= i;\r\n\t\t\t\tif ((y > 3037000499L) || ((y * y) > x)) y ^= i;\r\n\t\t\t}\r\n\t\t\treturn (y * y) == x;\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p211.java b/Random_Work/src/projectEuler/programs/p211.java
--- a/Random_Work/src/projectEuler/programs/p211.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p211.java	(date 1614916524392)
@@ -38,7 +38,7 @@
 		for (int i = 2; i < sigma2.length; i++)
 			if (sigma2[i] == 1) for (int j = i; j < sigma2.length; j += i) sigma2[j] *= powerSquareSum(j, i);
 		long sum;
-		SquareTester sqt = new SquareTester(255255);
+		SquareTester sqt = new SquareTester();
 		sum = range(1, sigma2.length).filter(i -> sqt.isPerfectSquare(sigma2[i])).asLongStream().sum();
 		return Long.toString(sum);
 	}
@@ -50,14 +50,14 @@
 	private static final class SquareTester {
 		// isResidue[i] is true iff there exists a natural number k such that i = k^2 mod modulus.
 		// Hence for any i, if isResidue[i mod modulus] is false, then i is not a perfect square.
-		private boolean[] isResidue;
+		private final boolean[] isResidue;
 
 		// Any product of unique small prime numbers excluding 2 makes a good modulus
 		// that leads to fast tests. But the behavior is correct for any modulus >= 1.
-		SquareTester(int modulus) {
-			assert modulus >= 1;
-			isResidue = new boolean[modulus];
-			range(0, modulus).forEachOrdered(i -> isResidue[(int) (((long) i * i) % modulus)] = true);
+		SquareTester() {
+			assert 255255 >= 1;
+			isResidue = new boolean[255255];
+			range(0, 255255).forEachOrdered(i -> isResidue[(int) (((long) i * i) % 255255)] = true);
 		}
 
 		@Contract(pure = true)
Index: Random_Work/src/projectEuler/programs/p142.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.lang.Math.min;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p142 extends EulerSolution {\r\n\tprivate boolean[] isSquare;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p142().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tint sumLimit = 10;\r\n\t\t// Raise the limit until a sum is found\r\n\t\twhile (true) {\r\n\t\t\tisSquare = new boolean[sumLimit];\r\n\t\t\tfor (int i = 0; i * i < sumLimit; i++) isSquare[i * i] = true;\r\n\t\t\tint sum = findSum(sumLimit);\r\n\t\t\tif (sum != -1) break;\r\n\t\t\tsumLimit *= 10;\r\n\t\t}\r\n\t\t// Lower the limit until no sum is found\r\n\t\twhile (true) {\r\n\t\t\tint sum = findSum(sumLimit);\r\n\t\t\t// No smaller sum found\r\n\t\t\tif (sum == -1) return Integer.toString(sumLimit);\r\n\t\t\tsumLimit = sum;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\t * Finds any sum s = x+y+z such that s < limit, 0 < z < y < x, and these are\r\n\t * perfect squares: x+y, x-y, x+z, x-z, y+z, y-z. Returns -1 if none is found.\r\n\t *\r\n\t * Suppose we let x + y = a^2 and x - y = b^2, so that they are always square.\r\n\t * Then x = (a^2 + b^2) / 2 and y = (a^2 - b^2) / 2. By ensuring a > b > 0, we have x > y > 0.\r\n\t * Now z < y and z < limit - x - y. Let y + z = c^2, then explicitly check\r\n\t * if x+z, x-z, and y-z are square.\r\n\t */\r\n\tprivate int findSum(int limit) {\r\n\t\tfor (int a = 1; a * a < limit; a++)\r\n\t\t\tfor (int b = a - 1; b > 0; b--) {\r\n\t\t\t\t// Need them to be both odd or both even so that we get integers for x and y\r\n\t\t\t\tif (((a + b) % 2) != 0) continue;\r\n\t\t\t\tint x = ((a * a) + (b * b)) >> 1, y = ((a * a) - (b * b)) >> 1;\r\n\t\t\t\t// Because z >= 1\r\n\t\t\t\tif ((x + y + 1) >= limit) continue;\r\n\t\t\t\tint zLimit = min(y, limit - x - y);\r\n\t\t\t\tfor (int c = sqrt(y) + 1; ((c * c) - y) < zLimit; c++)\r\n\t\t\t\t\tif (isSquare[(x + (c * c)) - y] && isSquare[x - (c * c) - y] && isSquare[-(c * c)])\r\n\t\t\t\t\t\treturn (x + y + (c * c)) - y;\r\n\t\t\t}\r\n\t\treturn -1;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p142.java b/Random_Work/src/projectEuler/programs/p142.java
--- a/Random_Work/src/projectEuler/programs/p142.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p142.java	(date 1614915693224)
@@ -2,6 +2,8 @@
 
 import org.jetbrains.annotations.NotNull;
 
+import java.math.BigInteger;
+
 import static java.lang.Math.min;
 import static projectEuler.programs.Library.sqrt;
 
@@ -49,7 +51,7 @@
 				// Because z >= 1
 				if ((x + y + 1) >= limit) continue;
 				int zLimit = min(y, limit - x - y);
-				for (int c = sqrt(y) + 1; ((c * c) - y) < zLimit; c++)
+				for (int c = sqrt(BigInteger.valueOf(y)).intValue() + 1; ((c * c) - y) < zLimit; c++)
 					if (isSquare[(x + (c * c)) - y] && isSquare[x - (c * c) - y] && isSquare[-(c * c)])
 						return (x + y + (c * c)) - y;
 			}
Index: Random_Work/src/projectEuler/programs/p090.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.lang.Integer.bitCount;\r\n\r\npublic final class p090 extends EulerSolution {\r\n\tprivate static final int[][] SQUARES = {{0, 1}, {0, 4}, {0, 9}, {1, 6}, {2, 5}, {3, 6}, {4, 9}, {6, 4}, {8, 1}};\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p090().run());\r\n\t}\r\n\r\n\tprivate static boolean isArrangementValid(int a, int b) {\r\n\t\tif (testBit(a, 6) || testBit(a, 9)) a |= 576;\r\n\t\tif (testBit(b, 6) || testBit(b, 9)) b |= 576;\r\n\t\tfor (int[] sqr : SQUARES)\r\n\t\t\tif (!((testBit(a, sqr[0]) && testBit(b, sqr[1])) || (testBit(a, sqr[1]) && testBit(b, sqr[0]))))\r\n\t\t\t\treturn false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate static boolean testBit(int x, int i) {\r\n\t\treturn ((x >>> i) & 1) != 0;\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\t// Each die has (10 choose 6) arrangements, so we have at most 44100 arrangements to check\r\n\t\tint count = 0;\r\n\t\t// Ensure i <= j to force the dice to be orderless\r\n\t\tfor (int i = 0; i < (1 << 10); i++)\r\n\t\t\tfor (int j = i; j < (1 << 10); j++)\r\n\t\t\t\tif (bitCount(i) == 6 && bitCount(j) == 6 && isArrangementValid(i, j)) count++;\r\n\t\treturn Integer.toString(count);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p090.java b/Random_Work/src/projectEuler/programs/p090.java
--- a/Random_Work/src/projectEuler/programs/p090.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p090.java	(date 1617055703382)
@@ -26,7 +26,8 @@
 		return ((x >>> i) & 1) != 0;
 	}
 
-	@NotNull String run() {
+	@NotNull
+	public String run() {
 		// Each die has (10 choose 6) arrangements, so we have at most 44100 arrangements to check
 		int count = 0;
 		// Ensure i <= j to force the dice to be orderless
Index: Random_Work/src/projectEuler/programs/p007.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p007.kt b/Random_Work/src/projectEuler/programs/p007.kt
new file mode 100644
--- /dev/null	(date 1614951979446)
+++ b/Random_Work/src/projectEuler/programs/p007.kt	(date 1614951979446)
@@ -0,0 +1,28 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPrime
+
+class p007 : EulerSolution() {
+	/*
+	 * Computers are fast, so we can implement this solution by testing each number
+	 * individually for primeness, instead of using the more efficient sieve of Eratosthenes.
+	 */
+	override fun run(): String {
+		var i = 2
+		var count = 0
+		while (true) {
+			if (isPrime(i)) {
+				count++
+				if (count == 10001) return Integer.toString(i)
+			}
+			i++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p007().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p387.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport java.math.BigInteger;\r\n\r\nimport static java.lang.Math.toIntExact;\r\nimport static java.math.BigInteger.ZERO;\r\nimport static java.math.BigInteger.valueOf;\r\nimport static java.util.stream.IntStream.rangeClosed;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p387 extends EulerSolution {\r\n\tprivate static final long LIMIT = 100000000000000L;\r\n\tprivate BigInteger sum = ZERO;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p387().run());\r\n\t}\r\n\r\n\tprivate static boolean isPrime(long x) {\r\n\t\tif (x < 0) throw new IllegalArgumentException(\"Negative number\");\r\n\t\telse if ((x == 0) || (x == 1)) return false;\r\n\t\tfor (int i = 2, end = toIntExact(sqrt(x)); i <= end; i++) if ((x % i) == 0) return false;\r\n\t\treturn true;\r\n\t}\r\n\r\n\tString run() {\r\n\t\t// All one-digit numbers are trivially Harshad numbers\r\n\t\trangeClosed(1, 9).forEachOrdered(i -> findHarshadPrimes(i, i, false));\r\n\t\treturn sum.toString();\r\n\t}\r\n\r\n\t// Note: n must be a right-truncatable Harshad number, and the other arguments are properties of the number n.\r\n\tprivate void findHarshadPrimes(long n, int digitSum, boolean isStrong) {\r\n\t\t// Shift left by 1 digit, and try all 10 possibilities for the rightmost digit\r\n\t\tlong m = n * 10;\r\n\t\tint s = digitSum;\r\n\t\tfor (int i = 0; i < 10 && m < LIMIT; i++, m++, s++) {\r\n\t\t\tif (isStrong && isPrime(m)) sum = sum.add(valueOf(m));\r\n\t\t\tif ((m % s) == 0) findHarshadPrimes(m, s, isPrime(m / s));\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p387.java b/Random_Work/src/projectEuler/programs/p387.java
--- a/Random_Work/src/projectEuler/programs/p387.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p387.java	(date 1614915693247)
@@ -2,7 +2,6 @@
 
 import java.math.BigInteger;
 
-import static java.lang.Math.toIntExact;
 import static java.math.BigInteger.ZERO;
 import static java.math.BigInteger.valueOf;
 import static java.util.stream.IntStream.rangeClosed;
@@ -19,7 +18,7 @@
 	private static boolean isPrime(long x) {
 		if (x < 0) throw new IllegalArgumentException("Negative number");
 		else if ((x == 0) || (x == 1)) return false;
-		for (int i = 2, end = toIntExact(sqrt(x)); i <= end; i++) if ((x % i) == 0) return false;
+		for (int i = 2, end = sqrt(valueOf(x)).intValue(); i <= end; i++) if ((x % i) == 0) return false;
 		return true;
 	}
 
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Investment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Investment.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Investment.kt
new file mode 100644
--- /dev/null	(date 1614911948801)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Investment.kt	(date 1614911948801)
@@ -0,0 +1,65 @@
+package objectOriented.investmentsKotlin
+
+import java.math.BigDecimal
+import java.math.RoundingMode.*
+import kotlin.text.*
+
+internal abstract class Investment(name: Name) {
+	/**
+	 * @return the total value of profit/loss generated by a particular [Investment] object
+	 */
+	var totalYield: Double
+		private set
+
+	/**
+	 * @return identifier for investment such as "Money Market Account"
+	 */
+	var name: Name
+		private set
+
+	abstract fun invest1Year(amount: Double): Double
+
+	/**
+	 * @param amount the value to be added to [.totalYield]
+	 */
+	fun addToYield(amount: Double) {
+		totalYield += amount
+	}
+
+	/**
+	 * @param name an identifier for an investment
+	 */
+	fun setName(name: String?) {
+		this.name = Name(name!!)
+	}
+
+	/**
+	 * @return `String` representing name and [.totalYield] amount
+	 */
+	override fun toString() = String.format("%s totalYield = %s", name, format(totalYield))
+
+	companion object {
+		/**
+		 * @param amount to be rounded to nearest cent/hundredth
+		 * @return `amount` after rounding to monetary notation
+		 */
+		private fun toDollarNotation(amount: Double) = BigDecimal(amount.toString()).setScale(2, HALF_UP).toDouble()
+
+		/**
+		 * @param amount the value to be formatted as a value in dollars and cents
+		 * @return `amount` after reformatting
+		 */
+		@JvmStatic
+		fun format(amount: Double) = String.format("$%s", String.format("%.2f", toDollarNotation(amount)))
+	}
+
+	/**
+	 * Constructor sets [.name] to given value and [.totalYield] to zero
+	 *
+	 * @param name an identifier for investment such as "Money Market Account"
+	 */
+	init {
+		this.name = Name(name.toString())
+		totalYield = 0.0
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InterestRate.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InterestRate.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InterestRate.kt
new file mode 100644
--- /dev/null	(date 1614741336894)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InterestRate.kt	(date 1614741336894)
@@ -0,0 +1,22 @@
+package objectOriented.investmentsKotlin
+
+import org.jetbrains.annotations.Contract
+import java.math.BigDecimal
+import java.math.RoundingMode.HALF_UP
+
+internal class InterestRate(interestRate: String) {
+	private val interestRate = StringBuilder(interestRate).deleteCharAt(interestRate.indexOf("%")).toString().toDouble() / 100
+
+	@Contract(pure = true)
+	fun doubleValue(): Double = interestRate
+
+	@Contract(pure = true)
+	override fun toString(): String =
+			String.format("%s%%", if (interestRate.toString().length <= 3) interestRate else BigDecimal(interestRate * 100).setScale(2, HALF_UP))
+
+	companion object {
+		@JvmStatic
+		@Contract(pure = true)
+		fun doubleValue(a: InterestRate): Double = a.doubleValue()
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Moonshot.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Moonshot.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Moonshot.kt
new file mode 100644
--- /dev/null	(date 1614742706237)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Moonshot.kt	(date 1614742706237)
@@ -0,0 +1,44 @@
+package objectOriented.investmentsKotlin
+
+import java.lang.System.out
+import java.util.*
+
+internal class Moonshot : Investment {
+	private val multiplier: Int
+	private var collapseChance = 100.0
+	private var multiplierChance = 100.0
+
+	constructor() : this(Name("Moonshot")) {}
+	private constructor(name: Name) : super(name) {
+		collapseChance = 80.0
+		multiplierChance = 1.0
+		multiplier = 100000
+	}
+
+	constructor(name: String?, collapseChance: Double, multiplierChance: Double, multiplier: Int) : super(Name(name!!)) {
+		this.collapseChance *= collapseChance
+		this.multiplierChance *= multiplierChance
+		this.multiplier = multiplier
+	}
+
+	override fun invest1Year(amount: Double): Double {
+		var amount = amount
+		val chance = Random().nextInt(100) + 1
+		val yield: Double
+		when {
+			chance <= 80 -> {
+				`yield` = -amount
+				addToYield(`yield`)
+				amount += `yield`
+			}
+			chance.toDouble() == collapseChance + multiplierChance -> {
+				`yield` = amount * multiplier
+				addToYield(`yield`)
+				amount *= multiplier.toDouble()
+			}
+			else -> `yield` = 0.0
+		}
+		out.printf("%s returned a yield of %s for a total of %s.%n", name, format(`yield`), format(amount))
+		return amount
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentSplitDriver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentSplitDriver.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentSplitDriver.kt
new file mode 100644
--- /dev/null	(date 1614742398510)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentSplitDriver.kt	(date 1614742398510)
@@ -0,0 +1,108 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.Investment.Companion.format
+import java.lang.System.out
+import java.util.*
+import java.util.function.Consumer
+import java.util.stream.IntStream.range
+import java.util.stream.IntStream.rangeClosed
+
+object InvestmentSplitDriver {
+	/**
+	 * The the first year of investments
+	 */
+	private const val age = 16
+
+	/**
+	 * The last year of investments
+	 */
+	private const val retirementAge = 65
+
+	/**
+	 * The [<] for all of the types of investments.
+	 *
+	 *
+	 * Note: the [ArrayList] mus be filled in the order of [CertificateOfDeposit], [MutualFund], [BlueChipStock], [PennyStock], and lastly [Moonshot] in order for the method [.splitInvestmentByPercent] to work.
+	 */
+	private val portfolio = ArrayList<Investment>()
+
+	/**
+	 * The initial amount of money
+	 */
+	private var total = 1000.0
+
+	/**
+	 * Percent invested in a [CertificateOfDeposit] investment
+	 */
+	private var cdP = 0.30125
+
+	/**
+	 * Percent invested in a [MutualFund] investment
+	 */
+	private var mfP = 0.20125
+
+	/**
+	 * Percent invested in a [BlueChipStock] investment
+	 */
+	private var bcP = 0.20125
+
+	/**
+	 * Percent invested in a [PennyStock] investment
+	 */
+	private var psP = 0.29125
+
+	/**
+	 * Percent invested in a [Moonshot] investment
+	 */
+	private var msP = 0.005
+
+	@JvmStatic
+	fun main(args: Array<String>) {
+//		Note you should clear these each time if you run multiple simulations
+		portfolio.clear()
+		portfolio += CertificateOfDeposit("CD with 2% yield", 0.02) // Investment 0
+		portfolio += MutualFund("Mutual Fund (-3% -> 8%)", -0.03, 0.08, 20.0) // Investment 1
+		portfolio += BlueChipStock("Blue Chip Stock (-8% -> 15%)", -0.08, 0.15, 0.01) // Investment 2
+		portfolio += PennyStock("Penny Stock (-50% -> 80%)", -0.5, 0.8, 0.05, 0.05, 50) // Investment 3
+		portfolio += Moonshot("Moonshot (80% / 1%)", 0.8, 0.01, 100000) // Investment 4
+
+//		Execute Investment strategy for each year
+		rangeClosed(age, retirementAge).forEachOrdered {
+//			MAKE ADJUSTMENTS BASED ON AGE AND/OR TOTAL
+			if (age > 55 || total >= 500000) {
+//				Percent invested in a Certificate of Deposit investment
+				cdP = 0.2
+//				Percent invested in a Mutual Fund investment
+				mfP = 0.6
+//				Percent invested in a Blue Chip Stock investment
+				bcP = 0.2
+//				Percent invested in a Penny Stock investment
+				psP = 0.0
+//				Percent invested in a Moonshot investment
+				msP = 0.0
+			}
+//			This line makes the investment according to your current allocation
+			total = splitInvestmentByPercent()
+			println()
+		}
+//		Prints overall total at retirement on a separate line
+		out.printf("%nOverall Total => %s%n", format(total))
+//		Print the yield of each Investment
+		portfolio.forEach(Consumer { inv: Investment -> out.printf("Yield of %s from %s%n", format(inv.totalYield), inv.name) })
+	}
+
+	/**
+	 * Used to split an investment
+	 *
+	 * @see Investment.invest1Year
+	 */
+	private fun splitInvestmentByPercent(): Double {
+//		The +0.0001 allows for a small rounding error
+		if (cdP + mfP + bcP + psP + msP > 1) {
+			println("You cannot invest more than 100%")
+			return 0.0
+		}
+		val a = doubleArrayOf(cdP, mfP, bcP, psP, msP)
+		return range(0, a.size).map { i -> portfolio[i].invest1Year(a[i] * total).toInt() }.sum().toDouble()
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/BlueChipStock.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/BlueChipStock.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/BlueChipStock.kt
new file mode 100644
--- /dev/null	(date 1614911909127)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/BlueChipStock.kt	(date 1614911909127)
@@ -0,0 +1,42 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.InterestRate.Companion.doubleValue
+import java.lang.Math.random
+import java.util.*
+
+internal class BlueChipStock : Investment {
+	private val minimumInterest: Double
+	private val maximumInterest: Double
+	private val collapseChance: Double
+
+	constructor() : this(Name("Blue Chip Stock")) {}
+	private constructor(name: Name) : super(name) {
+		minimumInterest = -8.0
+		maximumInterest = 15.0
+		collapseChance = 1.0
+	}
+
+	constructor(name: String?, minimumInterest: Double, maximumInterest: Double, collapseChance: Double) : super(Name(name!!)) {
+		this.minimumInterest = 100 * minimumInterest
+		this.maximumInterest = 100 * maximumInterest
+		this.collapseChance = 100 * collapseChance
+	}
+
+	public override fun invest1Year(amount: Double): Double {
+		var amount = amount
+		val interestRate = InterestRate((random() * (maximumInterest - minimumInterest + Double.MIN_VALUE) + minimumInterest).toString() + "%")
+		val chance = Random().nextInt(100) + 1
+		val yield: Double
+		if (chance <= collapseChance) {
+			`yield` = -amount
+			addToYield(`yield`)
+			amount = 0.0
+		} else {
+			`yield` = amount * interestRate.doubleValue()
+			addToYield(`yield`)
+			amount *= doubleValue(interestRate) + 1
+		}
+		System.out.printf("%s returned a %s yield of %s for a total of %s.%n", name, interestRate, format(`yield`), format(amount))
+		return amount
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/MutualFund.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/MutualFund.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/MutualFund.kt
new file mode 100644
--- /dev/null	(date 1614742398826)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/MutualFund.kt	(date 1614742398826)
@@ -0,0 +1,35 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.InterestRate.Companion.doubleValue
+import java.lang.Math.random
+import java.lang.System.out
+
+internal class MutualFund : Investment {
+	private val fee: Double
+	private var minimumInterest = 100.0
+	private var maximumInterest = 100.0
+
+	constructor() : this(Name("Mutual Fund"))
+	private constructor(name: Name) : super(name) {
+		minimumInterest = -3.0
+		maximumInterest = 8.0
+		fee = 20.0
+	}
+
+	constructor(name: String?, minimumInterest: Double, maximumInterest: Double, fee: Double) : super(Name(name!!)) {
+		this.minimumInterest *= minimumInterest
+		this.maximumInterest *= maximumInterest
+		this.fee = fee
+	}
+
+	override fun invest1Year(amount: Double): Double {
+		var amount = amount
+		val interestRate = InterestRate((random() * (maximumInterest - minimumInterest + Double.MIN_VALUE) + minimumInterest).toString() + "%")
+		val yield = amount * interestRate.doubleValue() - fee
+		addToYield(`yield`)
+		amount *= doubleValue(interestRate) + 1
+		amount -= 20.0
+		out.printf("%s returned a %s yield of %s for a total of %s with the fee included.%n", name, interestRate, format(`yield`), format(amount))
+		return amount
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/CertificateOfDeposit.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/CertificateOfDeposit.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/CertificateOfDeposit.kt
new file mode 100644
--- /dev/null	(date 1614911931100)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/CertificateOfDeposit.kt	(date 1614911931100)
@@ -0,0 +1,18 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.InterestRate.Companion.doubleValue
+import java.lang.System.out
+
+internal class CertificateOfDeposit private constructor(name: Name, private val interestRate: InterestRate) : Investment(name) {
+	constructor() : this(Name("Certificate of Deposit"), InterestRate("2.2%")) {}
+	constructor(name: String?, interestRate: Double) : this(Name(name!!), InterestRate((interestRate * 100).toString() + "%")) {}
+
+	override fun invest1Year(amount: Double): Double {
+		var amount: Double = amount
+		val yield = amount * interestRate.doubleValue()
+		addToYield(`yield`)
+		amount *= doubleValue(interestRate) + 1
+		out.printf("%s returned a %s yield of %s for a total of %s.%n", name, interestRate, format(`yield`), format(amount))
+		return amount
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/PennyStock.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/PennyStock.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/PennyStock.kt
new file mode 100644
--- /dev/null	(date 1614742398626)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/PennyStock.kt	(date 1614742398626)
@@ -0,0 +1,53 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.InterestRate.Companion.doubleValue
+import java.lang.Math.random
+import java.lang.System.out
+import java.util.*
+
+internal class PennyStock : Investment {
+	private val multiplier: Int
+	private var minimumInterest = 100.0
+	private var maximumInterest = 100.0
+	private var collapseChance = 100.0
+	private var multiplierChance = 100.0
+
+	constructor() : this(Name("Penny Stock"))
+	private constructor(name: Name) : super(name) {
+		minimumInterest = -50.0
+		maximumInterest = 80.0
+		collapseChance = 5.0
+		multiplierChance = 5.0
+		multiplier = 50
+	}
+
+	constructor(name: String?, minimumInterest: Double, maximumInterest: Double, collapseChance: Double, multiplierChance: Double, multiplier: Int) : super(Name(name!!)) {
+		this.minimumInterest *= minimumInterest
+		this.maximumInterest *= maximumInterest
+		this.collapseChance *= collapseChance
+		this.multiplierChance *= multiplierChance
+		this.multiplier = multiplier
+	}
+
+	override fun invest1Year(amount: Double): Double {
+		var amount = amount
+		val interestRate = InterestRate("${(random() * (maximumInterest - minimumInterest + Double.MIN_VALUE) + minimumInterest)}%")
+		val chance = Random().nextInt(100) + 1
+		val yield: Double
+		if (chance <= collapseChance) {
+			`yield` = -amount
+			addToYield(`yield`)
+			amount = 0.0
+		} else if (chance >= collapseChance + 1 && chance <= multiplierChance) {
+			`yield` = amount * multiplier
+			addToYield(`yield`)
+			amount *= multiplier.toDouble()
+		} else {
+			`yield` = amount * interestRate.doubleValue()
+			addToYield(`yield`)
+			amount *= doubleValue(interestRate) + 1
+		}
+		out.printf("%s returned a %s yield of %s for a total of %s.%n", name, interestRate, format(`yield`), format(amount))
+		return amount
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentDriver.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentDriver.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentDriver.kt
new file mode 100644
--- /dev/null	(date 1614741694544)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/InvestmentDriver.kt	(date 1614741694544)
@@ -0,0 +1,33 @@
+package objectOriented.investmentsKotlin
+
+import objectOriented.investmentsKotlin.Investment.Companion.format
+import java.lang.System.out
+import java.util.*
+import java.util.stream.IntStream.rangeClosed
+
+internal object InvestmentDriver {
+	private const val age = 16
+	private const val retirementAge = 65
+	private val portfolio = ArrayList<Investment>()
+	private var total = 1000.0
+
+	@JvmStatic
+	fun main(args: Array<String>) {
+		portfolio.add(CertificateOfDeposit())
+		rangeClosed(age, retirementAge).forEachOrdered { total = portfolio[0].invest1Year(total) }
+		out.printf("%s%n%n", portfolio[0])
+		portfolio.add(MutualFund())
+		rangeClosed(age, retirementAge).forEachOrdered { total = portfolio[1].invest1Year(total) }
+		out.printf("%s%n%n", portfolio[1])
+		portfolio.add(BlueChipStock())
+		rangeClosed(age, retirementAge).forEachOrdered { total = portfolio[2].invest1Year(total) }
+		out.printf("%s%n%n", portfolio[2])
+		portfolio.add(PennyStock())
+		rangeClosed(age, retirementAge).forEachOrdered { total = portfolio[3].invest1Year(total) }
+		out.printf("%s%n%n", portfolio[3])
+		portfolio.add(Moonshot())
+		rangeClosed(age, retirementAge).forEachOrdered { total = portfolio[4].invest1Year(total) }
+		out.printf("%s%n%n", portfolio[4])
+		out.printf("Total: %s%n", format(total))
+	}
+}
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Name.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Name.kt b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Name.kt
new file mode 100644
--- /dev/null	(date 1614741694346)
+++ b/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/investmentsKotlin/Name.kt	(date 1614741694346)
@@ -0,0 +1,8 @@
+package objectOriented.investmentsKotlin
+
+import org.jetbrains.annotations.Contract
+
+class Name @Contract(pure = true) constructor(private val name: String) {
+	@Contract(pure = true)
+	override fun toString() = name
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p357.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.util.stream.IntStream.rangeClosed;\r\nimport static projectEuler.programs.Library.*;\r\n\r\npublic final class p357 extends EulerSolution {\r\n\tprivate static final int LIMIT = pow(10, 8);\r\n\r\n\t/*\r\n\t * From the problem statement, we are given the search range of 1 <= n <= 10^8.\r\n\t * For a given integer n, we know that every divisor d of n is in the range [1, n].\r\n\t *\r\n\t * It is beneficial to precompute a table of primes in this application, but what is\r\n\t * the maximum value of f(d) = d + n/d for an arbitrary divisor d for 1 <= n <= 10^8?\r\n\t * Clearly both d and n/d are in the range [1, n], so an upper bound is 2n.\r\n\t *\r\n\t * We can do better; in fact the maximum value of f(d) is n + 1, achieved at the endpoints d = {1, n}.\r\n\t * The interior values of d yield a smaller value of f(d) because the derivative f'(d) = 1 - n/d^2\r\n\t * is negative on the interval (1, sqrt(d)) and positive on the interval (sqrt(d), n). Hence on\r\n\t * the domain [1, n], the function f(d) has a minimum at d = sqrt(n) which is 2*sqrt(n).\r\n\t *\r\n\t * As a sanity check, will 2*sqrt(n) ever be greater than n + 1?\r\n\t * (n - 1)^2 >= 0  (because it's a square) (true for all n in reals)\r\n\t * n^2 - 2n + 1 >= 0 (expand the multiplication)\r\n\t * n^2 + 2n + 1 >= 4n (add 4n to both sides)\r\n\t * (n + 1)^2 >= 4n  (factor)\r\n\t * n + 1 >= 2*sqrt(n) (take square root on both sides, valid for n >= 0)\r\n\t * Therefore for n >= 1, it is true that for all d in [1, n], we have f(d) <= n + 1.\r\n\t *\r\n\t * Thus we go ahead and precompute a table of primeness for the domain [1, 10^8 + 1],\r\n\t * and it will be valid for f(d) = d + n/d for any n and d in the appropriate ranges.\r\n\t *\r\n\t * Now we discuss how to test whether an integer n is \"prime-generating\" or not.\r\n\t * Every integer n trivially has 1 as a factor. As an optimization, we test whether\r\n\t * f(1) = 1 + n/1 = 1 + n is prime or not. If it isn't prime then we skip this n.\r\n\t * If it is prime, then we only need to examine all of n's factors in the range (1, sqrt(n)].\r\n\t * This is because every factor in the remaining upper range of (sqrt(n), n] can be computed by\r\n\t * n/d for values of d in the lower range [1, sqrt(n)]. But in this problem, we don't even\r\n\t * need to look at these complementary upper factors because f(d) has the same value as f(n/d).\r\n\t */\r\n\tprivate boolean[] isPrime;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p357().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tisPrime = listPrimality(LIMIT + 1);\r\n\t\tlong sum = rangeClosed(0, LIMIT).filter(n -> isPrime[n + 1] && isPrimeGenerating(n)).asLongStream().sum();\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n\r\n\t@Contract(pure = true)\r\n\tprivate boolean isPrimeGenerating(int n) {\r\n\t\tfor (int i = 1, end = sqrt(n); i <= end; i++) if (((n % i) == 0) && !isPrime[i + n / i]) return false;\r\n\t\treturn true;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p357.java b/Random_Work/src/projectEuler/programs/p357.java
--- a/Random_Work/src/projectEuler/programs/p357.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p357.java	(date 1614915693256)
@@ -3,6 +3,7 @@
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 
+import static java.math.BigInteger.valueOf;
 import static java.util.stream.IntStream.rangeClosed;
 import static projectEuler.programs.Library.*;
 
@@ -49,13 +50,13 @@
 
 	@NotNull String run() {
 		isPrime = listPrimality(LIMIT + 1);
-		long sum = rangeClosed(0, LIMIT).filter(n -> isPrime[n + 1] && isPrimeGenerating(n)).asLongStream().sum();
-		return Long.toString(sum);
+		return Long.toString(rangeClosed(0, LIMIT).filter(n -> isPrime[n + 1] && isPrimeGenerating(n)).asLongStream().sum());
 	}
 
 	@Contract(pure = true)
 	private boolean isPrimeGenerating(int n) {
-		for (int i = 1, end = sqrt(n); i <= end; i++) if (((n % i) == 0) && !isPrime[i + n / i]) return false;
+		for (int i = 1, end = sqrt(valueOf(n)).intValue(); i <= end; i++)
+			if (((n % i) == 0) && !isPrime[i + n / i]) return false;
 		return true;
 	}
 }
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p037.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p037.kt b/Random_Work/src/projectEuler/programs/p037.kt
new file mode 100644
--- /dev/null	(date 1614951976230)
+++ b/Random_Work/src/projectEuler/programs/p037.kt	(date 1614951976230)
@@ -0,0 +1,42 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPrime
+
+class p037 : EulerSolution() {
+	override fun run(): String {
+		var sum: Long = 0
+		var count = 0
+		var n = 10
+		while (count < 11) {
+			if (isTruncatablePrime(n)) {
+				sum += n.toLong()
+				count++
+			}
+			n++
+		}
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p037().run())
+		}
+
+		private fun isTruncatablePrime(n: Int): Boolean {
+			// Test if left-truncatable
+			var n = n
+			var i: Long = 10
+			while (i <= n) {
+				if (!isPrime(n % i.toInt())) return false
+				i *= 10
+			}
+			// Test if right-truncatable
+			while (n != 0) {
+				if (!isPrime(n)) return false
+				n /= 10
+			}
+			return true
+		}
+	}
+}
\ No newline at end of file
Index: Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml b/Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml
new file mode 100644
--- /dev/null	(date 1620217298689)
+++ b/Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml	(date 1620217298689)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p009.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p009.kt b/Random_Work/src/projectEuler/programs/p009.kt
new file mode 100644
--- /dev/null	(date 1614951977270)
+++ b/Random_Work/src/projectEuler/programs/p009.kt	(date 1614951977270)
@@ -0,0 +1,25 @@
+package projectEuler.programs
+
+class p009 : EulerSolution() {
+	override fun run(): String {
+		for (a in 1 until PERIMETER) for (b in a + 1 until PERIMETER) {
+			val c = PERIMETER - a - b
+			// It is now implied that b < c, because we have a > 0
+			if (a * a + b * b == c * c) return Integer.toString(a * b * c)
+		}
+		throw AssertionError("Not found")
+	}
+
+	companion object {
+		/*
+	 * Computers are fast, so we can implement a brute-force search to directly solve the problem.
+	 * Note that a^2 + b^2 is bounded above by 2*(1000^2), which fits in a Java int type.
+	 */
+		private const val PERIMETER = 1000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p009().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p304.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.math.BigInteger;\r\n\r\nimport static java.math.BigInteger.*;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.stream.IntStream.iterate;\r\nimport static projectEuler.programs.Library.listPrimes;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p304 extends EulerSolution {\r\n\tprivate static final long BASE = 100000000000000L;\r\n\tprivate static final int SEARCH_RANGE = 10000000; // Number of candidates starting from BASE to search for primes. Hopefully there are 100 000 primes among here.\r\n\tprivate static final long MODULUS = 1234567891011L;\r\n\tprivate static final BigInteger MODULUS_BI = valueOf(MODULUS);\r\n\tprivate boolean[] isComposite; // isComposite[i] pertains to the number BASE + i\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p304().run());\r\n\t}\r\n\r\n\tprivate static long fibonacciMod(long n) {\r\n\t\tBigInteger a = ZERO;\r\n\t\tBigInteger b = ONE;\r\n\t\tfor (int i = 63; i >= 0; i--) {\r\n\t\t\tBigInteger d = a.multiply(b.shiftLeft(1).subtract(a));\r\n\t\t\tBigInteger e = a.pow(2).add(b.pow(2));\r\n\t\t\ta = d;\r\n\t\t\tb = e;\r\n\t\t\tif (((n >>> i) & 1) != 0) {\r\n\t\t\t\tBigInteger c = a.add(b);\r\n\t\t\t\ta = b;\r\n\t\t\t\tb = c;\r\n\t\t\t}\r\n\t\t\ta = a.mod(MODULUS_BI);\r\n\t\t\tb = b.mod(MODULUS_BI);\r\n\t\t}\r\n\t\treturn a.longValue();\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tint[] primes = listPrimes((int) sqrt(BASE + SEARCH_RANGE));\r\n\t\t// Sieve of Eratosthenes, but starting at BASE\r\n\t\tisComposite = new boolean[SEARCH_RANGE];\r\n\t\tstream(primes).forEachOrdered(p -> iterate((int) (((((BASE + p) - 1) / p) * p) - BASE), i -> i < isComposite.length, i -> i + p).forEachOrdered(i -> isComposite[i] = true));\r\n\t\tlong sum = 0;\r\n\t\tint p = 0;\r\n\t\tfor (int i = 0; i < 100000; i++) {\r\n\t\t\tp = nextPrime(p);\r\n\t\t\tsum = (sum + fibonacciMod(BASE + p)) % MODULUS;\r\n\t\t}\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n\r\n\t// Returns p - BASE, where p is the next prime after n + BASE\r\n\tprivate int nextPrime(int n) {\r\n\t\tdo {\r\n\t\t\tn++;\r\n\t\t\tassert n < isComposite.length : \"Search range exhausted\";\r\n\t\t} while (isComposite[n]);\r\n\t\treturn n;\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p304.java b/Random_Work/src/projectEuler/programs/p304.java
--- a/Random_Work/src/projectEuler/programs/p304.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p304.java	(date 1614916387329)
@@ -41,7 +41,7 @@
 	}
 
 	@NotNull String run() {
-		int[] primes = listPrimes((int) sqrt(BASE + SEARCH_RANGE));
+		int[] primes = listPrimes(sqrt(valueOf(BASE + SEARCH_RANGE)).intValue());
 		// Sieve of Eratosthenes, but starting at BASE
 		isComposite = new boolean[SEARCH_RANGE];
 		stream(primes).forEachOrdered(p -> iterate((int) (((((BASE + p) - 1) / p) * p) - BASE), i -> i < isComposite.length, i -> i + p).forEachOrdered(i -> isComposite[i] = true));
Index: Random_Work/src/projectEuler/programs/p451.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport static java.lang.System.arraycopy;\r\nimport static java.lang.System.out;\r\nimport static java.util.Arrays.*;\r\nimport static projectEuler.programs.Library.listSmallestPrimeFactors;\r\n\r\npublic final class p451 extends EulerSolution {\r\n\tprivate static final int LIMIT = 20000000;\r\n\r\n\t/*\r\n\t * Let n be an arbitrary integer such that n >= 3.\r\n\t * When we say that the modular inverse of m modulo n equals m itself,\r\n\t * the formula is m^-1 = m mod n, which is equivalent to m^2 = 1 mod n.\r\n\t *\r\n\t * We know that if n is prime, then m^2 = 1 mod n has exactly two solutions:\r\n\t * m = 1, n-1. It is easy to verify that these two numbers are solutions.\r\n\t * The equation factorizes as (m - 1)(m + 1) = 0 mod n. Because n is prime,\r\n\t * the numbers form a field, and there are no zero divisors (two arbitrary\r\n\t * non-zero numbers x and y such that xy = 0). Hence 1 and -1 mod n are\r\n\t * the only possible solutions to the equation. (Note that for the excluded\r\n\t * special prime case where n = 2, the solutions 1 and -1 are the same number.)\r\n\t *\r\n\t * Suppose we can find the smallest prime factor of n quickly. (Note that if n is\r\n\t * prime, then the smallest prime factor is n itself.) This can be achieved by\r\n\t * building a table ahead of time, using a modification of the sieve of Eratosthenes.\r\n\t *\r\n\t * Suppose that for every n' < n, we know the set of solutions to m^2 = 1 mod n'.\r\n\t * This means whenever we solve the equation for the number n, we save its solutions\r\n\t * in an ever-growing list, so that when we work on the next value of n we can access\r\n\t * all possible smaller solutions. This is essentially an argument by strong induction.\r\n\t *\r\n\t * Let p be the smallest prime factor of n. If p = n, then the set of\r\n\t * solutions is {1, n - 1}, and we are finished with this value of n.\r\n\t *\r\n\t * Otherwise p < n, and obviously n is an integer multiple of p. Because we are looking\r\n\t * for values of m such that m^2 = 1 mod n, these candidate m values also must satisfy\r\n\t * m^2 = 1 mod k for any k that divides n (i.e. k is a factor of n). We look at the set\r\n\t * of solutions for the modulus k = n/p, which has already been solved because k < n.\r\n\t * We know that any solution modulo n must be congruent to these solutions modulo k.\r\n\t * Hence we can try to extend and check these old solutions by brute force. Namely, suppose\r\n\t * m' is a solution modulo k. Then we check the sequence m = m' + 0k, m' + 1k, m' + 2k, ...,\r\n\t * m' + (p-1)k modulo n. Because p is usually a small number, this isn't a lot of work to do.\r\n\t */\r\n\tprivate int[] smallestPrimeFactor;\r\n\tprivate IntArrayArray solutions;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tout.println(new p451().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\t// Build table of smallest prime factors\r\n\t\tsmallestPrimeFactor = listSmallestPrimeFactors(LIMIT);\r\n\t\t// Process every integer in range\r\n\t\tsolutions = new IntArrayArray(10000001); // Uses about 2 GiB of memory\r\n\t\tsolutions.append();\r\n\t\tsolutions.append();\r\n\t\tsolutions.append(1);\r\n\t\tlong sum = 0;\r\n\t\tfor (int i = 3; i <= LIMIT; i++) {\r\n\t\t\tint[] sols = getSolutions(i);\r\n\t\t\tif (i <= 10000000) solutions.append(sols);\r\n\t\t\tsum += sols[sols.length - 2]; // Second-largest solution\r\n\t\t}\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n\r\n\t// Returns all the solutions (in ascending order) such that\r\n\t// for each k, 1 <= k < n and k^2 = 1 mod n.\r\n\t@NotNull\r\n\tprivate int[] getSolutions(int n) {\r\n\t\tif (smallestPrimeFactor[n] == n) return new int[]{1, n - 1}; // n is prime\r\n\t\telse {\r\n\t\t\t// Note: Changing the ArrayList<Integer> to an implementation\r\n\t\t\t// based on int[] does not yield meaningful speed improvement\r\n\t\t\tList<Integer> temp = new ArrayList<>();\r\n\t\t\tint p = smallestPrimeFactor[n];\r\n\t\t\tint[] sols = solutions.get(n / p);\r\n\t\t\tfor (int i = 0, inc = n / p; i < n; i += inc)\r\n\t\t\t\tfor (int j : sols) if ((((long) (i + j) * (i + j)) % n) == 1) temp.add(i + j);\r\n\t\t\t// Convert List<Integer> to int[]\r\n\t\t\treturn temp.stream().mapToInt(integer -> integer).toArray();\r\n\t\t}\r\n\t}\r\n\r\n\t// Conceptually like int[][], but having elements all packed into one int[].\r\n\tprivate static final class IntArrayArray {\r\n\t\tprivate final int[] starts;\r\n\t\tprivate int[] data;\r\n\t\tprivate int dataLength;\r\n\t\tprivate int index;\r\n\r\n\t\tIntArrayArray(int len) {\r\n\t\t\tdata = new int[1];\r\n\t\t\tdataLength = 0;\r\n\t\t\tstarts = new int[len + 1];\r\n\t\t\tfill(starts, -1);\r\n\t\t\tstarts[0] = 0;\r\n\t\t\tindex = 0;\r\n\t\t}\r\n\r\n\t\t@NotNull\r\n\t\t@Contract(pure = true)\r\n\t\tint[] get(int i) {\r\n\t\t\treturn copyOfRange(data, starts[i], starts[i + 1]);\r\n\t\t}\r\n\r\n\t\tvoid append(@NotNull int... arr) {\r\n\t\t\twhile ((dataLength + arr.length) > data.length) data = copyOf(data, data.length << 1);\r\n\t\t\tarraycopy(arr, 0, data, dataLength, arr.length);\r\n\t\t\tdataLength += arr.length;\r\n\t\t\tindex++;\r\n\t\t\tstarts[index] = dataLength;\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p451.java b/Random_Work/src/projectEuler/programs/p451.java
--- a/Random_Work/src/projectEuler/programs/p451.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p451.java	(date 1614916524422)
@@ -59,7 +59,7 @@
 		// Build table of smallest prime factors
 		smallestPrimeFactor = listSmallestPrimeFactors(LIMIT);
 		// Process every integer in range
-		solutions = new IntArrayArray(10000001); // Uses about 2 GiB of memory
+		solutions = new IntArrayArray(); // Uses about 2 GiB of memory
 		solutions.append();
 		solutions.append();
 		solutions.append(1);
@@ -97,10 +97,10 @@
 		private int dataLength;
 		private int index;
 
-		IntArrayArray(int len) {
+		IntArrayArray() {
 			data = new int[1];
 			dataLength = 0;
-			starts = new int[len + 1];
+			starts = new int[10000001 + 1];
 			fill(starts, -1);
 			starts[0] = 0;
 			index = 0;
Index: Random_Work/src/projectEuler/programs/p155.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.HashSet;\r\nimport java.util.Set;\r\n\r\nimport static java.math.BigInteger.valueOf;\r\nimport static projectEuler.programs.Library.gcd;\r\n\r\npublic final class p155 extends EulerSolution {\r\n\tprivate static final int SIZE = 18;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p155().run());\r\n\t}\r\n\r\n\t// Warning: Running this solution requires about 600 MiB of memory\r\n\t@NotNull String run() {\r\n\t\t@SuppressWarnings(\"unchecked\")\r\n\t\t// possible[i] holds all the possible capacitance values of a series/parallel capacitor network that uses exactly i capacitors of 60 uF each\r\n\t\t\t\tSet<FastFraction>[] possible = new Set[SIZE + 1];\r\n\t\tpossible[0] = new HashSet<>();\r\n\t\tpossible[1] = new HashSet<>();\r\n\t\tpossible[1].add(new FastFraction(60, 1));\r\n\t\t// Union of every possible[i]\r\n\t\tSet<FastFraction> all = new HashSet<>(possible[1]);\r\n\t\tfor (int i = 2; i <= SIZE; i++) {\r\n\t\t\tSet<FastFraction> poss = new HashSet<>();\r\n\t\t\tfor (int j = 1; j <= i - j; j++)\r\n\t\t\t\tfor (FastFraction a : possible[j])\r\n\t\t\t\t\tfor (FastFraction b : possible[i - j]) {\r\n\t\t\t\t\t\tposs.add(a.add(b)); // Parallel\r\n\t\t\t\t\t\tposs.add(a.reciprocalAdd(b)); // Series\r\n\t\t\t\t\t}\r\n\t\t\tpossible[i] = poss;\r\n\t\t\tall.addAll(poss);\r\n\t\t}\r\n\t\treturn Integer.toString(all.size());\r\n\t}\r\n\r\n\t// A fraction that uses int for storage and long for computation, but switches to BigInteger when necessary.\r\n\tprivate static final class FastFraction {\r\n\t\tfinal int numerator;\r\n\t\tfinal int denominator;\r\n\t\tfinal Fraction bigFraction;\r\n\r\n\t\tFastFraction(long num, long den) {\r\n\t\t\tassert den > 0;\r\n\t\t\tint n = (int) num;\r\n\t\t\tint d = (int) den;\r\n\t\t\tif (n == num && d == den) {\r\n\t\t\t\tint gcd = gcd(n, d);\r\n\t\t\t\tif (gcd > 1) {\r\n\t\t\t\t\tn /= gcd;\r\n\t\t\t\t\td /= gcd;\r\n\t\t\t\t}\r\n\t\t\t\tnumerator = n;\r\n\t\t\t\tdenominator = d;\r\n\t\t\t\tbigFraction = null;\r\n\t\t\t} else {\r\n\t\t\t\tFastFraction temp = new FastFraction(new Fraction(valueOf(num), valueOf(den)));\r\n\t\t\t\tnumerator = temp.numerator;\r\n\t\t\t\tdenominator = temp.denominator;\r\n\t\t\t\tbigFraction = temp.bigFraction;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tFastFraction(@NotNull Fraction frac) {\r\n\t\t\tif ((frac.numerator.bitLength() <= 31) && (frac.denominator.bitLength() <= 31)) {\r\n\t\t\t\tnumerator = frac.numerator.intValue();\r\n\t\t\t\tdenominator = frac.denominator.intValue();\r\n\t\t\t\tbigFraction = null;\r\n\t\t\t} else {\r\n\t\t\t\tnumerator = 0;\r\n\t\t\t\tdenominator = 0;\r\n\t\t\t\tbigFraction = frac;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tFraction toFraction() {\r\n\t\t\treturn (bigFraction == null) ? new Fraction(valueOf(numerator), valueOf(denominator)) : bigFraction;\r\n\t\t}\r\n\r\n\t\t@NotNull\r\n\t\t@Contract(\"_ -> new\")\r\n\t\tFastFraction add(FastFraction other) {\r\n\t\t\tif (bigFraction == null && other.bigFraction == null) {\r\n\t\t\t\tlong num = (long) numerator * other.denominator + (long) other.numerator * denominator;\r\n\t\t\t\tlong den = (long) denominator * other.denominator;\r\n\t\t\t\treturn new FastFraction(num, den);\r\n\t\t\t}\r\n\t\t\treturn new FastFraction(toFraction().add(other.toFraction()));\r\n\t\t}\r\n\r\n\t\t// Returns 1 / (1/this + 1/other), also equal to (this * other) / (this + other).\r\n\t\t@NotNull\r\n\t\t@Contract(\"_ -> new\")\r\n\t\tFastFraction reciprocalAdd(FastFraction other) {\r\n\t\t\tif (bigFraction == null && other.bigFraction == null) {\r\n\t\t\t\tlong num = (long) numerator * other.numerator, den = (long) numerator * other.denominator + (long) other.numerator * denominator;\r\n\t\t\t\treturn new FastFraction(num, den);\r\n\t\t\t}\r\n\t\t\tFraction x = this.toFraction(), y = other.toFraction();\r\n\t\t\treturn new FastFraction(x.multiply(y).divide(x.add(y)));\r\n\t\t}\r\n\r\n\t\t@Contract(value = \"null -> false\", pure = true)\r\n\t\tpublic boolean equals(Object obj) {\r\n\t\t\tif (!(obj instanceof FastFraction)) return false;\r\n\t\t\tFastFraction other = (FastFraction) obj;\r\n\t\t\treturn ((bigFraction == null) && (other.bigFraction == null)) ? ((numerator == other.numerator) && (denominator == other.denominator)) : toFraction().equals(other.toFraction());\r\n\t\t}\r\n\r\n\t\tpublic int hashCode() {\r\n\t\t\treturn (bigFraction == null) ? (numerator + (denominator * 1204805)) : bigFraction.hashCode(); // Some arbitrary constant to spread around the bits\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p155.java b/Random_Work/src/projectEuler/programs/p155.java
--- a/Random_Work/src/projectEuler/programs/p155.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p155.java	(date 1614951978557)
@@ -20,7 +20,7 @@
 	@NotNull String run() {
 		@SuppressWarnings("unchecked")
 		// possible[i] holds all the possible capacitance values of a series/parallel capacitor network that uses exactly i capacitors of 60 uF each
-				Set<FastFraction>[] possible = new Set[SIZE + 1];
+		Set<FastFraction>[] possible = new Set[SIZE + 1];
 		possible[0] = new HashSet<>();
 		possible[1] = new HashSet<>();
 		possible[1].add(new FastFraction(60, 1));
Index: Random_Work/src/projectEuler/programs/p088.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.HashSet;\r\n\r\nimport static java.lang.Integer.MAX_VALUE;\r\nimport static java.util.Arrays.fill;\r\nimport static java.util.stream.IntStream.rangeClosed;\r\n\r\npublic final class p088 extends EulerSolution {\r\n\tprivate static final int LIMIT = 12000;\r\n\t/*\r\n\t * minSumProduct[k] is the smallest positive integers that can be written as both a sum and a product of the same collection of k positive integers.\r\n\t * For example, minSumProduct[3] = 6 because 6 = 1 + 2 + 3 = 1 * 2 * 3, and this is the minimum possible number for 3 terms.\r\n\t *\r\n\t * For all k >= 2:\r\n\t * - minSumProduct[k] > k because 1 + ... + 1 (with k terms) = k, which is the minimum sum of k positive integers,\r\n\t * but the product is 1 which is unequal to k, so k is not a valid solution.\r\n\t * - minSumProduct[k] <= 2k because 1 + ... + 1 + 2 + k (with k terms in total) = (k - 2) + 2 + k = 2k. The product is 2k, which equals the sum.\r\n\t * Since this is one achievable solution, the minimum solution must be no larger than this.\r\n\t * - Aside: minSumProduct[k] is not a prime number. Suppose minSumProduct[k] = p, where p is prime. Then p can only be factorized as p, p * 1, p * 1 * 1, etc.\r\n\t * So whenever the factorization has more than one term, the sum exceeds p, which makes it unequal to the product.\r\n\t *\r\n\t * Therefore we need to consider all numbers from 2 to LIMIT*2 and factorize them in all possible ways to find all the relevant solutions.\r\n\t */\r\n\tprivate int[] minSumProduct;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p088().run());\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tminSumProduct = new int[LIMIT + 1];\r\n\t\tfill(minSumProduct, MAX_VALUE);\r\n\t\trangeClosed(2, LIMIT * 2).forEachOrdered(i -> factorize(i, i, i, 0, 0));\r\n\t\t// Eliminate duplicates and compute sum\r\n\t\tHashSet<Integer> items = new HashSet<>();\r\n\t\tfor (int i = 2; i < minSumProduct.length; i++) items.add(minSumProduct[i]);\r\n\t\tint sum = items.stream().mapToInt(n -> n).sum();\r\n\t\treturn Integer.toString(sum);\r\n\t}\r\n\r\n\t/*\r\n\t * Calculates all factorizations of the integer n >= 2 and updates smaller solutions into minSumProduct.\r\n\t * For example, 12 can be factorized as follows - and duplicates are eliminated by finding only non-increasing sequences of factors:\r\n\t * - 12 = 12. (1 term)\r\n\t * - 12 = 6 * 2 * 1 * 1 * 1 * 1 = 6 + 2 + 1 + 1 + 1 + 1. (6 terms)\r\n\t * - 12 = 4 * 3 * 1 * 1 * 1 * 1 * 1 = 4 + 3 + 1 + 1 + 1 + 1 + 1. (7 terms)\r\n\t * - 12 = 3 * 2 * 2 * 1 * 1 * 1 * 1 * 1 = 3 + 2 + 2 + 1 + 1 + 1 + 1 + 1. (8 terms)\r\n\t */\r\n\tprivate void factorize(int n, int remain, int maxFactor, int sum, int terms) {\r\n\t\t// Note: maxFactor <= remain\r\n\t\tif (remain == 1) {// Without using factors of 1, the sum never exceeds the product\r\n\t\t\tassert sum <= n;\r\n\t\t\tterms += n - sum;\r\n\t\t\tif (terms <= LIMIT && n < minSumProduct[terms]) minSumProduct[terms] = n;\r\n\t\t} else {\r\n\t\t\tfor (int i = 2; i <= maxFactor; i++)\r\n\t\t\t\tif ((remain % i) == 0) factorize(n, remain / i, Math.min(i, maxFactor), sum + i, terms + 1);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p088.java b/Random_Work/src/projectEuler/programs/p088.java
--- a/Random_Work/src/projectEuler/programs/p088.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p088.java	(date 1617055525464)
@@ -30,7 +30,8 @@
 		System.out.println(new p088().run());
 	}
 
-	@NotNull String run() {
+	@NotNull
+	public String run() {
 		minSumProduct = new int[LIMIT + 1];
 		fill(minSumProduct, MAX_VALUE);
 		rangeClosed(2, LIMIT * 2).forEachOrdered(i -> factorize(i, i, i, 0, 0));
Index: Random_Work/src/projectEuler/programs/p401.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.math.BigInteger;\r\n\r\nimport static java.lang.Math.max;\r\nimport static java.math.BigInteger.ONE;\r\nimport static java.math.BigInteger.valueOf;\r\nimport static projectEuler.programs.Library.pow;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p401 extends EulerSolution {\r\n\tprivate static final long LIMIT = 1000000000000000L; // Must be less than 2^56\r\n\tprivate static final long MODULUS = pow(10, 9); // Should be less than 2^30\r\n\tprivate static final BigInteger MODULUS_BI = valueOf(MODULUS);\r\n\tprivate static final BigInteger SIX_BI = valueOf(6);\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p401().run());\r\n\t}\r\n\r\n\t// Returns 1^2 + 2^2 + 3^2 + ... + n^2 mod MODULUS.\r\n\tprivate static long sumSquaresMod(long n) {\r\n\t\t// Compute y = (n)(n + 1)(2n + 1) / 6 mod MODULUS\r\n\t\tBigInteger x = valueOf(n);\r\n\t\tBigInteger y = x.multiply(x.add(ONE));\r\n\t\ty = y.multiply(x.shiftLeft(1).add(ONE));\r\n\t\ty = y.divide(SIX_BI);\r\n\t\ty = y.mod(MODULUS_BI);\r\n\t\treturn y.longValue();\r\n\t}\r\n\r\n\t/*\r\n\t * Consider the set of all integers from 1 to n, inclusive: {1, 2, ..., n}.\r\n\t * Now form the set of divisors for each number:\r\n\t * 1: {1}\r\n\t * 2: {1, 2}\r\n\t * 3: {1, 3}\r\n\t * 4: {1, 2, 4}\r\n\t * 5: {1, 5}\r\n\t * 6: {1, 2, 3, 6}\r\n\t * et cetera until n.\r\n\t * Next consider the multiset union of all these sets of divisors.\r\n\t *\r\n\t * We know that for a given integer k > 0, it occurs as a divisor in this multiset\r\n\t * exactly floor(n / k) times (we call this the \"count\"), which are namely the multiples of k.\r\n\t * So instead of considering each integer and summing its squared divisors, we can consider\r\n\t * each divisor from 1 to n and compute how much it contributes to the final sum, namely floor(n / k) * k^2.\r\n\t *\r\n\t * A further observation is that when k is large, the count factor of floor(n / k) does not change often.\r\n\t * (For example, for k from floor(n/2)+1 to n, this count is always 1.)\r\n\t * So we can calculate the squared divisor sum for many numbers at a time.\r\n\t * This is helpful for k > sqrt(n), and we can bring the run time from O(n) down to O(sqrt(n)).\r\n\t *\r\n\t * For a given count of m = floor(n / k), which integer values of k yield this m?\r\n\t * By the definition of floor, m <= n/k, so mk <= n, and k <= n/m, thus k <= floor(n/m).\r\n\t * Also by definition, m > n/k - 1, so mk > n - k, and k(m + 1) > n, and k > n/(m+1), so k > floor(n/(m+1)).\r\n\t * Together, we have: floor(n / (m + 1)) < k <= floor(n / m).\r\n\t *\r\n\t * Useful fact: (sum k^2 for k=1 to n) = n(n + 1)(2n + 1) / 6.\r\n\t */\r\n\t@NotNull String run() {\r\n\t\t// Can be any number from 1 to LIMIT, but somewhere near sqrt(LIMIT) is preferred\r\n\t\tint splitCount = (int) sqrt(LIMIT);\r\n\t\t// Optimization: Put more weight on direct sums instead of slow BigInteger sums\r\n\t\tsplitCount = max(splitCount / 3, 1);\r\n\t\t// Consider divisors individually up and including this number\r\n\t\tint splitAt = (int) (LIMIT / (splitCount + 1));\r\n\t\t// Sum individual divisors\r\n\t\tlong sum = 0;\r\n\t\tfor (int i = 1; i <= splitAt; i++) {\r\n\t\t\tlong count = (LIMIT / i) % MODULUS;\r\n\t\t\tlong term = ((long) i * i) % MODULUS;\r\n\t\t\tterm = (term * count) % MODULUS;\r\n\t\t\tsum = (sum + term) % MODULUS;\r\n\t\t}\r\n\t\t// Sum divisors grouped by count\r\n\t\tfor (int i = splitCount; i >= 1; i--) {\r\n\t\t\t// Find all divisors with the count of i\r\n\t\t\tlong start = LIMIT / (i + 1); // Exclusive\r\n\t\t\tlong end = LIMIT / i; // Inclusive\r\n\t\t\tlong sumSquares = sumSquaresMod(end) - sumSquaresMod(start); // (start+1)^2 + (start+2)^2 + ... + end^2 mod MODULUS\r\n\t\t\tsumSquares = (sumSquares + MODULUS) % MODULUS;\r\n\t\t\tsum = (sum + ((i * sumSquares) % MODULUS)) % MODULUS;\r\n\t\t}\r\n\t\treturn Long.toString(sum);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p401.java b/Random_Work/src/projectEuler/programs/p401.java
--- a/Random_Work/src/projectEuler/programs/p401.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p401.java	(date 1614912461912)
@@ -62,7 +62,7 @@
 	 */
 	@NotNull String run() {
 		// Can be any number from 1 to LIMIT, but somewhere near sqrt(LIMIT) is preferred
-		int splitCount = (int) sqrt(LIMIT);
+		int splitCount = sqrt(BigInteger.valueOf(LIMIT)).intValue();
 		// Optimization: Put more weight on direct sums instead of slow BigInteger sums
 		splitCount = max(splitCount / 3, 1);
 		// Consider divisors individually up and including this number
Index: Random_Work/src/projectEuler/programs/p171.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport static projectEuler.programs.Library.pow;\r\nimport static projectEuler.programs.Library.powMod;\r\n\r\npublic final class p171 extends EulerSolution {\r\n\tprivate static final int LENGTH = 20;\r\n\tprivate static final int BASE = 10;\r\n\tprivate static final int MODULUS = pow(10, 9); // Must be less than 2^31\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p171().run());\r\n\t}\r\n\r\n\t/*\r\n\t * The key insight is to use dynamic programming to build up the answer one digit at a time.\r\n\t *\r\n\t * Let Num(n, s) denote the set of numbers of length n (with leading zeros) whose squared digits sum to s.\r\n\t * For example, Num(2, 25) = {05, 34, 43, 50}.\r\n\t * Then for any particular n and s, we know that Num(n, s) = union of\r\n\t * (prepend 0 to each of Num(n-1, s - 0*0)),\r\n\t * (prepend 1 to each of Num(n-1, s - 1*1)),\r\n\t * ...,\r\n\t * (prepend 9 to each of Num(n-1, s - 9*9)).\r\n\t *\r\n\t * However, keeping track of these sets of numbers explicitly is just as slow as iterating over\r\n\t * all the numbers by brute force. So instead, we only store the sums and counts of these sets,\r\n\t * and these two pieces of information are enough to determine the final answer.\r\n\t * (Furthermore, these can be reduced by the modulus.)\r\n\t */\r\n\tString run() {\r\n\t\t// Maximum possible squared digit sum (for 99...99)\r\n\t\tint MAX_SQR_DIGIT_SUM = (BASE - 1) * (BASE - 1) * LENGTH;\r\n\t\t// sum[n][s] is the sum of all length-n numbers with a square digit sum of s, modulo MODULUS\r\n\t\tlong[][] sum = new long[LENGTH + 1][MAX_SQR_DIGIT_SUM + 1];\r\n\t\t// count[n][s] is the count of all length-n numbers with a square digit sum of s, modulo MODULUS\r\n\t\tlong[][] count = new long[LENGTH + 1][MAX_SQR_DIGIT_SUM + 1];\r\n\t\tcount[0][0] = 1;\r\n\t\tfor (int i = 1; i <= LENGTH; i++)\r\n\t\t\tfor (int j = 0; j < BASE; j++)\r\n\t\t\t\tfor (int k = 0; (k + (j * j)) <= MAX_SQR_DIGIT_SUM; k++) {\r\n\t\t\t\t\tsum[i][k + j * j] = (sum[i][k + (j * j)] + sum[i - 1][k] + (((powMod(BASE, i - 1, MODULUS) * j) % MODULUS) * count[i - 1][k])) % MODULUS;\r\n\t\t\t\t\tcount[i][k + j * j] = (count[i][k + j * j] + count[i - 1][k]) % MODULUS;\r\n\t\t\t\t}\r\n\t\tlong s = 0;\r\n\t\tfor (int i = 1; i * i <= MAX_SQR_DIGIT_SUM; i++) s = (s + sum[LENGTH][i * i]) % MODULUS;\r\n\t\treturn String.format(\"%09d\", s);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p171.java b/Random_Work/src/projectEuler/programs/p171.java
--- a/Random_Work/src/projectEuler/programs/p171.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p171.java	(date 1614916387826)
@@ -39,7 +39,7 @@
 		for (int i = 1; i <= LENGTH; i++)
 			for (int j = 0; j < BASE; j++)
 				for (int k = 0; (k + (j * j)) <= MAX_SQR_DIGIT_SUM; k++) {
-					sum[i][k + j * j] = (sum[i][k + (j * j)] + sum[i - 1][k] + (((powMod(BASE, i - 1, MODULUS) * j) % MODULUS) * count[i - 1][k])) % MODULUS;
+					sum[i][k + j * j] = (sum[i][k + (j * j)] + sum[i - 1][k] + ((((long) powMod(BASE, i - 1, MODULUS) * j) % MODULUS) * count[i - 1][k])) % MODULUS;
 					count[i][k + j * j] = (count[i][k + j * j] + count[i - 1][k]) % MODULUS;
 				}
 		long s = 0;
Index: Random_Work/src/projectEuler/programs/Library.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/Library.kt b/Random_Work/src/projectEuler/programs/Library.kt
new file mode 100644
--- /dev/null	(date 1614951976521)
+++ b/Random_Work/src/projectEuler/programs/Library.kt	(date 1614951976521)
@@ -0,0 +1,417 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.math.BigInteger
+import java.math.BigInteger.*
+import java.util.stream.IntStream
+import kotlin.Int.Companion.MAX_VALUE
+import kotlin.math.pow
+
+object Library {
+	// Returns the reverse of the given string.
+	@JvmStatic
+	fun reverse(s: String?) = StringBuilder(s).reverse().toString()
+
+	// Tests whether the given string is a palindrome.
+	private fun isPalindrome(s: String) = s == reverse(s)
+
+	// Tests whether the given integer is a palindrome in decimal (base 10).
+	@JvmStatic
+	fun isPalindrome(x: Int) = isPalindrome(x.toString())
+
+	// Returns floor(sqrt(x)), for x >= 0.
+	@Contract(pure = true)
+	fun sqrt(x: Int): Int {
+		assert(x >= 0) { "Square root of negative number" }
+		var y = 0
+		var i = 32768
+		while (i != 0) {
+			y = y or i
+			if (y > 46340 || y * y > x) y = y xor i
+			i = i ushr 1
+		}
+		return y
+	}
+
+	// Returns floor(sqrt(x)), for x >= 0.
+	@Contract(pure = true)
+	fun sqrt(x: Long): Long {
+		assert(x >= 0) { "Square root of negative number" }
+		var y: Long = 0
+		var i = 2147483648L
+		while (i != 0L) {
+			y = y or i
+			if (y > 3037000499L || y * y > x) y = y xor i
+			i = i ushr 1
+		}
+		return y
+	}
+
+	// Returns floor(sqrt(x)), for x >= 0.
+	@JvmStatic
+	fun sqrt(x: BigInteger): BigInteger {
+		assert(x.signum() != -1) { "Square root of negative number" }
+		var y = ZERO
+		for (i in (x.bitLength() - 1) / 2 downTo 0) {
+			y = y.setBit(i)
+			if (y.multiply(y) > x) y = y.clearBit(i)
+		}
+		return y
+	}
+
+	// Tests whether x is a perfect square, for any value x.
+	@JvmStatic
+	@Contract(pure = true)
+	fun isSquare(x: Int): Boolean {
+		if (x < 0) return false
+		return sqrt(x).toDouble().pow(2.0) == x.toDouble()
+	}
+
+	// Returns x to the power of y, throwing an exception if the result overflows an int.
+	@JvmStatic
+	@Contract(pure = true)
+	fun pow(x: Int, y: Int): Int {
+		assert(x >= 0) { "Negative base not supported" }
+		assert(y >= 0) { "Negative exponent" }
+		var z = 1
+		for (i in 0 until y) {
+			assert(MAX_VALUE / z >= x) { "Overflow" }
+			z *= x
+		}
+		return z
+	}
+
+	// Returns x^y mod m.
+	@JvmStatic
+	@Contract(pure = true)
+	fun powMod(x: Int, y: Int, m: Int): Int {
+		var x = x
+		var y = y
+		assert(x >= 0) { "Negative base not supported" }
+		assert(y >= 0) { "Modular reciprocal not supported" }
+		assert(m > 0) { "Modulus must be positive" }
+		if (m == 1) return 0
+		// Exponentiation by squaring
+		var z = 1
+		while (y != 0) {
+			if (y and 1 != 0) z = (z.toLong() * x % m).toInt()
+			x = (x.toLong() * x % m).toInt()
+			y = y ushr 1
+		}
+		return z
+	}
+
+	// Returns x^-1 mod m, where the result is in the range [0, m).
+	// Note that (x * x^-1) mod m = (x^-1 * x) mod m = 1.
+	@JvmStatic
+	@Contract(pure = true)
+	fun reciprocalMod(x: Int, m: Int): Int {
+		var x = x
+		assert(x in 0 until m)
+		val temp = x - 1
+		// Based on a simplification of the extended Euclidean algorithm
+		var y = temp + 1
+		x = m
+		var a = 0
+		var b = 1
+		while (y != 0) {
+			val z = x % y
+			val c = a - x / y * b
+			val temp2 = y - 1
+			x = temp2 + 1
+			y = z
+			a = b
+			b = c
+		}
+		return if (x == 1) if (a >= 0) a else a + m else throw IllegalArgumentException("Reciprocal does not exist")
+	}
+
+	// Returns n!.
+	@JvmStatic
+	fun factorial(n: Int): BigInteger {
+		assert(n >= 0) { "Factorial of negative number" }
+		var prod = ONE
+		for (i in 2..n) prod = prod.multiply(valueOf(i.toLong()))
+		return prod
+	}
+
+	// Returns n choose k.
+	@JvmStatic
+	fun binomial(n: Int, k: Int): BigInteger {
+		assert(k in 0..n)
+		var product = ONE
+		for (i in 0 until k) product = product.multiply(valueOf((n - i).toLong()))
+		return product.divide(factorial(k))
+	}
+
+	// Returns the largest non-negative integer that divides both x and y.
+	@JvmStatic
+	@Contract(pure = true)
+	fun gcd(x: Int, y: Int): Int {
+		var x = x
+		var y = y
+		assert(x >= 0 && y >= 0) { "Negative number" }
+		while (y != 0) {
+			val z = x % y
+			val temp = y - 1
+			x = temp + 1
+			y = z
+		}
+		return x
+	}
+
+	// Tests whether the given non-negative integer is prime.
+	@JvmStatic
+	@Contract(pure = true)
+	fun isPrime(x: Int): Boolean {
+		assert(x >= 0) { "Negative number" }
+		return if (x == 0 || x == 1) false else if (x == 2) true else {
+			if (x % 2 == 0) return false
+			var i = 3
+			while (i <= sqrt(x)) {
+				if (x % i == 0) return false
+				i += 2
+			}
+			true
+		}
+	}
+
+	// Returns a Boolean array 'isPrime' where isPrime[i] indicates whether i is prime, for 0 <= i <= n.
+	// For a large batch of queries, this is faster than calling isPrime() for each integer.
+	// For example: listPrimality(100) = {false, false, true, true, false, true, false, true,
+	// false, false, false, true, false, true, false, false, false, true, ...} (array length 101).
+	@JvmStatic
+	@Contract(pure = true)
+	fun listPrimality(n: Int): BooleanArray {
+		assert(n >= 0) { "Negative array size" }
+		val result = BooleanArray(n + 1)
+		if (n >= 2) result[2] = true
+		run {
+			var i = 3
+			while (i <= n) {
+				result[i] = true
+				i += 2
+			}
+		}
+		// Sieve of Eratosthenes
+		// Note: i * i does not overflow
+		var i = 3
+		while (i <= sqrt(n)) {
+			if (result[i]) {
+				var j = i * i
+				val inc = i * 2
+				while (j <= n) {
+					result[j] = false
+					j += inc
+				}
+			}
+			i += 2
+		}
+		return result
+	}
+
+	// Returns all the prime numbers less than or equal to n, in ascending order.
+	// For example: listPrimes(97) = {2, 3, 5, 7, 11, 13, 17, 19, 23, 29, ..., 83, 89, 97}.
+	@JvmStatic
+	@Contract(pure = true)
+	fun listPrimes(n: Int): IntArray {
+		val isPrime = listPrimality(n)
+		var count = 0
+		for (b in isPrime) if (b) count++
+		val result = IntArray(count)
+		var i = 0
+		var j = 0
+		while (i < isPrime.size) {
+			if (isPrime[i]) {
+				result[j] = i
+				j++
+			}
+			i++
+		}
+		return result
+	}
+
+	// Returns an array spf where spf[k] is the smallest prime factor of k, valid for 2 <= k <= n.
+	// For example: listSmallestPrimeFactors(10) = {0, 0, 2, 3, 2, 5, 2, 7, 2, 3, 2}.
+	@JvmStatic
+	@Contract(pure = true)
+	fun listSmallestPrimeFactors(n: Int): IntArray {
+		val result = IntArray(n + 1)
+		val limit = sqrt(n)
+		for (i in 2 until result.size) if (result[i] == 0) {
+			result[i] = i
+			// Note: i * i does not overflow
+			if (i <= limit) {
+				var j = i * i
+				while (j <= n) {
+					if (result[j] == 0) result[j] = i
+					j += i
+				}
+			}
+		}
+		return result
+	}
+
+	// Returns the number of integers in the range [1, n] that are coprime with n.
+	// For example, totient(12) = 4 because these integers are coprime with 12: 1, 5, 7, 11.
+	@JvmStatic
+	fun totient(n: Int): Int {
+		var n = n
+		assert(n > 0) { "Totient of non-positive integer" }
+		var p = 1
+		// Trial division
+		var i = 2
+		var end = sqrt(n)
+		while (i <= end) {
+			if (n % i == 0) { // Found a factor
+				p *= i - 1
+				n /= i
+				while (n % i == 0) {
+					p *= i
+					n /= i
+				}
+				end = sqrt(n)
+			}
+			i++
+		}
+		if (n != 1) p *= n - 1
+		return p
+	}
+
+	// Returns an array 'totients' where totients[i] == totient(i), for 0 <= i <= n.
+	// For a large batch of queries, this is faster than calling totient() for each integer.
+	@JvmStatic
+	@Contract(pure = true)
+	fun listTotients(n: Int): IntArray {
+		assert(n >= 0) { "Negative array size" }
+		val result = IntArray(n + 1)
+		IntStream.rangeClosed(0, n).forEachOrdered { i: Int -> result[i] = i }
+		for (i in 2..n) if (result[i] == i) {
+			var j = i
+			while (j <= n) {
+				result[j] -= result[j] / i
+				j += i
+			}
+		}
+		return result
+	}
+
+	// Attempts to advance the given sequence to the next permutation in lexicographical order.
+	// Returns true if the sequence was successfully permuted, or returns false if the sequence
+	// was already at the last possible permutation (a non-ascending sequence).
+	// For example:
+	// - nextPermutation({0,0,1}) changes the argument array to {0,1,0} and returns true.
+	// - nextPermutation({1,0,0}) leaves the argument array unchanged and returns false.
+	@JvmStatic
+	fun nextPermutation(arr: IntArray): Boolean {
+		var i = arr.size - 1
+		while (i > 0 && arr[i - 1] >= arr[i]) {
+			i--
+		}
+		if (i <= 0) return false
+		run {
+			var j = arr.size - 1
+			while (arr[j] <= arr[i - 1]) {
+				j--
+			}
+			val temp = arr[i - 1]
+			arr[i - 1] = arr[j]
+			arr[j] = temp
+		}
+		var j = arr.size - 1
+		while (i < j) {
+			val temp = arr[i]
+			arr[i] = arr[j]
+			arr[j] = temp
+			i++
+			j--
+		}
+		return true
+	}
+} // Immutable unlimited precision fraction
+
+internal class Fraction : Comparable<Fraction> {
+	@JvmField
+	val numerator // Always coprime with denominator
+			: BigInteger
+
+	@JvmField
+	val denominator // Always positive
+			: BigInteger
+
+	@Contract(pure = true)
+	constructor(numerator: BigInteger) {
+		this.numerator = numerator
+		denominator = ONE
+	}
+
+	constructor(numer: BigInteger, denom: BigInteger) {
+		var numer = numer
+		var denom = denom
+		assert(denom.signum() != 0) { "Division by zero" }
+		if (denom.signum() == -1) {
+			numer = numer.negate()
+			denom = denom.negate()
+		}
+		val gcd = numer.gcd(denom)
+		if (gcd != ONE) {
+			numer = numer.divide(gcd)
+			denom = denom.divide(gcd)
+		}
+		numerator = numer
+		denominator = denom
+	}
+
+	@Contract("_ -> new")
+	fun add(other: Fraction): Fraction {
+		return Fraction(numerator.multiply(other.denominator).add(other.numerator.multiply(denominator)), denominator.multiply(other.denominator))
+	}
+
+	@Contract("_ -> new")
+	fun subtract(other: Fraction): Fraction {
+		return Fraction(numerator.multiply(other.denominator).subtract(other.numerator.multiply(denominator)), denominator.multiply(other.denominator))
+	}
+
+	@Contract("_ -> new")
+	fun multiply(other: Fraction): Fraction {
+		return Fraction(numerator.multiply(other.numerator), denominator.multiply(other.denominator))
+	}
+
+	@Contract("_ -> new")
+	fun divide(other: Fraction): Fraction {
+		return Fraction(numerator.multiply(other.denominator), denominator.multiply(other.numerator))
+	}
+
+	@Contract(value = "null -> false", pure = true)
+	fun equals(obj: Fraction?): Boolean {
+		return obj != null && numerator == obj.numerator && denominator == obj.denominator
+	}
+
+	override fun compareTo(other: Fraction): Int {
+		return numerator.multiply(other.denominator).compareTo(other.numerator.multiply(denominator))
+	}
+
+	override fun hashCode(): Int {
+		return numerator.hashCode() + denominator.hashCode()
+	}
+
+	@Contract(pure = true)
+	override fun toString(): String {
+		return "$numerator/$denominator"
+	}
+
+	override fun equals(other: Any?): Boolean {
+		if (this === other) return true
+		if (javaClass != other?.javaClass) return false
+		other as Fraction
+		if (numerator != other.numerator) return false
+		if (denominator != other.denominator) return false
+
+		return true
+	}
+
+	companion object {
+		@JvmField
+		val ZERO = Fraction(BigInteger.ZERO)
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/EulerSolution.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/EulerSolution.kt b/Random_Work/src/projectEuler/programs/EulerSolution.kt
new file mode 100644
--- /dev/null	(date 1614951976556)
+++ b/Random_Work/src/projectEuler/programs/EulerSolution.kt	(date 1614951976556)
@@ -0,0 +1,5 @@
+package projectEuler.programs
+
+abstract class EulerSolution {
+	abstract fun run(): String?
+}
\ No newline at end of file
Index: out/production/Java_Development/preWinterBreakJSPractice/HolidayLoops.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\r\n<html lang=\"en\">\r\n<head>\r\n\t<title>\r\n\t\tHoliday Loop Fun!\r\n\t</title>\r\n\t<script type=\"text/javascript\">\r\n        // This is JavaScript code embedded in an HTML file. In some ways it is very similar to Java but there are important differences.  What do you notice that is the same or different?\r\n        looper(10);\r\n\r\n        function looper(n) {\r\n            let output = \"\";\r\n            for (let i = 1; i <= n + (Number.MAX_SAFE_INTEGER - n); i++) {\r\n                for (let j = i; j >= 0; j--) output += (i + j) % 2 === 1 ? '<img src=tree.png>' : '<img src=stocking.png>';\r\n                output += \"<br>\";\r\n            }\r\n            document.write(output);\r\n        }\r\n\t</script>\r\n</head>\r\n<body>\r\n</body>\r\n</html>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Java_Development/preWinterBreakJSPractice/HolidayLoops.html b/out/production/Java_Development/preWinterBreakJSPractice/HolidayLoops.html
--- a/out/production/Java_Development/preWinterBreakJSPractice/HolidayLoops.html	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/out/production/Java_Development/preWinterBreakJSPractice/HolidayLoops.html	(date 1609257730000)
@@ -7,12 +7,11 @@
 	<script type="text/javascript">
         // This is JavaScript code embedded in an HTML file. In some ways it is very similar to Java but there are important differences.  What do you notice that is the same or different?
         looper(10);
-
         function looper(n) {
             let output = "";
             for (let i = 1; i <= n + (Number.MAX_SAFE_INTEGER - n); i++) {
                 for (let j = i; j >= 0; j--) output += (i + j) % 2 === 1 ? '<img src=tree.png>' : '<img src=stocking.png>';
-                output += "<br>";
+                output += '\n';
             }
             document.write(output);
         }
Index: Hello_World/Hello_World.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Hello_World/Hello_World.iml b/Hello_World/Hello_World.iml
new file mode 100644
--- /dev/null	(date 1620217298679)
+++ b/Hello_World/Hello_World.iml	(date 1620217298679)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: Random_Work/src/spamShortening/Class.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package spamShortening;\r\n\r\npublic class Class {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(\"w4LjZgCZoTiMikyOTpjkXEzMPLWlUZccZWQ6CeBKYLuMtNPBoxGRI0y7Zq16CfwA9GcucWYu5XoYQK4H4cFzZnTelUbTcBcSMN0FVV9OqAWA7uGOn3RXzbvz3wQppAU3YDbRDKc9uUFVFm0cNq9Y6TRYVQdQ9v7B4sanqUuxeJdNXnOV8AmRnajhjitLIVkQwmPTudCpaMtsqnPTpsaXaLeSYTk4YsW5bHMzqJexXAbHAoP3E73ISvWcoCDnf2yvaPyzOkviWCGEIiEowBEVHBkLWguXZe6vTBsAKyiRrgm3HlbZyoewfq4mNzxQ5VnjMXum89IHYxc4yIk7aCuTaJP2mfVpRC7yRalkp1lQLQeCJnaO8J0VFNv1pduRl17A3pSfYwhAHUbnq4t918KQpzBJ7vdgYYzURuyy0OpAqa8OchXU0tVmv3PA3VL6yqdR70nmBv7brdtg22Y3ItknzSQZ0ptFVg7qRiPt5Fa9YzvXMhD2EQ7i8kl7KkRtAC5mQkOGqVQw3toKGz43SvnjpvTCwygsJdK6lpnbYETahqaf1TNW9m1Lr0loR1kBnJJM9va6ReLXuPXWD2yCpKWNrgIMYVoDL9ALX8YzlOZT8BELsyoeYQIeh9d0Hi2urxp9goX5wV3hNpzwKtvCmZTtM675PTkxyD4lbvpZdT53DGmvIzZmvrJU1e7u5Ztg1SCk7JL3hsyLLr6mpAZLUkeVHXZc2AGz9EqsDDhp2Kv1LgwambDtI3asTBICkvriFkZcnJfWs3nUGUgsVzzfUaRoceW72kPABFKv0JsYmzfY2KJHte5yYGWn2OQCkYyHKX3sYBhCDqGfGU1wQdZCgBB89UHqlOKtcMq8O4JLOHQ8JhUKeHMoGGG9yPGiWpyoUPll2PvSA60BTs9aRirnzd131YrdJdkZW6Ctmr7gG5OVgUJbQoarCom7GFeAdbPUqUtoAOWhCXZB9xFG1fRmC8dUTzt4qDJo6e9PZJyWYhFkgAQcw12H3ahXtIokP52AuFVCJMvjv3ftwigc8XKWn9XFygaUhwFu5XjHi3lm1h3PlyZyTqWK76qFbEKe5heRkK4jZb8NyQwou6XAaTPP5I79rh7lmr5GfUT2qA37lzI1TIaIMwtauw8J1fBVtYYXcYWUmFC5CgRYZPolQMPRHEg7l6X4jtp4930JdhfezgehFchZ7yLQr4Hd1W0zMiOj5XOQZjmWvB1Y24R1hYFallLswy8HHW0id5vWo30JAuxhMz6YIkdqnAvh3xsPEDUinhdWzGrI66IHjz9humijhyUOv177tQO3DRksAvbSuJDqK9zQTSN0qYrjMrwT669NqqAkuLyVRqb9ELBzbqV02WJvilZnzc8o4qDj5LqLxA1TjVLUNvK69IhyUzrByBXWyDWMIa8mDrDeT7WMtgVQTdveuOmOhEkMZyDUtqjSAIv3j9NM7WnSPNzzinFSsk2292FzX5h5JZtg30c5t8t3pGfUvoKsfAjsy98EgIF2Ga9hKGRCBcyr5vxQC2EsWNoidLd8uDmQk4xgR7pIAIMq8wkrv0TZgbsLrRSt1R9CwfHdxg8CZWRz12Gtpj27yTN2c2Am988XA8ptDYedUr3amJuH8KiBqkYiK3JtXdPEhWfCnkfRhgS1gYHAOG4GAMR1WY3aZRH0tBMrV11QcsvMJe3FV25jzFwqHhtLckCpwbR9dsnI6zUwhMjOlfgCTm039BGfEc3GdValfqLdf9ZaEjWSwqE9793dOb7bnbxoHmP4Ae8mdbPWdq39iJ4Fg1s8ozEbYbyXvp5HKWlouSvBTLuMSPE9eHvWIaXpZdwSQkWvBexZEzClyewL8f7qkRZvSxFjf3ZLD0SGSUcP4O9t0TchIbXWslYXEczyfh7tuI46YHZ0Jm65CRvlYDumDZjjLABx0GRnWM5LxhbXiByz3eMaCXRa6OCTSTTzaW2SHQOYT7WAwAu6hfD9iPWaZh7XPwhS5eERdSvnOaPuF914\");\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/spamShortening/Class.java b/Random_Work/src/spamShortening/Class.java
--- a/Random_Work/src/spamShortening/Class.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/spamShortening/Class.java	(date 1609777082929)
@@ -1,7 +1,9 @@
 package spamShortening;
 
+import static java.lang.System.*;
+
 public class Class {
 	public static void main(String[] args) {
-		System.out.println("w4LjZgCZoTiMikyOTpjkXEzMPLWlUZccZWQ6CeBKYLuMtNPBoxGRI0y7Zq16CfwA9GcucWYu5XoYQK4H4cFzZnTelUbTcBcSMN0FVV9OqAWA7uGOn3RXzbvz3wQppAU3YDbRDKc9uUFVFm0cNq9Y6TRYVQdQ9v7B4sanqUuxeJdNXnOV8AmRnajhjitLIVkQwmPTudCpaMtsqnPTpsaXaLeSYTk4YsW5bHMzqJexXAbHAoP3E73ISvWcoCDnf2yvaPyzOkviWCGEIiEowBEVHBkLWguXZe6vTBsAKyiRrgm3HlbZyoewfq4mNzxQ5VnjMXum89IHYxc4yIk7aCuTaJP2mfVpRC7yRalkp1lQLQeCJnaO8J0VFNv1pduRl17A3pSfYwhAHUbnq4t918KQpzBJ7vdgYYzURuyy0OpAqa8OchXU0tVmv3PA3VL6yqdR70nmBv7brdtg22Y3ItknzSQZ0ptFVg7qRiPt5Fa9YzvXMhD2EQ7i8kl7KkRtAC5mQkOGqVQw3toKGz43SvnjpvTCwygsJdK6lpnbYETahqaf1TNW9m1Lr0loR1kBnJJM9va6ReLXuPXWD2yCpKWNrgIMYVoDL9ALX8YzlOZT8BELsyoeYQIeh9d0Hi2urxp9goX5wV3hNpzwKtvCmZTtM675PTkxyD4lbvpZdT53DGmvIzZmvrJU1e7u5Ztg1SCk7JL3hsyLLr6mpAZLUkeVHXZc2AGz9EqsDDhp2Kv1LgwambDtI3asTBICkvriFkZcnJfWs3nUGUgsVzzfUaRoceW72kPABFKv0JsYmzfY2KJHte5yYGWn2OQCkYyHKX3sYBhCDqGfGU1wQdZCgBB89UHqlOKtcMq8O4JLOHQ8JhUKeHMoGGG9yPGiWpyoUPll2PvSA60BTs9aRirnzd131YrdJdkZW6Ctmr7gG5OVgUJbQoarCom7GFeAdbPUqUtoAOWhCXZB9xFG1fRmC8dUTzt4qDJo6e9PZJyWYhFkgAQcw12H3ahXtIokP52AuFVCJMvjv3ftwigc8XKWn9XFygaUhwFu5XjHi3lm1h3PlyZyTqWK76qFbEKe5heRkK4jZb8NyQwou6XAaTPP5I79rh7lmr5GfUT2qA37lzI1TIaIMwtauw8J1fBVtYYXcYWUmFC5CgRYZPolQMPRHEg7l6X4jtp4930JdhfezgehFchZ7yLQr4Hd1W0zMiOj5XOQZjmWvB1Y24R1hYFallLswy8HHW0id5vWo30JAuxhMz6YIkdqnAvh3xsPEDUinhdWzGrI66IHjz9humijhyUOv177tQO3DRksAvbSuJDqK9zQTSN0qYrjMrwT669NqqAkuLyVRqb9ELBzbqV02WJvilZnzc8o4qDj5LqLxA1TjVLUNvK69IhyUzrByBXWyDWMIa8mDrDeT7WMtgVQTdveuOmOhEkMZyDUtqjSAIv3j9NM7WnSPNzzinFSsk2292FzX5h5JZtg30c5t8t3pGfUvoKsfAjsy98EgIF2Ga9hKGRCBcyr5vxQC2EsWNoidLd8uDmQk4xgR7pIAIMq8wkrv0TZgbsLrRSt1R9CwfHdxg8CZWRz12Gtpj27yTN2c2Am988XA8ptDYedUr3amJuH8KiBqkYiK3JtXdPEhWfCnkfRhgS1gYHAOG4GAMR1WY3aZRH0tBMrV11QcsvMJe3FV25jzFwqHhtLckCpwbR9dsnI6zUwhMjOlfgCTm039BGfEc3GdValfqLdf9ZaEjWSwqE9793dOb7bnbxoHmP4Ae8mdbPWdq39iJ4Fg1s8ozEbYbyXvp5HKWlouSvBTLuMSPE9eHvWIaXpZdwSQkWvBexZEzClyewL8f7qkRZvSxFjf3ZLD0SGSUcP4O9t0TchIbXWslYXEczyfh7tuI46YHZ0Jm65CRvlYDumDZjjLABx0GRnWM5LxhbXiByz3eMaCXRa6OCTSTTzaW2SHQOYT7WAwAu6hfD9iPWaZh7XPwhS5eERdSvnOaPuF914");
+		out.println("w4LjZgCZoTiMikyOTpjkXEzMPLWlUZccZWQ6CeBKYLuMtNPBoxGRI0y7Zq16CfwA9GcucWYu5XoYQK4H4cFzZnTelUbTcBcSMN0FVV9OqAWA7uGOn3RXzbvz3wQppAU3YDbRDKc9uUFVFm0cNq9Y6TRYVQdQ9v7B4sanqUuxeJdNXnOV8AmRnajhjitLIVkQwmPTudCpaMtsqnPTpsaXaLeSYTk4YsW5bHMzqJexXAbHAoP3E73ISvWcoCDnf2yvaPyzOkviWCGEIiEowBEVHBkLWguXZe6vTBsAKyiRrgm3HlbZyoewfq4mNzxQ5VnjMXum89IHYxc4yIk7aCuTaJP2mfVpRC7yRalkp1lQLQeCJnaO8J0VFNv1pduRl17A3pSfYwhAHUbnq4t918KQpzBJ7vdgYYzURuyy0OpAqa8OchXU0tVmv3PA3VL6yqdR70nmBv7brdtg22Y3ItknzSQZ0ptFVg7qRiPt5Fa9YzvXMhD2EQ7i8kl7KkRtAC5mQkOGqVQw3toKGz43SvnjpvTCwygsJdK6lpnbYETahqaf1TNW9m1Lr0loR1kBnJJM9va6ReLXuPXWD2yCpKWNrgIMYVoDL9ALX8YzlOZT8BELsyoeYQIeh9d0Hi2urxp9goX5wV3hNpzwKtvCmZTtM675PTkxyD4lbvpZdT53DGmvIzZmvrJU1e7u5Ztg1SCk7JL3hsyLLr6mpAZLUkeVHXZc2AGz9EqsDDhp2Kv1LgwambDtI3asTBICkvriFkZcnJfWs3nUGUgsVzzfUaRoceW72kPABFKv0JsYmzfY2KJHte5yYGWn2OQCkYyHKX3sYBhCDqGfGU1wQdZCgBB89UHqlOKtcMq8O4JLOHQ8JhUKeHMoGGG9yPGiWpyoUPll2PvSA60BTs9aRirnzd131YrdJdkZW6Ctmr7gG5OVgUJbQoarCom7GFeAdbPUqUtoAOWhCXZB9xFG1fRmC8dUTzt4qDJo6e9PZJyWYhFkgAQcw12H3ahXtIokP52AuFVCJMvjv3ftwigc8XKWn9XFygaUhwFu5XjHi3lm1h3PlyZyTqWK76qFbEKe5heRkK4jZb8NyQwou6XAaTPP5I79rh7lmr5GfUT2qA37lzI1TIaIMwtauw8J1fBVtYYXcYWUmFC5CgRYZPolQMPRHEg7l6X4jtp4930JdhfezgehFchZ7yLQr4Hd1W0zMiOj5XOQZjmWvB1Y24R1hYFallLswy8HHW0id5vWo30JAuxhMz6YIkdqnAvh3xsPEDUinhdWzGrI66IHjz9humijhyUOv177tQO3DRksAvbSuJDqK9zQTSN0qYrjMrwT669NqqAkuLyVRqb9ELBzbqV02WJvilZnzc8o4qDj5LqLxA1TjVLUNvK69IhyUzrByBXWyDWMIa8mDrDeT7WMtgVQTdveuOmOhEkMZyDUtqjSAIv3j9NM7WnSPNzzinFSsk2292FzX5h5JZtg30c5t8t3pGfUvoKsfAjsy98EgIF2Ga9hKGRCBcyr5vxQC2EsWNoidLd8uDmQk4xgR7pIAIMq8wkrv0TZgbsLrRSt1R9CwfHdxg8CZWRz12Gtpj27yTN2c2Am988XA8ptDYedUr3amJuH8KiBqkYiK3JtXdPEhWfCnkfRhgS1gYHAOG4GAMR1WY3aZRH0tBMrV11QcsvMJe3FV25jzFwqHhtLckCpwbR9dsnI6zUwhMjOlfgCTm039BGfEc3GdValfqLdf9ZaEjWSwqE9793dOb7bnbxoHmP4Ae8mdbPWdq39iJ4Fg1s8ozEbYbyXvp5HKWlouSvBTLuMSPE9eHvWIaXpZdwSQkWvBexZEzClyewL8f7qkRZvSxFjf3ZLD0SGSUcP4O9t0TchIbXWslYXEczyfh7tuI46YHZ0Jm65CRvlYDumDZjjLABx0GRnWM5LxhbXiByz3eMaCXRa6OCTSTTzaW2SHQOYT7WAwAu6hfD9iPWaZh7XPwhS5eERdSvnOaPuF914");
 	}
 }
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nout/production/Java_Development/learnGraphics/pong/Pong Result Speed Reasoning.txt\r\nClasswork/AP_Computer_Science_Ⅰ/src/learnGraphics/pong/Pong Result Speed Reasoning.txt\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
--- a/.gitignore	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/.gitignore	(date 1614739660916)
@@ -1,3 +1,2 @@
-
 out/production/Java_Development/learnGraphics/pong/Pong Result Speed Reasoning.txt
 Classwork/AP_Computer_Science_Ⅰ/src/learnGraphics/pong/Pong Result Speed Reasoning.txt
Index: Java_Development.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<module type=\"JAVA_MODULE\" version=\"4\">\r\n  <component name=\"NewModuleRootManager\" LANGUAGE_LEVEL=\"JDK_15\" inherit-compiler-output=\"true\">\r\n    <exclude-output />\r\n    <content url=\"file://$MODULE_DIR$\">\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Classwork/Computer_Science_in_the_21st_Century/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Hello_World/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Classwork/AP_Computer_Science_Ⅰ/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Random_Work/hackPHS2019\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Random_Work/projectEuler\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Random_Work/src\" isTestSource=\"false\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Classwork/Computer_Science_in_the_21st_Century/images\" type=\"java-resource\" />\r\n      <sourceFolder url=\"file://$MODULE_DIR$/Classwork/mobileApp/src\" isTestSource=\"false\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/.idea\" />\r\n      <excludeFolder url=\"file://$MODULE_DIR$/Classwork/2019-20/PracticeIt Submissions\" />\r\n    </content>\r\n    <orderEntry type=\"jdk\" jdkName=\"15\" jdkType=\"JavaSDK\" />\r\n    <orderEntry type=\"sourceFolder\" forTests=\"false\" />\r\n    <orderEntry type=\"module-library\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/17.0.0/annotations-17.0.0.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"library\" name=\"KotlinJavaRuntime\" level=\"project\" />\r\n    <orderEntry type=\"module-library\">\r\n      <library name=\"JUnit4\">\r\n        <CLASSES>\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/junit/junit/4.12/junit-4.12.jar!/\" />\r\n          <root url=\"jar://$MAVEN_REPOSITORY$/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n    <orderEntry type=\"module-library\">\r\n      <library>\r\n        <CLASSES>\r\n          <root url=\"jar://$MODULE_DIR$/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/gridWorld/gridworld.jar!/\" />\r\n        </CLASSES>\r\n        <JAVADOC />\r\n        <SOURCES />\r\n      </library>\r\n    </orderEntry>\r\n  </component>\r\n</module>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Java_Development.iml b/Java_Development.iml
--- a/Java_Development.iml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Java_Development.iml	(date 1617055697318)
@@ -13,6 +13,7 @@
       <sourceFolder url="file://$MODULE_DIR$/Classwork/mobileApp/src" isTestSource="false" />
       <excludeFolder url="file://$MODULE_DIR$/.idea" />
       <excludeFolder url="file://$MODULE_DIR$/Classwork/2019-20/PracticeIt Submissions" />
+      <excludeFolder url="file://$MODULE_DIR$/Random_Work/src/projectEuler" />
     </content>
     <orderEntry type="jdk" jdkName="15" jdkType="JavaSDK" />
     <orderEntry type="sourceFolder" forTests="false" />
Index: Classwork/mobileApp/mobileApp.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/mobileApp/mobileApp.iml b/Classwork/mobileApp/mobileApp.iml
new file mode 100644
--- /dev/null	(date 1620217298727)
+++ b/Classwork/mobileApp/mobileApp.iml	(date 1620217298727)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml b/Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml
new file mode 100644
--- /dev/null	(date 1620217298701)
+++ b/Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml	(date 1620217298701)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="gridworld" level="project" />
+    <orderEntry type="library" name="gridworld1" level="project" />
+    <orderEntry type="library" name="gridworld" level="project" />
+    <orderEntry type="library" name="gridworld1" level="project" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p075.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p075.kt b/Random_Work/src/projectEuler/programs/p075.kt
new file mode 100644
--- /dev/null	(date 1614954633650)
+++ b/Random_Work/src/projectEuler/programs/p075.kt	(date 1614954633650)
@@ -0,0 +1,52 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.gcd
+import java.util.*
+import kotlin.math.pow
+
+class p075 : EulerSolution() {
+	override fun run(): String {
+		/*
+		 * Pythagorean triples theorem:
+		 * Every primitive Pythagorean triple with a odd and b even can be expressed as
+		 * a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.
+		 */
+		val triples = HashSet<IntTriple>()
+		var s = 3
+		while (s.toDouble().pow(2.0) <= LIMIT) {
+			var t = s - 2
+			while (t > 0) {
+				if (gcd(s, t) == 1) {
+					val a = s * t
+					val b = s * s - t * t shr 1
+					val c = s * s + t * t shr 1
+					if (a + b + c <= LIMIT) triples.add(IntTriple(a, b, c))
+				}
+				t -= 2
+			}
+			s += 2
+		}
+		val ways = ByteArray(LIMIT + 1)
+		// Increment but saturate at 2
+		var count = 0
+		for (x in ways) if (x == byteArrayOf(1)[0]) count++
+		return count.toString()
+	}
+
+	private class IntTriple @Contract(pure = true) constructor(val a: Int, val b: Int, val c: Int) {
+		@Contract(value = "null -> false", pure = true)
+		override fun equals(other: Any?): Boolean =
+				if (other !is IntTriple) false else a == other.a && b == other.b && c == other.c
+
+		@Contract(pure = true)
+		override fun hashCode(): Int = a + b + c
+	}
+
+	companion object {
+		private const val LIMIT = 1500000
+
+		@JvmStatic
+		fun main(args: Array<String>) = println(p075().run())
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p059.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p059.kt b/Random_Work/src/projectEuler/programs/p059.kt
new file mode 100644
--- /dev/null	(date 1614954633667)
+++ b/Random_Work/src/projectEuler/programs/p059.kt	(date 1614954633667)
@@ -0,0 +1,62 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.stream.IntStream
+import kotlin.experimental.xor
+
+class p059 : EulerSolution() {
+	override fun run(): String {
+		var bestKey: ByteArray? = null
+		var bestDecrypted: ByteArray? = null
+		var bestScore = Double.NaN
+		var x = 'a'.toByte()
+		while (x <= 'z'.toByte()) {
+			var y = 'a'.toByte()
+			while (y <= 'z'.toByte()) {
+				var z = 'a'.toByte()
+				while (z <= 'z'.toByte()) {
+					val key = byteArrayOf(x, y, z)
+					val decrypted = decrypt(key)
+					val score = score(decrypted)
+					if (bestKey == null || score > bestScore) {
+						bestKey = key
+						bestDecrypted = decrypted
+						bestScore = score
+					}
+					z++
+				}
+				y++
+			}
+			x++
+		}
+		var sum = 0
+		for (b in bestDecrypted!!) sum += b.toInt()
+		return sum.toString()
+	}
+
+	companion object {
+		private val CIPHER_TEXT = byteArrayOf(36, 22, 80, 0, 0, 4, 23, 25, 19, 17, 88, 4, 4, 19, 21, 11, 88, 22, 23, 23, 29, 69, 12, 24, 0, 88, 25, 11, 12, 2, 10, 28, 5, 6, 12, 25, 10, 22, 80, 10, 30, 80, 10, 22, 21, 69, 23, 22, 69, 61, 5, 9, 29, 2, 66, 11, 80, 8, 23, 3, 17, 88, 19, 0, 20, 21, 7, 10, 17, 17, 29, 20, 69, 8, 17, 21, 29, 2, 22, 84, 80, 71, 60, 21, 69, 11, 5, 8, 21, 25, 22, 88, 3, 0, 10, 25, 0, 10, 5, 8, 88, 2, 0, 27, 25, 21, 10, 31, 6, 25, 2, 16, 21, 82, 69, 35, 63, 11, 88, 4, 13, 29, 80, 22, 13, 29, 22, 88, 31, 3, 88, 3, 0, 10, 25, 0, 11, 80, 10, 30, 80, 23, 29, 19, 12, 8, 2, 10, 27, 17, 9, 11, 45, 95, 88, 57, 69, 16, 17, 19, 29, 80, 23, 29, 19, 0, 22, 4, 9, 1, 80, 3, 23, 5, 11, 28, 92, 69, 9, 5, 12, 12, 21, 69, 13, 30, 0, 0, 0, 0, 27, 4, 0, 28, 28, 28, 84, 80, 4, 22, 80, 0, 20, 21, 2, 25, 30, 17, 88, 21, 29, 8, 2, 0, 11, 3, 12, 23, 30, 69, 30, 31, 23, 88, 4, 13, 29, 80, 0, 22, 4, 12, 10, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 17, 3, 69, 11, 21, 23, 17, 21, 22, 88, 65, 69, 83, 80, 84, 87, 68, 69, 83, 80, 84, 87, 73, 69, 83, 80, 84, 87, 65, 83, 88, 91, 69, 29, 4, 6, 86, 92, 69, 15, 24, 12, 27, 24, 69, 28, 21, 21, 29, 30, 1, 11, 80, 10, 22, 80, 17, 16, 21, 69, 9, 5, 4, 28, 2, 4, 12, 5, 23, 29, 80, 10, 30, 80, 17, 16, 21, 69, 27, 25, 23, 27, 28, 0, 84, 80, 22, 23, 80, 17, 16, 17, 17, 88, 25, 3, 88, 4, 13, 29, 80, 17, 10, 5, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 3, 0, 10, 25, 0, 11, 80, 12, 11, 80, 10, 26, 4, 4, 17, 30, 0, 28, 92, 69, 30, 2, 10, 21, 80, 12, 12, 80, 4, 12, 80, 10, 22, 19, 0, 88, 4, 13, 29, 80, 20, 13, 17, 1, 10, 17, 17, 13, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 6, 17, 2, 6, 20, 21, 69, 30, 31, 9, 20, 31, 18, 11, 94, 69, 54, 17, 8, 29, 28, 28, 84, 80, 44, 88, 24, 4, 14, 21, 69, 30, 31, 16, 22, 20, 69, 12, 24, 4, 12, 80, 17, 16, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 17, 3, 69, 11, 21, 23, 17, 21, 22, 88, 25, 22, 88, 17, 69, 11, 25, 29, 12, 24, 69, 8, 17, 23, 12, 80, 10, 30, 80, 17, 16, 21, 69, 11, 1, 16, 25, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 21, 29, 2, 12, 21, 21, 17, 29, 2, 69, 23, 22, 69, 12, 24, 0, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 67, 80, 10, 10, 80, 7, 1, 80, 21, 13, 4, 17, 17, 30, 2, 88, 4, 13, 29, 80, 22, 13, 29, 69, 23, 22, 69, 12, 24, 12, 11, 80, 22, 29, 2, 12, 29, 3, 69, 29, 1, 16, 25, 28, 69, 12, 31, 69, 11, 92, 69, 17, 4, 69, 16, 17, 22, 88, 4, 13, 29, 80, 23, 25, 4, 12, 23, 80, 22, 9, 2, 17, 80, 70, 76, 88, 29, 16, 20, 4, 12, 8, 28, 12, 29, 20, 69, 26, 9, 69, 11, 80, 17, 23, 80, 84, 88, 31, 3, 88, 4, 13, 29, 80, 21, 29, 2, 12, 21, 21, 17, 29, 2, 69, 12, 31, 69, 12, 24, 0, 88, 20, 12, 25, 29, 0, 12, 21, 23, 86, 80, 44, 88, 7, 12, 20, 28, 69, 11, 31, 10, 22, 80, 22, 16, 31, 18, 88, 4, 13, 25, 4, 69, 12, 24, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 3, 0, 10, 25, 0, 11, 80, 17, 23, 80, 7, 29, 80, 4, 8, 0, 23, 23, 8, 12, 21, 17, 17, 29, 28, 28, 88, 65, 75, 78, 68, 81, 65, 67, 81, 72, 70, 83, 64, 68, 87, 74, 70, 81, 75, 70, 81, 67, 80, 4, 22, 20, 69, 30, 2, 10, 21, 80, 8, 13, 28, 17, 17, 0, 9, 1, 25, 11, 31, 80, 17, 16, 25, 22, 88, 30, 16, 21, 18, 0, 10, 80, 7, 1, 80, 22, 17, 8, 73, 88, 17, 11, 28, 80, 17, 16, 21, 11, 88, 4, 4, 19, 25, 11, 31, 80, 17, 16, 21, 69, 11, 1, 16, 25, 2, 0, 88, 2, 10, 23, 4, 73, 88, 4, 13, 29, 80, 11, 13, 29, 7, 29, 2, 69, 75, 94, 84, 76, 65, 80, 65, 66, 83, 77, 67, 80, 64, 73, 82, 65, 67, 87, 75, 72, 69, 17, 3, 69, 17, 30, 1, 29, 21, 1, 88, 0, 23, 23, 20, 16, 27, 21, 1, 84, 80, 18, 16, 25, 6, 16, 80, 0, 0, 0, 23, 29, 3, 22, 29, 3, 69, 12, 24, 0, 88, 0, 0, 10, 25, 8, 29, 4, 0, 10, 80, 10, 30, 80, 4, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 86, 80, 35, 23, 28, 9, 23, 7, 12, 22, 23, 69, 25, 23, 4, 17, 30, 69, 12, 24, 0, 88, 3, 4, 21, 21, 69, 11, 4, 0, 8, 3, 69, 26, 9, 69, 15, 24, 12, 27, 24, 69, 49, 80, 13, 25, 20, 69, 25, 2, 23, 17, 6, 0, 28, 80, 4, 12, 80, 17, 16, 25, 22, 88, 3, 16, 21, 92, 69, 49, 80, 13, 25, 6, 0, 88, 20, 12, 11, 19, 10, 14, 21, 23, 29, 20, 69, 12, 24, 4, 12, 80, 17, 16, 21, 69, 11, 5, 8, 88, 31, 3, 88, 4, 13, 29, 80, 22, 29, 2, 12, 29, 3, 69, 73, 80, 78, 88, 65, 74, 73, 70, 69, 83, 80, 84, 87, 72, 84, 88, 91, 69, 73, 95, 87, 77, 70, 69, 83, 80, 84, 87, 70, 87, 77, 80, 78, 88, 21, 17, 27, 94, 69, 25, 28, 22, 23, 80, 1, 29, 0, 0, 22, 20, 22, 88, 31, 11, 88, 4, 13, 29, 80, 20, 13, 17, 1, 10, 17, 17, 13, 2, 0, 88, 31, 3, 88, 4, 13, 29, 80, 6, 17, 2, 6, 20, 21, 75, 88, 62, 4, 21, 21, 9, 1, 92, 69, 12, 24, 0, 88, 3, 16, 21, 80, 10, 30, 80, 17, 16, 25, 22, 88, 29, 16, 20, 4, 12, 8, 28, 12, 29, 20, 69, 26, 9, 69, 65, 64, 69, 31, 25, 19, 29, 3, 69, 12, 24, 0, 88, 18, 12, 9, 5, 4, 28, 2, 4, 12, 21, 69, 80, 22, 10, 13, 2, 17, 16, 80, 21, 23, 7, 0, 10, 89, 69, 23, 22, 69, 12, 24, 0, 88, 19, 12, 10, 19, 16, 21, 22, 0, 10, 21, 11, 27, 21, 69, 23, 22, 69, 12, 24, 0, 88, 0, 0, 10, 25, 8, 29, 4, 0, 10, 80, 10, 30, 80, 4, 88, 19, 12, 10, 19, 9, 29, 80, 18, 16, 31, 22, 29, 80, 1, 17, 17, 8, 29, 4, 0, 10, 80, 12, 11, 80, 84, 86, 80, 36, 22, 20, 69, 26, 9, 69, 11, 25, 8, 17, 28, 4, 10, 80, 23, 29, 17, 22, 23, 30, 12, 22, 23, 69, 49, 80, 13, 25, 6, 0, 88, 28, 12, 19, 21, 18, 17, 3, 0, 88, 18, 0, 29, 30, 69, 25, 18, 9, 29, 80, 17, 23, 80, 1, 29, 4, 0, 10, 29, 12, 22, 21, 69, 12, 24, 0, 88, 3, 16, 21, 3, 69, 23, 22, 69, 12, 24, 0, 88, 3, 16, 26, 3, 0, 9, 5, 0, 22, 4, 69, 11, 21, 23, 17, 21, 22, 88, 25, 11, 88, 7, 13, 17, 19, 13, 88, 4, 13, 29, 80, 0, 0, 0, 10, 22, 21, 11, 12, 3, 69, 25, 2, 0, 88, 21, 19, 29, 30, 69, 22, 5, 8, 26, 21, 23, 11, 94)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p059().run())
+		}
+
+		// Heuristical scoring function. The current implementation returns only integral values, but floating-point values are legal too.
+		@Contract(pure = true)
+		private fun score(b: ByteArray): Double {
+			var sum = 0.0
+			for (value in b) if (value.toChar() in 'A'..'Z') sum += 1.0 // Uppercase letters are good
+			else if (value.toChar() in 'a'..'z') sum += 2.0 // Lowercase letters are excellent
+			else if (value.toChar().toInt() < 0x20 || value.toChar().toInt() == 0x7F) sum -= 10.0 // Control characters are very bad
+			return sum
+		}
+
+		@Contract(pure = true)
+		private fun decrypt(key: ByteArray): ByteArray {
+			val plaintext = ByteArray(CIPHER_TEXT.size)
+			IntStream.range(0, CIPHER_TEXT.size).forEachOrdered { i: Int -> plaintext[i] = (CIPHER_TEXT[i] xor key[i % key.size]) as Byte }
+			return plaintext
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p013.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p013.kt b/Random_Work/src/projectEuler/programs/p013.kt
new file mode 100644
--- /dev/null	(date 1614951979196)
+++ b/Random_Work/src/projectEuler/programs/p013.kt	(date 1614951979196)
@@ -0,0 +1,23 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p013 : EulerSolution() {
+	/*
+	 * We do a straightforward sum with help from Java's BigInteger type.
+	 */
+	override fun run(): String {
+		var sum = BigInteger.valueOf(0)
+		for (num in NUMBERS) sum = sum.add(BigInteger(num))
+		return sum.toString().substring(0, 10)
+	}
+
+	companion object {
+		private val NUMBERS = arrayOf("37107287533902102798797998220837590246510135740250", "46376937677490009712648124896970078050417018260538", "74324986199524741059474233309513058123726617309629", "91942213363574161572522430563301811072406154908250", "23067588207539346171171980310421047513778063246676", "89261670696623633820136378418383684178734361726757", "28112879812849979408065481931592621691275889832738", "44274228917432520321923589422876796487670272189318", "47451445736001306439091167216856844588711603153276", "70386486105843025439939619828917593665686757934951", "62176457141856560629502157223196586755079324193331", "64906352462741904929101432445813822663347944758178", "92575867718337217661963751590579239728245598838407", "58203565325359399008402633568948830189458628227828", "80181199384826282014278194139940567587151170094390", "35398664372827112653829987240784473053190104293586", "86515506006295864861532075273371959191420517255829", "71693888707715466499115593487603532921714970056938", "54370070576826684624621495650076471787294438377604", "53282654108756828443191190634694037855217779295145", "36123272525000296071075082563815656710885258350721", "45876576172410976447339110607218265236877223636045", "17423706905851860660448207621209813287860733969412", "81142660418086830619328460811191061556940512689692", "51934325451728388641918047049293215058642563049483", "62467221648435076201727918039944693004732956340691", "15732444386908125794514089057706229429197107928209", "55037687525678773091862540744969844508330393682126", "18336384825330154686196124348767681297534375946515", "80386287592878490201521685554828717201219257766954", "78182833757993103614740356856449095527097864797581", "16726320100436897842553539920931837441497806860984", "48403098129077791799088218795327364475675590848030", "87086987551392711854517078544161852424320693150332", "59959406895756536782107074926966537676326235447210", "69793950679652694742597709739166693763042633987085", "41052684708299085211399427365734116182760315001271", "65378607361501080857009149939512557028198746004375", "35829035317434717326932123578154982629742552737307", "94953759765105305946966067683156574377167401875275", "88902802571733229619176668713819931811048770190271", "25267680276078003013678680992525463401061632866526", "36270218540497705585629946580636237993140746255962", "24074486908231174977792365466257246923322810917141", "91430288197103288597806669760892938638285025333403", "34413065578016127815921815005561868836468420090470", "23053081172816430487623791969842487255036638784583", "11487696932154902810424020138335124462181441773470", "63783299490636259666498587618221225225512486764533", "67720186971698544312419572409913959008952310058822", "95548255300263520781532296796249481641953868218774", "76085327132285723110424803456124867697064507995236", "37774242535411291684276865538926205024910326572967", "23701913275725675285653248258265463092207058596522", "29798860272258331913126375147341994889534765745501", "18495701454879288984856827726077713721403798879715", "38298203783031473527721580348144513491373226651381", "34829543829199918180278916522431027392251122869539", "40957953066405232632538044100059654939159879593635", "29746152185502371307642255121183693803580388584903", "41698116222072977186158236678424689157993532961922", "62467957194401269043877107275048102390895523597457", "23189706772547915061505504953922979530901129967519", "86188088225875314529584099251203829009407770775672", "11306739708304724483816533873502340845647058077308", "82959174767140363198008187129011875491310547126581", "97623331044818386269515456334926366572897563400500", "42846280183517070527831839425882145521227251250327", "55121603546981200581762165212827652751691296897789", "32238195734329339946437501907836945765883352399886", "75506164965184775180738168837861091527357929701337", "62177842752192623401942399639168044983993173312731", "32924185707147349566916674687634660915035914677504", "99518671430235219628894890102423325116913619626622", "73267460800591547471830798392868535206946944540724", "76841822524674417161514036427982273348055556214818", "97142617910342598647204516893989422179826088076852", "87783646182799346313767754307809363333018982642090", "10848802521674670883215120185883543223812876952786", "71329612474782464538636993009049310363619763878039", "62184073572399794223406235393808339651327408011116", "66627891981488087797941876876144230030984490851411", "60661826293682836764744779239180335110989069790714", "85786944089552990653640447425576083659976645795096", "66024396409905389607120198219976047599490197230297", "64913982680032973156037120041377903785566085089252", "16730939319872750275468906903707539413042652315011", "94809377245048795150954100921645863754710598436791", "78639167021187492431995700641917969777599028300699", "15368713711936614952811305876380278410754449733078", "40789923115535562561142322423255033685442488917353", "44889911501440648020369068063960672322193204149535", "41503128880339536053299340368006977710650566631954", "81234880673210146739058568557934581403627822703280", "82616570773948327592232845941706525094512325230608", "22918802058777319719839450180888072429661980811197", "77158542502016545090413245809786882778948721859617", "72107838435069186155435662884062257473692284509516", "20849603980134001723930671666823555245252804609722", "53503534226472524250874054075591789781264330331690")
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p013().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p005.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p005.kt b/Random_Work/src/projectEuler/programs/p005.kt
new file mode 100644
--- /dev/null	(date 1614951978578)
+++ b/Random_Work/src/projectEuler/programs/p005.kt	(date 1614951978578)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p005 : EulerSolution() {
+	/*
+	 * The smallest number n that is evenly divisible by every number in a set {k1, k2, ..., k_m}
+	 * is also known as the lowest common multiple (LCM) of the set of numbers.
+	 * The LCM of two natural numbers x and y is given by LCM(x, y) = x * y / GCD(x, y).
+	 * When LCM is applied to a collection of numbers, it is commutative, associative, and idempotent.
+	 * Hence LCM(k1, k2, ..., k_m) = LCM(...(LCM(LCM(k1, k2), k3)...), k_m).
+	 */
+	override fun run(): String {
+		var allLcm = BigInteger.ONE
+		for (i in 1..20) allLcm = lcm(BigInteger.valueOf(i.toLong()), allLcm)
+		return allLcm.toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p005().run())
+		}
+
+		private fun lcm(x: BigInteger, y: BigInteger): BigInteger {
+			return x.divide(x.gcd(y)).multiply(y)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p067.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p067.kt b/Random_Work/src/projectEuler/programs/p067.kt
new file mode 100644
--- /dev/null	(date 1614954633717)
+++ b/Random_Work/src/projectEuler/programs/p067.kt	(date 1614954633717)
@@ -0,0 +1,31 @@
+package projectEuler.programs
+
+class p067 : EulerSolution() {
+	// Mutable
+	private val triangle = arrayOf(intArrayOf(59), intArrayOf(73, 41), intArrayOf(52, 40, 9), intArrayOf(26, 53, 6, 34), intArrayOf(10, 51, 87, 86, 81), intArrayOf(61, 95, 66, 57, 25, 68), intArrayOf(90, 81, 80, 38, 92, 67, 73), intArrayOf(30, 28, 51, 76, 81, 18, 75, 44), intArrayOf(84, 14, 95, 87, 62, 81, 17, 78, 58), intArrayOf(21, 46, 71, 58, 2, 79, 62, 39, 31, 9), intArrayOf(56, 34, 35, 53, 78, 31, 81, 18, 90, 93, 15), intArrayOf(78, 53, 4, 21, 84, 93, 32, 13, 97, 11, 37, 51), intArrayOf(45, 3, 81, 79, 5, 18, 78, 86, 13, 30, 63, 99, 95), intArrayOf(39, 87, 96, 28, 3, 38, 42, 17, 82, 87, 58, 7, 22, 57), intArrayOf(6, 17, 51, 17, 7, 93, 9, 7, 75, 97, 95, 78, 87, 8, 53), intArrayOf(67, 66, 59, 60, 88, 99, 94, 65, 55, 77, 55, 34, 27, 53, 78, 28), intArrayOf(76, 40, 41, 4, 87, 16, 9, 42, 75, 69, 23, 97, 30, 60, 10, 79, 87), intArrayOf(12, 10, 44, 26, 21, 36, 32, 84, 98, 60, 13, 12, 36, 16, 63, 31, 91, 35), intArrayOf(70, 39, 6, 5, 55, 27, 38, 48, 28, 22, 34, 35, 62, 62, 15, 14, 94, 89, 86), intArrayOf(66, 56, 68, 84, 96, 21, 34, 34, 34, 81, 62, 40, 65, 54, 62, 5, 98, 3, 2, 60), intArrayOf(38, 89, 46, 37, 99, 54, 34, 53, 36, 14, 70, 26, 2, 90, 45, 13, 31, 61, 83, 73, 47), intArrayOf(36, 10, 63, 96, 60, 49, 41, 5, 37, 42, 14, 58, 84, 93, 96, 17, 9, 43, 5, 43, 6, 59), intArrayOf(66, 57, 87, 57, 61, 28, 37, 51, 84, 73, 79, 15, 39, 95, 88, 87, 43, 39, 11, 86, 77, 74, 18), intArrayOf(54, 42, 5, 79, 30, 49, 99, 73, 46, 37, 50, 2, 45, 9, 54, 52, 27, 95, 27, 65, 19, 45, 26, 45), intArrayOf(71, 39, 17, 78, 76, 29, 52, 90, 18, 99, 78, 19, 35, 62, 71, 19, 23, 65, 93, 85, 49, 33, 75, 9, 2), intArrayOf(33, 24, 47, 61, 60, 55, 32, 88, 57, 55, 91, 54, 46, 57, 7, 77, 98, 52, 80, 99, 24, 25, 46, 78, 79, 5), intArrayOf(92, 9, 13, 55, 10, 67, 26, 78, 76, 82, 63, 49, 51, 31, 24, 68, 5, 57, 7, 54, 69, 21, 67, 43, 17, 63, 12), intArrayOf(24, 59, 6, 8, 98, 74, 66, 26, 61, 60, 13, 3, 9, 9, 24, 30, 71, 8, 88, 70, 72, 70, 29, 90, 11, 82, 41, 34), intArrayOf(66, 82, 67, 4, 36, 60, 92, 77, 91, 85, 62, 49, 59, 61, 30, 90, 29, 94, 26, 41, 89, 4, 53, 22, 83, 41, 9, 74, 90), intArrayOf(48, 28, 26, 37, 28, 52, 77, 26, 51, 32, 18, 98, 79, 36, 62, 13, 17, 8, 19, 54, 89, 29, 73, 68, 42, 14, 8, 16, 70, 37), intArrayOf(37, 60, 69, 70, 72, 71, 9, 59, 13, 60, 38, 13, 57, 36, 9, 30, 43, 89, 30, 39, 15, 2, 44, 73, 5, 73, 26, 63, 56, 86, 12), intArrayOf(55, 55, 85, 50, 62, 99, 84, 77, 28, 85, 3, 21, 27, 22, 19, 26, 82, 69, 54, 4, 13, 7, 85, 14, 1, 15, 70, 59, 89, 95, 10, 19), intArrayOf(4, 9, 31, 92, 91, 38, 92, 86, 98, 75, 21, 5, 64, 42, 62, 84, 36, 20, 73, 42, 21, 23, 22, 51, 51, 79, 25, 45, 85, 53, 3, 43, 22), intArrayOf(75, 63, 2, 49, 14, 12, 89, 14, 60, 78, 92, 16, 44, 82, 38, 30, 72, 11, 46, 52, 90, 27, 8, 65, 78, 3, 85, 41, 57, 79, 39, 52, 33, 48), intArrayOf(78, 27, 56, 56, 39, 13, 19, 43, 86, 72, 58, 95, 39, 7, 4, 34, 21, 98, 39, 15, 39, 84, 89, 69, 84, 46, 37, 57, 59, 35, 59, 50, 26, 15, 93), intArrayOf(42, 89, 36, 27, 78, 91, 24, 11, 17, 41, 5, 94, 7, 69, 51, 96, 3, 96, 47, 90, 90, 45, 91, 20, 50, 56, 10, 32, 36, 49, 4, 53, 85, 92, 25, 65), intArrayOf(52, 9, 61, 30, 61, 97, 66, 21, 96, 92, 98, 90, 6, 34, 96, 60, 32, 69, 68, 33, 75, 84, 18, 31, 71, 50, 84, 63, 3, 3, 19, 11, 28, 42, 75, 45, 45), intArrayOf(61, 31, 61, 68, 96, 34, 49, 39, 5, 71, 76, 59, 62, 67, 6, 47, 96, 99, 34, 21, 32, 47, 52, 7, 71, 60, 42, 72, 94, 56, 82, 83, 84, 40, 94, 87, 82, 46), intArrayOf(1, 20, 60, 14, 17, 38, 26, 78, 66, 81, 45, 95, 18, 51, 98, 81, 48, 16, 53, 88, 37, 52, 69, 95, 72, 93, 22, 34, 98, 20, 54, 27, 73, 61, 56, 63, 60, 34, 63), intArrayOf(93, 42, 94, 83, 47, 61, 27, 51, 79, 79, 45, 1, 44, 73, 31, 70, 83, 42, 88, 25, 53, 51, 30, 15, 65, 94, 80, 44, 61, 84, 12, 77, 2, 62, 2, 65, 94, 42, 14, 94), intArrayOf(32, 73, 9, 67, 68, 29, 74, 98, 10, 19, 85, 48, 38, 31, 85, 67, 53, 93, 93, 77, 47, 67, 39, 72, 94, 53, 18, 43, 77, 40, 78, 32, 29, 59, 24, 6, 2, 83, 50, 60, 66), intArrayOf(32, 1, 44, 30, 16, 51, 15, 81, 98, 15, 10, 62, 86, 79, 50, 62, 45, 60, 70, 38, 31, 85, 65, 61, 64, 6, 69, 84, 14, 22, 56, 43, 9, 48, 66, 69, 83, 91, 60, 40, 36, 61), intArrayOf(92, 48, 22, 99, 15, 95, 64, 43, 1, 16, 94, 2, 99, 19, 17, 69, 11, 58, 97, 56, 89, 31, 77, 45, 67, 96, 12, 73, 8, 20, 36, 47, 81, 44, 50, 64, 68, 85, 40, 81, 85, 52, 9), intArrayOf(91, 35, 92, 45, 32, 84, 62, 15, 19, 64, 21, 66, 6, 1, 52, 80, 62, 59, 12, 25, 88, 28, 91, 50, 40, 16, 22, 99, 92, 79, 87, 51, 21, 77, 74, 77, 7, 42, 38, 42, 74, 83, 2, 5), intArrayOf(46, 19, 77, 66, 24, 18, 5, 32, 2, 84, 31, 99, 92, 58, 96, 72, 91, 36, 62, 99, 55, 29, 53, 42, 12, 37, 26, 58, 89, 50, 66, 19, 82, 75, 12, 48, 24, 87, 91, 85, 2, 7, 3, 76, 86), intArrayOf(99, 98, 84, 93, 7, 17, 33, 61, 92, 20, 66, 60, 24, 66, 40, 30, 67, 5, 37, 29, 24, 96, 3, 27, 70, 62, 13, 4, 45, 47, 59, 88, 43, 20, 66, 15, 46, 92, 30, 4, 71, 66, 78, 70, 53, 99), intArrayOf(67, 60, 38, 6, 88, 4, 17, 72, 10, 99, 71, 7, 42, 25, 54, 5, 26, 64, 91, 50, 45, 71, 6, 30, 67, 48, 69, 82, 8, 56, 80, 67, 18, 46, 66, 63, 1, 20, 8, 80, 47, 7, 91, 16, 3, 79, 87), intArrayOf(18, 54, 78, 49, 80, 48, 77, 40, 68, 23, 60, 88, 58, 80, 33, 57, 11, 69, 55, 53, 64, 2, 94, 49, 60, 92, 16, 35, 81, 21, 82, 96, 25, 24, 96, 18, 2, 5, 49, 3, 50, 77, 6, 32, 84, 27, 18, 38), intArrayOf(68, 1, 50, 4, 3, 21, 42, 94, 53, 24, 89, 5, 92, 26, 52, 36, 68, 11, 85, 1, 4, 42, 2, 45, 15, 6, 50, 4, 53, 73, 25, 74, 81, 88, 98, 21, 67, 84, 79, 97, 99, 20, 95, 4, 40, 46, 2, 58, 87), intArrayOf(94, 10, 2, 78, 88, 52, 21, 3, 88, 60, 6, 53, 49, 71, 20, 91, 12, 65, 7, 49, 21, 22, 11, 41, 58, 99, 36, 16, 9, 48, 17, 24, 52, 36, 23, 15, 72, 16, 84, 56, 2, 99, 43, 76, 81, 71, 29, 39, 49, 17), intArrayOf(64, 39, 59, 84, 86, 16, 17, 66, 3, 9, 43, 6, 64, 18, 63, 29, 68, 6, 23, 7, 87, 14, 26, 35, 17, 12, 98, 41, 53, 64, 78, 18, 98, 27, 28, 84, 80, 67, 75, 62, 10, 11, 76, 90, 54, 10, 5, 54, 41, 39, 66), intArrayOf(43, 83, 18, 37, 32, 31, 52, 29, 95, 47, 8, 76, 35, 11, 4, 53, 35, 43, 34, 10, 52, 57, 12, 36, 20, 39, 40, 55, 78, 44, 7, 31, 38, 26, 8, 15, 56, 88, 86, 1, 52, 62, 10, 24, 32, 5, 60, 65, 53, 28, 57, 99), intArrayOf(3, 50, 3, 52, 7, 73, 49, 92, 66, 80, 1, 46, 8, 67, 25, 36, 73, 93, 7, 42, 25, 53, 13, 96, 76, 83, 87, 90, 54, 89, 78, 22, 78, 91, 73, 51, 69, 9, 79, 94, 83, 53, 9, 40, 69, 62, 10, 79, 49, 47, 3, 81, 30), intArrayOf(71, 54, 73, 33, 51, 76, 59, 54, 79, 37, 56, 45, 84, 17, 62, 21, 98, 69, 41, 95, 65, 24, 39, 37, 62, 3, 24, 48, 54, 64, 46, 82, 71, 78, 33, 67, 9, 16, 96, 68, 52, 74, 79, 68, 32, 21, 13, 78, 96, 60, 9, 69, 20, 36), intArrayOf(73, 26, 21, 44, 46, 38, 17, 83, 65, 98, 7, 23, 52, 46, 61, 97, 33, 13, 60, 31, 70, 15, 36, 77, 31, 58, 56, 93, 75, 68, 21, 36, 69, 53, 90, 75, 25, 82, 39, 50, 65, 94, 29, 30, 11, 33, 11, 13, 96, 2, 56, 47, 7, 49, 2), intArrayOf(76, 46, 73, 30, 10, 20, 60, 70, 14, 56, 34, 26, 37, 39, 48, 24, 55, 76, 84, 91, 39, 86, 95, 61, 50, 14, 53, 93, 64, 67, 37, 31, 10, 84, 42, 70, 48, 20, 10, 72, 60, 61, 84, 79, 69, 65, 99, 73, 89, 25, 85, 48, 92, 56, 97, 16), intArrayOf(3, 14, 80, 27, 22, 30, 44, 27, 67, 75, 79, 32, 51, 54, 81, 29, 65, 14, 19, 4, 13, 82, 4, 91, 43, 40, 12, 52, 29, 99, 7, 76, 60, 25, 1, 7, 61, 71, 37, 92, 40, 47, 99, 66, 57, 1, 43, 44, 22, 40, 53, 53, 9, 69, 26, 81, 7), intArrayOf(49, 80, 56, 90, 93, 87, 47, 13, 75, 28, 87, 23, 72, 79, 32, 18, 27, 20, 28, 10, 37, 59, 21, 18, 70, 4, 79, 96, 3, 31, 45, 71, 81, 6, 14, 18, 17, 5, 31, 50, 92, 79, 23, 47, 9, 39, 47, 91, 43, 54, 69, 47, 42, 95, 62, 46, 32, 85), intArrayOf(37, 18, 62, 85, 87, 28, 64, 5, 77, 51, 47, 26, 30, 65, 5, 70, 65, 75, 59, 80, 42, 52, 25, 20, 44, 10, 92, 17, 71, 95, 52, 14, 77, 13, 24, 55, 11, 65, 26, 91, 1, 30, 63, 15, 49, 48, 41, 17, 67, 47, 3, 68, 20, 90, 98, 32, 4, 40, 68), intArrayOf(90, 51, 58, 60, 6, 55, 23, 68, 5, 19, 76, 94, 82, 36, 96, 43, 38, 90, 87, 28, 33, 83, 5, 17, 70, 83, 96, 93, 6, 4, 78, 47, 80, 6, 23, 84, 75, 23, 87, 72, 99, 14, 50, 98, 92, 38, 90, 64, 61, 58, 76, 94, 36, 66, 87, 80, 51, 35, 61, 38), intArrayOf(57, 95, 64, 6, 53, 36, 82, 51, 40, 33, 47, 14, 7, 98, 78, 65, 39, 58, 53, 6, 50, 53, 4, 69, 40, 68, 36, 69, 75, 78, 75, 60, 3, 32, 39, 24, 74, 47, 26, 90, 13, 40, 44, 71, 90, 76, 51, 24, 36, 50, 25, 45, 70, 80, 61, 80, 61, 43, 90, 64, 11), intArrayOf(18, 29, 86, 56, 68, 42, 79, 10, 42, 44, 30, 12, 96, 18, 23, 18, 52, 59, 2, 99, 67, 46, 60, 86, 43, 38, 55, 17, 44, 93, 42, 21, 55, 14, 47, 34, 55, 16, 49, 24, 23, 29, 96, 51, 55, 10, 46, 53, 27, 92, 27, 46, 63, 57, 30, 65, 43, 27, 21, 20, 24, 83), intArrayOf(81, 72, 93, 19, 69, 52, 48, 1, 13, 83, 92, 69, 20, 48, 69, 59, 20, 62, 5, 42, 28, 89, 90, 99, 32, 72, 84, 17, 8, 87, 36, 3, 60, 31, 36, 36, 81, 26, 97, 36, 48, 54, 56, 56, 27, 16, 91, 8, 23, 11, 87, 99, 33, 47, 2, 14, 44, 73, 70, 99, 43, 35, 33), intArrayOf(90, 56, 61, 86, 56, 12, 70, 59, 63, 32, 1, 15, 81, 47, 71, 76, 95, 32, 65, 80, 54, 70, 34, 51, 40, 45, 33, 4, 64, 55, 78, 68, 88, 47, 31, 47, 68, 87, 3, 84, 23, 44, 89, 72, 35, 8, 31, 76, 63, 26, 90, 85, 96, 67, 65, 91, 19, 14, 17, 86, 4, 71, 32, 95), intArrayOf(37, 13, 4, 22, 64, 37, 37, 28, 56, 62, 86, 33, 7, 37, 10, 44, 52, 82, 52, 6, 19, 52, 57, 75, 90, 26, 91, 24, 6, 21, 14, 67, 76, 30, 46, 14, 35, 89, 89, 41, 3, 64, 56, 97, 87, 63, 22, 34, 3, 79, 17, 45, 11, 53, 25, 56, 96, 61, 23, 18, 63, 31, 37, 37, 47), intArrayOf(77, 23, 26, 70, 72, 76, 77, 4, 28, 64, 71, 69, 14, 85, 96, 54, 95, 48, 6, 62, 99, 83, 86, 77, 97, 75, 71, 66, 30, 19, 57, 90, 33, 1, 60, 61, 14, 12, 90, 99, 32, 77, 56, 41, 18, 14, 87, 49, 10, 14, 90, 64, 18, 50, 21, 74, 14, 16, 88, 5, 45, 73, 82, 47, 74, 44), intArrayOf(22, 97, 41, 13, 34, 31, 54, 61, 56, 94, 3, 24, 59, 27, 98, 77, 4, 9, 37, 40, 12, 26, 87, 9, 71, 70, 7, 18, 64, 57, 80, 21, 12, 71, 83, 94, 60, 39, 73, 79, 73, 19, 97, 32, 64, 29, 41, 7, 48, 84, 85, 67, 12, 74, 95, 20, 24, 52, 41, 67, 56, 61, 29, 93, 35, 72, 69), intArrayOf(72, 23, 63, 66, 1, 11, 7, 30, 52, 56, 95, 16, 65, 26, 83, 90, 50, 74, 60, 18, 16, 48, 43, 77, 37, 11, 99, 98, 30, 94, 91, 26, 62, 73, 45, 12, 87, 73, 47, 27, 1, 88, 66, 99, 21, 41, 95, 80, 2, 53, 23, 32, 61, 48, 32, 43, 43, 83, 14, 66, 95, 91, 19, 81, 80, 67, 25, 88), intArrayOf(8, 62, 32, 18, 92, 14, 83, 71, 37, 96, 11, 83, 39, 99, 5, 16, 23, 27, 10, 67, 2, 25, 44, 11, 55, 31, 46, 64, 41, 56, 44, 74, 26, 81, 51, 31, 45, 85, 87, 9, 81, 95, 22, 28, 76, 69, 46, 48, 64, 87, 67, 76, 27, 89, 31, 11, 74, 16, 62, 3, 60, 94, 42, 47, 9, 34, 94, 93, 72), intArrayOf(56, 18, 90, 18, 42, 17, 42, 32, 14, 86, 6, 53, 33, 95, 99, 35, 29, 15, 44, 20, 49, 59, 25, 54, 34, 59, 84, 21, 23, 54, 35, 90, 78, 16, 93, 13, 37, 88, 54, 19, 86, 67, 68, 55, 66, 84, 65, 42, 98, 37, 87, 56, 33, 28, 58, 38, 28, 38, 66, 27, 52, 21, 81, 15, 8, 22, 97, 32, 85, 27), intArrayOf(91, 53, 40, 28, 13, 34, 91, 25, 1, 63, 50, 37, 22, 49, 71, 58, 32, 28, 30, 18, 68, 94, 23, 83, 63, 62, 94, 76, 80, 41, 90, 22, 82, 52, 29, 12, 18, 56, 10, 8, 35, 14, 37, 57, 23, 65, 67, 40, 72, 39, 93, 39, 70, 89, 40, 34, 7, 46, 94, 22, 20, 5, 53, 64, 56, 30, 5, 56, 61, 88, 27), intArrayOf(23, 95, 11, 12, 37, 69, 68, 24, 66, 10, 87, 70, 43, 50, 75, 7, 62, 41, 83, 58, 95, 93, 89, 79, 45, 39, 2, 22, 5, 22, 95, 43, 62, 11, 68, 29, 17, 40, 26, 44, 25, 71, 87, 16, 70, 85, 19, 25, 59, 94, 90, 41, 41, 80, 61, 70, 55, 60, 84, 33, 95, 76, 42, 63, 15, 9, 3, 40, 38, 12, 3, 32), intArrayOf(9, 84, 56, 80, 61, 55, 85, 97, 16, 94, 82, 94, 98, 57, 84, 30, 84, 48, 93, 90, 71, 5, 95, 90, 73, 17, 30, 98, 40, 64, 65, 89, 7, 79, 9, 19, 56, 36, 42, 30, 23, 69, 73, 72, 7, 5, 27, 61, 24, 31, 43, 48, 71, 84, 21, 28, 26, 65, 65, 59, 65, 74, 77, 20, 10, 81, 61, 84, 95, 8, 52, 23, 70), intArrayOf(47, 81, 28, 9, 98, 51, 67, 64, 35, 51, 59, 36, 92, 82, 77, 65, 80, 24, 72, 53, 22, 7, 27, 10, 21, 28, 30, 22, 48, 82, 80, 48, 56, 20, 14, 43, 18, 25, 50, 95, 90, 31, 77, 8, 9, 48, 44, 80, 90, 22, 93, 45, 82, 17, 13, 96, 25, 26, 8, 73, 34, 99, 6, 49, 24, 6, 83, 51, 40, 14, 15, 10, 25, 1), intArrayOf(54, 25, 10, 81, 30, 64, 24, 74, 75, 80, 36, 75, 82, 60, 22, 69, 72, 91, 45, 67, 3, 62, 79, 54, 89, 74, 44, 83, 64, 96, 66, 73, 44, 30, 74, 50, 37, 5, 9, 97, 70, 1, 60, 46, 37, 91, 39, 75, 75, 18, 58, 52, 72, 78, 51, 81, 86, 52, 8, 97, 1, 46, 43, 66, 98, 62, 81, 18, 70, 93, 73, 8, 32, 46, 34), intArrayOf(96, 80, 82, 7, 59, 71, 92, 53, 19, 20, 88, 66, 3, 26, 26, 10, 24, 27, 50, 82, 94, 73, 63, 8, 51, 33, 22, 45, 19, 13, 58, 33, 90, 15, 22, 50, 36, 13, 55, 6, 35, 47, 82, 52, 33, 61, 36, 27, 28, 46, 98, 14, 73, 20, 73, 32, 16, 26, 80, 53, 47, 66, 76, 38, 94, 45, 2, 1, 22, 52, 47, 96, 64, 58, 52, 39), intArrayOf(88, 46, 23, 39, 74, 63, 81, 64, 20, 90, 33, 33, 76, 55, 58, 26, 10, 46, 42, 26, 74, 74, 12, 83, 32, 43, 9, 2, 73, 55, 86, 54, 85, 34, 28, 23, 29, 79, 91, 62, 47, 41, 82, 87, 99, 22, 48, 90, 20, 5, 96, 75, 95, 4, 43, 28, 81, 39, 81, 1, 28, 42, 78, 25, 39, 77, 90, 57, 58, 98, 17, 36, 73, 22, 63, 74, 51), intArrayOf(29, 39, 74, 94, 95, 78, 64, 24, 38, 86, 63, 87, 93, 6, 70, 92, 22, 16, 80, 64, 29, 52, 20, 27, 23, 50, 14, 13, 87, 15, 72, 96, 81, 22, 8, 49, 72, 30, 70, 24, 79, 31, 16, 64, 59, 21, 89, 34, 96, 91, 48, 76, 43, 53, 88, 1, 57, 80, 23, 81, 90, 79, 58, 1, 80, 87, 17, 99, 86, 90, 72, 63, 32, 69, 14, 28, 88, 69), intArrayOf(37, 17, 71, 95, 56, 93, 71, 35, 43, 45, 4, 98, 92, 94, 84, 96, 11, 30, 31, 27, 31, 60, 92, 3, 48, 5, 98, 91, 86, 94, 35, 90, 90, 8, 48, 19, 33, 28, 68, 37, 59, 26, 65, 96, 50, 68, 22, 7, 9, 49, 34, 31, 77, 49, 43, 6, 75, 17, 81, 87, 61, 79, 52, 26, 27, 72, 29, 50, 7, 98, 86, 1, 17, 10, 46, 64, 24, 18, 56), intArrayOf(51, 30, 25, 94, 88, 85, 79, 91, 40, 33, 63, 84, 49, 67, 98, 92, 15, 26, 75, 19, 82, 5, 18, 78, 65, 93, 61, 48, 91, 43, 59, 41, 70, 51, 22, 15, 92, 81, 67, 91, 46, 98, 11, 11, 65, 31, 66, 10, 98, 65, 83, 21, 5, 56, 5, 98, 73, 67, 46, 74, 69, 34, 8, 30, 5, 52, 7, 98, 32, 95, 30, 94, 65, 50, 24, 63, 28, 81, 99, 57), intArrayOf(19, 23, 61, 36, 9, 89, 71, 98, 65, 17, 30, 29, 89, 26, 79, 74, 94, 11, 44, 48, 97, 54, 81, 55, 39, 66, 69, 45, 28, 47, 13, 86, 15, 76, 74, 70, 84, 32, 36, 33, 79, 20, 78, 14, 41, 47, 89, 28, 81, 5, 99, 66, 81, 86, 38, 26, 6, 25, 13, 60, 54, 55, 23, 53, 27, 5, 89, 25, 23, 11, 13, 54, 59, 54, 56, 34, 16, 24, 53, 44, 6), intArrayOf(13, 40, 57, 72, 21, 15, 60, 8, 4, 19, 11, 98, 34, 45, 9, 97, 86, 71, 3, 15, 56, 19, 15, 44, 97, 31, 90, 4, 87, 87, 76, 8, 12, 30, 24, 62, 84, 28, 12, 85, 82, 53, 99, 52, 13, 94, 6, 65, 97, 86, 9, 50, 94, 68, 69, 74, 30, 67, 87, 94, 63, 7, 78, 27, 80, 36, 69, 41, 6, 92, 32, 78, 37, 82, 30, 5, 18, 87, 99, 72, 19, 99), intArrayOf(44, 20, 55, 77, 69, 91, 27, 31, 28, 81, 80, 27, 2, 7, 97, 23, 95, 98, 12, 25, 75, 29, 47, 71, 7, 47, 78, 39, 41, 59, 27, 76, 13, 15, 66, 61, 68, 35, 69, 86, 16, 53, 67, 63, 99, 85, 41, 56, 8, 28, 33, 40, 94, 76, 90, 85, 31, 70, 24, 65, 84, 65, 99, 82, 19, 25, 54, 37, 21, 46, 33, 2, 52, 99, 51, 33, 26, 4, 87, 2, 8, 18, 96), intArrayOf(54, 42, 61, 45, 91, 6, 64, 79, 80, 82, 32, 16, 83, 63, 42, 49, 19, 78, 65, 97, 40, 42, 14, 61, 49, 34, 4, 18, 25, 98, 59, 30, 82, 72, 26, 88, 54, 36, 21, 75, 3, 88, 99, 53, 46, 51, 55, 78, 22, 94, 34, 40, 68, 87, 84, 25, 30, 76, 25, 8, 92, 84, 42, 61, 40, 38, 9, 99, 40, 23, 29, 39, 46, 55, 10, 90, 35, 84, 56, 70, 63, 23, 91, 39), intArrayOf(52, 92, 3, 71, 89, 7, 9, 37, 68, 66, 58, 20, 44, 92, 51, 56, 13, 71, 79, 99, 26, 37, 2, 6, 16, 67, 36, 52, 58, 16, 79, 73, 56, 60, 59, 27, 44, 77, 94, 82, 20, 50, 98, 33, 9, 87, 94, 37, 40, 83, 64, 83, 58, 85, 17, 76, 53, 2, 83, 52, 22, 27, 39, 20, 48, 92, 45, 21, 9, 42, 24, 23, 12, 37, 52, 28, 50, 78, 79, 20, 86, 62, 73, 20, 59), intArrayOf(54, 96, 80, 15, 91, 90, 99, 70, 10, 9, 58, 90, 93, 50, 81, 99, 54, 38, 36, 10, 30, 11, 35, 84, 16, 45, 82, 18, 11, 97, 36, 43, 96, 79, 97, 65, 40, 48, 23, 19, 17, 31, 64, 52, 65, 65, 37, 32, 65, 76, 99, 79, 34, 65, 79, 27, 55, 33, 3, 1, 33, 27, 61, 28, 66, 8, 4, 70, 49, 46, 48, 83, 1, 45, 19, 96, 13, 81, 14, 21, 31, 79, 93, 85, 50, 5), intArrayOf(92, 92, 48, 84, 59, 98, 31, 53, 23, 27, 15, 22, 79, 95, 24, 76, 5, 79, 16, 93, 97, 89, 38, 89, 42, 83, 2, 88, 94, 95, 82, 21, 1, 97, 48, 39, 31, 78, 9, 65, 50, 56, 97, 61, 1, 7, 65, 27, 21, 23, 14, 15, 80, 97, 44, 78, 49, 35, 33, 45, 81, 74, 34, 5, 31, 57, 9, 38, 94, 7, 69, 54, 69, 32, 65, 68, 46, 68, 78, 90, 24, 28, 49, 51, 45, 86, 35), intArrayOf(41, 63, 89, 76, 87, 31, 86, 9, 46, 14, 87, 82, 22, 29, 47, 16, 13, 10, 70, 72, 82, 95, 48, 64, 58, 43, 13, 75, 42, 69, 21, 12, 67, 13, 64, 85, 58, 23, 98, 9, 37, 76, 5, 22, 31, 12, 66, 50, 29, 99, 86, 72, 45, 25, 10, 28, 19, 6, 90, 43, 29, 31, 67, 79, 46, 25, 74, 14, 97, 35, 76, 37, 65, 46, 23, 82, 6, 22, 30, 76, 93, 66, 94, 17, 96, 13, 20, 72), intArrayOf(63, 40, 78, 8, 52, 9, 90, 41, 70, 28, 36, 14, 46, 44, 85, 96, 24, 52, 58, 15, 87, 37, 5, 98, 99, 39, 13, 61, 76, 38, 44, 99, 83, 74, 90, 22, 53, 80, 56, 98, 30, 51, 63, 39, 44, 30, 91, 91, 4, 22, 27, 73, 17, 35, 53, 18, 35, 45, 54, 56, 27, 78, 48, 13, 69, 36, 44, 38, 71, 25, 30, 56, 15, 22, 73, 43, 32, 69, 59, 25, 93, 83, 45, 11, 34, 94, 44, 39, 92), intArrayOf(12, 36, 56, 88, 13, 96, 16, 12, 55, 54, 11, 47, 19, 78, 17, 17, 68, 81, 77, 51, 42, 55, 99, 85, 66, 27, 81, 79, 93, 42, 65, 61, 69, 74, 14, 1, 18, 56, 12, 1, 58, 37, 91, 22, 42, 66, 83, 25, 19, 4, 96, 41, 25, 45, 18, 69, 96, 88, 36, 93, 10, 12, 98, 32, 44, 83, 83, 4, 72, 91, 4, 27, 73, 7, 34, 37, 71, 60, 59, 31, 1, 54, 54, 44, 96, 93, 83, 36, 4, 45), intArrayOf(30, 18, 22, 20, 42, 96, 65, 79, 17, 41, 55, 69, 94, 81, 29, 80, 91, 31, 85, 25, 47, 26, 43, 49, 2, 99, 34, 67, 99, 76, 16, 14, 15, 93, 8, 32, 99, 44, 61, 77, 67, 50, 43, 55, 87, 55, 53, 72, 17, 46, 62, 25, 50, 99, 73, 5, 93, 48, 17, 31, 70, 80, 59, 9, 44, 59, 45, 13, 74, 66, 58, 94, 87, 73, 16, 14, 85, 38, 74, 99, 64, 23, 79, 28, 71, 42, 20, 37, 82, 31, 23), intArrayOf(51, 96, 39, 65, 46, 71, 56, 13, 29, 68, 53, 86, 45, 33, 51, 49, 12, 91, 21, 21, 76, 85, 2, 17, 98, 15, 46, 12, 60, 21, 88, 30, 92, 83, 44, 59, 42, 50, 27, 88, 46, 86, 94, 73, 45, 54, 23, 24, 14, 10, 94, 21, 20, 34, 23, 51, 4, 83, 99, 75, 90, 63, 60, 16, 22, 33, 83, 70, 11, 32, 10, 50, 29, 30, 83, 46, 11, 5, 31, 17, 86, 42, 49, 1, 44, 63, 28, 60, 7, 78, 95, 40), intArrayOf(44, 61, 89, 59, 4, 49, 51, 27, 69, 71, 46, 76, 44, 4, 9, 34, 56, 39, 15, 6, 94, 91, 75, 90, 65, 27, 56, 23, 74, 6, 23, 33, 36, 69, 14, 39, 5, 34, 35, 57, 33, 22, 76, 46, 56, 10, 61, 65, 98, 9, 16, 69, 4, 62, 65, 18, 99, 76, 49, 18, 72, 66, 73, 83, 82, 40, 76, 31, 89, 91, 27, 88, 17, 35, 41, 35, 32, 51, 32, 67, 52, 68, 74, 85, 80, 57, 7, 11, 62, 66, 47, 22, 67), intArrayOf(65, 37, 19, 97, 26, 17, 16, 24, 24, 17, 50, 37, 64, 82, 24, 36, 32, 11, 68, 34, 69, 31, 32, 89, 79, 93, 96, 68, 49, 90, 14, 23, 4, 4, 67, 99, 81, 74, 70, 74, 36, 96, 68, 9, 64, 39, 88, 35, 54, 89, 96, 58, 66, 27, 88, 97, 32, 14, 6, 35, 78, 20, 71, 6, 85, 66, 57, 2, 58, 91, 72, 5, 29, 56, 73, 48, 86, 52, 9, 93, 22, 57, 79, 42, 12, 1, 31, 68, 17, 59, 63, 76, 7, 77), intArrayOf(73, 81, 14, 13, 17, 20, 11, 9, 1, 83, 8, 85, 91, 70, 84, 63, 62, 77, 37, 7, 47, 1, 59, 95, 39, 69, 39, 21, 99, 9, 87, 2, 97, 16, 92, 36, 74, 71, 90, 66, 33, 73, 73, 75, 52, 91, 11, 12, 26, 53, 5, 26, 26, 48, 61, 50, 90, 65, 1, 87, 42, 47, 74, 35, 22, 73, 24, 26, 56, 70, 52, 5, 48, 41, 31, 18, 83, 27, 21, 39, 80, 85, 26, 8, 44, 2, 71, 7, 63, 22, 5, 52, 19, 8, 20), intArrayOf(17, 25, 21, 11, 72, 93, 33, 49, 64, 23, 53, 82, 3, 13, 91, 65, 85, 2, 40, 5, 42, 31, 77, 42, 5, 36, 6, 54, 4, 58, 7, 76, 87, 83, 25, 57, 66, 12, 74, 33, 85, 37, 74, 32, 20, 69, 3, 97, 91, 68, 82, 44, 19, 14, 89, 28, 85, 85, 80, 53, 34, 87, 58, 98, 88, 78, 48, 65, 98, 40, 11, 57, 10, 67, 70, 81, 60, 79, 74, 72, 97, 59, 79, 47, 30, 20, 54, 80, 89, 91, 14, 5, 33, 36, 79, 39), intArrayOf(60, 85, 59, 39, 60, 7, 57, 76, 77, 92, 6, 35, 15, 72, 23, 41, 45, 52, 95, 18, 64, 79, 86, 53, 56, 31, 69, 11, 91, 31, 84, 50, 44, 82, 22, 81, 41, 40, 30, 42, 30, 91, 48, 94, 74, 76, 64, 58, 74, 25, 96, 57, 14, 19, 3, 99, 28, 83, 15, 75, 99, 1, 89, 85, 79, 50, 3, 95, 32, 67, 44, 8, 7, 41, 62, 64, 29, 20, 14, 76, 26, 55, 48, 71, 69, 66, 19, 72, 44, 25, 14, 1, 48, 74, 12, 98, 7), intArrayOf(64, 66, 84, 24, 18, 16, 27, 48, 20, 14, 47, 69, 30, 86, 48, 40, 23, 16, 61, 21, 51, 50, 26, 47, 35, 33, 91, 28, 78, 64, 43, 68, 4, 79, 51, 8, 19, 60, 52, 95, 6, 68, 46, 86, 35, 97, 27, 58, 4, 65, 30, 58, 99, 12, 12, 75, 91, 39, 50, 31, 42, 64, 70, 4, 46, 7, 98, 73, 98, 93, 37, 89, 77, 91, 64, 71, 64, 65, 66, 21, 78, 62, 81, 74, 42, 20, 83, 70, 73, 95, 78, 45, 92, 27, 34, 53, 71, 15), intArrayOf(30, 11, 85, 31, 34, 71, 13, 48, 5, 14, 44, 3, 19, 67, 23, 73, 19, 57, 6, 90, 94, 72, 57, 69, 81, 62, 59, 68, 88, 57, 55, 69, 49, 13, 7, 87, 97, 80, 89, 5, 71, 5, 5, 26, 38, 40, 16, 62, 45, 99, 18, 38, 98, 24, 21, 26, 62, 74, 69, 4, 85, 57, 77, 35, 58, 67, 91, 79, 79, 57, 86, 28, 66, 34, 72, 51, 76, 78, 36, 95, 63, 90, 8, 78, 47, 63, 45, 31, 22, 70, 52, 48, 79, 94, 15, 77, 61, 67, 68), intArrayOf(23, 33, 44, 81, 80, 92, 93, 75, 94, 88, 23, 61, 39, 76, 22, 3, 28, 94, 32, 6, 49, 65, 41, 34, 18, 23, 8, 47, 62, 60, 3, 63, 33, 13, 80, 52, 31, 54, 73, 43, 70, 26, 16, 69, 57, 87, 83, 31, 3, 93, 70, 81, 47, 95, 77, 44, 29, 68, 39, 51, 56, 59, 63, 7, 25, 70, 7, 77, 43, 53, 64, 3, 94, 42, 95, 39, 18, 1, 66, 21, 16, 97, 20, 50, 90, 16, 70, 10, 95, 69, 29, 6, 25, 61, 41, 26, 15, 59, 63, 35))
+
+	override fun run(): String {
+		for (i in triangle.size - 2 downTo 0) for (j in triangle[i].indices) triangle[i][j] += triangle[i + 1][j].coerceAtLeast(triangle[i + 1][j + 1])
+		return triangle[0][0].toString()
+	}
+
+	companion object {
+		/*
+	 * We create a new blank triangle with the same dimensions as the original big triangle.
+	 * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,
+	 * calculate the maximum path sum when starting from this cell, and store the result
+	 * in the corresponding cell of the blank triangle.
+	 *
+	 * If we start at a particular cell, what is the maximum path total? If the cell is at the
+	 * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is
+	 * the cell's value plus either {the maximum path total of the cell down and to the left}
+	 * or {the maximum path total of the cell down and to the right}, whichever is greater.
+	 * By computing the blank triangle's values from bottom up, the dependent values are always
+	 * computed before they are utilized. This technique is known as dynamic programming.
+	 */
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p067().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p084.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p084.kt b/Random_Work/src/projectEuler/programs/p084.kt
new file mode 100644
--- /dev/null	(date 1614951976142)
+++ b/Random_Work/src/projectEuler/programs/p084.kt	(date 1614951976142)
@@ -0,0 +1,99 @@
+package projectEuler.programs
+
+import java.util.*
+import java.util.stream.Collectors
+import java.util.stream.IntStream
+
+class p084 : EulerSolution() {
+	private val random = Random()
+
+	/*
+	 * This is a statistical sampling approximation algorithm that simply simulates the game for a fixed number of dice rolls.
+	 * An exact algorithm would involve calculating the eigenvector of the largest eigenvalue of the transition matrix (which is practical),
+	 * but averaging over all possible permutations of both the Chance and Community Chest decks (which is computationally infeasible).
+	 */
+	override fun run(): String {
+		val visitCounts = IntArray(40)
+		val chance = CardDeck()
+		val communityChest = CardDeck()
+		var consecutiveDoubles = 0
+		var location = 0
+		for (i in 0..99999999) {
+			// Roll tetrahedral dice
+			val die0 = random.nextInt(4) + 1
+			val die1 = random.nextInt(4) + 1
+			if (die0 == die1) consecutiveDoubles++ else consecutiveDoubles = 0
+			if (consecutiveDoubles < 3) location = (location + die0 + die1) % 40 else {
+				location = 30
+				consecutiveDoubles = 0
+			}
+			when (location) {
+				7, 22, 36 -> when (chance.nextCard()) {
+					0 -> location = 0
+					1 -> location = 10
+					2 -> location = 11
+					3 -> location = 24
+					4 -> location = 39
+					5 -> location = 5
+					6, 7 -> location = (location + 5) / 10 % 4 * 10 + 5
+					8 -> location = if (location > 12 && location < 28) 28 else 12
+					9 -> location -= 3
+					else -> {
+					}
+				}
+				30 -> location = 10
+				else -> {
+				}
+			}
+			when (location) {
+				2, 17, 33 -> when (communityChest.nextCard()) {
+					0 -> location = 0
+					1 -> location = 10
+					else -> {
+					}
+				}
+				else -> {
+				}
+			}
+			visitCounts[location]++
+		}
+
+		// Embed index into count, invert so that maximum becomes minimum
+		Arrays.setAll(visitCounts) { i: Int -> visitCounts[i].inv() shl 6 or i }
+		Arrays.sort(visitCounts)
+		return IntStream.range(0, 3).mapToObj { i: Int -> String.format("%02d", visitCounts[i] and 0x3F) }.collect(Collectors.joining())
+	}
+
+	private inner class CardDeck() {
+		private val cards: IntArray
+		private var index: Int
+		fun nextCard(): Int {
+			if (index == cards.size) {
+				// Fisher-Yates shuffle
+				for (i in cards.indices.reversed()) {
+					val j = random.nextInt(i + 1)
+					val temp = cards[i]
+					cards[i] = cards[j]
+					cards[j] = temp
+				}
+				index = 0
+			}
+			val result = cards[index]
+			index++
+			return result
+		}
+
+		init {
+			cards = IntArray(16)
+			Arrays.setAll(cards) { i: Int -> i }
+			index = 16
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p084().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p076.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p076.kt b/Random_Work/src/projectEuler/programs/p076.kt
new file mode 100644
--- /dev/null	(date 1614951979479)
+++ b/Random_Work/src/projectEuler/programs/p076.kt	(date 1614951979479)
@@ -0,0 +1,23 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p076 : EulerSolution() {
+	override fun run(): String? {
+		return partitions()!!.subtract(BigInteger.ONE).toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p076().run())
+		}
+
+		private fun partitions(): BigInteger? {
+			// Dynamic programming
+			val table = Array(101) { arrayOfNulls<BigInteger>(101) }
+			for (i in 0..100) for (j in 100 downTo 0) if (j == i) table[i][j] = BigInteger.ONE else if (j > i) table[i][j] = BigInteger.ZERO else if (j == 0) table[i][j] = table[i][j + 1] else table[i][j] = table[i][j + 1]!!.add(table[i - j][j])
+			return table[100][1]
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p083.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p083.kt b/Random_Work/src/projectEuler/programs/p083.kt
new file mode 100644
--- /dev/null	(date 1614954744218)
+++ b/Random_Work/src/projectEuler/programs/p083.kt	(date 1614954744218)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.*
+import java.util.Arrays.fill
+
+class p083 : EulerSolution() {
+	private lateinit var distance: Array<IntArray>
+	override fun run(): String {
+		val h = GRID.size
+		val w: Int = GRID[0].size
+		distance = Array(h) { IntArray(w) }
+		Arrays.stream(distance).forEachOrdered { row: IntArray? -> fill(row!!, INFINITY) }
+		// Bellman–Ford algorithm
+		distance[0][0] = GRID[0][0]
+		for (i in 0 until w * h) for (y in 0 until h) for (x in 0 until w) {
+			var temp = INFINITY
+			temp = getDistance(x - 1, y).coerceAtMost(temp)
+			temp = getDistance(x + 1, y).coerceAtMost(temp)
+			temp = getDistance(x, y - 1).coerceAtMost(temp)
+			temp = getDistance(x, y + 1).coerceAtMost(temp)
+			distance[y][x] = (GRID[y][x] + temp).coerceAtMost(distance[y][x])
+		}
+		return distance[h - 1][w - 1].toString()
+	}
+
+	@Contract(pure = true)
+	private fun getDistance(x: Int, y: Int): Int =
+			if (y < 0 || y >= distance.size || x < 0 || x >= distance[y].size) INFINITY else distance[y][x]
+
+	companion object {
+		private const val INFINITY = Int.MAX_VALUE / 2
+		private val GRID = arrayOf(intArrayOf(4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870), intArrayOf(1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377), intArrayOf(9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230), intArrayOf(7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187), intArrayOf(3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505), intArrayOf(1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942), intArrayOf(4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757), intArrayOf(510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706), intArrayOf(9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048), intArrayOf(3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540), intArrayOf(6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442), intArrayOf(7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509), intArrayOf(4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000), intArrayOf(356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672), intArrayOf(9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785), intArrayOf(192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095), intArrayOf(1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859), intArrayOf(4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837), intArrayOf(5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286), intArrayOf(1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963), intArrayOf(1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127), intArrayOf(8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535), intArrayOf(7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446), intArrayOf(3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615), intArrayOf(9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303), intArrayOf(5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266), intArrayOf(6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763), intArrayOf(9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550), intArrayOf(5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887), intArrayOf(6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531), intArrayOf(5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739), intArrayOf(1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269), intArrayOf(4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380), intArrayOf(4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829), intArrayOf(8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873), intArrayOf(2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271), intArrayOf(6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281), intArrayOf(2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660), intArrayOf(6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665), intArrayOf(3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056), intArrayOf(5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089), intArrayOf(3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523), intArrayOf(1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616), intArrayOf(8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125), intArrayOf(3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307), intArrayOf(8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920), intArrayOf(8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225), intArrayOf(9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976), intArrayOf(3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432), intArrayOf(1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351), intArrayOf(7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991), intArrayOf(9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110), intArrayOf(7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965), intArrayOf(3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314), intArrayOf(1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416), intArrayOf(126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028), intArrayOf(8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407), intArrayOf(7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312), intArrayOf(4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000), intArrayOf(4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229), intArrayOf(7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256), intArrayOf(7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842), intArrayOf(6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241), intArrayOf(4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213), intArrayOf(9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015), intArrayOf(3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405), intArrayOf(2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640), intArrayOf(3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480), intArrayOf(4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181), intArrayOf(171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501), intArrayOf(3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698), intArrayOf(2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531), intArrayOf(7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255), intArrayOf(8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631), intArrayOf(2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914), intArrayOf(6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864), intArrayOf(8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738), intArrayOf(2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294), intArrayOf(2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789), intArrayOf(5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981))
+
+		@JvmStatic
+		fun main(args: Array<String>) = println(p083().run())
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p066.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p066.kt b/Random_Work/src/projectEuler/programs/p066.kt
new file mode 100644
--- /dev/null	(date 1614954633742)
+++ b/Random_Work/src/projectEuler/programs/p066.kt	(date 1614954633742)
@@ -0,0 +1,136 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.isSquare
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.math.BigInteger.*
+import java.util.*
+import java.util.stream.Stream
+
+class p066 : EulerSolution() {
+	/*
+	 * Based on this insane theorem: Suppose D > 1 is an integer, non-perfect-square.
+	 *
+	 * Express sqrt(D) as the continued fraction (a0, a1, ..., a_{n-1}, (b0, b1, ..., b_{m-1})),
+	 * where the sequence of b's is the periodic part.
+	 *
+	 * Let p/q (in lowest terms) = (a0, a1, ..., a_{n-1}, b0, b1, ..., b_{m-2}).
+	 * (This is a truncation of the continued fraction with only one period minus the last term.)
+	 *
+	 * Then the minimum solution (x, y) for Pell's equation is given by:
+	 * - (p, q) if m is even
+	 * - (p^2 + D q^2, 2pq) if m is odd
+	 */
+	override fun run(): String {
+		var minN = -1
+		var maxX = ZERO
+		for (n in 2..1000) {
+			if (isSquare(n)) continue
+			val x = smallestSolutionX(n)
+			if (x > maxX) {
+				minN = n
+				maxX = x
+			}
+		}
+		return minN.toString()
+	}
+
+	// Represents (a + b * sqrt(d)) / c. d must not be a perfect square.
+	private class QuadraticSurd(a: BigInteger, b: BigInteger, c: BigInteger, d: BigInteger) {
+		val a: BigInteger
+		val b: BigInteger
+		val c: BigInteger
+		val d: BigInteger
+
+		@Contract("_ -> new")
+		fun subtract(other: QuadraticSurd): QuadraticSurd {
+			assert(d == other.d)
+			return QuadraticSurd(a.multiply(other.c).subtract(other.a.multiply(c)), b.multiply(other.c).subtract(other.b.multiply(c)), c.multiply(other.c), d)
+		}
+
+		@Contract(" -> new")
+		fun reciprocal(): QuadraticSurd {
+			return QuadraticSurd(a.multiply(c).negate(), b.multiply(c), b.multiply(b).multiply(d).subtract(a.multiply(a)), d)
+		}
+
+		fun floor(): BigInteger {
+			var temp = sqrt(b.multiply(b).multiply(d))
+			if (b.signum() == -1) temp = temp.add(ONE).negate()
+			temp = temp.add(a)
+			if (temp.signum() == -1) temp = temp.subtract(c.subtract(ONE))
+			return temp.divide(c)
+		}
+
+		@Contract(value = "null -> false", pure = true)
+		override fun equals(other: Any?): Boolean {
+			return if (other !is QuadraticSurd) false else a == other.a && b == other.b && c == other.c && d == other.d
+		}
+
+		override fun hashCode(): Int {
+			return Stream.of(a, b, c, d).mapToInt { obj: BigInteger -> obj.hashCode() }.sum()
+		}
+
+		override fun toString(): String {
+			return String.format("(%d + %d*sqrt(%d)) / %d", a, b, d, c)
+		}
+
+		init {
+			var a = a
+			var b = b
+			var c = c
+			assert(c.signum() != 0)
+			// Simplify
+			if (c.signum() == -1) {
+				a = a.negate()
+				b = b.negate()
+				c = c.negate()
+			}
+			val gcd = a.gcd(b).gcd(c)
+			if (gcd != ONE) {
+				a = a.divide(gcd)
+				b = b.divide(gcd)
+				c = c.divide(gcd)
+			}
+			this.a = a
+			this.b = b
+			this.c = c
+			this.d = d
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p066().run())
+		}
+
+		// Returns the smallest x such that x > 0 and there exists some y such that x^2 - n y^2 = 1.
+		// Requires n to not be a perfect square.
+		private fun smallestSolutionX(n: Int): BigInteger {
+			val contFrac = sqrtToContinuedFraction(n)
+			val temp = ArrayList<BigInteger>()
+			temp.addAll(contFrac[0])
+			temp.addAll(contFrac[1].subList(0, contFrac[1].size - 1))
+			var `val` = Fraction(temp[temp.size - 1])
+			for (i in temp.size - 2 downTo 0) `val` = Fraction(`val`.denominator, `val`.numerator).add(Fraction(temp[i]))
+			return if (contFrac[1].size % 2 == 0) `val`.numerator else `val`.numerator.pow(2).add(`val`.denominator.pow(2).multiply(valueOf(n.toLong())))
+		}
+
+		// Returns the periodic continued fraction of sqrt(n). Requires n to not be a perfect square.
+		// result[0] is the minimal non-periodic prefix, and result[1] is the minimal periodic tail.
+		@Contract("_ -> new")
+		private fun sqrtToContinuedFraction(n: Int): Array<List<BigInteger>> {
+			val terms = ArrayList<BigInteger>()
+			val seen = HashMap<QuadraticSurd, Int>()
+			var `val` = QuadraticSurd(ZERO, ONE, ONE, valueOf(n.toLong()))
+			do {
+				seen[`val`] = seen.size
+				val flr = `val`.floor()
+				terms.add(flr)
+				`val` = `val`.subtract(QuadraticSurd(flr, ZERO, ONE, `val`.d)).reciprocal()
+			} while (!seen.containsKey(`val`))
+			return arrayOf(terms.subList(0, seen[`val`]!!), terms.subList(seen[`val`]!!, terms.size))
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p006.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p006.kt b/Random_Work/src/projectEuler/programs/p006.kt
new file mode 100644
--- /dev/null	(date 1614951977603)
+++ b/Random_Work/src/projectEuler/programs/p006.kt	(date 1614951977603)
@@ -0,0 +1,32 @@
+package projectEuler.programs
+
+class p006 : EulerSolution() {
+	override fun run(): String {
+		var sum = 0
+		var sum2 = 0
+		for (i in 1..N) {
+			sum += i
+			sum2 += i * i
+		}
+		return Integer.toString(sum * sum - sum2)
+	}
+
+	companion object {
+		/*
+	 * Computers are fast, so we can implement this solution directly without any clever math.
+	 * Note that sum^2 is bounded above by (100*100)^2 and sum2 is
+	 * bounded above by 100*(100^2), both of which fit in a Java int type.
+	 *
+	 * However for the mathematically inclined, there are closed-form formulas:
+	 * sum = N(N + 1) / 2.
+	 * sum2 = N(N + 1)(2N + 1) / 6.
+	 * Hence sum^2 - sum2 = (N^4 / 4) + (N^3 / 6) - (N^2 / 4) - (N / 6).
+	 */
+		private const val N = 100
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p006().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p012.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p012.kt b/Random_Work/src/projectEuler/programs/p012.kt
new file mode 100644
--- /dev/null	(date 1614951979242)
+++ b/Random_Work/src/projectEuler/programs/p012.kt	(date 1614951979242)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p012 : EulerSolution() {
+	/*
+	 * Computers are fast, so we can implement this solution directly without any clever math.
+	 */
+	override fun run(): String {
+		var triangle = 0
+		var i = 1
+		while (true) {
+			assert(Int.MAX_VALUE - triangle >= i) { "Overflow" }
+			triangle += i // This is the ith triangle number, i.e. num = 1 + 2 + ... + i = i * (i + 1) / 2
+			if (countDivisors(triangle) > 500) return Integer.toString(triangle)
+			i++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p012().run())
+		}
+
+		// Returns the number of integers in the range [1, n] that divide n.
+		@Contract(pure = true)
+		private fun countDivisors(n: Int): Int {
+			val end = sqrt(BigInteger.valueOf(n.toLong())).toInt()
+			var count = IntStream.range(1, end).filter { i: Int -> n % i == 0 }.map { i: Int -> 2 }.sum()
+			if (end * end == n) count++ // Perfect square
+			return count
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p069.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p069.kt b/Random_Work/src/projectEuler/programs/p069.kt
new file mode 100644
--- /dev/null	(date 1614951977579)
+++ b/Random_Work/src/projectEuler/programs/p069.kt	(date 1614951977579)
@@ -0,0 +1,26 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listTotients
+import projectEuler.programs.Library.pow
+
+class p069 : EulerSolution() {
+	override fun run(): String {
+		var maxNumer = 0
+		var maxDenom = 1
+		val totients = listTotients(LIMIT)
+		for (n in 1 until totients.size) if (n.toLong() * maxDenom > maxNumer.toLong() * totients[n]) {
+			maxNumer = n
+			maxDenom = totients[n]
+		}
+		return Integer.toString(maxNumer)
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 6)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p069().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p003.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p003.kt b/Random_Work/src/projectEuler/programs/p003.kt
new file mode 100644
--- /dev/null	(date 1614951977116)
+++ b/Random_Work/src/projectEuler/programs/p003.kt	(date 1614951977116)
@@ -0,0 +1,41 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+
+class p003 : EulerSolution() {
+	/*
+	 * By the fundamental theorem of arithmetic, every integer n > 1 has a unique factorization as a product of prime numbers.
+	 * In other words, the theorem says that n = p_0 * p_1 * ... * p_{m-1}, where each p_i > 1 is prime but not necessarily unique.
+	 * Now if we take the number n and repeatedly divide out its smallest factor (which must also be prime), then the last
+	 * factor that we divide out must be the largest prime factor of n. For reference, 600851475143 = 71 * 839 * 1471 * 6857.
+	 */
+	override fun run(): String {
+		var n = 600851475143L
+		while (true) {
+			val p = smallestFactor(n)
+			n /= if (p < n) p else return java.lang.Long.toString(n)
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p003().run())
+		}
+
+		// Returns the smallest factor of n, which is in the range [2, n]. The result is always prime.
+		@Contract(pure = true)
+		private fun smallestFactor(n: Long): Long {
+			assert(n > 1)
+			var i: Long = 2
+			val end = sqrt(BigInteger.valueOf(n)).toInt().toLong()
+			while (i <= end) {
+				if (n % i == 0L) return i
+				i++
+			}
+			return n // n itself is prime
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p030.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p030.kt b/Random_Work/src/projectEuler/programs/p030.kt
new file mode 100644
--- /dev/null	(date 1614951976331)
+++ b/Random_Work/src/projectEuler/programs/p030.kt	(date 1614951976331)
@@ -0,0 +1,33 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.stream.IntStream
+
+class p030 : EulerSolution() {
+	override fun run(): String {
+		// As stated in the problem, 1 = 1^5 is excluded.
+		// If a number has at least n >= 7 digits, then even if every digit is 9,
+		// n * 9^5 is still less than the number (which is at least 10^n).
+		val sum = IntStream.range(2, 1000000).filter { i: Int -> i == fifthPowerDigitSum(i) }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p030().run())
+		}
+
+		@Contract(pure = true)
+		private fun fifthPowerDigitSum(x: Int): Int {
+			var x = x
+			var sum = 0
+			while (x != 0) {
+				val y = x % 10
+				sum += y * y * y * y * y
+				x /= 10
+			}
+			return sum
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p073.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p073.kt b/Random_Work/src/projectEuler/programs/p073.kt
new file mode 100644
--- /dev/null	(date 1614951976054)
+++ b/Random_Work/src/projectEuler/programs/p073.kt	(date 1614951976054)
@@ -0,0 +1,31 @@
+package projectEuler.programs
+
+class p073 : EulerSolution() {
+	/*
+	 * The Stern-Brocot tree is an infinite binary search tree of all positive rational numbers,
+	 * where each number appears only once and is in lowest terms.
+	 * It is formed by starting with the two sentinels 0/1 and 1/1. Iterating infinitely in any order,
+	 * between any two currently adjacent fractions Ln/Ld and Rn/Rd, insert a new fraction (Ln+Rn)/(Ld+Rd).
+	 * See MathWorld for a visualization: http://mathworld.wolfram.com/Stern-BrocotTree.html
+	 *
+	 * This algorithm uses a lot of stack space (about 12000 frames). You probably need to use a JVM option like "-Xss4M".
+	 */
+	override fun run(): String {
+		return Integer.toString(sternBrocotCount(1, 3, 1, 2))
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p073().run())
+		}
+
+		// Counts the number of reduced fractions n/d such that leftN/leftD < n/d < rightN/rightD and d <= 12000.
+		// leftN/leftD and rightN/rightD must be adjacent in the Stern-Brocot tree at some point in the generation process.
+		private fun sternBrocotCount(leftN: Int, leftD: Int, rightN: Int, rightD: Int): Int {
+			val n = leftN + rightN
+			val d = leftD + rightD
+			return if (d > 12000) 0 else 1 + sternBrocotCount(leftN, leftD, n, d) + sternBrocotCount(n, d, rightN, rightD)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p082.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p082.kt b/Random_Work/src/projectEuler/programs/p082.kt
new file mode 100644
--- /dev/null	(date 1614954633757)
+++ b/Random_Work/src/projectEuler/programs/p082.kt	(date 1614954633757)
@@ -0,0 +1,34 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+
+class p082 : EulerSolution() {
+	private lateinit var distance: Array<IntArray>
+	override fun run(): String {
+		val h = GRID.size
+		val w: Int = GRID[0].size
+		// Dynamic programming
+		distance = Array(h) { IntArray(w) }
+		for (x in 0 until w) {
+			for (y in 0 until h) distance[y][x] = GRID[y][x] + getValue(x - 1, y).coerceAtMost(getValue(x, y - 1))
+			for (y in h - 1 downTo 0) distance[y][x] = (GRID[y][x] + getValue(x, y + 1)).coerceAtMost(distance[y][x])
+		}
+		// Minimum of rightmost column
+		var min = INFINITY
+		for (y in 0 until h) min = distance[y][w - 1].coerceAtMost(min)
+		return min.toString()
+	}
+
+	@Contract(pure = true)
+	private fun getValue(x: Int, y: Int): Int {
+		return if (x < 0) 0 else if (y < 0 || y >= distance.size || x >= distance[y].size) INFINITY else distance[y][x]
+	}
+
+	companion object {
+		private const val INFINITY = Int.MAX_VALUE / 2
+		private val GRID = arrayOf(intArrayOf(4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870), intArrayOf(1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377), intArrayOf(9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230), intArrayOf(7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187), intArrayOf(3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505), intArrayOf(1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942), intArrayOf(4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757), intArrayOf(510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706), intArrayOf(9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048), intArrayOf(3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540), intArrayOf(6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442), intArrayOf(7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509), intArrayOf(4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000), intArrayOf(356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672), intArrayOf(9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785), intArrayOf(192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095), intArrayOf(1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859), intArrayOf(4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837), intArrayOf(5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286), intArrayOf(1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963), intArrayOf(1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127), intArrayOf(8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535), intArrayOf(7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446), intArrayOf(3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615), intArrayOf(9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303), intArrayOf(5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266), intArrayOf(6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763), intArrayOf(9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550), intArrayOf(5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887), intArrayOf(6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531), intArrayOf(5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739), intArrayOf(1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269), intArrayOf(4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380), intArrayOf(4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829), intArrayOf(8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873), intArrayOf(2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271), intArrayOf(6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281), intArrayOf(2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660), intArrayOf(6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665), intArrayOf(3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056), intArrayOf(5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089), intArrayOf(3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523), intArrayOf(1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616), intArrayOf(8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125), intArrayOf(3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307), intArrayOf(8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920), intArrayOf(8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225), intArrayOf(9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976), intArrayOf(3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432), intArrayOf(1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351), intArrayOf(7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991), intArrayOf(9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110), intArrayOf(7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965), intArrayOf(3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314), intArrayOf(1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416), intArrayOf(126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028), intArrayOf(8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407), intArrayOf(7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312), intArrayOf(4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000), intArrayOf(4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229), intArrayOf(7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256), intArrayOf(7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842), intArrayOf(6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241), intArrayOf(4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213), intArrayOf(9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015), intArrayOf(3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405), intArrayOf(2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640), intArrayOf(3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480), intArrayOf(4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181), intArrayOf(171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501), intArrayOf(3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698), intArrayOf(2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531), intArrayOf(7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255), intArrayOf(8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631), intArrayOf(2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914), intArrayOf(6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864), intArrayOf(8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738), intArrayOf(2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294), intArrayOf(2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789), intArrayOf(5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981))
+
+		@JvmStatic
+		fun main(args: Array<String>) = println(p082().run())
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p011.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p011.kt b/Random_Work/src/projectEuler/programs/p011.kt
new file mode 100644
--- /dev/null	(date 1617055467944)
+++ b/Random_Work/src/projectEuler/programs/p011.kt	(date 1617055467944)
@@ -0,0 +1,53 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+
+class p011 : EulerSolution() {
+	override fun run(): String {
+		var max = -1
+		/*for (y in SQUARE.indices) for (x in 0 until SQUARE[y].length) {
+			max = Math.max(product(x, y, 1, 0), max)
+			max = Math.max(product(x, y, 0, 1), max)
+			max = Math.max(product(x, y, 1, 1), max)
+			max = Math.max(product(x, y, 1, -1), max)
+		}*/
+		return Integer.toString(max)
+	}
+
+	companion object {
+		/*
+	 * We visit each grid cell and compute the product in the 4 directions starting from that cell.
+	 * Note that the maximum product is 99^4 = 96059601, which fits in a Java int type.
+	 */
+		private const val CONSECUTIVE = 4
+		private val SQUARE = arrayOf(intArrayOf(8, 2, 22, 97, 38, 15, 0, 40, 0, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8), intArrayOf(49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 0), intArrayOf(81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65), intArrayOf(52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 2, 36, 91), intArrayOf(22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80), intArrayOf(24, 47, 32, 60, 99, 3, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50), intArrayOf(32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70), intArrayOf(67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21), intArrayOf(24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72), intArrayOf(21, 36, 23, 9, 75, 0, 76, 44, 20, 45, 35, 14, 0, 61, 33, 97, 34, 31, 33, 95), intArrayOf(78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92), intArrayOf(16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 0, 17, 54, 24, 36, 29, 85, 57), intArrayOf(86, 56, 0, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58), intArrayOf(19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40), intArrayOf(4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66), intArrayOf(88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69), intArrayOf(4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36), intArrayOf(20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16), intArrayOf(20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54), intArrayOf(1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48))
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p011().run())
+		}
+
+		@Contract(pure = true)
+		private fun product(x: Int, y: Int, dx: Int, dy: Int): Int {
+			// First endpoint is assumed to be in bounds. Check if second endpoint is in bounds.
+			var x = x
+			var y = y
+			if (!isInBounds(x + (CONSECUTIVE - 1) * dx, y + (CONSECUTIVE - 1) * dy)) return -1
+			var prod = 1
+			var i = 0
+			while (i < CONSECUTIVE) {
+				prod *= SQUARE[y][x]
+				i++
+				x += dx
+				y += dy
+			}
+			return prod
+		}
+
+		@Contract(pure = true)
+		private fun isInBounds(x: Int, y: Int): Boolean {
+//			return 0 <= y && y < SQUARE.size && 0 <= x && x < SQUARE[y].length
+			return true
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p081.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p081.kt b/Random_Work/src/projectEuler/programs/p081.kt
new file mode 100644
--- /dev/null	(date 1614954633784)
+++ b/Random_Work/src/projectEuler/programs/p081.kt	(date 1614954633784)
@@ -0,0 +1,20 @@
+package projectEuler.programs
+
+class p081 : EulerSolution() {
+	// Mutable
+	private val grid = arrayOf(intArrayOf(4445, 2697, 5115, 718, 2209, 2212, 654, 4348, 3079, 6821, 7668, 3276, 8874, 4190, 3785, 2752, 9473, 7817, 9137, 496, 7338, 3434, 7152, 4355, 4552, 7917, 7827, 2460, 2350, 691, 3514, 5880, 3145, 7633, 7199, 3783, 5066, 7487, 3285, 1084, 8985, 760, 872, 8609, 8051, 1134, 9536, 5750, 9716, 9371, 7619, 5617, 275, 9721, 2997, 2698, 1887, 8825, 6372, 3014, 2113, 7122, 7050, 6775, 5948, 2758, 1219, 3539, 348, 7989, 2735, 9862, 1263, 8089, 6401, 9462, 3168, 2758, 3748, 5870), intArrayOf(1096, 20, 1318, 7586, 5167, 2642, 1443, 5741, 7621, 7030, 5526, 4244, 2348, 4641, 9827, 2448, 6918, 5883, 3737, 300, 7116, 6531, 567, 5997, 3971, 6623, 820, 6148, 3287, 1874, 7981, 8424, 7672, 7575, 6797, 6717, 1078, 5008, 4051, 8795, 5820, 346, 1851, 6463, 2117, 6058, 3407, 8211, 117, 4822, 1317, 4377, 4434, 5925, 8341, 4800, 1175, 4173, 690, 8978, 7470, 1295, 3799, 8724, 3509, 9849, 618, 3320, 7068, 9633, 2384, 7175, 544, 6583, 1908, 9983, 481, 4187, 9353, 9377), intArrayOf(9607, 7385, 521, 6084, 1364, 8983, 7623, 1585, 6935, 8551, 2574, 8267, 4781, 3834, 2764, 2084, 2669, 4656, 9343, 7709, 2203, 9328, 8004, 6192, 5856, 3555, 2260, 5118, 6504, 1839, 9227, 1259, 9451, 1388, 7909, 5733, 6968, 8519, 9973, 1663, 5315, 7571, 3035, 4325, 4283, 2304, 6438, 3815, 9213, 9806, 9536, 196, 5542, 6907, 2475, 1159, 5820, 9075, 9470, 2179, 9248, 1828, 4592, 9167, 3713, 4640, 47, 3637, 309, 7344, 6955, 346, 378, 9044, 8635, 7466, 5036, 9515, 6385, 9230), intArrayOf(7206, 3114, 7760, 1094, 6150, 5182, 7358, 7387, 4497, 955, 101, 1478, 7777, 6966, 7010, 8417, 6453, 4955, 3496, 107, 449, 8271, 131, 2948, 6185, 784, 5937, 8001, 6104, 8282, 4165, 3642, 710, 2390, 575, 715, 3089, 6964, 4217, 192, 5949, 7006, 715, 3328, 1152, 66, 8044, 4319, 1735, 146, 4818, 5456, 6451, 4113, 1063, 4781, 6799, 602, 1504, 6245, 6550, 1417, 1343, 2363, 3785, 5448, 4545, 9371, 5420, 5068, 4613, 4882, 4241, 5043, 7873, 8042, 8434, 3939, 9256, 2187), intArrayOf(3620, 8024, 577, 9997, 7377, 7682, 1314, 1158, 6282, 6310, 1896, 2509, 5436, 1732, 9480, 706, 496, 101, 6232, 7375, 2207, 2306, 110, 6772, 3433, 2878, 8140, 5933, 8688, 1399, 2210, 7332, 6172, 6403, 7333, 4044, 2291, 1790, 2446, 7390, 8698, 5723, 3678, 7104, 1825, 2040, 140, 3982, 4905, 4160, 2200, 5041, 2512, 1488, 2268, 1175, 7588, 8321, 8078, 7312, 977, 5257, 8465, 5068, 3453, 3096, 1651, 7906, 253, 9250, 6021, 8791, 8109, 6651, 3412, 345, 4778, 5152, 4883, 7505), intArrayOf(1074, 5438, 9008, 2679, 5397, 5429, 2652, 3403, 770, 9188, 4248, 2493, 4361, 8327, 9587, 707, 9525, 5913, 93, 1899, 328, 2876, 3604, 673, 8576, 6908, 7659, 2544, 3359, 3883, 5273, 6587, 3065, 1749, 3223, 604, 9925, 6941, 2823, 8767, 7039, 3290, 3214, 1787, 7904, 3421, 7137, 9560, 8451, 2669, 9219, 6332, 1576, 5477, 6755, 8348, 4164, 4307, 2984, 4012, 6629, 1044, 2874, 6541, 4942, 903, 1404, 9125, 5160, 8836, 4345, 2581, 460, 8438, 1538, 5507, 668, 3352, 2678, 6942), intArrayOf(4295, 1176, 5596, 1521, 3061, 9868, 7037, 7129, 8933, 6659, 5947, 5063, 3653, 9447, 9245, 2679, 767, 714, 116, 8558, 163, 3927, 8779, 158, 5093, 2447, 5782, 3967, 1716, 931, 7772, 8164, 1117, 9244, 5783, 7776, 3846, 8862, 6014, 2330, 6947, 1777, 3112, 6008, 3491, 1906, 5952, 314, 4602, 8994, 5919, 9214, 3995, 5026, 7688, 6809, 5003, 3128, 2509, 7477, 110, 8971, 3982, 8539, 2980, 4689, 6343, 5411, 2992, 5270, 5247, 9260, 2269, 7474, 1042, 7162, 5206, 1232, 4556, 4757), intArrayOf(510, 3556, 5377, 1406, 5721, 4946, 2635, 7847, 4251, 8293, 8281, 6351, 4912, 287, 2870, 3380, 3948, 5322, 3840, 4738, 9563, 1906, 6298, 3234, 8959, 1562, 6297, 8835, 7861, 239, 6618, 1322, 2553, 2213, 5053, 5446, 4402, 6500, 5182, 8585, 6900, 5756, 9661, 903, 5186, 7687, 5998, 7997, 8081, 8955, 4835, 6069, 2621, 1581, 732, 9564, 1082, 1853, 5442, 1342, 520, 1737, 3703, 5321, 4793, 2776, 1508, 1647, 9101, 2499, 6891, 4336, 7012, 3329, 3212, 1442, 9993, 3988, 4930, 7706), intArrayOf(9444, 3401, 5891, 9716, 1228, 7107, 109, 3563, 2700, 6161, 5039, 4992, 2242, 8541, 7372, 2067, 1294, 3058, 1306, 320, 8881, 5756, 9326, 411, 8650, 8824, 5495, 8282, 8397, 2000, 1228, 7817, 2099, 6473, 3571, 5994, 4447, 1299, 5991, 543, 7874, 2297, 1651, 101, 2093, 3463, 9189, 6872, 6118, 872, 1008, 1779, 2805, 9084, 4048, 2123, 5877, 55, 3075, 1737, 9459, 4535, 6453, 3644, 108, 5982, 4437, 5213, 1340, 6967, 9943, 5815, 669, 8074, 1838, 6979, 9132, 9315, 715, 5048), intArrayOf(3327, 4030, 7177, 6336, 9933, 5296, 2621, 4785, 2755, 4832, 2512, 2118, 2244, 4407, 2170, 499, 7532, 9742, 5051, 7687, 970, 6924, 3527, 4694, 5145, 1306, 2165, 5940, 2425, 8910, 3513, 1909, 6983, 346, 6377, 4304, 9330, 7203, 6605, 3709, 3346, 970, 369, 9737, 5811, 4427, 9939, 3693, 8436, 5566, 1977, 3728, 2399, 3985, 8303, 2492, 5366, 9802, 9193, 7296, 1033, 5060, 9144, 2766, 1151, 7629, 5169, 5995, 58, 7619, 7565, 4208, 1713, 6279, 3209, 4908, 9224, 7409, 1325, 8540), intArrayOf(6882, 1265, 1775, 3648, 4690, 959, 5837, 4520, 5394, 1378, 9485, 1360, 4018, 578, 9174, 2932, 9890, 3696, 116, 1723, 1178, 9355, 7063, 1594, 1918, 8574, 7594, 7942, 1547, 6166, 7888, 354, 6932, 4651, 1010, 7759, 6905, 661, 7689, 6092, 9292, 3845, 9605, 8443, 443, 8275, 5163, 7720, 7265, 6356, 7779, 1798, 1754, 5225, 6661, 1180, 8024, 5666, 88, 9153, 1840, 3508, 1193, 4445, 2648, 3538, 6243, 6375, 8107, 5902, 5423, 2520, 1122, 5015, 6113, 8859, 9370, 966, 8673, 2442), intArrayOf(7338, 3423, 4723, 6533, 848, 8041, 7921, 8277, 4094, 5368, 7252, 8852, 9166, 2250, 2801, 6125, 8093, 5738, 4038, 9808, 7359, 9494, 601, 9116, 4946, 2702, 5573, 2921, 9862, 1462, 1269, 2410, 4171, 2709, 7508, 6241, 7522, 615, 2407, 8200, 4189, 5492, 5649, 7353, 2590, 5203, 4274, 710, 7329, 9063, 956, 8371, 3722, 4253, 4785, 1194, 4828, 4717, 4548, 940, 983, 2575, 4511, 2938, 1827, 2027, 2700, 1236, 841, 5760, 1680, 6260, 2373, 3851, 1841, 4968, 1172, 5179, 7175, 3509), intArrayOf(4420, 1327, 3560, 2376, 6260, 2988, 9537, 4064, 4829, 8872, 9598, 3228, 1792, 7118, 9962, 9336, 4368, 9189, 6857, 1829, 9863, 6287, 7303, 7769, 2707, 8257, 2391, 2009, 3975, 4993, 3068, 9835, 3427, 341, 8412, 2134, 4034, 8511, 6421, 3041, 9012, 2983, 7289, 100, 1355, 7904, 9186, 6920, 5856, 2008, 6545, 8331, 3655, 5011, 839, 8041, 9255, 6524, 3862, 8788, 62, 7455, 3513, 5003, 8413, 3918, 2076, 7960, 6108, 3638, 6999, 3436, 1441, 4858, 4181, 1866, 8731, 7745, 3744, 1000), intArrayOf(356, 8296, 8325, 1058, 1277, 4743, 3850, 2388, 6079, 6462, 2815, 5620, 8495, 5378, 75, 4324, 3441, 9870, 1113, 165, 1544, 1179, 2834, 562, 6176, 2313, 6836, 8839, 2986, 9454, 5199, 6888, 1927, 5866, 8760, 320, 1792, 8296, 7898, 6121, 7241, 5886, 5814, 2815, 8336, 1576, 4314, 3109, 2572, 6011, 2086, 9061, 9403, 3947, 5487, 9731, 7281, 3159, 1819, 1334, 3181, 5844, 5114, 9898, 4634, 2531, 4412, 6430, 4262, 8482, 4546, 4555, 6804, 2607, 9421, 686, 8649, 8860, 7794, 6672), intArrayOf(9870, 152, 1558, 4963, 8750, 4754, 6521, 6256, 8818, 5208, 5691, 9659, 8377, 9725, 5050, 5343, 2539, 6101, 1844, 9700, 7750, 8114, 5357, 3001, 8830, 4438, 199, 9545, 8496, 43, 2078, 327, 9397, 106, 6090, 8181, 8646, 6414, 7499, 5450, 4850, 6273, 5014, 4131, 7639, 3913, 6571, 8534, 9703, 4391, 7618, 445, 1320, 5, 1894, 6771, 7383, 9191, 4708, 9706, 6939, 7937, 8726, 9382, 5216, 3685, 2247, 9029, 8154, 1738, 9984, 2626, 9438, 4167, 6351, 5060, 29, 1218, 1239, 4785), intArrayOf(192, 5213, 8297, 8974, 4032, 6966, 5717, 1179, 6523, 4679, 9513, 1481, 3041, 5355, 9303, 9154, 1389, 8702, 6589, 7818, 6336, 3539, 5538, 3094, 6646, 6702, 6266, 2759, 4608, 4452, 617, 9406, 8064, 6379, 444, 5602, 4950, 1810, 8391, 1536, 316, 8714, 1178, 5182, 5863, 5110, 5372, 4954, 1978, 2971, 5680, 4863, 2255, 4630, 5723, 2168, 538, 1692, 1319, 7540, 440, 6430, 6266, 7712, 7385, 5702, 620, 641, 3136, 7350, 1478, 3155, 2820, 9109, 6261, 1122, 4470, 14, 8493, 2095), intArrayOf(1046, 4301, 6082, 474, 4974, 7822, 2102, 5161, 5172, 6946, 8074, 9716, 6586, 9962, 9749, 5015, 2217, 995, 5388, 4402, 7652, 6399, 6539, 1349, 8101, 3677, 1328, 9612, 7922, 2879, 231, 5887, 2655, 508, 4357, 4964, 3554, 5930, 6236, 7384, 4614, 280, 3093, 9600, 2110, 7863, 2631, 6626, 6620, 68, 1311, 7198, 7561, 1768, 5139, 1431, 221, 230, 2940, 968, 5283, 6517, 2146, 1646, 869, 9402, 7068, 8645, 7058, 1765, 9690, 4152, 2926, 9504, 2939, 7504, 6074, 2944, 6470, 7859), intArrayOf(4659, 736, 4951, 9344, 1927, 6271, 8837, 8711, 3241, 6579, 7660, 5499, 5616, 3743, 5801, 4682, 9748, 8796, 779, 1833, 4549, 8138, 4026, 775, 4170, 2432, 4174, 3741, 7540, 8017, 2833, 4027, 396, 811, 2871, 1150, 9809, 2719, 9199, 8504, 1224, 540, 2051, 3519, 7982, 7367, 2761, 308, 3358, 6505, 2050, 4836, 5090, 7864, 805, 2566, 2409, 6876, 3361, 8622, 5572, 5895, 3280, 441, 7893, 8105, 1634, 2929, 274, 3926, 7786, 6123, 8233, 9921, 2674, 5340, 1445, 203, 4585, 3837), intArrayOf(5759, 338, 7444, 7968, 7742, 3755, 1591, 4839, 1705, 650, 7061, 2461, 9230, 9391, 9373, 2413, 1213, 431, 7801, 4994, 2380, 2703, 6161, 6878, 8331, 2538, 6093, 1275, 5065, 5062, 2839, 582, 1014, 8109, 3525, 1544, 1569, 8622, 7944, 2905, 6120, 1564, 1839, 5570, 7579, 1318, 2677, 5257, 4418, 5601, 7935, 7656, 5192, 1864, 5886, 6083, 5580, 6202, 8869, 1636, 7907, 4759, 9082, 5854, 3185, 7631, 6854, 5872, 5632, 5280, 1431, 2077, 9717, 7431, 4256, 8261, 9680, 4487, 4752, 4286), intArrayOf(1571, 1428, 8599, 1230, 7772, 4221, 8523, 9049, 4042, 8726, 7567, 6736, 9033, 2104, 4879, 4967, 6334, 6716, 3994, 1269, 8995, 6539, 3610, 7667, 6560, 6065, 874, 848, 4597, 1711, 7161, 4811, 6734, 5723, 6356, 6026, 9183, 2586, 5636, 1092, 7779, 7923, 8747, 6887, 7505, 9909, 1792, 3233, 4526, 3176, 1508, 8043, 720, 5212, 6046, 4988, 709, 5277, 8256, 3642, 1391, 5803, 1468, 2145, 3970, 6301, 7767, 2359, 8487, 9771, 8785, 7520, 856, 1605, 8972, 2402, 2386, 991, 1383, 5963), intArrayOf(1822, 4824, 5957, 6511, 9868, 4113, 301, 9353, 6228, 2881, 2966, 6956, 9124, 9574, 9233, 1601, 7340, 973, 9396, 540, 4747, 8590, 9535, 3650, 7333, 7583, 4806, 3593, 2738, 8157, 5215, 8472, 2284, 9473, 3906, 6982, 5505, 6053, 7936, 6074, 7179, 6688, 1564, 1103, 6860, 5839, 2022, 8490, 910, 7551, 7805, 881, 7024, 1855, 9448, 4790, 1274, 3672, 2810, 774, 7623, 4223, 4850, 6071, 9975, 4935, 1915, 9771, 6690, 3846, 517, 463, 7624, 4511, 614, 6394, 3661, 7409, 1395, 8127), intArrayOf(8738, 3850, 9555, 3695, 4383, 2378, 87, 6256, 6740, 7682, 9546, 4255, 6105, 2000, 1851, 4073, 8957, 9022, 6547, 5189, 2487, 303, 9602, 7833, 1628, 4163, 6678, 3144, 8589, 7096, 8913, 5823, 4890, 7679, 1212, 9294, 5884, 2972, 3012, 3359, 7794, 7428, 1579, 4350, 7246, 4301, 7779, 7790, 3294, 9547, 4367, 3549, 1958, 8237, 6758, 3497, 3250, 3456, 6318, 1663, 708, 7714, 6143, 6890, 3428, 6853, 9334, 7992, 591, 6449, 9786, 1412, 8500, 722, 5468, 1371, 108, 3939, 4199, 2535), intArrayOf(7047, 4323, 1934, 5163, 4166, 461, 3544, 2767, 6554, 203, 6098, 2265, 9078, 2075, 4644, 6641, 8412, 9183, 487, 101, 7566, 5622, 1975, 5726, 2920, 5374, 7779, 5631, 3753, 3725, 2672, 3621, 4280, 1162, 5812, 345, 8173, 9785, 1525, 955, 5603, 2215, 2580, 5261, 2765, 2990, 5979, 389, 3907, 2484, 1232, 5933, 5871, 3304, 1138, 1616, 5114, 9199, 5072, 7442, 7245, 6472, 4760, 6359, 9053, 7876, 2564, 9404, 3043, 9026, 2261, 3374, 4460, 7306, 2326, 966, 828, 3274, 1712, 3446), intArrayOf(3975, 4565, 8131, 5800, 4570, 2306, 8838, 4392, 9147, 11, 3911, 7118, 9645, 4994, 2028, 6062, 5431, 2279, 8752, 2658, 7836, 994, 7316, 5336, 7185, 3289, 1898, 9689, 2331, 5737, 3403, 1124, 2679, 3241, 7748, 16, 2724, 5441, 6640, 9368, 9081, 5618, 858, 4969, 17, 2103, 6035, 8043, 7475, 2181, 939, 415, 1617, 8500, 8253, 2155, 7843, 7974, 7859, 1746, 6336, 3193, 2617, 8736, 4079, 6324, 6645, 8891, 9396, 5522, 6103, 1857, 8979, 3835, 2475, 1310, 7422, 610, 8345, 7615), intArrayOf(9248, 5397, 5686, 2988, 3446, 4359, 6634, 9141, 497, 9176, 6773, 7448, 1907, 8454, 916, 1596, 2241, 1626, 1384, 2741, 3649, 5362, 8791, 7170, 2903, 2475, 5325, 6451, 924, 3328, 522, 90, 4813, 9737, 9557, 691, 2388, 1383, 4021, 1609, 9206, 4707, 5200, 7107, 8104, 4333, 9860, 5013, 1224, 6959, 8527, 1877, 4545, 7772, 6268, 621, 4915, 9349, 5970, 706, 9583, 3071, 4127, 780, 8231, 3017, 9114, 3836, 7503, 2383, 1977, 4870, 8035, 2379, 9704, 1037, 3992, 3642, 1016, 4303), intArrayOf(5093, 138, 4639, 6609, 1146, 5565, 95, 7521, 9077, 2272, 974, 4388, 2465, 2650, 722, 4998, 3567, 3047, 921, 2736, 7855, 173, 2065, 4238, 1048, 5, 6847, 9548, 8632, 9194, 5942, 4777, 7910, 8971, 6279, 7253, 2516, 1555, 1833, 3184, 9453, 9053, 6897, 7808, 8629, 4877, 1871, 8055, 4881, 7639, 1537, 7701, 2508, 7564, 5845, 5023, 2304, 5396, 3193, 2955, 1088, 3801, 6203, 1748, 3737, 1276, 13, 4120, 7715, 8552, 3047, 2921, 106, 7508, 304, 1280, 7140, 2567, 9135, 5266), intArrayOf(6237, 4607, 7527, 9047, 522, 7371, 4883, 2540, 5867, 6366, 5301, 1570, 421, 276, 3361, 527, 6637, 4861, 2401, 7522, 5808, 9371, 5298, 2045, 5096, 5447, 7755, 5115, 7060, 8529, 4078, 1943, 1697, 1764, 5453, 7085, 960, 2405, 739, 2100, 5800, 728, 9737, 5704, 5693, 1431, 8979, 6428, 673, 7540, 6, 7773, 5857, 6823, 150, 5869, 8486, 684, 5816, 9626, 7451, 5579, 8260, 3397, 5322, 6920, 1879, 2127, 2884, 5478, 4977, 9016, 6165, 6292, 3062, 5671, 5968, 78, 4619, 4763), intArrayOf(9905, 7127, 9390, 5185, 6923, 3721, 9164, 9705, 4341, 1031, 1046, 5127, 7376, 6528, 3248, 4941, 1178, 7889, 3364, 4486, 5358, 9402, 9158, 8600, 1025, 874, 1839, 1783, 309, 9030, 1843, 845, 8398, 1433, 7118, 70, 8071, 2877, 3904, 8866, 6722, 4299, 10, 1929, 5897, 4188, 600, 1889, 3325, 2485, 6473, 4474, 7444, 6992, 4846, 6166, 4441, 2283, 2629, 4352, 7775, 1101, 2214, 9985, 215, 8270, 9750, 2740, 8361, 7103, 5930, 8664, 9690, 8302, 9267, 344, 2077, 1372, 1880, 9550), intArrayOf(5825, 8517, 7769, 2405, 8204, 1060, 3603, 7025, 478, 8334, 1997, 3692, 7433, 9101, 7294, 7498, 9415, 5452, 3850, 3508, 6857, 9213, 6807, 4412, 7310, 854, 5384, 686, 4978, 892, 8651, 3241, 2743, 3801, 3813, 8588, 6701, 4416, 6990, 6490, 3197, 6838, 6503, 114, 8343, 5844, 8646, 8694, 65, 791, 5979, 2687, 2621, 2019, 8097, 1423, 3644, 9764, 4921, 3266, 3662, 5561, 2476, 8271, 8138, 6147, 1168, 3340, 1998, 9874, 6572, 9873, 6659, 5609, 2711, 3931, 9567, 4143, 7833, 8887), intArrayOf(6223, 2099, 2700, 589, 4716, 8333, 1362, 5007, 2753, 2848, 4441, 8397, 7192, 8191, 4916, 9955, 6076, 3370, 6396, 6971, 3156, 248, 3911, 2488, 4930, 2458, 7183, 5455, 170, 6809, 6417, 3390, 1956, 7188, 577, 7526, 2203, 968, 8164, 479, 8699, 7915, 507, 6393, 4632, 1597, 7534, 3604, 618, 3280, 6061, 9793, 9238, 8347, 568, 9645, 2070, 5198, 6482, 5000, 9212, 6655, 5961, 7513, 1323, 3872, 6170, 3812, 4146, 2736, 67, 3151, 5548, 2781, 9679, 7564, 5043, 8587, 1893, 4531), intArrayOf(5826, 3690, 6724, 2121, 9308, 6986, 8106, 6659, 2142, 1642, 7170, 2877, 5757, 6494, 8026, 6571, 8387, 9961, 6043, 9758, 9607, 6450, 8631, 8334, 7359, 5256, 8523, 2225, 7487, 1977, 9555, 8048, 5763, 2414, 4948, 4265, 2427, 8978, 8088, 8841, 9208, 9601, 5810, 9398, 8866, 9138, 4176, 5875, 7212, 3272, 6759, 5678, 7649, 4922, 5422, 1343, 8197, 3154, 3600, 687, 1028, 4579, 2084, 9467, 4492, 7262, 7296, 6538, 7657, 7134, 2077, 1505, 7332, 6890, 8964, 4879, 7603, 7400, 5973, 739), intArrayOf(1861, 1613, 4879, 1884, 7334, 966, 2000, 7489, 2123, 4287, 1472, 3263, 4726, 9203, 1040, 4103, 6075, 6049, 330, 9253, 4062, 4268, 1635, 9960, 577, 1320, 3195, 9628, 1030, 4092, 4979, 6474, 6393, 2799, 6967, 8687, 7724, 7392, 9927, 2085, 3200, 6466, 8702, 265, 7646, 8665, 7986, 7266, 4574, 6587, 612, 2724, 704, 3191, 8323, 9523, 3002, 704, 5064, 3960, 8209, 2027, 2758, 8393, 4875, 4641, 9584, 6401, 7883, 7014, 768, 443, 5490, 7506, 1852, 2005, 8850, 5776, 4487, 4269), intArrayOf(4052, 6687, 4705, 7260, 6645, 6715, 3706, 5504, 8672, 2853, 1136, 8187, 8203, 4016, 871, 1809, 1366, 4952, 9294, 5339, 6872, 2645, 6083, 7874, 3056, 5218, 7485, 8796, 7401, 3348, 2103, 426, 8572, 4163, 9171, 3176, 948, 7654, 9344, 3217, 1650, 5580, 7971, 2622, 76, 2874, 880, 2034, 9929, 1546, 2659, 5811, 3754, 7096, 7436, 9694, 9960, 7415, 2164, 953, 2360, 4194, 2397, 1047, 2196, 6827, 575, 784, 2675, 8821, 6802, 7972, 5996, 6699, 2134, 7577, 2887, 1412, 4349, 4380), intArrayOf(4629, 2234, 6240, 8132, 7592, 3181, 6389, 1214, 266, 1910, 2451, 8784, 2790, 1127, 6932, 1447, 8986, 2492, 5476, 397, 889, 3027, 7641, 5083, 5776, 4022, 185, 3364, 5701, 2442, 2840, 4160, 9525, 4828, 6602, 2614, 7447, 3711, 4505, 7745, 8034, 6514, 4907, 2605, 7753, 6958, 7270, 6936, 3006, 8968, 439, 2326, 4652, 3085, 3425, 9863, 5049, 5361, 8688, 297, 7580, 8777, 7916, 6687, 8683, 7141, 306, 9569, 2384, 1500, 3346, 4601, 7329, 9040, 6097, 2727, 6314, 4501, 4974, 2829), intArrayOf(8316, 4072, 2025, 6884, 3027, 1808, 5714, 7624, 7880, 8528, 4205, 8686, 7587, 3230, 1139, 7273, 6163, 6986, 3914, 9309, 1464, 9359, 4474, 7095, 2212, 7302, 2583, 9462, 7532, 6567, 1606, 4436, 8981, 5612, 6796, 4385, 5076, 2007, 6072, 3678, 8331, 1338, 3299, 8845, 4783, 8613, 4071, 1232, 6028, 2176, 3990, 2148, 3748, 103, 9453, 538, 6745, 9110, 926, 3125, 473, 5970, 8728, 7072, 9062, 1404, 1317, 5139, 9862, 6496, 6062, 3338, 464, 1600, 2532, 1088, 8232, 7739, 8274, 3873), intArrayOf(2341, 523, 7096, 8397, 8301, 6541, 9844, 244, 4993, 2280, 7689, 4025, 4196, 5522, 7904, 6048, 2623, 9258, 2149, 9461, 6448, 8087, 7245, 1917, 8340, 7127, 8466, 5725, 6996, 3421, 5313, 512, 9164, 9837, 9794, 8369, 4185, 1488, 7210, 1524, 1016, 4620, 9435, 2478, 7765, 8035, 697, 6677, 3724, 6988, 5853, 7662, 3895, 9593, 1185, 4727, 6025, 5734, 7665, 3070, 138, 8469, 6748, 6459, 561, 7935, 8646, 2378, 462, 7755, 3115, 9690, 8877, 3946, 2728, 8793, 244, 6323, 8666, 4271), intArrayOf(6430, 2406, 8994, 56, 1267, 3826, 9443, 7079, 7579, 5232, 6691, 3435, 6718, 5698, 4144, 7028, 592, 2627, 217, 734, 6194, 8156, 9118, 58, 2640, 8069, 4127, 3285, 694, 3197, 3377, 4143, 4802, 3324, 8134, 6953, 7625, 3598, 3584, 4289, 7065, 3434, 2106, 7132, 5802, 7920, 9060, 7531, 3321, 1725, 1067, 3751, 444, 5503, 6785, 7937, 6365, 4803, 198, 6266, 8177, 1470, 6390, 1606, 2904, 7555, 9834, 8667, 2033, 1723, 5167, 1666, 8546, 8152, 473, 4475, 6451, 7947, 3062, 3281), intArrayOf(2810, 3042, 7759, 1741, 2275, 2609, 7676, 8640, 4117, 1958, 7500, 8048, 1757, 3954, 9270, 1971, 4796, 2912, 660, 5511, 3553, 1012, 5757, 4525, 6084, 7198, 8352, 5775, 7726, 8591, 7710, 9589, 3122, 4392, 6856, 5016, 749, 2285, 3356, 7482, 9956, 7348, 2599, 8944, 495, 3462, 3578, 551, 4543, 7207, 7169, 7796, 1247, 4278, 6916, 8176, 3742, 8385, 2310, 1345, 8692, 2667, 4568, 1770, 8319, 3585, 4920, 3890, 4928, 7343, 5385, 9772, 7947, 8786, 2056, 9266, 3454, 2807, 877, 2660), intArrayOf(6206, 8252, 5928, 5837, 4177, 4333, 207, 7934, 5581, 9526, 8906, 1498, 8411, 2984, 5198, 5134, 2464, 8435, 8514, 8674, 3876, 599, 5327, 826, 2152, 4084, 2433, 9327, 9697, 4800, 2728, 3608, 3849, 3861, 3498, 9943, 1407, 3991, 7191, 9110, 5666, 8434, 4704, 6545, 5944, 2357, 1163, 4995, 9619, 6754, 4200, 9682, 6654, 4862, 4744, 5953, 6632, 1054, 293, 9439, 8286, 2255, 696, 8709, 1533, 1844, 6441, 430, 1999, 6063, 9431, 7018, 8057, 2920, 6266, 6799, 356, 3597, 4024, 6665), intArrayOf(3847, 6356, 8541, 7225, 2325, 2946, 5199, 469, 5450, 7508, 2197, 9915, 8284, 7983, 6341, 3276, 3321, 16, 1321, 7608, 5015, 3362, 8491, 6968, 6818, 797, 156, 2575, 706, 9516, 5344, 5457, 9210, 5051, 8099, 1617, 9951, 7663, 8253, 9683, 2670, 1261, 4710, 1068, 8753, 4799, 1228, 2621, 3275, 6188, 4699, 1791, 9518, 8701, 5932, 4275, 6011, 9877, 2933, 4182, 6059, 2930, 6687, 6682, 9771, 654, 9437, 3169, 8596, 1827, 5471, 8909, 2352, 123, 4394, 3208, 8756, 5513, 6917, 2056), intArrayOf(5458, 8173, 3138, 3290, 4570, 4892, 3317, 4251, 9699, 7973, 1163, 1935, 5477, 6648, 9614, 5655, 9592, 975, 9118, 2194, 7322, 8248, 8413, 3462, 8560, 1907, 7810, 6650, 7355, 2939, 4973, 6894, 3933, 3784, 3200, 2419, 9234, 4747, 2208, 2207, 1945, 2899, 1407, 6145, 8023, 3484, 5688, 7686, 2737, 3828, 3704, 9004, 5190, 9740, 8643, 8650, 5358, 4426, 1522, 1707, 3613, 9887, 6956, 2447, 2762, 833, 1449, 9489, 2573, 1080, 4167, 3456, 6809, 2466, 227, 7125, 2759, 6250, 6472, 8089), intArrayOf(3266, 7025, 9756, 3914, 1265, 9116, 7723, 9788, 6805, 5493, 2092, 8688, 6592, 9173, 4431, 4028, 6007, 7131, 4446, 4815, 3648, 6701, 759, 3312, 8355, 4485, 4187, 5188, 8746, 7759, 3528, 2177, 5243, 8379, 3838, 7233, 4607, 9187, 7216, 2190, 6967, 2920, 6082, 7910, 5354, 3609, 8958, 6949, 7731, 494, 8753, 8707, 1523, 4426, 3543, 7085, 647, 6771, 9847, 646, 5049, 824, 8417, 5260, 2730, 5702, 2513, 9275, 4279, 2767, 8684, 1165, 9903, 4518, 55, 9682, 8963, 6005, 2102, 6523), intArrayOf(1998, 8731, 936, 1479, 5259, 7064, 4085, 91, 7745, 7136, 3773, 3810, 730, 8255, 2705, 2653, 9790, 6807, 2342, 355, 9344, 2668, 3690, 2028, 9679, 8102, 574, 4318, 6481, 9175, 5423, 8062, 2867, 9657, 7553, 3442, 3920, 7430, 3945, 7639, 3714, 3392, 2525, 4995, 4850, 2867, 7951, 9667, 486, 9506, 9888, 781, 8866, 1702, 3795, 90, 356, 1483, 4200, 2131, 6969, 5931, 486, 6880, 4404, 1084, 5169, 4910, 6567, 8335, 4686, 5043, 2614, 3352, 2667, 4513, 6472, 7471, 5720, 1616), intArrayOf(8878, 1613, 1716, 868, 1906, 2681, 564, 665, 5995, 2474, 7496, 3432, 9491, 9087, 8850, 8287, 669, 823, 347, 6194, 2264, 2592, 7871, 7616, 8508, 4827, 760, 2676, 4660, 4881, 7572, 3811, 9032, 939, 4384, 929, 7525, 8419, 5556, 9063, 662, 8887, 7026, 8534, 3111, 1454, 2082, 7598, 5726, 6687, 9647, 7608, 73, 3014, 5063, 670, 5461, 5631, 3367, 9796, 8475, 7908, 5073, 1565, 5008, 5295, 4457, 1274, 4788, 1728, 338, 600, 8415, 8535, 9351, 7750, 6887, 5845, 1741, 125), intArrayOf(3637, 6489, 9634, 9464, 9055, 2413, 7824, 9517, 7532, 3577, 7050, 6186, 6980, 9365, 9782, 191, 870, 2497, 8498, 2218, 2757, 5420, 6468, 586, 3320, 9230, 1034, 1393, 9886, 5072, 9391, 1178, 8464, 8042, 6869, 2075, 8275, 3601, 7715, 9470, 8786, 6475, 8373, 2159, 9237, 2066, 3264, 5000, 679, 355, 3069, 4073, 494, 2308, 5512, 4334, 9438, 8786, 8637, 9774, 1169, 1949, 6594, 6072, 4270, 9158, 7916, 5752, 6794, 9391, 6301, 5842, 3285, 2141, 3898, 8027, 4310, 8821, 7079, 1307), intArrayOf(8497, 6681, 4732, 7151, 7060, 5204, 9030, 7157, 833, 5014, 8723, 3207, 9796, 9286, 4913, 119, 5118, 7650, 9335, 809, 3675, 2597, 5144, 3945, 5090, 8384, 187, 4102, 1260, 2445, 2792, 4422, 8389, 9290, 50, 1765, 1521, 6921, 8586, 4368, 1565, 5727, 7855, 2003, 4834, 9897, 5911, 8630, 5070, 1330, 7692, 7557, 7980, 6028, 5805, 9090, 8265, 3019, 3802, 698, 9149, 5748, 1965, 9658, 4417, 5994, 5584, 8226, 2937, 272, 5743, 1278, 5698, 8736, 2595, 6475, 5342, 6596, 1149, 6920), intArrayOf(8188, 8009, 9546, 6310, 8772, 2500, 9846, 6592, 6872, 3857, 1307, 8125, 7042, 1544, 6159, 2330, 643, 4604, 7899, 6848, 371, 8067, 2062, 3200, 7295, 1857, 9505, 6936, 384, 2193, 2190, 301, 8535, 5503, 1462, 7380, 5114, 4824, 8833, 1763, 4974, 8711, 9262, 6698, 3999, 2645, 6937, 7747, 1128, 2933, 3556, 7943, 2885, 3122, 9105, 5447, 418, 2899, 5148, 3699, 9021, 9501, 597, 4084, 175, 1621, 1, 1079, 6067, 5812, 4326, 9914, 6633, 5394, 4233, 6728, 9084, 1864, 5863, 1225), intArrayOf(9935, 8793, 9117, 1825, 9542, 8246, 8437, 3331, 9128, 9675, 6086, 7075, 319, 1334, 7932, 3583, 7167, 4178, 1726, 7720, 695, 8277, 7887, 6359, 5912, 1719, 2780, 8529, 1359, 2013, 4498, 8072, 1129, 9998, 1147, 8804, 9405, 6255, 1619, 2165, 7491, 1, 8882, 7378, 3337, 503, 5758, 4109, 3577, 985, 3200, 7615, 8058, 5032, 1080, 6410, 6873, 5496, 1466, 2412, 9885, 5904, 4406, 3605, 8770, 4361, 6205, 9193, 1537, 9959, 214, 7260, 9566, 1685, 100, 4920, 7138, 9819, 5637, 976), intArrayOf(3466, 9854, 985, 1078, 7222, 8888, 5466, 5379, 3578, 4540, 6853, 8690, 3728, 6351, 7147, 3134, 6921, 9692, 857, 3307, 4998, 2172, 5783, 3931, 9417, 2541, 6299, 13, 787, 2099, 9131, 9494, 896, 8600, 1643, 8419, 7248, 2660, 2609, 8579, 91, 6663, 5506, 7675, 1947, 6165, 4286, 1972, 9645, 3805, 1663, 1456, 8853, 5705, 9889, 7489, 1107, 383, 4044, 2969, 3343, 152, 7805, 4980, 9929, 5033, 1737, 9953, 7197, 9158, 4071, 1324, 473, 9676, 3984, 9680, 3606, 8160, 7384, 5432), intArrayOf(1005, 4512, 5186, 3953, 2164, 3372, 4097, 3247, 8697, 3022, 9896, 4101, 3871, 6791, 3219, 2742, 4630, 6967, 7829, 5991, 6134, 1197, 1414, 8923, 8787, 1394, 8852, 5019, 7768, 5147, 8004, 8825, 5062, 9625, 7988, 1110, 3992, 7984, 9966, 6516, 6251, 8270, 421, 3723, 1432, 4830, 6935, 8095, 9059, 2214, 6483, 6846, 3120, 1587, 6201, 6691, 9096, 9627, 6671, 4002, 3495, 9939, 7708, 7465, 5879, 6959, 6634, 3241, 3401, 2355, 9061, 2611, 7830, 3941, 2177, 2146, 5089, 7079, 519, 6351), intArrayOf(7280, 8586, 4261, 2831, 7217, 3141, 9994, 9940, 5462, 2189, 4005, 6942, 9848, 5350, 8060, 6665, 7519, 4324, 7684, 657, 9453, 9296, 2944, 6843, 7499, 7847, 1728, 9681, 3906, 6353, 5529, 2822, 3355, 3897, 7724, 4257, 7489, 8672, 4356, 3983, 1948, 6892, 7415, 4153, 5893, 4190, 621, 1736, 4045, 9532, 7701, 3671, 1211, 1622, 3176, 4524, 9317, 7800, 5638, 6644, 6943, 5463, 3531, 2821, 1347, 5958, 3436, 1438, 2999, 994, 850, 4131, 2616, 1549, 3465, 5946, 690, 9273, 6954, 7991), intArrayOf(9517, 399, 3249, 2596, 7736, 2142, 1322, 968, 7350, 1614, 468, 3346, 3265, 7222, 6086, 1661, 5317, 2582, 7959, 4685, 2807, 2917, 1037, 5698, 1529, 3972, 8716, 2634, 3301, 3412, 8621, 743, 8001, 4734, 888, 7744, 8092, 3671, 8941, 1487, 5658, 7099, 2781, 99, 1932, 4443, 4756, 4652, 9328, 1581, 7855, 4312, 5976, 7255, 6480, 3996, 2748, 1973, 9731, 4530, 2790, 9417, 7186, 5303, 3557, 351, 7182, 9428, 1342, 9020, 7599, 1392, 8304, 2070, 9138, 7215, 2008, 9937, 1106, 7110), intArrayOf(7444, 769, 9688, 632, 1571, 6820, 8743, 4338, 337, 3366, 3073, 1946, 8219, 104, 4210, 6986, 249, 5061, 8693, 7960, 6546, 1004, 8857, 5997, 9352, 4338, 6105, 5008, 2556, 6518, 6694, 4345, 3727, 7956, 20, 3954, 8652, 4424, 9387, 2035, 8358, 5962, 5304, 5194, 8650, 8282, 1256, 1103, 2138, 6679, 1985, 3653, 2770, 2433, 4278, 615, 2863, 1715, 242, 3790, 2636, 6998, 3088, 1671, 2239, 957, 5411, 4595, 6282, 2881, 9974, 2401, 875, 7574, 2987, 4587, 3147, 6766, 9885, 2965), intArrayOf(3287, 3016, 3619, 6818, 9073, 6120, 5423, 557, 2900, 2015, 8111, 3873, 1314, 4189, 1846, 4399, 7041, 7583, 2427, 2864, 3525, 5002, 2069, 748, 1948, 6015, 2684, 438, 770, 8367, 1663, 7887, 7759, 1885, 157, 7770, 4520, 4878, 3857, 1137, 3525, 3050, 6276, 5569, 7649, 904, 4533, 7843, 2199, 5648, 7628, 9075, 9441, 3600, 7231, 2388, 5640, 9096, 958, 3058, 584, 5899, 8150, 1181, 9616, 1098, 8162, 6819, 8171, 1519, 1140, 7665, 8801, 2632, 1299, 9192, 707, 9955, 2710, 7314), intArrayOf(1772, 2963, 7578, 3541, 3095, 1488, 7026, 2634, 6015, 4633, 4370, 2762, 1650, 2174, 909, 8158, 2922, 8467, 4198, 4280, 9092, 8856, 8835, 5457, 2790, 8574, 9742, 5054, 9547, 4156, 7940, 8126, 9824, 7340, 8840, 6574, 3547, 1477, 3014, 6798, 7134, 435, 9484, 9859, 3031, 4, 1502, 4133, 1738, 1807, 4825, 463, 6343, 9701, 8506, 9822, 9555, 8688, 8168, 3467, 3234, 6318, 1787, 5591, 419, 6593, 7974, 8486, 9861, 6381, 6758, 194, 3061, 4315, 2863, 4665, 3789, 2201, 1492, 4416), intArrayOf(126, 8927, 6608, 5682, 8986, 6867, 1715, 6076, 3159, 788, 3140, 4744, 830, 9253, 5812, 5021, 7616, 8534, 1546, 9590, 1101, 9012, 9821, 8132, 7857, 4086, 1069, 7491, 2988, 1579, 2442, 4321, 2149, 7642, 6108, 250, 6086, 3167, 24, 9528, 7663, 2685, 1220, 9196, 1397, 5776, 1577, 1730, 5481, 977, 6115, 199, 6326, 2183, 3767, 5928, 5586, 7561, 663, 8649, 9688, 949, 5913, 9160, 1870, 5764, 9887, 4477, 6703, 1413, 4995, 5494, 7131, 2192, 8969, 7138, 3997, 8697, 646, 1028), intArrayOf(8074, 1731, 8245, 624, 4601, 8706, 155, 8891, 309, 2552, 8208, 8452, 2954, 3124, 3469, 4246, 3352, 1105, 4509, 8677, 9901, 4416, 8191, 9283, 5625, 7120, 2952, 8881, 7693, 830, 4580, 8228, 9459, 8611, 4499, 1179, 4988, 1394, 550, 2336, 6089, 6872, 269, 7213, 1848, 917, 6672, 4890, 656, 1478, 6536, 3165, 4743, 4990, 1176, 6211, 7207, 5284, 9730, 4738, 1549, 4986, 4942, 8645, 3698, 9429, 1439, 2175, 6549, 3058, 6513, 1574, 6988, 8333, 3406, 5245, 5431, 7140, 7085, 6407), intArrayOf(7845, 4694, 2530, 8249, 290, 5948, 5509, 1588, 5940, 4495, 5866, 5021, 4626, 3979, 3296, 7589, 4854, 1998, 5627, 3926, 8346, 6512, 9608, 1918, 7070, 4747, 4182, 2858, 2766, 4606, 6269, 4107, 8982, 8568, 9053, 4244, 5604, 102, 2756, 727, 5887, 2566, 7922, 44, 5986, 621, 1202, 374, 6988, 4130, 3627, 6744, 9443, 4568, 1398, 8679, 397, 3928, 9159, 367, 2917, 6127, 5788, 3304, 8129, 911, 2669, 1463, 9749, 264, 4478, 8940, 1109, 7309, 2462, 117, 4692, 7724, 225, 2312), intArrayOf(4164, 3637, 2000, 941, 8903, 39, 3443, 7172, 1031, 3687, 4901, 8082, 4945, 4515, 7204, 9310, 9349, 9535, 9940, 218, 1788, 9245, 2237, 1541, 5670, 6538, 6047, 5553, 9807, 8101, 1925, 8714, 445, 8332, 7309, 6830, 5786, 5736, 7306, 2710, 3034, 1838, 7969, 6318, 7912, 2584, 2080, 7437, 6705, 2254, 7428, 820, 782, 9861, 7596, 3842, 3631, 8063, 5240, 6666, 394, 4565, 7865, 4895, 9890, 6028, 6117, 4724, 9156, 4473, 4552, 602, 470, 6191, 4927, 5387, 884, 3146, 1978, 3000), intArrayOf(4258, 6880, 1696, 3582, 5793, 4923, 2119, 1155, 9056, 9698, 6603, 3768, 5514, 9927, 9609, 6166, 6566, 4536, 4985, 4934, 8076, 9062, 6741, 6163, 7399, 4562, 2337, 5600, 2919, 9012, 8459, 1308, 6072, 1225, 9306, 8818, 5886, 7243, 7365, 8792, 6007, 9256, 6699, 7171, 4230, 7002, 8720, 7839, 4533, 1671, 478, 7774, 1607, 2317, 5437, 4705, 7886, 4760, 6760, 7271, 3081, 2997, 3088, 7675, 6208, 3101, 6821, 6840, 122, 9633, 4900, 2067, 8546, 4549, 2091, 7188, 5605, 8599, 6758, 5229), intArrayOf(7854, 5243, 9155, 3556, 8812, 7047, 2202, 1541, 5993, 4600, 4760, 713, 434, 7911, 7426, 7414, 8729, 322, 803, 7960, 7563, 4908, 6285, 6291, 736, 3389, 9339, 4132, 8701, 7534, 5287, 3646, 592, 3065, 7582, 2592, 8755, 6068, 8597, 1982, 5782, 1894, 2900, 6236, 4039, 6569, 3037, 5837, 7698, 700, 7815, 2491, 7272, 5878, 3083, 6778, 6639, 3589, 5010, 8313, 2581, 6617, 5869, 8402, 6808, 2951, 2321, 5195, 497, 2190, 6187, 1342, 1316, 4453, 7740, 4154, 2959, 1781, 1482, 8256), intArrayOf(7178, 2046, 4419, 744, 8312, 5356, 6855, 8839, 319, 2962, 5662, 47, 6307, 8662, 68, 4813, 567, 2712, 9931, 1678, 3101, 8227, 6533, 4933, 6656, 92, 5846, 4780, 6256, 6361, 4323, 9985, 1231, 2175, 7178, 3034, 9744, 6155, 9165, 7787, 5836, 9318, 7860, 9644, 8941, 6480, 9443, 8188, 5928, 161, 6979, 2352, 5628, 6991, 1198, 8067, 5867, 6620, 3778, 8426, 2994, 3122, 3124, 6335, 3918, 8897, 2655, 9670, 634, 1088, 1576, 8935, 7255, 474, 8166, 7417, 9547, 2886, 5560, 3842), intArrayOf(6957, 3111, 26, 7530, 7143, 1295, 1744, 6057, 3009, 1854, 8098, 5405, 2234, 4874, 9447, 2620, 9303, 27, 7410, 969, 40, 2966, 5648, 7596, 8637, 4238, 3143, 3679, 7187, 690, 9980, 7085, 7714, 9373, 5632, 7526, 6707, 3951, 9734, 4216, 2146, 3602, 5371, 6029, 3039, 4433, 4855, 4151, 1449, 3376, 8009, 7240, 7027, 4602, 2947, 9081, 4045, 8424, 9352, 8742, 923, 2705, 4266, 3232, 2264, 6761, 363, 2651, 3383, 7770, 6730, 7856, 7340, 9679, 2158, 610, 4471, 4608, 910, 6241), intArrayOf(4417, 6756, 1013, 8797, 658, 8809, 5032, 8703, 7541, 846, 3357, 2920, 9817, 1745, 9980, 7593, 4667, 3087, 779, 3218, 6233, 5568, 4296, 2289, 2654, 7898, 5021, 9461, 5593, 8214, 9173, 4203, 2271, 7980, 2983, 5952, 9992, 8399, 3468, 1776, 3188, 9314, 1720, 6523, 2933, 621, 8685, 5483, 8986, 6163, 3444, 9539, 4320, 155, 3992, 2828, 2150, 6071, 524, 2895, 5468, 8063, 1210, 3348, 9071, 4862, 483, 9017, 4097, 6186, 9815, 3610, 5048, 1644, 1003, 9865, 9332, 2145, 1944, 2213), intArrayOf(9284, 3803, 4920, 1927, 6706, 4344, 7383, 4786, 9890, 2010, 5228, 1224, 3158, 6967, 8580, 8990, 8883, 5213, 76, 8306, 2031, 4980, 5639, 9519, 7184, 5645, 7769, 3259, 8077, 9130, 1317, 3096, 9624, 3818, 1770, 695, 2454, 947, 6029, 3474, 9938, 3527, 5696, 4760, 7724, 7738, 2848, 6442, 5767, 6845, 8323, 4131, 2859, 7595, 2500, 4815, 3660, 9130, 8580, 7016, 8231, 4391, 8369, 3444, 4069, 4021, 556, 6154, 627, 2778, 1496, 4206, 6356, 8434, 8491, 3816, 8231, 3190, 5575, 1015), intArrayOf(3787, 7572, 1788, 6803, 5641, 6844, 1961, 4811, 8535, 9914, 9999, 1450, 8857, 738, 4662, 8569, 6679, 2225, 7839, 8618, 286, 2648, 5342, 2294, 3205, 4546, 176, 8705, 3741, 6134, 8324, 8021, 7004, 5205, 7032, 6637, 9442, 5539, 5584, 4819, 5874, 5807, 8589, 6871, 9016, 983, 1758, 3786, 1519, 6241, 185, 8398, 495, 3370, 9133, 3051, 4549, 9674, 7311, 9738, 3316, 9383, 2658, 2776, 9481, 7558, 619, 3943, 3324, 6491, 4933, 153, 9738, 4623, 912, 3595, 7771, 7939, 1219, 4405), intArrayOf(2650, 3883, 4154, 5809, 315, 7756, 4430, 1788, 4451, 1631, 6461, 7230, 6017, 5751, 138, 588, 5282, 2442, 9110, 9035, 6349, 2515, 1570, 6122, 4192, 4174, 3530, 1933, 4186, 4420, 4609, 5739, 4135, 2963, 6308, 1161, 8809, 8619, 2796, 3819, 6971, 8228, 4188, 1492, 909, 8048, 2328, 6772, 8467, 7671, 9068, 2226, 7579, 6422, 7056, 8042, 3296, 2272, 3006, 2196, 7320, 3238, 3490, 3102, 37, 1293, 3212, 4767, 5041, 8773, 5794, 4456, 6174, 7279, 7054, 2835, 7053, 9088, 790, 6640), intArrayOf(3101, 1057, 7057, 3826, 6077, 1025, 2955, 1224, 1114, 6729, 5902, 4698, 6239, 7203, 9423, 1804, 4417, 6686, 1426, 6941, 8071, 1029, 4985, 9010, 6122, 6597, 1622, 1574, 3513, 1684, 7086, 5505, 3244, 411, 9638, 4150, 907, 9135, 829, 981, 1707, 5359, 8781, 9751, 5, 9131, 3973, 7159, 1340, 6955, 7514, 7993, 6964, 8198, 1933, 2797, 877, 3993, 4453, 8020, 9349, 8646, 2779, 8679, 2961, 3547, 3374, 3510, 1129, 3568, 2241, 2625, 9138, 5974, 8206, 7669, 7678, 1833, 8700, 4480), intArrayOf(4865, 9912, 8038, 8238, 782, 3095, 8199, 1127, 4501, 7280, 2112, 2487, 3626, 2790, 9432, 1475, 6312, 8277, 4827, 2218, 5806, 7132, 8752, 1468, 7471, 6386, 739, 8762, 8323, 8120, 5169, 9078, 9058, 3370, 9560, 7987, 8585, 8531, 5347, 9312, 1058, 4271, 1159, 5286, 5404, 6925, 8606, 9204, 7361, 2415, 560, 586, 4002, 2644, 1927, 2824, 768, 4409, 2942, 3345, 1002, 808, 4941, 6267, 7979, 5140, 8643, 7553, 9438, 7320, 4938, 2666, 4609, 2778, 8158, 6730, 3748, 3867, 1866, 7181), intArrayOf(171, 3771, 7134, 8927, 4778, 2913, 3326, 2004, 3089, 7853, 1378, 1729, 4777, 2706, 9578, 1360, 5693, 3036, 1851, 7248, 2403, 2273, 8536, 6501, 9216, 613, 9671, 7131, 7719, 6425, 773, 717, 8803, 160, 1114, 7554, 7197, 753, 4513, 4322, 8499, 4533, 2609, 4226, 8710, 6627, 644, 9666, 6260, 4870, 5744, 7385, 6542, 6203, 7703, 6130, 8944, 5589, 2262, 6803, 6381, 7414, 6888, 5123, 7320, 9392, 9061, 6780, 322, 8975, 7050, 5089, 1061, 2260, 3199, 1150, 1865, 5386, 9699, 6501), intArrayOf(3744, 8454, 6885, 8277, 919, 1923, 4001, 6864, 7854, 5519, 2491, 6057, 8794, 9645, 1776, 5714, 9786, 9281, 7538, 6916, 3215, 395, 2501, 9618, 4835, 8846, 9708, 2813, 3303, 1794, 8309, 7176, 2206, 1602, 1838, 236, 4593, 2245, 8993, 4017, 10, 8215, 6921, 5206, 4023, 5932, 6997, 7801, 262, 7640, 3107, 8275, 4938, 7822, 2425, 3223, 3886, 2105, 8700, 9526, 2088, 8662, 8034, 7004, 5710, 2124, 7164, 3574, 6630, 9980, 4242, 2901, 9471, 1491, 2117, 4562, 1130, 9086, 4117, 6698), intArrayOf(2810, 2280, 2331, 1170, 4554, 4071, 8387, 1215, 2274, 9848, 6738, 1604, 7281, 8805, 439, 1298, 8318, 7834, 9426, 8603, 6092, 7944, 1309, 8828, 303, 3157, 4638, 4439, 9175, 1921, 4695, 7716, 1494, 1015, 1772, 5913, 1127, 1952, 1950, 8905, 4064, 9890, 385, 9357, 7945, 5035, 7082, 5369, 4093, 6546, 5187, 5637, 2041, 8946, 1758, 7111, 6566, 1027, 1049, 5148, 7224, 7248, 296, 6169, 375, 1656, 7993, 2816, 3717, 4279, 4675, 1609, 3317, 42, 6201, 3100, 3144, 163, 9530, 4531), intArrayOf(7096, 6070, 1009, 4988, 3538, 5801, 7149, 3063, 2324, 2912, 7911, 7002, 4338, 7880, 2481, 7368, 3516, 2016, 7556, 2193, 1388, 3865, 8125, 4637, 4096, 8114, 750, 3144, 1938, 7002, 9343, 4095, 1392, 4220, 3455, 6969, 9647, 1321, 9048, 1996, 1640, 6626, 1788, 314, 9578, 6630, 2813, 6626, 4981, 9908, 7024, 4355, 3201, 3521, 3864, 3303, 464, 1923, 595, 9801, 3391, 8366, 8084, 9374, 1041, 8807, 9085, 1892, 9431, 8317, 9016, 9221, 8574, 9981, 9240, 5395, 2009, 6310, 2854, 9255), intArrayOf(8830, 3145, 2960, 9615, 8220, 6061, 3452, 2918, 6481, 9278, 2297, 3385, 6565, 7066, 7316, 5682, 107, 7646, 4466, 68, 1952, 9603, 8615, 54, 7191, 791, 6833, 2560, 693, 9733, 4168, 570, 9127, 9537, 1925, 8287, 5508, 4297, 8452, 8795, 6213, 7994, 2420, 4208, 524, 5915, 8602, 8330, 2651, 8547, 6156, 1812, 6271, 7991, 9407, 9804, 1553, 6866, 1128, 2119, 4691, 9711, 8315, 5879, 9935, 6900, 482, 682, 4126, 1041, 428, 6247, 3720, 5882, 7526, 2582, 4327, 7725, 3503, 2631), intArrayOf(2738, 9323, 721, 7434, 1453, 6294, 2957, 3786, 5722, 6019, 8685, 4386, 3066, 9057, 6860, 499, 5315, 3045, 5194, 7111, 3137, 9104, 941, 586, 3066, 755, 4177, 8819, 7040, 5309, 3583, 3897, 4428, 7788, 4721, 7249, 6559, 7324, 825, 7311, 3760, 6064, 6070, 9672, 4882, 584, 1365, 9739, 9331, 5783, 2624, 7889, 1604, 1303, 1555, 7125, 8312, 425, 8936, 3233, 7724, 1480, 403, 7440, 1784, 1754, 4721, 1569, 652, 3893, 4574, 5692, 9730, 4813, 9844, 8291, 9199, 7101, 3391, 8914), intArrayOf(6044, 2928, 9332, 3328, 8588, 447, 3830, 1176, 3523, 2705, 8365, 6136, 5442, 9049, 5526, 8575, 8869, 9031, 7280, 706, 2794, 8814, 5767, 4241, 7696, 78, 6570, 556, 5083, 1426, 4502, 3336, 9518, 2292, 1885, 3740, 3153, 9348, 9331, 8051, 2759, 5407, 9028, 7840, 9255, 831, 515, 2612, 9747, 7435, 8964, 4971, 2048, 4900, 5967, 8271, 1719, 9670, 2810, 6777, 1594, 6367, 6259, 8316, 3815, 1689, 6840, 9437, 4361, 822, 9619, 3065, 83, 6344, 7486, 8657, 8228, 9635, 6932, 4864), intArrayOf(8478, 4777, 6334, 4678, 7476, 4963, 6735, 3096, 5860, 1405, 5127, 7269, 7793, 4738, 227, 9168, 2996, 8928, 765, 733, 1276, 7677, 6258, 1528, 9558, 3329, 302, 8901, 1422, 8277, 6340, 645, 9125, 8869, 5952, 141, 8141, 1816, 9635, 4025, 4184, 3093, 83, 2344, 2747, 9352, 7966, 1206, 1126, 1826, 218, 7939, 2957, 2729, 810, 8752, 5247, 4174, 4038, 8884, 7899, 9567, 301, 5265, 5752, 7524, 4381, 1669, 3106, 8270, 6228, 6373, 754, 2547, 4240, 2313, 5514, 3022, 1040, 9738), intArrayOf(2265, 8192, 1763, 1369, 8469, 8789, 4836, 52, 1212, 6690, 5257, 8918, 6723, 6319, 378, 4039, 2421, 8555, 8184, 9577, 1432, 7139, 8078, 5452, 9628, 7579, 4161, 7490, 5159, 8559, 1011, 81, 478, 5840, 1964, 1334, 6875, 8670, 9900, 739, 1514, 8692, 522, 9316, 6955, 1345, 8132, 2277, 3193, 9773, 3923, 4177, 2183, 1236, 6747, 6575, 4874, 6003, 6409, 8187, 745, 8776, 9440, 7543, 9825, 2582, 7381, 8147, 7236, 5185, 7564, 6125, 218, 7991, 6394, 391, 7659, 7456, 5128, 5294), intArrayOf(2132, 8992, 8160, 5782, 4420, 3371, 3798, 5054, 552, 5631, 7546, 4716, 1332, 6486, 7892, 7441, 4370, 6231, 4579, 2121, 8615, 1145, 9391, 1524, 1385, 2400, 9437, 2454, 7896, 7467, 2928, 8400, 3299, 4025, 7458, 4703, 7206, 6358, 792, 6200, 725, 4275, 4136, 7390, 5984, 4502, 7929, 5085, 8176, 4600, 119, 3568, 76, 9363, 6943, 2248, 9077, 9731, 6213, 5817, 6729, 4190, 3092, 6910, 759, 2682, 8380, 1254, 9604, 3011, 9291, 5329, 9453, 9746, 2739, 6522, 3765, 5634, 1113, 5789), intArrayOf(5304, 5499, 564, 2801, 679, 2653, 1783, 3608, 7359, 7797, 3284, 796, 3222, 437, 7185, 6135, 8571, 2778, 7488, 5746, 678, 6140, 861, 7750, 803, 9859, 9918, 2425, 3734, 2698, 9005, 4864, 9818, 6743, 2475, 132, 9486, 3825, 5472, 919, 292, 4411, 7213, 7699, 6435, 9019, 6769, 1388, 802, 2124, 1345, 8493, 9487, 8558, 7061, 8777, 8833, 2427, 2238, 5409, 4957, 8503, 3171, 7622, 5779, 6145, 2417, 5873, 5563, 5693, 9574, 9491, 1937, 7384, 4563, 6842, 5432, 2751, 3406, 7981))
+
+	override fun run(): String {
+		// Dynamic programming
+		for (i in grid.indices.reversed()) for (j in grid[i].size - 1 downTo 0) {
+			val temp = if (i + 1 < grid.size && j + 1 < grid[i].size) grid[i + 1][j].coerceAtMost(grid[i][j + 1]) else if (i + 1 < grid.size) grid[i + 1][j] else if (j + 1 < grid[i].size) grid[i][j + 1] else 0
+			grid[i][j] += temp
+		}
+		return grid[0][0].toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) = println(p081().run())
+	}
+}
\ No newline at end of file
Index: Random_Work/src/Color Blender.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/Color Blender.html b/Random_Work/src/Color Blender.html
new file mode 100644
--- /dev/null	(date 1612467822592)
+++ b/Random_Work/src/Color Blender.html	(date 1612467822592)
@@ -0,0 +1,508 @@
+<!DOCTYPE HTML>
+<html lang="en">
+<head>
+	<meta http-equiv="content-type" content="text/html; charset=UTF-8">
+	<title>Color Blender</title>
+	<style type="text/css">
+		body {
+			background: white;
+			color: black;
+		}
+
+		form {
+			margin: 0;
+		}
+
+		h1 {
+			font-family: Arial, sans-serif;
+			line-height: 0.85em;
+			border-bottom: 2px solid;
+			margin-bottom: 0.33em;
+			padding-bottom: 0;
+		}
+
+		#main {
+			border-bottom: 1px solid;
+			padding-bottom: 0.5em;
+		}
+
+		#uicell {
+			width: 25em;
+		}
+
+		#uicell th {
+			width: 6em;
+			text-align: right;
+			padding-right: 0.5em;
+			border: 1px solid black;
+		}
+
+		#uicell td {
+			padding: 0 0 0 0.5em;
+		}
+
+		#uicell td.pal {
+			padding: 0 3em;
+		}
+
+		#uicell #gobuttons td {
+			height: 1.5em;
+		}
+
+		input, #input a {
+			font: 0.85em "Andale Mono", Courier, monospace;
+		}
+
+		#input, #output {
+			margin: 0 0 1em;
+		}
+
+		#input td {
+			white-space: nowrap;
+		}
+
+		#input a {
+			border: 2px outset silver;
+			background: silver;
+			padding: 1px 0.25em;
+			cursor: pointer;
+		}
+
+		#input .coltype {
+			background: #EEE;
+			border-style: inset;
+		}
+
+		#output input {
+			border: 2px solid white;
+		}
+
+		#output td.text {
+			border-bottom: 1px dotted silver;
+		}
+
+		#watercell {
+			width: 75px;
+			background: silver;
+			padding: 0;
+		}
+
+		#grid {
+			background: black;
+			border: 1px solid black;
+			margin: 5px 4px;
+		}
+
+		#grid td {
+			height: 11px;
+			width: 11px;
+			padding: 0;
+			line-height: 11px;
+		}
+
+		#grid td a {
+			display: block;
+			height: 10px;
+			width: 10px;
+			line-height: 10px;
+			border: 1px solid black;
+		}
+
+		#textcell p {
+			margin: 0;
+			padding: 0 1em 1em 1.5em;
+		}
+
+		#footer {
+			color: #999;
+			font: italic 75% sans-serif;
+		}
+
+		#footer p {
+			margin: 0 0 1em 0;
+		}
+
+		#footer img {
+			float: right;
+			margin: 0 0 0.5em 2em;
+		}
+	</style>
+	<script type="text/javascript">
+		// Thanks to Steve Champeon (hesketh.com) for explaining the math in such a way that I could
+		// understand it and create this tool
+		// Thanks to Roberto Diez for the idea to create the "waterfall" display
+		// Thanks to the Rhino book, I was able to (clumsily) set up the Color object
+		//   v1.0 (20030213) initial release
+		//   v1.1 (20030221) added rgbd and rgbp value types
+		//   v1.2 (20030511) added "waterfall" display of "web-safe" colors
+		//   v1.3 (20030514) single-page structure for easy local saves; CC license
+		//   v1.4 (20150321) added URL fragment ID storing of colors, steps, type
+		// v1.4.1 (20150322) fixed RGB/rgb parsing error
+
+		let cursor = 0;
+		let colType = 'hex';
+		let base = 16;
+		const ends = [new Color, new Color];
+		const step = new Array(3);
+		const palette = [new Color, new Color, new Color, new Color, new Color, new Color, new Color, new Color, new Color, new Color, new Color, new Color];
+
+		function GetElementsWithClassName(elementName, className) {
+			const allElements = document.getElementsByTagName(elementName);
+			const elemColl = [];
+			for (let i = 0; i < allElements.length; i++) if (allElements[i].className === className) elemColl[elemColl.length] = allElements[i];
+			return elemColl;
+		}
+
+		function Color(r, g, b) {
+			this.r = r;
+			this.g = g;
+			this.b = b;
+			this.coll = [r, g, b];
+			this.valid = cVerify(this.coll);
+			this.text = cText(this.coll);
+			this.bg = cText(this.coll);
+		}
+
+		function cVerify(c) {
+			let valid = 'n';
+			if (!isNaN(c[0]) && !isNaN(c[1]) && !isNaN(c[2])) valid = 'y'
+			return valid;
+		}
+
+		function cText(c, t) {
+			let result = '';
+			let d = 1;
+			let cT = t ? t : colType;
+			let base;
+			if (cT === 'hex') base = 16;
+			if (cT === 'rgbp') d = 2.55
+			let val;
+			let piece;
+			for (let k = 0; k < 3; k++) {
+				val = Math.round(c[k] / d);
+				piece = val.toString(base);
+				if (cT === 'hex' && piece.length < 2) piece = '0' + piece;
+				if (cT === 'rgbp') piece = piece + '%'
+				if (cT !== 'hex' && k < 2) piece = piece + ',';
+				result = result + piece;
+			}
+			result = cT === 'hex' ? '#' + result.toUpperCase() : `rgb(${result})`;
+			return result;
+		}
+
+		function colorParse(c, t) {
+			let m = 1;
+			c = c.toUpperCase();
+			let col = c.replace('RGB', '').replace(/[#(]*/i, ''), a, b;
+			let num, base;
+			if (t === 'hex') {
+				if (col.length === 3) {
+					a = col.substr(0, 1);
+					b = col.substr(1, 1);
+					c = col.substr(2, 1);
+					col = a + a + b + b + c + c;
+				}
+				num = [col.substr(0, 2), col.substr(2, 2), col.substr(4, 2)];
+				base = 16;
+			} else {
+				num = col.split(',');
+				base = 10;
+			}
+			if (t === 'rgbp') m = 2.55
+			const ret = [parseInt(num[0], base) * m, parseInt(num[1], base) * m, parseInt(num[2], base) * m];
+			return (ret);
+		}
+
+		function updateHash() {
+			let c0 = ends[0].valid === 'y' ? cText(ends[0].coll, 'hex').substring(1) : '',
+				c1 = ends[1].valid === 'y' ? cText(ends[1].coll, 'hex').substring(1) : '';
+			const st = document.getElementById('steps').value, obj = GetElementsWithClassName('a', 'coltype'),
+				ty = obj[0].id;
+			window.location.hash = `#${c0}:${c1}:${st}:${ty}`;
+		}
+
+		function colorPour(pt, n) {
+			const textObj = document.getElementById(pt + n.toString()),
+				colObj = document.getElementById(pt.substring(0, 1) + n.toString()),
+				temp = pt === 'col' ? ends[n] : palette[n];
+			if (temp.valid === 'y') {
+				textObj.value = temp.text;
+				colObj.style.backgroundColor = temp.bg;
+			}
+		}
+
+		function colorStore(n) {
+			const inVal = 'col' + n.toString(), inCol = document.getElementById(inVal).value,
+				c = colorParse(inCol, colType);
+			ends[n] = new Color(c[0], c[1], c[2]);
+			if (ends[n].valid === 'y') colorPour('col', n)
+		}
+
+		function stepCalc() {
+			const steps = parseInt(document.getElementById('steps').value) + 1;
+			step[0] = (ends[1].r - ends[0].r) / steps;
+			step[1] = (ends[1].g - ends[0].g) / steps;
+			step[2] = (ends[1].b - ends[0].b) / steps;
+		}
+
+		function mixPalette() {
+			const count = parseInt(document.getElementById('steps').value) + 1;
+			palette[0] = new Color(ends[0].r, ends[0].g, ends[0].b);
+			palette[count] = new Color(ends[1].r, ends[1].g, ends[1].b);
+			for (let i = 1; i < count; i++) palette[i] = new Color((ends[0].r + (step[0] * i)), (ends[0].g + (step[1] * i)), (ends[0].b + (step[2] * i)));
+			for (let j = count + 1; j < 12; j++) {
+				palette[j].text = '';
+				palette[j].bg = 'white';
+			}
+		}
+
+		function drawPalette() {
+			stepCalc();
+			mixPalette();
+			for (let i = 0; i < 12; i++) colorPour('pal', i);
+			updateHash();
+		}
+
+		function setCursor(n) {
+			cursor = n;
+			const obj1 = document.getElementById('col0'), obj2 = document.getElementById('col1');
+			obj1.style.backgroundColor = '';
+			obj2.style.backgroundColor = '';
+			if (cursor >= 0 && cursor <= 1) document.getElementById('col' + cursor).style.backgroundColor = '#FF9';
+		}
+
+		function colorIns(c) {
+			const obj = document.getElementById('col' + cursor), result = colorParse(c, 'hex');
+			ends[cursor] = new Color(result[0], result[1], result[2]);
+			obj.value = ends[cursor].text;
+			if (ends[cursor].valid === 'y') colorPour('col', cursor)
+			updateHash();
+		}
+
+		function setType(inp) {
+			colType = inp;
+			base = inp === 'hex' ? 16 : 10;
+			for (let i = 0; i < 2; i++) if (ends[i].valid === 'y') {
+				ends[i] = new Color(ends[i].r, ends[i].g, ends[i].b);
+				document.getElementById('col' + i).value = ends[i].text;
+			}
+			document.getElementById('hex').className = '';
+			document.getElementById('rgbd').className = '';
+			document.getElementById('rgbp').className = '';
+			document.getElementById(inp).className = 'coltype';
+			drawPalette();
+		}
+
+		function init(inp) {
+			document.getElementById('steps').value = '0';
+			let obj;
+			if (!inp) {
+				obj = GetElementsWithClassName('a', 'coltype');
+				inp = obj[0].id;
+				window.location.hash = '::1:' + colType;
+			}
+			for (let i = 0; i < 2; i++) {
+				ends[i] = new Color;
+				document.getElementById('col' + i).value = '';
+				document.getElementById('c' + i).style.background = 'white';
+			}
+			for (let j = 0; j < 12; j++) {
+				palette[j] = new Color;
+				document.getElementById('pal' + j).value = '';
+				document.getElementById('p' + j).style.background = 'white';
+			}
+			document.getElementById('col0').focus();
+			let hash, vals;
+			if (window.location.hash) {
+				hash = window.location.hash.substring(1);
+				vals = hash.split(":");
+				if (vals[0]) {
+					document.getElementById('col0').value = vals[0];
+					colorStore('0');
+				}
+				if (vals[1]) {
+					document.getElementById('col1').value = vals[1];
+					colorStore('1');
+				}
+				document.getElementById('steps').value = vals[2];
+				inp = vals[3];
+				if (vals[0] && vals[1]) drawPalette();
+			}
+			setType(inp);
+		}
+	</script>
+</head>
+<body onload="init('hex');">
+<form onsubmit="return false;">
+	<h1>Color Blender</h1>
+	<table id="main">
+		<tr valign="top">
+			<td id="uicell">
+				<table id="input">
+					<tr>
+						<th>Format</th>
+						<td colspan="2">
+							<a onclick="setType('hex');" id="hex" class="coltype">Hex</a>
+							<a onclick="setType('rgbd');" id="rgbd">RGB</a>
+							<a onclick="setType('rgbp');" id="rgbp">RGB%</a>
+						</td>
+					</tr>
+					<tr>
+						<th id="l1">Color 1</th>
+						<td class="col"><label for="col0"></label><input type="text" id="col0" size="19"
+						                                                 onblur="colorStore('0');"
+						                                                 onfocus="setCursor(0);"/></td>
+						<td class="pal" id="c0">&nbsp;</td>
+					</tr>
+					<tr>
+						<th id="l2">Color 2</th>
+						<td class="col"><label for="col1"></label><input type="text" id="col1" size="19"
+						                                                 onblur="colorStore('1');"
+						                                                 onfocus="setCursor(1);"/></td>
+						<td class="pal" id="c1"></td>
+					</tr>
+					<tr>
+						<th>Midpoints</th>
+						<td>
+							<label for="steps"></label><select id="steps" onchange="updateHash();">
+							<option value="1">1</option>
+							<option value="2">2</option>
+							<option value="3">3</option>
+							<option value="4">4</option>
+							<option value="5">5</option>
+							<option value="6">6</option>
+							<option value="7">7</option>
+							<option value="8">8</option>
+							<option value="9">9</option>
+							<option value="10">10</option>
+						</select>
+						</td>
+					</tr>
+					<tr id="gobuttons">
+						<td></td>
+						<td>
+							<a onclick="drawPalette();">blend</a></td>
+						<td><a onclick="init(0);">clear</a></td>
+					</tr>
+				</table>
+
+				<table id="output">
+					<tr>
+						<th>Palette</th>
+						<td class="text"><label for="pal0"></label><input type="text" id="pal0" size="19"/></td>
+						<td class="pal" id="p0">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal1"></label><input type="text" id="pal1" size="19"/></td>
+						<td class="pal" id="p1">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal2"></label><input type="text" id="pal2" size="19"/></td>
+						<td class="pal" id="p2">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal3"></label><input type="text" id="pal3" size="19"/></td>
+						<td class="pal" id="p3">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal4"></label><input type="text" id="pal4" size="19"/></td>
+						<td class="pal" id="p4">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal5"></label><input type="text" id="pal5" size="19"/></td>
+						<td class="pal" id="p5">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal6"></label><input type="text" id="pal6" size="19"/></td>
+						<td class="pal" id="p6">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal7"></label><input type="text" id="pal7" size="19"/></td>
+						<td class="pal" id="p7">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal8"></label><input type="text" id="pal8" size="19"/></td>
+						<td class="pal" id="p8">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal9"></label><input type="text" id="pal9" size="19"/></td>
+						<td class="pal" id="p9">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal10"></label><input type="text" id="pal10" size="19"/></td>
+						<td class="pal" id="p10">&nbsp;</td>
+					</tr>
+					<tr>
+						<td></td>
+						<td class="text"><label for="pal11"></label><input type="text" id="pal11" size="19"/></td>
+						<td class="pal" id="p11">&nbsp;</td>
+					</tr>
+				</table>
+
+			</td>
+			<td id="watercell">
+				<script type="text/javascript">
+					const colors = ['00', '33', '66', '99', 'CC', 'FF'];
+					document.write('<table cellspacing="0" id="grid">');
+					for (let i = 5; i >= 0; i--) for (let j = 5; j >= 0; j--) {
+						document.write('<tr>');
+						for (let k = 5; k >= 0; k--) {
+							let col = colors[i] + colors[j] + colors[k];
+							document.write(`<td style="background: #${col};"><a href="javascript:colorIns('#${col}');"></a></td>`);
+						}
+						document.write('<\/tr>');
+					}
+					document.write('<\/table>');
+				</script>
+			</td>
+			<td id="textcell">
+				<ul>
+					<li>Pick a color value format, input two <strong>valid</strong> CSS color values in the format you
+						chose, and pick the number of midpoints you'd like to see. The palette will show the colors you
+						input as well as the requested number of midpoint colors, and the values of those colors.
+					</li>
+					<li>All numbers are rounded to the nearest integer.</li>
+					<li>Clicking on a square in the "waterfall" display will fill in the appropriate value for whichever
+						input is highlighted.
+					</li>
+					<li>Switching between value formats will translate whatever values are in place.</li>
+					<li>"Clear" removes all values and colors, but does not change the current value format.</li>
+					<li>The URL of the page is updated with each change so you can share or bookmark the colors, blend
+						steps, and value format currently shown.
+					</li>
+					<li>If you'd like to have the Color Blender for offline use, just view source and save to your hard
+						drive.
+					</li>
+				</ul>
+			</td>
+		</tr>
+	</table>
+</form>
+<div id="footer">
+	<img alt="Creative Commons License" border="0" src="//creativecommons.org/images/public/somerights.gif">
+	<p>
+		<br>
+		The Color Blender is licensed under a Creative Commons <a href="//creativecommons.org/licenses/by-sa/1.0/"
+		                                                          rel="license">Attribution-ShareAlike 1.0</a> License.
+	</p>
+	<p>
+		This tool is provided without warranty, guarantee, or much in the way of explanation. Note that use of this tool
+		may or may not crash your browser, lock up your machine, erase your hard drive, or e-mail those naughty pictures
+		you hid in the Utilities folder to your mother. Don't blame me if anything bad happens to you, because it's
+		actually the aliens' fault. The code expressed herein is solely that of the author, and he's none too swift with
+		the JavaScript, if you know what we mean, so it's likely to cause giggle fits in anyone who knows what they're
+		doing. Not a flying toy. Thank you for playing. Insert coin to continue.
+	</p>
+</div>
+</body>
+</html>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p004.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p004.kt b/Random_Work/src/projectEuler/programs/p004.kt
new file mode 100644
--- /dev/null	(date 1614951977232)
+++ b/Random_Work/src/projectEuler/programs/p004.kt	(date 1614951977232)
@@ -0,0 +1,25 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPalindrome
+
+class p004 : EulerSolution() {
+	/*
+	 * Computers are fast, so we can implement this solution directly without any clever math.
+	 * Note that the maximum product is 999 * 999, which fits in a Java int type.
+	 */
+	override fun run(): String {
+		var maxPalin = -1
+		for (i in 100..999) for (j in 100..999) {
+			val prod = i * j
+			if (isPalindrome(prod) && prod > maxPalin) maxPalin = prod
+		}
+		return Integer.toString(maxPalin)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p004().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p074.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p074.kt b/Random_Work/src/projectEuler/programs/p074.kt
new file mode 100644
--- /dev/null	(date 1614951979644)
+++ b/Random_Work/src/projectEuler/programs/p074.kt	(date 1614951979644)
@@ -0,0 +1,45 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.pow
+import java.util.*
+import java.util.stream.IntStream
+
+class p074 : EulerSolution() {
+	override fun run(): String {
+		val count = IntStream.range(0, LIMIT).filter { i: Int -> getChainLength(i) == 60 }.count().toInt()
+		return Integer.toString(count)
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 6)
+
+		// Hard-coded values for factorial(0), factorial(1), ..., factorial(9)
+		private val FACTORIAL = intArrayOf(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p074().run())
+		}
+
+		private fun getChainLength(n: Int): Int {
+			var n = n
+			val seen = HashSet<Int>()
+			while (true) {
+				if (!seen.add(n)) return seen.size
+				n = factorialize(n)
+			}
+		}
+
+		@Contract(pure = true)
+		private fun factorialize(n: Int): Int {
+			var n = n
+			var sum = 0
+			while (n != 0) {
+				sum += FACTORIAL[n % 10]
+				n /= 10
+			}
+			return sum
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/MathML.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/MathML.html b/Random_Work/src/MathML.html
new file mode 100644
--- /dev/null	(date 1614911878777)
+++ b/Random_Work/src/MathML.html	(date 1614911878777)
@@ -0,0 +1,949 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+	<title>MathML Testing</title>
+	<script src="https://cdn.mathjax.org/mathjax/latest/MathJax.js?config=TeX-AMS-MML_HTMLorMML"
+	        type="text/javascript"></script>
+	<script type="text/x-mathjax-config">
+		MathJax.Hub.Config({tex2jax: {inlineMath: [["$","$"],["\\(","\\)"]]}, "HTML-CSS": {linebreaks: { automatic: true, width: "container"}}});
+	</script>
+</head>
+<body>
+<math xmlns="http://www.w3.org/1998/Math/MathML">
+	<mi>T</mi>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>1.8</mn>
+	<msup>
+		<mi>sin</mi>
+		<mn>3</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>2</mn>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mo>+</mo>
+	<mn>98.6</mn>
+	<mspace linebreak="newline"/>
+	<mi>T</mi>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mn>9</mn>
+		<mn>5</mn>
+	</mfrac>
+	<msup>
+		<mi>cos</mi>
+		<mn>3</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>+</mo>
+	<mn>98.6</mn>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mn>9</mn>
+		<mn>5</mn>
+	</mfrac>
+	<mo stretchy="false">(</mo>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>sin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>4</mn>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mfrac>
+		<mrow>
+			<mn>9</mn>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>sin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>20</mn>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>cos</mi>
+		<mn>2</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mi>sin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mi>sin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>&#x2212;<!-- − --></mo>
+	<msup>
+		<mi>sin</mi>
+		<mn>3</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mi>sin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<msup>
+		<mi>sin</mi>
+		<mn>3</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<mi>x</mi>
+	<mo>=</mo>
+	<mn>6</mn>
+	<mo>,</mo>
+	<mn>12</mn>
+	<mo>,</mo>
+	<mn>18</mn>
+	<mtext>&#xA0;(manually substituted for every number on the interval)</mtext>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>6</mn>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>12</mn>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>18</mn>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>0</mn>
+	<mo>,</mo>
+	<mn>6</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>3</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&gt;</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>6</mn>
+	<mo>,</mo>
+	<mn>12</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>9</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&gt;</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>12</mn>
+	<mo>,</mo>
+	<mn>18</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>15</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&lt;</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>18</mn>
+	<mo>,</mo>
+	<mn>24</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>f</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>21</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&lt;</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mfrac>
+		<mrow>
+			<mn>9</mn>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>sin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>20</mn>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mfrac>
+		<mrow>
+			<mn>9</mn>
+			<mi>&pi;<!-- π --></mi>
+		</mrow>
+		<mn>20</mn>
+	</mfrac>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mrow>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>3</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>12</mn>
+	</mfrac>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>sin</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>cos</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>6</mn>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mfrac>
+		<mn>3</mn>
+		<mn>80</mn>
+	</mfrac>
+	<msup>
+		<mi>&pi;<!-- π --></mi>
+		<mn>2</mn>
+	</msup>
+	<mi>cos</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo stretchy="false">(</mo>
+	<mn>1</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mn>3</mn>
+	<msup>
+		<mi>sin</mi>
+		<mn>2</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<mi>cos</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo>=</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>2</mn>
+	</mfrac>
+	<mo>,</mo>
+	<mfrac>
+		<mrow>
+			<mn>3</mn>
+			<mi>&pi;<!-- π --></mi>
+		</mrow>
+		<mn>2</mn>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<mi>x</mi>
+	<mo>=</mo>
+	<mn>6</mn>
+	<mo>,</mo>
+	<mn>18</mn>
+	<mn>1</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mn>3</mn>
+	<msup>
+		<mi>sin</mi>
+		<mn>2</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>0</mn>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>sin</mi>
+		<mn>2</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mfrac>
+		<mn>1</mn>
+		<mn>3</mn>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<mi>sin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mo>&#x00B1;<!-- ± --></mo>
+	<mfrac>
+		<msqrt>
+			<mn>3</mn>
+		</msqrt>
+		<mn>3</mn>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<mfrac>
+		<mi>&pi;<!-- π --></mi>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo>=</mo>
+	<mn>1</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mi>arcsin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mrow class="MJX-TeXAtom-ORD">
+		<mfrac>
+			<msqrt>
+				<mn>3</mn>
+			</msqrt>
+			<mn>3</mn>
+		</mfrac>
+	</mrow>
+	<mo>,</mo>
+	<mi>arcsin</mi>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mrow class="MJX-TeXAtom-ORD">
+		<mfrac>
+			<msqrt>
+				<mn>3</mn>
+			</msqrt>
+			<mn>3</mn>
+		</mfrac>
+	</mrow>
+	<mspace linebreak="newline"/>
+	<mi>x</mi>
+	<mo>=</mo>
+	<mn>12</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo>,</mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>0</mn>
+	<mo>,</mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>1</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&gt;</mo>
+	<mn>0</mn>
+	<mtext>&#xA0;(CU)</mtext>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mo stretchy="false">(</mo>
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo>,</mo>
+	<mn>6</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>3</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&lt;</mo>
+	<mn>0</mn>
+	<mtext>&#xA0;(CD)</mtext>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>6</mn>
+	<mo>,</mo>
+	<mn>12</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mo stretchy="false">(</mo>
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>7</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&gt;</mo>
+	<mn>0</mn>
+	<mtext>&#xA0;(CU)</mtext>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>12</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mo stretchy="false">(</mo>
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo>,</mo>
+	<mn>18</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>10</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&lt;</mo>
+	<mn>0</mn>
+	<mtext>&#xA0;(CD)</mtext>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>18</mn>
+	<mo>,</mo>
+	<mn>24</mn>
+	<mo stretchy="false">)</mo>
+	<mtext>&#xA0;</mtext>
+	<msup>
+		<mi>T</mi>
+		<mo>&#x2033;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mn>19</mn>
+	<mo stretchy="false">)</mo>
+	<mo>&lt;</mo>
+	<mn>0</mn>
+	<mtext>&#xA0;(CD)</mtext>
+	<mspace linebreak="newline"/>
+	<mspace linebreak="newline"/>
+	<mtext>Points of Inflection:</mtext>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mo stretchy="false">(</mo>
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo>,</mo>
+	<mn>97.62</mn>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>6</mn>
+	<mo>,</mo>
+	<mn>98.6</mn>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<mo stretchy="false">(</mo>
+	<mn>12</mn>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>12</mn>
+			<mi>arcsin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mrow class="MJX-TeXAtom-ORD">
+				<mo stretchy="false">(</mo>
+				<mfrac>
+					<msqrt>
+						<mn>3</mn>
+					</msqrt>
+					<mn>3</mn>
+				</mfrac>
+			</mrow>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mi>&pi;<!-- π --></mi>
+	</mfrac>
+	<mo>,</mo>
+	<mn>99.58</mn>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<mi>g</mi>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mn>1.8</mn>
+	<msup>
+		<mi>sin</mi>
+		<mn>3</mn>
+	</msup>
+	<mo>&#x2061;<!-- ⁡ --></mo>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mrow>
+			<mi>p</mi>
+			<mi>i</mi>
+		</mrow>
+		<mn>12</mn>
+	</mfrac>
+	<mi>x</mi>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>3</mn>
+			<mi>&pi;<!-- π --></mi>
+		</mrow>
+		<mn>2</mn>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mo>+</mo>
+	<mn>98.6</mn>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>g</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mo>&#x2212;<!-- − --></mo>
+	<mfrac>
+		<mn>9</mn>
+		<mn>5</mn>
+	</mfrac>
+	<mo stretchy="false">(</mo>
+	<mfrac>
+		<mrow>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>sin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>4</mn>
+	</mfrac>
+	<mo stretchy="false">)</mo>
+	<mspace linebreak="newline"/>
+	<msup>
+		<mi>g</mi>
+		<mo>&#x2032;</mo>
+	</msup>
+	<mo stretchy="false">(</mo>
+	<mi>x</mi>
+	<mo stretchy="false">)</mo>
+	<mo>=</mo>
+	<mo>&minus;<!-- − --></mo>
+	<mfrac>
+		<mrow>
+			<mn>9</mn>
+			<mi>&pi;<!-- π --></mi>
+			<msup>
+				<mi>cos</mi>
+				<mn>2</mn>
+			</msup>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+			<mi>sin</mi>
+			<mo>&#x2061;<!-- ⁡ --></mo>
+			<mo stretchy="false">(</mo>
+			<mfrac>
+				<mi>&pi;<!-- π --></mi>
+				<mn>12</mn>
+			</mfrac>
+			<mi>x</mi>
+			<mo stretchy="false">)</mo>
+		</mrow>
+		<mn>20</mn>
+	</mfrac>
+</math>
+</body>
+</html>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p031.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p031.kt b/Random_Work/src/projectEuler/programs/p031.kt
new file mode 100644
--- /dev/null	(date 1614951979890)
+++ b/Random_Work/src/projectEuler/programs/p031.kt	(date 1614951979890)
@@ -0,0 +1,30 @@
+package projectEuler.programs
+
+class p031 : EulerSolution() {
+	override fun run(): String {
+		// ways[i][j] is the number of ways to use any copies of
+		// the first i coin values to form an unordered sum of j
+		val ways = Array(COINS.size + 1) { IntArray(TOTAL + 1) }
+		ways[0][0] = 1
+		for (i in COINS.indices) {
+			val coin = COINS[i]
+			for (j in 0..TOTAL) ways[i + 1][j] = ways[i][j] + if (j >= coin) ways[i + 1][j - coin] else 0
+		}
+		return Integer.toString(ways[COINS.size][TOTAL])
+	}
+
+	companion object {
+		private const val TOTAL = 200
+
+		/*
+	 * We use the standard dynamic programming algorithm to solve the subset sum problem over integers.
+	 * The order of the coin values does not matter, but the values need to be unique.
+	 */
+		private val COINS = intArrayOf(1, 2, 5, 10, 20, 50, 100, 200)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p031().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p010.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p010.kt b/Random_Work/src/projectEuler/programs/p010.kt
new file mode 100644
--- /dev/null	(date 1614951977190)
+++ b/Random_Work/src/projectEuler/programs/p010.kt	(date 1614951977190)
@@ -0,0 +1,24 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimes
+import java.util.*
+
+class p010 : EulerSolution() {
+	override fun run(): String {
+		val sum = Arrays.stream(listPrimes(LIMIT - 1)).asLongStream().sum()
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		/*
+	 * Call the sieve of Eratosthenes and sum the primes found.
+	 * A conservative upper bound for the sum is 2000000^2, which fits in a Java long type.
+	 */
+		private const val LIMIT = 2000000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p010().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p068.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p068.kt b/Random_Work/src/projectEuler/programs/p068.kt
new file mode 100644
--- /dev/null	(date 1614951976206)
+++ b/Random_Work/src/projectEuler/programs/p068.kt	(date 1614951976206)
@@ -0,0 +1,33 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.nextPermutation
+import java.util.stream.IntStream
+
+class p068 : EulerSolution() {
+	override fun run(): String? {
+		val state = IntStream.range(0, 10).map { i: Int -> i + 1 }.toArray()
+		var max: String? = null
+		do {
+			val sum = state[0] + state[5] + state[6]
+			if (state[1] + state[6] + state[7] != sum || state[2] + state[7] + state[8] != sum || state[3] + state[8] + state[9] != sum || state[4] + state[9] + state[5] != sum) continue
+			var minOuterIndex = -1
+			var minOuter = Int.MAX_VALUE
+			for (i in 0..4) if (state[i] < minOuter) {
+				minOuterIndex = i
+				minOuter = state[i]
+			}
+			val s = StringBuilder()
+			for (i in 0..4) s.append(state[(minOuterIndex + i) % 5]).append(state[(minOuterIndex + i) % 5 + 5]).append(state[(minOuterIndex + i + 1) % 5 + 5])
+			if (s.length == 16) max = s.toString()
+		} while (nextPermutation(state))
+		assert(max != null)
+		return max
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p068().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p001.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p001.kt b/Random_Work/src/projectEuler/programs/p001.kt
new file mode 100644
--- /dev/null	(date 1614951976258)
+++ b/Random_Work/src/projectEuler/programs/p001.kt	(date 1614951976258)
@@ -0,0 +1,21 @@
+package projectEuler.programs
+
+import java.util.stream.IntStream
+
+class p001 : EulerSolution() {
+	/*
+	 * Computers are fast, so we can implement this solution directly without any clever math.
+	 * A conservative upper bound for the sum is 1000 * 1000, which fits in a Java int type.
+	 */
+	override fun run(): String {
+		val sum = IntStream.range(0, 1000).filter { i: Int -> i % 3 == 0 || i % 5 == 0 }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p001().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p087.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p087.kt b/Random_Work/src/projectEuler/programs/p087.kt
new file mode 100644
--- /dev/null	(date 1614951978046)
+++ b/Random_Work/src/projectEuler/programs/p087.kt	(date 1614951978046)
@@ -0,0 +1,36 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimes
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.util.*
+import java.util.stream.IntStream
+
+class p087 : EulerSolution() {
+	override fun run(): String {
+		val primes = listPrimes(sqrt(BigInteger.valueOf(LIMIT.toLong())).toInt())
+		var sums = HashSet<Int?>()
+		sums.add(0)
+		for (i in 2..4) {
+			val newSums = HashSet<Int?>()
+			for (p in primes) {
+				val q = IntStream.range(0, i).mapToLong { j: Int -> p.toLong() }.reduce(1) { a: Long, b: Long -> a * b }
+				// q = p^i
+				if (q > LIMIT) break
+				val r = q.toInt()
+				sums.stream().mapToInt { x: Int? -> x!! }.filter { x: Int -> x + r <= LIMIT }.mapToObj { x: Int -> x + r }.forEachOrdered { e: Int? -> newSums.add(e) }
+			}
+			sums = newSums
+		}
+		return Integer.toString(sums.size)
+	}
+
+	companion object {
+		private const val LIMIT = 50000000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p087().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p016.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p016.kt b/Random_Work/src/projectEuler/programs/p016.kt
new file mode 100644
--- /dev/null	(date 1614951978945)
+++ b/Random_Work/src/projectEuler/programs/p016.kt	(date 1614951978945)
@@ -0,0 +1,22 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p016 : EulerSolution() {
+	/*
+	 * We implement this solution in a straightforward way with help from BigInteger.
+	 */
+	override fun run(): String {
+		val temp = BigInteger.ONE.shiftLeft(1000).toString()
+		val sum = IntStream.range(0, temp.length).map { i: Int -> temp[i] - '0' }.sum()
+		return sum.toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p016().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p056.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p056.kt b/Random_Work/src/projectEuler/programs/p056.kt
new file mode 100644
--- /dev/null	(date 1614951979857)
+++ b/Random_Work/src/projectEuler/programs/p056.kt	(date 1614951979857)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p056 : EulerSolution() {
+	override fun run(): String {
+		var max = 0
+		for (a in 1..99) for (b in 1..99) {
+			val pow = BigInteger.valueOf(a.toLong()).pow(b)
+			max = Math.max(digitSum(pow), max)
+		}
+		return Integer.toString(max)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p056().run())
+		}
+
+		private fun digitSum(n: BigInteger): Int {
+			val sum: Int
+			val s = n.toString()
+			sum = IntStream.range(0, s.length).map { i: Int -> s[i] - '0' }.sum()
+			return sum
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p071.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p071.kt b/Random_Work/src/projectEuler/programs/p071.kt
new file mode 100644
--- /dev/null	(date 1614951977002)
+++ b/Random_Work/src/projectEuler/programs/p071.kt	(date 1614951977002)
@@ -0,0 +1,53 @@
+package projectEuler.programs
+
+class p071 : EulerSolution() {
+	override fun run(): String {
+		var maxN = 0
+		var maxD = 1
+		for (d in 1..LIMIT) {
+			var n = d * 3 / 7
+			if (d % 7 == 0) n--
+			if (n.toLong() * maxD > maxN.toLong() * d) { // n/d > maxN/maxD
+				maxN = n
+				maxD = d
+			}
+		}
+		return Integer.toString(maxN)
+	}
+
+	companion object {
+		private const val LIMIT = 1000000
+
+		/*
+	 * We consider each (integer) denominator d from 1 to 1000000 by brute force.
+	 * For a given d, what is the largest integer n such that n/d < 3/7?
+	 *
+	 * - If d is a multiple of 7, then the integer n' = (d / 7) * 3 satisfies n'/d = 3/7.
+	 * Hence we choose n = n' - 1 = (d / 7) * 3 - 1, so that n/d < 3/7.
+	 * Since (d / 7) * 3 is already an integer, it is equal to floor(d * 3 / 7),
+	 * which will unify with the next case. Thus n = floor(d * 3 / 7) - 1.
+	 * - Otherwise d is not a multiple of 7, so choosing n = floor(d * 3 / 7)
+	 * will automatically satisfy n/d < 3/7, and be the largest possible n
+	 * due to the definition of the floor function.
+	 *
+	 * When we choose n in this manner, it might not be coprime with d. In other words,
+	 * the simplified form of the fraction n/d might have a denominator smaller than d.
+	 *
+	 * Let's process denominators in ascending order. Each denominator generates a pair
+	 * of integers (n, d) that conceptually represents a fraction, without simplification.
+	 * Whenever the current value of n/d is strictly larger than the previously saved value,
+	 * we save this current value of (n, d).
+	 *
+	 * If we handle denominators in this way - starting from 1, counting up consecutively -
+	 * then it is guaranteed that our final saved pair (n, d) is in lowest terms. This is
+	 * because if (n, d) is not in lowest terms, then its reduced form (n', d') would have
+	 * been saved when the smaller denominator d' was processed, and because n/d is
+	 * not larger than n'/d' (they are equal), the saved value would not be overwritten.
+	 * Hence in this entire computation we can avoid explicitly simplifying any fraction at all.
+	 */
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p071().run())
+		}
+	}
+}
\ No newline at end of file
Index: Classwork/mobileApp/src/thread/ThreadTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Classwork/mobileApp/src/thread/ThreadTest.kt b/Classwork/mobileApp/src/thread/ThreadTest.kt
new file mode 100644
--- /dev/null	(date 1614741336987)
+++ b/Classwork/mobileApp/src/thread/ThreadTest.kt	(date 1614741336987)
@@ -0,0 +1,21 @@
+package thread
+
+object ThreadTest {
+	@JvmStatic
+	fun main(args: Array<String>) {
+		val thread = object : Thread("Thread 1") {
+			override fun run() = (0..10).forEach { println("$name $it") }
+		}
+		val thread1 = object : Thread("Thread 2") {
+			override fun run() = (0..10).forEach { println("$name $it") }
+		}
+		thread.start()
+		thread1.start()
+		try {
+			thread.join()
+		} catch (e: InterruptedException) {
+			e.printStackTrace()
+		}
+		(0..10).forEach { println("Main Thread $it") }
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p041.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p041.kt b/Random_Work/src/projectEuler/programs/p041.kt
new file mode 100644
--- /dev/null	(date 1614951976943)
+++ b/Random_Work/src/projectEuler/programs/p041.kt	(date 1614951976943)
@@ -0,0 +1,32 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.isPrime
+import projectEuler.programs.Library.nextPermutation
+import java.util.stream.IntStream
+
+class p041 : EulerSolution() {
+	override fun run(): String {
+		for (n in 9 downTo 1) {
+			val digits = IntStream.range(0, n).map { i: Int -> i + 1 }.toArray()
+			var result = -1
+			do if (isPrime(toInteger(digits))) result = toInteger(digits) while (nextPermutation(digits))
+			if (result != -1) return Integer.toString(result)
+		}
+		throw RuntimeException("Not found")
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p041().run())
+		}
+
+		@Contract(pure = true)
+		private fun toInteger(digits: IntArray): Int {
+			var result = 0
+			for (x in digits) result = result * 10 + x
+			return result
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p017.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p017.kt b/Random_Work/src/projectEuler/programs/p017.kt
new file mode 100644
--- /dev/null	(date 1614951979794)
+++ b/Random_Work/src/projectEuler/programs/p017.kt	(date 1614951979794)
@@ -0,0 +1,39 @@
+package projectEuler.programs
+
+import java.util.stream.IntStream
+
+class p017 : EulerSolution() {
+	/*
+	 * - For the numbers 0 to 19, we write the single word:
+	 * {zero, one, two, three, four, five, six, seven, eight, nine,
+	 * ten, eleven, twelve, thirteen, fourteen, fifteen, sixteen, seventeen, eighteen, nineteen}.
+	 * - For the numbers 20 to 99, we write the word for the tens place:
+	 * {twenty, thirty, forty, fifty, sixty, seventy, eighty, ninety}.
+	 * Subsequently if the last digit is not 0, then we write the word for the ones place (one to nine).
+	 * - For the numbers 100 to 999, we write the ones word for the hundreds place followed by "hundred":
+	 * {one hundred, two hundred, three hundred, ..., eight hundred, nine hundred}.
+	 * Subsequently if the last two digits are not 00, then we write the word "and"
+	 * followed by the phrase for the last two digits (from 01 to 99).
+	 * - For the numbers 1000 to 999999, we write the word for the three digits starting at the
+	 * thousands place and going leftward, followed by "thousand". Subsequently if the last three
+	 * digits are not 000, then we write the phrase for the last three digits (from 001 to 999).
+	 */
+	override fun run(): String? {
+		val sum = IntStream.rangeClosed(1, 1000).map { i: Int -> toEnglish(i).length }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		private val ONES = arrayOf("zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "ten", "eleven", "twelve", "thirteen", "fourteen", "fifteen", "sixteen", "seventeen", "eighteen", "nineteen")
+		private val TENS = arrayOf("", "", "twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety")
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p017().run())
+		}
+
+		private fun toEnglish(n: Int): String {
+			return if (0 <= n && n < 20) ONES[n] else if (20 <= n && n < 100) TENS[n / 10] + if (n % 10 != 0) ONES[n % 10] else "" else if (100 <= n && n < 1000) ONES[n / 100] + "hundred" + if (n % 100 != 0) "and" + toEnglish(n % 100) else "" else if (1000 <= n && n < 1000000) toEnglish(n / 1000) + "thousand" + (if (n % 1000 != 0) toEnglish(n % 1000) else "") else throw IllegalArgumentException()
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p002.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p002.kt b/Random_Work/src/projectEuler/programs/p002.kt
new file mode 100644
--- /dev/null	(date 1614951980042)
+++ b/Random_Work/src/projectEuler/programs/p002.kt	(date 1614951980042)
@@ -0,0 +1,28 @@
+package projectEuler.programs
+
+class p002 : EulerSolution() {
+	/*
+	 * Computers are fast, so we can implement this solution directly without any clever math.
+	 * Because the Fibonacci sequence grows exponentially by a factor of 1.618, the sum is
+	 * bounded above by a small multiple of 4 million. Thus the answer fits in a Java int type.
+	 */
+	override fun run(): String {
+		var sum = 0
+		var x = 1 // Represents the current Fibonacci number being processed
+		var y = 2 // Represents the next Fibonacci number in the sequence
+		while (x <= 4000000) {
+			if (x % 2 == 0) sum += x
+			val z = x + y
+			x = y
+			y = z
+		}
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p002().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p040.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p040.kt b/Random_Work/src/projectEuler/programs/p040.kt
new file mode 100644
--- /dev/null	(date 1614951976587)
+++ b/Random_Work/src/projectEuler/programs/p040.kt	(date 1614951976587)
@@ -0,0 +1,20 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.pow
+import java.util.stream.IntStream
+
+class p040 : EulerSolution() {
+	override fun run(): String {
+		val sb = StringBuilder()
+		IntStream.range(1, 1000000).forEachOrdered { i: Int -> sb.append(i) }
+		val prod = IntStream.rangeClosed(0, 6).map { i: Int -> sb[pow(10, i) - 1] - '0' }.reduce(1) { a: Int, b: Int -> a * b }
+		return Integer.toString(prod)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p040().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p055.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p055.kt b/Random_Work/src/projectEuler/programs/p055.kt
new file mode 100644
--- /dev/null	(date 1614951978357)
+++ b/Random_Work/src/projectEuler/programs/p055.kt	(date 1614951978357)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPalindrome
+import projectEuler.programs.Library.reverse
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p055 : EulerSolution() {
+	override fun run(): String {
+		val count = IntStream.range(0, 10000).filter { n: Int -> isLychrel(n) }.count().toInt()
+		return Integer.toString(count)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p055().run())
+		}
+
+		private fun isLychrel(n: Int): Boolean {
+			var temp = BigInteger.valueOf(n.toLong())
+			for (i in 0..48) {
+				temp = temp.add(BigInteger(reverse(temp.toString())))
+				if (isPalindrome(temp.toString().toInt())) return false
+			}
+			return true
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p072.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p072.kt b/Random_Work/src/projectEuler/programs/p072.kt
new file mode 100644
--- /dev/null	(date 1614951978668)
+++ b/Random_Work/src/projectEuler/programs/p072.kt	(date 1614951978668)
@@ -0,0 +1,22 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listTotients
+import projectEuler.programs.Library.pow
+import java.util.*
+
+class p072 : EulerSolution() {
+	override fun run(): String {
+		val totients = listTotients(LIMIT)
+		val sum = Arrays.stream(totients, 2, totients.size).sum().toLong()
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 6)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p072().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p086.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p086.kt b/Random_Work/src/projectEuler/programs/p086.kt
new file mode 100644
--- /dev/null	(date 1614951976182)
+++ b/Random_Work/src/projectEuler/programs/p086.kt	(date 1614951976182)
@@ -0,0 +1,87 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.gcd
+import java.util.*
+
+class p086 : EulerSolution() {
+	// solutions.get(k) is the set of all solutions where the largest side has length k.
+	// A solution is a triple (x, y, z) such that 0 < x <= y <= z, and in the rectangular prism with dimensions x * y * z,
+	// the shortest surface path from one vertex to the opposite vertex has an integral length.
+	private val solutions = ArrayList<MutableSet<ArrayList<Int>>>()
+
+	// cumulativeSolutions.get(m) = solutions.get(0).size() + solutions.get(1).size() + ... + solutions.get(m).size().
+	private val cumulativeSolutions = ArrayList<Int>()
+	override fun run(): String {
+		cumulativeSolutions.add(0)
+		var limit = 1
+		while (true) {
+			// Extend the solutions list with blank sets
+			while (solutions.size < limit) solutions.add(HashSet())
+			generateSolutions(limit)
+			// Compute the number of cumulative solutions up to and including a certain maximum size
+			for (i in cumulativeSolutions.size until limit) {
+				val sum = cumulativeSolutions[i - 1] + solutions[i].size
+				cumulativeSolutions.add(sum)
+				if (sum > 1000000) return Integer.toString(i)
+			}
+			// Raise the limit and keep searching
+			limit *= 2
+		}
+	}
+
+	// Generates all solutions where the largest side has length less than 'limit'.
+	private fun generateSolutions(limit: Int) {
+		/*
+		 * Pythagorean triples theorem:
+		 * Every primitive Pythagorean triple with a odd and b even can be expressed as
+		 * a = st, b = (s^2-t^2)/2, c = (s^2+t^2)/2, where s > t > 0 are coprime odd integers.
+		 * Now generate all Pythagorean triples, including non-primitive ones.
+		 */
+		var s = 3
+		outer@ while (true) {
+			var t = s - 2
+			while (t > 0) {
+				if (s * s / 2 >= limit * 3) break@outer
+				if (gcd(s, t) == 1) {
+					var k = 1
+					while (true) {
+						val a = s * t * k
+						val b = (s * s - t * t shr 1) * k
+						val c = (s * s + t * t shr 1) * k
+						if (a >= limit && b >= limit) break
+						findSplits(a, b, c, limit)
+						findSplits(b, a, c, limit)
+						k++
+					}
+				}
+				t -= 2
+			}
+			s += 2
+		}
+	}
+
+	// Assumes that a^2 + b^2 = c^2.
+	private fun findSplits(a: Int, b: Int, c: Int, limit: Int) {
+		for (x in 1 until a) {
+			val y = a - x
+			if (y < x) break
+			if (Math.min(Math.min((x + y) * (x + y) + b * b, (y + b) * (y + b) + x * x), (b + x) * (b + x) + y * y) == c * c) {
+				val max = Math.max(Math.max(x, y), b)
+				if (max < limit) {
+					// Add canonical solution
+					val soln = ArrayList<Int>()
+					Collections.addAll(soln, x, y, b)
+					Collections.sort(soln)
+					solutions[max].add(soln)
+				}
+			}
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p086().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p043.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p043.kt b/Random_Work/src/projectEuler/programs/p043.kt
new file mode 100644
--- /dev/null	(date 1614951979012)
+++ b/Random_Work/src/projectEuler/programs/p043.kt	(date 1614951979012)
@@ -0,0 +1,32 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.nextPermutation
+
+class p043 : EulerSolution() {
+	override fun run(): String {
+		var sum: Long = 0
+		val digits = intArrayOf(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)
+		outer@ do {
+			for (i in DIVISIBILITY_TESTS.indices) if (toInteger(digits, i + 1, 3) % DIVISIBILITY_TESTS[i] != 0L) continue@outer
+			sum += toInteger(digits, 0, digits.size)
+		} while (nextPermutation(digits))
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		private val DIVISIBILITY_TESTS = intArrayOf(2, 3, 5, 7, 11, 13, 17) // First 7 primes
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p043().run())
+		}
+
+		@Contract(pure = true)
+		private fun toInteger(digits: IntArray, off: Int, len: Int): Long {
+			var result: Long = 0
+			for (i in off until off + len) result = result * 10 + digits[i]
+			return result
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p015.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p015.kt b/Random_Work/src/projectEuler/programs/p015.kt
new file mode 100644
--- /dev/null	(date 1614951979719)
+++ b/Random_Work/src/projectEuler/programs/p015.kt	(date 1614951979719)
@@ -0,0 +1,21 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.binomial
+
+class p015 : EulerSolution() {
+	/*
+	 * This is a classic combinatorics problem. To get from the top left corner to the bottom right corner of an N*N grid,
+	 * it involves making exactly N moves right and N moves down in some order. Because each individual down or right move
+	 * is indistinguishable, there are exactly 2N choose N (binomial coefficient) ways of arranging these moves.
+	 */
+	override fun run(): String {
+		return binomial(40, 20).toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p015().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p029.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p029.kt b/Random_Work/src/projectEuler/programs/p029.kt
new file mode 100644
--- /dev/null	(date 1614951979621)
+++ b/Random_Work/src/projectEuler/programs/p029.kt	(date 1614951979621)
@@ -0,0 +1,23 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+import java.util.*
+
+class p029 : EulerSolution() {
+	/*
+	 * We generate all the possible powers in the given range, put each value
+	 * into a set, and let the set count the number of unique values present.
+	 */
+	override fun run(): String? {
+		val generated = HashSet<BigInteger>()
+		for (a in 2..100) for (b in 2..100) generated.add(BigInteger.valueOf(a.toLong()).pow(b))
+		return Integer.toString(generated.size)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p029().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p058.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p058.kt b/Random_Work/src/projectEuler/programs/p058.kt
new file mode 100644
--- /dev/null	(date 1614951979379)
+++ b/Random_Work/src/projectEuler/programs/p058.kt	(date 1614951979379)
@@ -0,0 +1,33 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPrime
+
+class p058 : EulerSolution() {
+	/*
+	 * From the diagram, let's observe the four corners of an n * n square (where n is odd).
+	 * It's not hard to convince yourself that:
+	 * - The bottom right corner always has the value n^2.
+	 * Working clockwise (backwards):
+	 * - The bottom left corner has the value n^2 - (n - 1).
+	 * - The top left corner has the value n^2 - 2(n - 1).
+	 * - The top right has the value n^2 - 3(n - 1).
+	 *
+	 * Furthermore, the number of elements on the diagonal is 2n - 1.
+	 */
+	override fun run(): String {
+		var numPrimes = 0
+		var n = 1
+		while (true) {
+			for (i in 0..3) if (isPrime(n * n - i * (n - 1))) numPrimes++
+			if (n > 1 && numPrimes * 10 < n * 2 - 1) return Integer.toString(n)
+			n += 2
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p058().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p014.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p014.kt b/Random_Work/src/projectEuler/programs/p014.kt
new file mode 100644
--- /dev/null	(date 1614951978604)
+++ b/Random_Work/src/projectEuler/programs/p014.kt	(date 1614951978604)
@@ -0,0 +1,54 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.pow
+import java.math.BigInteger
+
+class p014 : EulerSolution() {
+	// Memoization
+	private val collatzChainLength = IntArray(CACHE_SIZE.toInt())
+	override fun run(): String {
+		var maxArg = -1
+		var maxChain = 0
+		for (i in 1 until LIMIT) {
+			val chainLen = collatzChainLength(BigInteger.valueOf(i.toLong()))
+			if (chainLen > maxChain) {
+				maxArg = i
+				maxChain = chainLen
+			}
+		}
+		return Integer.toString(maxArg)
+	}
+
+	// Returns the Collatz chain length of the given integer with automatic caching.
+	private fun collatzChainLength(n: BigInteger): Int {
+		assert(n.signum() >= 0)
+		if (n.compareTo(CACHE_SIZE) >= 0) return collatzChainLengthDirect(n) // Caching not available
+		val index = n.toInt() // Index in the cache
+		if (collatzChainLength[index] == 0) collatzChainLength[index] = collatzChainLengthDirect(n)
+		return collatzChainLength[index]
+	}
+
+	// Returns the Collatz chain length of the given integer, with the
+	// first step uncached but the remaining steps using automatic caching.
+	private fun collatzChainLengthDirect(n: BigInteger): Int {
+		// Else n is odd
+		return if (n == BigInteger.ONE) 1 // Base case
+		else collatzChainLength(if (!n.testBit(0)) n.shiftRight(1) else n.multiply(BigInteger.valueOf(3)).add(BigInteger.ONE)) + 1 // If n is even
+	}
+
+	companion object {
+		/*
+	 * We compute the Collatz chain length for every integer in the range according to the iteration rule.
+	 * Also, we cache the Collatz value for small integer arguments to speed up the computation.
+	 */
+		private val LIMIT = pow(10, 6)
+
+		// Can be set to any non-negative number, but there are diminishing returns as you go larger
+		private val CACHE_SIZE = BigInteger.valueOf(LIMIT.toLong())
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p014().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p057.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p057.kt b/Random_Work/src/projectEuler/programs/p057.kt
new file mode 100644
--- /dev/null	(date 1614951977888)
+++ b/Random_Work/src/projectEuler/programs/p057.kt	(date 1614951977888)
@@ -0,0 +1,28 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p057 : EulerSolution() {
+	override fun run(): String {
+		var n = BigInteger.ZERO
+		var d = BigInteger.ONE
+		var count = 0
+		for (i in 0 until LIMIT) {
+			val temp = d.multiply(BigInteger.valueOf(2)).add(n)
+			n = d
+			d = temp
+			// Now n/d is the i'th (0-based) continued fraction approximation of sqrt(2) - 1
+			if (n.add(d).toString().length > d.toString().length) count++
+		}
+		return Integer.toString(count)
+	}
+
+	companion object {
+		private const val LIMIT = 1000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p057().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p070.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p070.kt b/Random_Work/src/projectEuler/programs/p070.kt
new file mode 100644
--- /dev/null	(date 1614951977146)
+++ b/Random_Work/src/projectEuler/programs/p070.kt	(date 1614951977146)
@@ -0,0 +1,39 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listTotients
+import projectEuler.programs.Library.pow
+import java.util.*
+
+class p070 : EulerSolution() {
+	override fun run(): String {
+		var minNumer = 1 // Initially infinity
+		var minDenom = 0
+		val totients = listTotients(LIMIT - 1)
+		for (n in 2 until totients.size) {
+			val tot = totients[n]
+			if (n.toLong() * minDenom < minNumer.toLong() * tot && hasSameDigits(n, tot)) {
+				minNumer = n
+				minDenom = tot
+			}
+		}
+		assert(minDenom != 0) { "Not found" }
+		return Integer.toString(minNumer)
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 7)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p070().run())
+		}
+
+		private fun hasSameDigits(x: Int, y: Int): Boolean {
+			val xdigits = Integer.toString(x).toCharArray()
+			val ydigits = Integer.toString(y).toCharArray()
+			Arrays.sort(xdigits)
+			Arrays.sort(ydigits)
+			return Arrays.equals(xdigits, ydigits)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p085.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p085.kt b/Random_Work/src/projectEuler/programs/p085.kt
new file mode 100644
--- /dev/null	(date 1614951976029)
+++ b/Random_Work/src/projectEuler/programs/p085.kt	(date 1614951976029)
@@ -0,0 +1,35 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+
+class p085 : EulerSolution() {
+	override fun run(): String {
+		var bestDiff = Int.MAX_VALUE
+		var bestArea = -1
+		val sqrt = sqrt(BigInteger.valueOf(TARGET.toLong())).toInt()
+		for (w in 1..sqrt) for (h in 1..sqrt) {
+			val diff = Math.abs(numberOfRectangles(w, h) - TARGET)
+			if (diff < bestDiff) {
+				bestDiff = diff
+				bestArea = w * h
+			}
+		}
+		return Integer.toString(bestArea)
+	}
+
+	companion object {
+		private const val TARGET = 2000000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p085().run())
+		}
+
+		@Contract(pure = true)
+		private fun numberOfRectangles(m: Int, n: Int): Int {
+			return (m + 1) * m * (n + 1) * n shr 2 // A bit more than m^2 n^2 / 4
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p042.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p042.kt b/Random_Work/src/projectEuler/programs/p042.kt
new file mode 100644
--- /dev/null	(date 1614951976420)
+++ b/Random_Work/src/projectEuler/programs/p042.kt	(date 1614951976420)
@@ -0,0 +1,41 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.*
+
+class p042 : EulerSolution() {
+	override fun run(): String {
+		val count = Arrays.stream(WORDS).filter { word: String -> isTriangularNumber(wordValue(word)) }.count().toInt()
+		return Integer.toString(count)
+	}
+
+	companion object {
+		private val WORDS = arrayOf("A", "ABILITY", "ABLE", "ABOUT", "ABOVE", "ABSENCE", "ABSOLUTELY", "ACADEMIC", "ACCEPT", "ACCESS", "ACCIDENT", "ACCOMPANY", "ACCORDING", "ACCOUNT", "ACHIEVE", "ACHIEVEMENT", "ACID", "ACQUIRE", "ACROSS", "ACT", "ACTION", "ACTIVE", "ACTIVITY", "ACTUAL", "ACTUALLY", "ADD", "ADDITION", "ADDITIONAL", "ADDRESS", "ADMINISTRATION", "ADMIT", "ADOPT", "ADULT", "ADVANCE", "ADVANTAGE", "ADVICE", "ADVISE", "AFFAIR", "AFFECT", "AFFORD", "AFRAID", "AFTER", "AFTERNOON", "AFTERWARDS", "AGAIN", "AGAINST", "AGE", "AGENCY", "AGENT", "AGO", "AGREE", "AGREEMENT", "AHEAD", "AID", "AIM", "AIR", "AIRCRAFT", "ALL", "ALLOW", "ALMOST", "ALONE", "ALONG", "ALREADY", "ALRIGHT", "ALSO", "ALTERNATIVE", "ALTHOUGH", "ALWAYS", "AMONG", "AMONGST", "AMOUNT", "AN", "ANALYSIS", "ANCIENT", "AND", "ANIMAL", "ANNOUNCE", "ANNUAL", "ANOTHER", "ANSWER", "ANY", "ANYBODY", "ANYONE", "ANYTHING", "ANYWAY", "APART", "APPARENT", "APPARENTLY", "APPEAL", "APPEAR", "APPEARANCE", "APPLICATION", "APPLY", "APPOINT", "APPOINTMENT", "APPROACH", "APPROPRIATE", "APPROVE", "AREA", "ARGUE", "ARGUMENT", "ARISE", "ARM", "ARMY", "AROUND", "ARRANGE", "ARRANGEMENT", "ARRIVE", "ART", "ARTICLE", "ARTIST", "AS", "ASK", "ASPECT", "ASSEMBLY", "ASSESS", "ASSESSMENT", "ASSET", "ASSOCIATE", "ASSOCIATION", "ASSUME", "ASSUMPTION", "AT", "ATMOSPHERE", "ATTACH", "ATTACK", "ATTEMPT", "ATTEND", "ATTENTION", "ATTITUDE", "ATTRACT", "ATTRACTIVE", "AUDIENCE", "AUTHOR", "AUTHORITY", "AVAILABLE", "AVERAGE", "AVOID", "AWARD", "AWARE", "AWAY", "AYE", "BABY", "BACK", "BACKGROUND", "BAD", "BAG", "BALANCE", "BALL", "BAND", "BANK", "BAR", "BASE", "BASIC", "BASIS", "BATTLE", "BE", "BEAR", "BEAT", "BEAUTIFUL", "BECAUSE", "BECOME", "BED", "BEDROOM", "BEFORE", "BEGIN", "BEGINNING", "BEHAVIOUR", "BEHIND", "BELIEF", "BELIEVE", "BELONG", "BELOW", "BENEATH", "BENEFIT", "BESIDE", "BEST", "BETTER", "BETWEEN", "BEYOND", "BIG", "BILL", "BIND", "BIRD", "BIRTH", "BIT", "BLACK", "BLOCK", "BLOOD", "BLOODY", "BLOW", "BLUE", "BOARD", "BOAT", "BODY", "BONE", "BOOK", "BORDER", "BOTH", "BOTTLE", "BOTTOM", "BOX", "BOY", "BRAIN", "BRANCH", "BREAK", "BREATH", "BRIDGE", "BRIEF", "BRIGHT", "BRING", "BROAD", "BROTHER", "BUDGET", "BUILD", "BUILDING", "BURN", "BUS", "BUSINESS", "BUSY", "BUT", "BUY", "BY", "CABINET", "CALL", "CAMPAIGN", "CAN", "CANDIDATE", "CAPABLE", "CAPACITY", "CAPITAL", "CAR", "CARD", "CARE", "CAREER", "CAREFUL", "CAREFULLY", "CARRY", "CASE", "CASH", "CAT", "CATCH", "CATEGORY", "CAUSE", "CELL", "CENTRAL", "CENTRE", "CENTURY", "CERTAIN", "CERTAINLY", "CHAIN", "CHAIR", "CHAIRMAN", "CHALLENGE", "CHANCE", "CHANGE", "CHANNEL", "CHAPTER", "CHARACTER", "CHARACTERISTIC", "CHARGE", "CHEAP", "CHECK", "CHEMICAL", "CHIEF", "CHILD", "CHOICE", "CHOOSE", "CHURCH", "CIRCLE", "CIRCUMSTANCE", "CITIZEN", "CITY", "CIVIL", "CLAIM", "CLASS", "CLEAN", "CLEAR", "CLEARLY", "CLIENT", "CLIMB", "CLOSE", "CLOSELY", "CLOTHES", "CLUB", "COAL", "CODE", "COFFEE", "COLD", "COLLEAGUE", "COLLECT", "COLLECTION", "COLLEGE", "COLOUR", "COMBINATION", "COMBINE", "COME", "COMMENT", "COMMERCIAL", "COMMISSION", "COMMIT", "COMMITMENT", "COMMITTEE", "COMMON", "COMMUNICATION", "COMMUNITY", "COMPANY", "COMPARE", "COMPARISON", "COMPETITION", "COMPLETE", "COMPLETELY", "COMPLEX", "COMPONENT", "COMPUTER", "CONCENTRATE", "CONCENTRATION", "CONCEPT", "CONCERN", "CONCERNED", "CONCLUDE", "CONCLUSION", "CONDITION", "CONDUCT", "CONFERENCE", "CONFIDENCE", "CONFIRM", "CONFLICT", "CONGRESS", "CONNECT", "CONNECTION", "CONSEQUENCE", "CONSERVATIVE", "CONSIDER", "CONSIDERABLE", "CONSIDERATION", "CONSIST", "CONSTANT", "CONSTRUCTION", "CONSUMER", "CONTACT", "CONTAIN", "CONTENT", "CONTEXT", "CONTINUE", "CONTRACT", "CONTRAST", "CONTRIBUTE", "CONTRIBUTION", "CONTROL", "CONVENTION", "CONVERSATION", "COPY", "CORNER", "CORPORATE", "CORRECT", "COS", "COST", "COULD", "COUNCIL", "COUNT", "COUNTRY", "COUNTY", "COUPLE", "COURSE", "COURT", "COVER", "CREATE", "CREATION", "CREDIT", "CRIME", "CRIMINAL", "CRISIS", "CRITERION", "CRITICAL", "CRITICISM", "CROSS", "CROWD", "CRY", "CULTURAL", "CULTURE", "CUP", "CURRENT", "CURRENTLY", "CURRICULUM", "CUSTOMER", "CUT", "DAMAGE", "DANGER", "DANGEROUS", "DARK", "DATA", "DATE", "DAUGHTER", "DAY", "DEAD", "DEAL", "DEATH", "DEBATE", "DEBT", "DECADE", "DECIDE", "DECISION", "DECLARE", "DEEP", "DEFENCE", "DEFENDANT", "DEFINE", "DEFINITION", "DEGREE", "DELIVER", "DEMAND", "DEMOCRATIC", "DEMONSTRATE", "DENY", "DEPARTMENT", "DEPEND", "DEPUTY", "DERIVE", "DESCRIBE", "DESCRIPTION", "DESIGN", "DESIRE", "DESK", "DESPITE", "DESTROY", "DETAIL", "DETAILED", "DETERMINE", "DEVELOP", "DEVELOPMENT", "DEVICE", "DIE", "DIFFERENCE", "DIFFERENT", "DIFFICULT", "DIFFICULTY", "DINNER", "DIRECT", "DIRECTION", "DIRECTLY", "DIRECTOR", "DISAPPEAR", "DISCIPLINE", "DISCOVER", "DISCUSS", "DISCUSSION", "DISEASE", "DISPLAY", "DISTANCE", "DISTINCTION", "DISTRIBUTION", "DISTRICT", "DIVIDE", "DIVISION", "DO", "DOCTOR", "DOCUMENT", "DOG", "DOMESTIC", "DOOR", "DOUBLE", "DOUBT", "DOWN", "DRAW", "DRAWING", "DREAM", "DRESS", "DRINK", "DRIVE", "DRIVER", "DROP", "DRUG", "DRY", "DUE", "DURING", "DUTY", "EACH", "EAR", "EARLY", "EARN", "EARTH", "EASILY", "EAST", "EASY", "EAT", "ECONOMIC", "ECONOMY", "EDGE", "EDITOR", "EDUCATION", "EDUCATIONAL", "EFFECT", "EFFECTIVE", "EFFECTIVELY", "EFFORT", "EGG", "EITHER", "ELDERLY", "ELECTION", "ELEMENT", "ELSE", "ELSEWHERE", "EMERGE", "EMPHASIS", "EMPLOY", "EMPLOYEE", "EMPLOYER", "EMPLOYMENT", "EMPTY", "ENABLE", "ENCOURAGE", "END", "ENEMY", "ENERGY", "ENGINE", "ENGINEERING", "ENJOY", "ENOUGH", "ENSURE", "ENTER", "ENTERPRISE", "ENTIRE", "ENTIRELY", "ENTITLE", "ENTRY", "ENVIRONMENT", "ENVIRONMENTAL", "EQUAL", "EQUALLY", "EQUIPMENT", "ERROR", "ESCAPE", "ESPECIALLY", "ESSENTIAL", "ESTABLISH", "ESTABLISHMENT", "ESTATE", "ESTIMATE", "EVEN", "EVENING", "EVENT", "EVENTUALLY", "EVER", "EVERY", "EVERYBODY", "EVERYONE", "EVERYTHING", "EVIDENCE", "EXACTLY", "EXAMINATION", "EXAMINE", "EXAMPLE", "EXCELLENT", "EXCEPT", "EXCHANGE", "EXECUTIVE", "EXERCISE", "EXHIBITION", "EXIST", "EXISTENCE", "EXISTING", "EXPECT", "EXPECTATION", "EXPENDITURE", "EXPENSE", "EXPENSIVE", "EXPERIENCE", "EXPERIMENT", "EXPERT", "EXPLAIN", "EXPLANATION", "EXPLORE", "EXPRESS", "EXPRESSION", "EXTEND", "EXTENT", "EXTERNAL", "EXTRA", "EXTREMELY", "EYE", "FACE", "FACILITY", "FACT", "FACTOR", "FACTORY", "FAIL", "FAILURE", "FAIR", "FAIRLY", "FAITH", "FALL", "FAMILIAR", "FAMILY", "FAMOUS", "FAR", "FARM", "FARMER", "FASHION", "FAST", "FATHER", "FAVOUR", "FEAR", "FEATURE", "FEE", "FEEL", "FEELING", "FEMALE", "FEW", "FIELD", "FIGHT", "FIGURE", "FILE", "FILL", "FILM", "FINAL", "FINALLY", "FINANCE", "FINANCIAL", "FIND", "FINDING", "FINE", "FINGER", "FINISH", "FIRE", "FIRM", "FIRST", "FISH", "FIT", "FIX", "FLAT", "FLIGHT", "FLOOR", "FLOW", "FLOWER", "FLY", "FOCUS", "FOLLOW", "FOLLOWING", "FOOD", "FOOT", "FOOTBALL", "FOR", "FORCE", "FOREIGN", "FOREST", "FORGET", "FORM", "FORMAL", "FORMER", "FORWARD", "FOUNDATION", "FREE", "FREEDOM", "FREQUENTLY", "FRESH", "FRIEND", "FROM", "FRONT", "FRUIT", "FUEL", "FULL", "FULLY", "FUNCTION", "FUND", "FUNNY", "FURTHER", "FUTURE", "GAIN", "GAME", "GARDEN", "GAS", "GATE", "GATHER", "GENERAL", "GENERALLY", "GENERATE", "GENERATION", "GENTLEMAN", "GET", "GIRL", "GIVE", "GLASS", "GO", "GOAL", "GOD", "GOLD", "GOOD", "GOVERNMENT", "GRANT", "GREAT", "GREEN", "GREY", "GROUND", "GROUP", "GROW", "GROWING", "GROWTH", "GUEST", "GUIDE", "GUN", "HAIR", "HALF", "HALL", "HAND", "HANDLE", "HANG", "HAPPEN", "HAPPY", "HARD", "HARDLY", "HATE", "HAVE", "HE", "HEAD", "HEALTH", "HEAR", "HEART", "HEAT", "HEAVY", "HELL", "HELP", "HENCE", "HER", "HERE", "HERSELF", "HIDE", "HIGH", "HIGHLY", "HILL", "HIM", "HIMSELF", "HIS", "HISTORICAL", "HISTORY", "HIT", "HOLD", "HOLE", "HOLIDAY", "HOME", "HOPE", "HORSE", "HOSPITAL", "HOT", "HOTEL", "HOUR", "HOUSE", "HOUSEHOLD", "HOUSING", "HOW", "HOWEVER", "HUGE", "HUMAN", "HURT", "HUSBAND", "I", "IDEA", "IDENTIFY", "IF", "IGNORE", "ILLUSTRATE", "IMAGE", "IMAGINE", "IMMEDIATE", "IMMEDIATELY", "IMPACT", "IMPLICATION", "IMPLY", "IMPORTANCE", "IMPORTANT", "IMPOSE", "IMPOSSIBLE", "IMPRESSION", "IMPROVE", "IMPROVEMENT", "IN", "INCIDENT", "INCLUDE", "INCLUDING", "INCOME", "INCREASE", "INCREASED", "INCREASINGLY", "INDEED", "INDEPENDENT", "INDEX", "INDICATE", "INDIVIDUAL", "INDUSTRIAL", "INDUSTRY", "INFLUENCE", "INFORM", "INFORMATION", "INITIAL", "INITIATIVE", "INJURY", "INSIDE", "INSIST", "INSTANCE", "INSTEAD", "INSTITUTE", "INSTITUTION", "INSTRUCTION", "INSTRUMENT", "INSURANCE", "INTEND", "INTENTION", "INTEREST", "INTERESTED", "INTERESTING", "INTERNAL", "INTERNATIONAL", "INTERPRETATION", "INTERVIEW", "INTO", "INTRODUCE", "INTRODUCTION", "INVESTIGATE", "INVESTIGATION", "INVESTMENT", "INVITE", "INVOLVE", "IRON", "IS", "ISLAND", "ISSUE", "IT", "ITEM", "ITS", "ITSELF", "JOB", "JOIN", "JOINT", "JOURNEY", "JUDGE", "JUMP", "JUST", "JUSTICE", "KEEP", "KEY", "KID", "KILL", "KIND", "KING", "KITCHEN", "KNEE", "KNOW", "KNOWLEDGE", "LABOUR", "LACK", "LADY", "LAND", "LANGUAGE", "LARGE", "LARGELY", "LAST", "LATE", "LATER", "LATTER", "LAUGH", "LAUNCH", "LAW", "LAWYER", "LAY", "LEAD", "LEADER", "LEADERSHIP", "LEADING", "LEAF", "LEAGUE", "LEAN", "LEARN", "LEAST", "LEAVE", "LEFT", "LEG", "LEGAL", "LEGISLATION", "LENGTH", "LESS", "LET", "LETTER", "LEVEL", "LIABILITY", "LIBERAL", "LIBRARY", "LIE", "LIFE", "LIFT", "LIGHT", "LIKE", "LIKELY", "LIMIT", "LIMITED", "LINE", "LINK", "LIP", "LIST", "LISTEN", "LITERATURE", "LITTLE", "LIVE", "LIVING", "LOAN", "LOCAL", "LOCATION", "LONG", "LOOK", "LORD", "LOSE", "LOSS", "LOT", "LOVE", "LOVELY", "LOW", "LUNCH", "MACHINE", "MAGAZINE", "MAIN", "MAINLY", "MAINTAIN", "MAJOR", "MAJORITY", "MAKE", "MALE", "MAN", "MANAGE", "MANAGEMENT", "MANAGER", "MANNER", "MANY", "MAP", "MARK", "MARKET", "MARRIAGE", "MARRIED", "MARRY", "MASS", "MASTER", "MATCH", "MATERIAL", "MATTER", "MAY", "MAYBE", "ME", "MEAL", "MEAN", "MEANING", "MEANS", "MEANWHILE", "MEASURE", "MECHANISM", "MEDIA", "MEDICAL", "MEET", "MEETING", "MEMBER", "MEMBERSHIP", "MEMORY", "MENTAL", "MENTION", "MERELY", "MESSAGE", "METAL", "METHOD", "MIDDLE", "MIGHT", "MILE", "MILITARY", "MILK", "MIND", "MINE", "MINISTER", "MINISTRY", "MINUTE", "MISS", "MISTAKE", "MODEL", "MODERN", "MODULE", "MOMENT", "MONEY", "MONTH", "MORE", "MORNING", "MOST", "MOTHER", "MOTION", "MOTOR", "MOUNTAIN", "MOUTH", "MOVE", "MOVEMENT", "MUCH", "MURDER", "MUSEUM", "MUSIC", "MUST", "MY", "MYSELF", "NAME", "NARROW", "NATION", "NATIONAL", "NATURAL", "NATURE", "NEAR", "NEARLY", "NECESSARILY", "NECESSARY", "NECK", "NEED", "NEGOTIATION", "NEIGHBOUR", "NEITHER", "NETWORK", "NEVER", "NEVERTHELESS", "NEW", "NEWS", "NEWSPAPER", "NEXT", "NICE", "NIGHT", "NO", "NOBODY", "NOD", "NOISE", "NONE", "NOR", "NORMAL", "NORMALLY", "NORTH", "NORTHERN", "NOSE", "NOT", "NOTE", "NOTHING", "NOTICE", "NOTION", "NOW", "NUCLEAR", "NUMBER", "NURSE", "OBJECT", "OBJECTIVE", "OBSERVATION", "OBSERVE", "OBTAIN", "OBVIOUS", "OBVIOUSLY", "OCCASION", "OCCUR", "ODD", "OF", "OFF", "OFFENCE", "OFFER", "OFFICE", "OFFICER", "OFFICIAL", "OFTEN", "OIL", "OKAY", "OLD", "ON", "ONCE", "ONE", "ONLY", "ONTO", "OPEN", "OPERATE", "OPERATION", "OPINION", "OPPORTUNITY", "OPPOSITION", "OPTION", "OR", "ORDER", "ORDINARY", "ORGANISATION", "ORGANISE", "ORGANIZATION", "ORIGIN", "ORIGINAL", "OTHER", "OTHERWISE", "OUGHT", "OUR", "OURSELVES", "OUT", "OUTCOME", "OUTPUT", "OUTSIDE", "OVER", "OVERALL", "OWN", "OWNER", "PACKAGE", "PAGE", "PAIN", "PAINT", "PAINTING", "PAIR", "PANEL", "PAPER", "PARENT", "PARK", "PARLIAMENT", "PART", "PARTICULAR", "PARTICULARLY", "PARTLY", "PARTNER", "PARTY", "PASS", "PASSAGE", "PAST", "PATH", "PATIENT", "PATTERN", "PAY", "PAYMENT", "PEACE", "PENSION", "PEOPLE", "PER", "PERCENT", "PERFECT", "PERFORM", "PERFORMANCE", "PERHAPS", "PERIOD", "PERMANENT", "PERSON", "PERSONAL", "PERSUADE", "PHASE", "PHONE", "PHOTOGRAPH", "PHYSICAL", "PICK", "PICTURE", "PIECE", "PLACE", "PLAN", "PLANNING", "PLANT", "PLASTIC", "PLATE", "PLAY", "PLAYER", "PLEASE", "PLEASURE", "PLENTY", "PLUS", "POCKET", "POINT", "POLICE", "POLICY", "POLITICAL", "POLITICS", "POOL", "POOR", "POPULAR", "POPULATION", "POSITION", "POSITIVE", "POSSIBILITY", "POSSIBLE", "POSSIBLY", "POST", "POTENTIAL", "POUND", "POWER", "POWERFUL", "PRACTICAL", "PRACTICE", "PREFER", "PREPARE", "PRESENCE", "PRESENT", "PRESIDENT", "PRESS", "PRESSURE", "PRETTY", "PREVENT", "PREVIOUS", "PREVIOUSLY", "PRICE", "PRIMARY", "PRIME", "PRINCIPLE", "PRIORITY", "PRISON", "PRISONER", "PRIVATE", "PROBABLY", "PROBLEM", "PROCEDURE", "PROCESS", "PRODUCE", "PRODUCT", "PRODUCTION", "PROFESSIONAL", "PROFIT", "PROGRAM", "PROGRAMME", "PROGRESS", "PROJECT", "PROMISE", "PROMOTE", "PROPER", "PROPERLY", "PROPERTY", "PROPORTION", "PROPOSE", "PROPOSAL", "PROSPECT", "PROTECT", "PROTECTION", "PROVE", "PROVIDE", "PROVIDED", "PROVISION", "PUB", "PUBLIC", "PUBLICATION", "PUBLISH", "PULL", "PUPIL", "PURPOSE", "PUSH", "PUT", "QUALITY", "QUARTER", "QUESTION", "QUICK", "QUICKLY", "QUIET", "QUITE", "RACE", "RADIO", "RAILWAY", "RAIN", "RAISE", "RANGE", "RAPIDLY", "RARE", "RATE", "RATHER", "REACH", "REACTION", "READ", "READER", "READING", "READY", "REAL", "REALISE", "REALITY", "REALIZE", "REALLY", "REASON", "REASONABLE", "RECALL", "RECEIVE", "RECENT", "RECENTLY", "RECOGNISE", "RECOGNITION", "RECOGNIZE", "RECOMMEND", "RECORD", "RECOVER", "RED", "REDUCE", "REDUCTION", "REFER", "REFERENCE", "REFLECT", "REFORM", "REFUSE", "REGARD", "REGION", "REGIONAL", "REGULAR", "REGULATION", "REJECT", "RELATE", "RELATION", "RELATIONSHIP", "RELATIVE", "RELATIVELY", "RELEASE", "RELEVANT", "RELIEF", "RELIGION", "RELIGIOUS", "RELY", "REMAIN", "REMEMBER", "REMIND", "REMOVE", "REPEAT", "REPLACE", "REPLY", "REPORT", "REPRESENT", "REPRESENTATION", "REPRESENTATIVE", "REQUEST", "REQUIRE", "REQUIREMENT", "RESEARCH", "RESOURCE", "RESPECT", "RESPOND", "RESPONSE", "RESPONSIBILITY", "RESPONSIBLE", "REST", "RESTAURANT", "RESULT", "RETAIN", "RETURN", "REVEAL", "REVENUE", "REVIEW", "REVOLUTION", "RICH", "RIDE", "RIGHT", "RING", "RISE", "RISK", "RIVER", "ROAD", "ROCK", "ROLE", "ROLL", "ROOF", "ROOM", "ROUND", "ROUTE", "ROW", "ROYAL", "RULE", "RUN", "RURAL", "SAFE", "SAFETY", "SALE", "SAME", "SAMPLE", "SATISFY", "SAVE", "SAY", "SCALE", "SCENE", "SCHEME", "SCHOOL", "SCIENCE", "SCIENTIFIC", "SCIENTIST", "SCORE", "SCREEN", "SEA", "SEARCH", "SEASON", "SEAT", "SECOND", "SECONDARY", "SECRETARY", "SECTION", "SECTOR", "SECURE", "SECURITY", "SEE", "SEEK", "SEEM", "SELECT", "SELECTION", "SELL", "SEND", "SENIOR", "SENSE", "SENTENCE", "SEPARATE", "SEQUENCE", "SERIES", "SERIOUS", "SERIOUSLY", "SERVANT", "SERVE", "SERVICE", "SESSION", "SET", "SETTLE", "SETTLEMENT", "SEVERAL", "SEVERE", "SEX", "SEXUAL", "SHAKE", "SHALL", "SHAPE", "SHARE", "SHE", "SHEET", "SHIP", "SHOE", "SHOOT", "SHOP", "SHORT", "SHOT", "SHOULD", "SHOULDER", "SHOUT", "SHOW", "SHUT", "SIDE", "SIGHT", "SIGN", "SIGNAL", "SIGNIFICANCE", "SIGNIFICANT", "SILENCE", "SIMILAR", "SIMPLE", "SIMPLY", "SINCE", "SING", "SINGLE", "SIR", "SISTER", "SIT", "SITE", "SITUATION", "SIZE", "SKILL", "SKIN", "SKY", "SLEEP", "SLIGHTLY", "SLIP", "SLOW", "SLOWLY", "SMALL", "SMILE", "SO", "SOCIAL", "SOCIETY", "SOFT", "SOFTWARE", "SOIL", "SOLDIER", "SOLICITOR", "SOLUTION", "SOME", "SOMEBODY", "SOMEONE", "SOMETHING", "SOMETIMES", "SOMEWHAT", "SOMEWHERE", "SON", "SONG", "SOON", "SORRY", "SORT", "SOUND", "SOURCE", "SOUTH", "SOUTHERN", "SPACE", "SPEAK", "SPEAKER", "SPECIAL", "SPECIES", "SPECIFIC", "SPEECH", "SPEED", "SPEND", "SPIRIT", "SPORT", "SPOT", "SPREAD", "SPRING", "STAFF", "STAGE", "STAND", "STANDARD", "STAR", "START", "STATE", "STATEMENT", "STATION", "STATUS", "STAY", "STEAL", "STEP", "STICK", "STILL", "STOCK", "STONE", "STOP", "STORE", "STORY", "STRAIGHT", "STRANGE", "STRATEGY", "STREET", "STRENGTH", "STRIKE", "STRONG", "STRONGLY", "STRUCTURE", "STUDENT", "STUDIO", "STUDY", "STUFF", "STYLE", "SUBJECT", "SUBSTANTIAL", "SUCCEED", "SUCCESS", "SUCCESSFUL", "SUCH", "SUDDENLY", "SUFFER", "SUFFICIENT", "SUGGEST", "SUGGESTION", "SUITABLE", "SUM", "SUMMER", "SUN", "SUPPLY", "SUPPORT", "SUPPOSE", "SURE", "SURELY", "SURFACE", "SURPRISE", "SURROUND", "SURVEY", "SURVIVE", "SWITCH", "SYSTEM", "TABLE", "TAKE", "TALK", "TALL", "TAPE", "TARGET", "TASK", "TAX", "TEA", "TEACH", "TEACHER", "TEACHING", "TEAM", "TEAR", "TECHNICAL", "TECHNIQUE", "TECHNOLOGY", "TELEPHONE", "TELEVISION", "TELL", "TEMPERATURE", "TEND", "TERM", "TERMS", "TERRIBLE", "TEST", "TEXT", "THAN", "THANK", "THANKS", "THAT", "THE", "THEATRE", "THEIR", "THEM", "THEME", "THEMSELVES", "THEN", "THEORY", "THERE", "THEREFORE", "THESE", "THEY", "THIN", "THING", "THINK", "THIS", "THOSE", "THOUGH", "THOUGHT", "THREAT", "THREATEN", "THROUGH", "THROUGHOUT", "THROW", "THUS", "TICKET", "TIME", "TINY", "TITLE", "TO", "TODAY", "TOGETHER", "TOMORROW", "TONE", "TONIGHT", "TOO", "TOOL", "TOOTH", "TOP", "TOTAL", "TOTALLY", "TOUCH", "TOUR", "TOWARDS", "TOWN", "TRACK", "TRADE", "TRADITION", "TRADITIONAL", "TRAFFIC", "TRAIN", "TRAINING", "TRANSFER", "TRANSPORT", "TRAVEL", "TREAT", "TREATMENT", "TREATY", "TREE", "TREND", "TRIAL", "TRIP", "TROOP", "TROUBLE", "TRUE", "TRUST", "TRUTH", "TRY", "TURN", "TWICE", "TYPE", "TYPICAL", "UNABLE", "UNDER", "UNDERSTAND", "UNDERSTANDING", "UNDERTAKE", "UNEMPLOYMENT", "UNFORTUNATELY", "UNION", "UNIT", "UNITED", "UNIVERSITY", "UNLESS", "UNLIKELY", "UNTIL", "UP", "UPON", "UPPER", "URBAN", "US", "USE", "USED", "USEFUL", "USER", "USUAL", "USUALLY", "VALUE", "VARIATION", "VARIETY", "VARIOUS", "VARY", "VAST", "VEHICLE", "VERSION", "VERY", "VIA", "VICTIM", "VICTORY", "VIDEO", "VIEW", "VILLAGE", "VIOLENCE", "VISION", "VISIT", "VISITOR", "VITAL", "VOICE", "VOLUME", "VOTE", "WAGE", "WAIT", "WALK", "WALL", "WANT", "WAR", "WARM", "WARN", "WASH", "WATCH", "WATER", "WAVE", "WAY", "WE", "WEAK", "WEAPON", "WEAR", "WEATHER", "WEEK", "WEEKEND", "WEIGHT", "WELCOME", "WELFARE", "WELL", "WEST", "WESTERN", "WHAT", "WHATEVER", "WHEN", "WHERE", "WHEREAS", "WHETHER", "WHICH", "WHILE", "WHILST", "WHITE", "WHO", "WHOLE", "WHOM", "WHOSE", "WHY", "WIDE", "WIDELY", "WIFE", "WILD", "WILL", "WIN", "WIND", "WINDOW", "WINE", "WING", "WINNER", "WINTER", "WISH", "WITH", "WITHDRAW", "WITHIN", "WITHOUT", "WOMAN", "WONDER", "WONDERFUL", "WOOD", "WORD", "WORK", "WORKER", "WORKING", "WORKS", "WORLD", "WORRY", "WORTH", "WOULD", "WRITE", "WRITER", "WRITING", "WRONG", "YARD", "YEAH", "YEAR", "YES", "YESTERDAY", "YET", "YOU", "YOUNG", "YOUR", "YOURSELF", "YOUTH")
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p042().run())
+		}
+
+		@Contract(pure = true)
+		private fun isTriangularNumber(x: Int): Boolean {
+			var i = 1
+			while (true) {
+				val t = i * (i + 1) shr 1
+				if (t == x) return true
+				if (t > x) return false
+				i++
+			}
+		}
+
+		private fun wordValue(s: String): Int {
+			var sum = 0
+			for (i in 0 until s.length) {
+				val c = s[i]
+				assert(c >= 'A' && c <= 'Z')
+				sum += c - 'A' + 1
+			}
+			return sum
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p060.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p060.kt b/Random_Work/src/projectEuler/programs/p060.kt
new file mode 100644
--- /dev/null	(date 1614951979126)
+++ b/Random_Work/src/projectEuler/programs/p060.kt	(date 1614951979126)
@@ -0,0 +1,95 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimes
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.util.*
+import java.util.stream.IntStream
+
+class p060 : EulerSolution() {
+	private val primes = listPrimes(PRIME_LIMIT)
+
+	// Memoization
+	private var isConcatPrimeKnown: BitSet? = null
+	private var isConcatPrime: BitSet? = null
+	override fun run(): String {
+		isConcatPrimeKnown = BitSet(primes.size * primes.size)
+		isConcatPrime = BitSet(primes.size * primes.size)
+		var sumLimit = PRIME_LIMIT
+		while (true) {
+			val sum = findSetSum(intArrayOf(), 5, sumLimit - 1)
+			// No smaller sum found
+			if (sum == -1) return Integer.toString(sumLimit)
+			sumLimit = sum
+		}
+	}
+
+	/*
+	 * Tries to find any suitable set and return its sum, or -1 if none is found.
+	 * A set is suitable if it contains only primes, its size is 'targetSize',
+	 * its sum is less than or equal to 'sumLimit', and each pair concatenates to a prime.
+	 * 'prefix' is an array of ascending indices into the 'primes' array,
+	 * which describes the set found so far.
+	 * The function blindly assumes that each pair of primes in 'prefix' concatenates to a prime.
+	 *
+	 * For example, findSetSum(new int[]{1, 3, 28}, 5, 10000) means "find the sum of any set
+	 * where the set has size 5, consists of primes with the lowest elements being {3, 7, 109},
+	 * has sum 10000 or less, and has each pair concatenating to form a prime".
+	 */
+	private fun findSetSum(prefix: IntArray, targetSize: Int, sumLimit: Int): Int {
+		return if (prefix.size == targetSize) {
+			Arrays.stream(prefix).map { i: Int -> primes[i] }.sum()
+		} else {
+			var i = if (prefix.size == 0) 0 else prefix[prefix.size - 1] + 1
+			outer@ while (i < primes.size && primes[i] <= sumLimit) {
+				for (j in prefix) if (isConcatPrime(i, j) || isConcatPrime(j, i)) {
+					i++
+					continue@outer
+				}
+				val appended = Arrays.copyOf(prefix, prefix.size + 1)
+				appended[appended.size - 1] = i
+				val sum = findSetSum(appended, targetSize, sumLimit - primes[i])
+				if (sum != -1) return sum
+				i++
+			}
+			-1
+		}
+	}
+
+	// Tests whether parseInt(toString(x) + toString(y)) is prime.
+	private fun isConcatPrime(x: Int, y: Int): Boolean {
+		var x = x
+		var y = y
+		val index = x * primes.size + y
+		if (isConcatPrimeKnown!![index]) return !isConcatPrime!![index]
+		x = primes[x]
+		y = primes[y]
+		val mult = IntStream.iterate(y, { temp: Int -> temp != 0 }) { temp: Int -> temp / 10 }.map { temp: Int -> 10 }.reduce(1) { a: Int, b: Int -> a * b }
+		val result = isPrime(x.toLong() * mult + y)
+		isConcatPrimeKnown!!.set(index)
+		isConcatPrime!![index] = result
+		return !result
+	}
+
+	private fun isPrime(x: Long): Boolean {
+		return if (x < 0) throw IllegalArgumentException() else if (x == 0L || x == 1L) false else {
+			val end = sqrt(BigInteger.valueOf(x)).toInt().toLong()
+			if (Arrays.stream(primes).takeWhile { p: Int -> p <= end }.anyMatch { p: Int -> x % p == 0L }) return false
+			var i = (primes[primes.size - 1] + 2).toLong()
+			while (i <= end) {
+				if (x % i == 0L) return false
+				i += 2
+			}
+			true
+		}
+	}
+
+	companion object {
+		private const val PRIME_LIMIT = 100000 // Arbitrary initial cutoff
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p060().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p044.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p044.kt b/Random_Work/src/projectEuler/programs/p044.kt
new file mode 100644
--- /dev/null	(date 1614951978238)
+++ b/Random_Work/src/projectEuler/programs/p044.kt	(date 1614951978238)
@@ -0,0 +1,55 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+
+class p044 : EulerSolution() {
+	override fun run(): String {
+		var minD: Long = -1 // -1 means not found yet, positive number means found a candidate
+		// For each upper pentagonal number index, going upward
+		var i = 2
+		while (true) {
+			val pentI = pentagonalNumber(i)
+			// If the next number down is at least as big as a found difference, then conclude searching
+			if (minD != -1L && pentI - pentagonalNumber(i - 1) >= minD) break
+			// For each lower pentagonal number index, going downward
+			for (j in i - 1 downTo 1) {
+				val pentJ = pentagonalNumber(j)
+				val diff = pentI - pentJ
+				// If the difference is at least as big as a found difference, then stop testing lower pentagonal numbers
+				if (minD != -1L && diff >= minD) break else if (isPentagonalNumber(pentI + pentJ) && isPentagonalNumber(diff)) minD = diff // Found a smaller difference
+			}
+			i++
+		}
+		return java.lang.Long.toString(minD)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p044().run())
+		}
+
+		@Contract(pure = true)
+		private fun pentagonalNumber(x: Int): Long {
+			assert(x > 0)
+			return x.toLong() * (x * 3L - 1) ushr 1
+		}
+
+		@Contract(pure = true)
+		private fun isPentagonalNumber(y: Long): Boolean {
+			if (y <= 0) return false
+			/*
+		 * If y = pentagonalNumber(x) = x(3x-1) / 2,
+		 * then by the quadratic formula, the positive solution is x = (sqrt(24y + 1) + 1) / 6.
+		 * There exists a solution for x if and only if both of these conditions hold:
+		 * (24y + 1) is a perfect square, and sqrt(24y + 1) + 1 mod 6 = 0.
+		 * The second condition is equivalent to sqrt(24y + 1) = 5 mod 6.
+		 */
+			val temp = y * 24 + 1
+			val sqrt = sqrt(BigInteger.valueOf(temp)).toLong()
+			return sqrt * sqrt == temp && sqrt % 6 == 5L
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p052.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p052.kt b/Random_Work/src/projectEuler/programs/p052.kt
new file mode 100644
--- /dev/null	(date 1614951977034)
+++ b/Random_Work/src/projectEuler/programs/p052.kt	(date 1614951977034)
@@ -0,0 +1,32 @@
+package projectEuler.programs
+
+import java.util.*
+import java.util.stream.IntStream
+
+class p052 : EulerSolution() {
+	override fun run(): String {
+		var i = 1
+		while (true) {
+			assert(i <= 357913941) { "Overflow" }
+			if (multiplesHaveSameDigits(i)) return Integer.toString(i)
+			i++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p052().run())
+		}
+
+		private fun multiplesHaveSameDigits(x: Int): Boolean {
+			return IntStream.rangeClosed(2, 6).allMatch { i: Int -> Arrays.equals(toSortedDigits(x), toSortedDigits(i * x)) }
+		}
+
+		private fun toSortedDigits(x: Int): CharArray {
+			val result = Integer.toString(x).toCharArray()
+			Arrays.sort(result)
+			return result
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p028.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p028.kt b/Random_Work/src/projectEuler/programs/p028.kt
new file mode 100644
--- /dev/null	(date 1614951978294)
+++ b/Random_Work/src/projectEuler/programs/p028.kt	(date 1614951978294)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import java.util.stream.IntStream
+
+class p028 : EulerSolution() {
+	override fun run(): String? {
+		var sum: Long = 1 // Special case for size 1
+		sum += IntStream.iterate(3, { n: Int -> n <= SIZE }) { n: Int -> n + 2 }.mapToLong { n: Int -> 4L * n * n - 6L * (n - 1) }.sum()
+		return java.lang.Long.toString(sum)
+	}
+
+	companion object {
+		/*
+	 * From the diagram, let's observe the four corners of an n * n square (where n is odd).
+	 * It's not hard to convince yourself that the top right corner always has the value n^2.
+	 * Working counterclockwise (backwards), the top left corner has the value n^2 - (n - 1),
+	 * the bottom left corner has the value n^2 - 2(n - 1), and the bottom right is n^2 - 3(n - 1).
+	 * Putting it all together, this outermost ring contributes 4n^2 - 6(n - 1) to the final sum.
+	 *
+	 * Incidentally, the closed form of this sum is (4m^3 + 3m^2 + 8m - 9) / 6, where m = size.
+	 */
+		private const val SIZE = 1001 // Must be odd
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p028().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p051.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p051.kt b/Random_Work/src/projectEuler/programs/p051.kt
new file mode 100644
--- /dev/null	(date 1614951977520)
+++ b/Random_Work/src/projectEuler/programs/p051.kt	(date 1614951977520)
@@ -0,0 +1,69 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.listPrimality
+import java.util.*
+import java.util.stream.IntStream
+
+class p051 : EulerSolution() {
+	override fun run(): String {
+		val isPrime = listPrimality(1000000)
+		for (i in isPrime.indices) {
+			if (!isPrime[i]) continue
+			val n = toDigits(i)
+			for (mask in 0 until (1 shl n.size)) {
+				var digits = doMask(n, mask)
+				var count = 0
+				for (j in 0..9) {
+					if (digits[0] != 0 && isPrime[toNumber(digits)]) count++
+					digits = addMask(digits, mask)
+				}
+				if (count == 8) {
+					digits = doMask(n, mask)
+					for (j in 0..9) {
+						if (digits[0] != 0 && isPrime[toNumber(digits)]) return Integer.toString(toNumber(digits))
+						digits = addMask(digits, mask)
+					}
+				}
+			}
+		}
+		throw RuntimeException("Not found")
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p051().run())
+		}
+
+		@Contract(pure = true)
+		private fun toDigits(n: Int): IntArray {
+			var n = n
+			val buf = IntArray(10)
+			var i = buf.size
+			do {
+				i--
+				buf[i] = n % 10
+				n /= 10
+			} while (n != 0)
+			return Arrays.copyOfRange(buf, i, buf.size)
+		}
+
+		@Contract(pure = true)
+		private fun doMask(digits: IntArray, mask: Int): IntArray {
+			return IntStream.range(0, digits.size).map { i: Int -> digits[i] * (mask.inv() ushr i and 1) }.toArray()
+		}
+
+		@Contract(pure = true)
+		private fun addMask(digits: IntArray, mask: Int): IntArray {
+			return IntStream.range(0, digits.size).map { i: Int -> digits[i] + (mask ushr i and 1) }.toArray()
+		}
+
+		@Contract(pure = true)
+		private fun toNumber(digits: IntArray): Int {
+			var result = 0
+			for (x in digits) result = result * 10 + x
+			return result
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p027.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p027.kt b/Random_Work/src/projectEuler/programs/p027.kt
new file mode 100644
--- /dev/null	(date 1614951977056)
+++ b/Random_Work/src/projectEuler/programs/p027.kt	(date 1614951977056)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.isPrime
+
+class p027 : EulerSolution() {
+	override fun run(): String? {
+		var bestNum = 0
+		var bestA = 0
+		var bestB = 0
+		for (a in -1000..1000) for (b in -1000..1000) {
+			val num = numberOfConsecutivePrimesGenerated(a, b)
+			if (num > bestNum) {
+				bestNum = num
+				bestA = a
+				bestB = b
+			}
+		}
+		return Integer.toString(bestA * bestB)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p027().run())
+		}
+
+		@Contract(pure = true)
+		private fun numberOfConsecutivePrimesGenerated(a: Int, b: Int): Int {
+			var i = 0
+			while (true) {
+				val n = i * i + i * a + b
+				if (n < 0 || !isPrime(n)) return i
+				i++
+			}
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p061.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p061.kt b/Random_Work/src/projectEuler/programs/p061.kt
new file mode 100644
--- /dev/null	(date 1617055444786)
+++ b/Random_Work/src/projectEuler/programs/p061.kt	(date 1617055444786)
@@ -0,0 +1,58 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.*
+import java.util.Arrays.setAll
+import java.util.Arrays.stream
+
+class p061 : EulerSolution() {
+	// numbers[i][j] is the set of figurate numbers of i sides (3 <= i <= 8), having 4 digits, beginning with the 2 digits equal to j
+	private lateinit var numbers: Array<Array<MutableSet<Int>>>
+	override fun run(): String {
+		// Build table of numbers
+//		numbers = Array(9) { arrayOfNulls(100) }
+		stream(numbers).forEachOrdered { number: Array<MutableSet<Int>>? -> setAll(number) { HashSet<Any>() } }
+		for (sides in 3..8) {
+			var n = 1
+			while (true) {
+				val num = figurateNumber(sides, n)
+				if (num >= 10000) break
+				if (num >= 1000) numbers[sides][num / 100].add(num)
+				n++
+			}
+		}
+		// Do search
+		for (i in 10..99) for (num in numbers[3][i]) {
+			val temp = findSolutionSum(num, num, 1 shl 3, num)
+			if (temp != -1) return temp.toString()
+		}
+		throw AssertionError("No solution")
+	}
+
+	// Note: sidesUsed is a bit set
+	@Contract(pure = true)
+	private fun findSolutionSum(begin: Int, current: Int, sidesUsed: Int, sum: Int): Int {
+		if (sidesUsed == 0x1F8 && current % 100 == begin / 100) return sum else {
+			for (sides in 4..8) {
+				if (sidesUsed ushr sides and 1 != 0) continue
+				for (num in numbers[sides][current % 100]) {
+					val temp = findSolutionSum(begin, num, sidesUsed or (1 shl sides), sum + num)
+					if (temp != -1) return temp
+				}
+			}
+		}
+		return -1
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p061().run())
+		}
+
+		@Contract(pure = true)
+		private fun figurateNumber(sides: Int, n: Int): Int {
+			return n * ((sides - 2) * n - (sides - 4)) / 2
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p045.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p045.kt b/Random_Work/src/projectEuler/programs/p045.kt
new file mode 100644
--- /dev/null	(date 1614951979745)
+++ b/Random_Work/src/projectEuler/programs/p045.kt	(date 1614951979745)
@@ -0,0 +1,26 @@
+package projectEuler.programs
+
+class p045 : EulerSolution() {
+	override fun run(): String {
+		var i = 286
+		var j = 166
+		var k = 144
+		while (true) {
+			val triangle = i.toLong() * (i + 1) / 2
+			val pentagon = j.toLong() * (j * 3L - 1) / 2
+			val hexagon = k.toLong() * (k * 2L - 1)
+			val min = Math.min(Math.min(triangle, pentagon), hexagon)
+			if (min == triangle && min == pentagon && min == hexagon) return java.lang.Long.toString(min)
+			if (min == triangle) i++
+			if (min == pentagon) j++
+			if (min == hexagon) k++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p045().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p026.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p026.kt b/Random_Work/src/projectEuler/programs/p026.kt
new file mode 100644
--- /dev/null	(date 1614951975675)
+++ b/Random_Work/src/projectEuler/programs/p026.kt	(date 1614951975675)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import java.util.*
+
+class p026 : EulerSolution() {
+	override fun run(): String? {
+		var bestNumber = 0
+		var bestLength = 0
+		for (i in 1..1000) {
+			val len = getCycleLength(i)
+			if (len > bestLength) {
+				bestNumber = i
+				bestLength = len
+			}
+		}
+		return Integer.toString(bestNumber)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p026().run())
+		}
+
+		private fun getCycleLength(n: Int): Int {
+			val stateToIter: MutableMap<Int, Int> = HashMap()
+			var state = 1
+			var iter = 0
+			while (true) {
+				if (stateToIter.containsKey(state)) return iter - stateToIter[state]!! else {
+					stateToIter[state] = iter
+					state = state * 10 % n
+				}
+				iter++
+			}
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p018.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p018.kt b/Random_Work/src/projectEuler/programs/p018.kt
new file mode 100644
--- /dev/null	(date 1617055444805)
+++ b/Random_Work/src/projectEuler/programs/p018.kt	(date 1617055444805)
@@ -0,0 +1,31 @@
+package projectEuler.programs
+
+class p018 : EulerSolution() {
+	// Mutable
+	private val triangle = arrayOf(intArrayOf(75), intArrayOf(95, 64), intArrayOf(17, 47, 82), intArrayOf(18, 35, 87, 10), intArrayOf(20, 4, 82, 47, 65), intArrayOf(19, 1, 23, 75, 3, 34), intArrayOf(88, 2, 77, 73, 7, 63, 67), intArrayOf(99, 65, 4, 28, 6, 16, 70, 92), intArrayOf(41, 41, 26, 56, 83, 40, 80, 70, 33), intArrayOf(41, 48, 72, 33, 47, 32, 37, 16, 94, 29), intArrayOf(53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14), intArrayOf(70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57), intArrayOf(91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48), intArrayOf(63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31), intArrayOf(4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23))
+
+	/*
+	 * We create a new blank triangle with the same dimensions as the original big triangle.
+	 * For each cell of the big triangle, we consider the sub-triangle whose top is at this cell,
+	 * calculate the maximum path sum when starting from this cell, and store the result
+	 * in the corresponding cell of the blank triangle.
+	 *
+	 * If we start at a particular cell, what is the maximum path total? If the cell is at the
+	 * bottom of the big triangle, then it is simply the cell's value. Otherwise the answer is
+	 * the cell's value plus either {the maximum path total of the cell down and to the left}
+	 * or {the maximum path total of the cell down and to the right}, whichever is greater.
+	 * By computing the blank triangle's values from bottom up, the dependent values are always
+	 * computed before they are utilized. This technique is known as dynamic programming.
+	 */
+	override fun run(): String {
+//		for (i in triangle.size - 2 downTo 0) for (j in 0 until triangle[i].length) triangle[i][j] += Math.max(triangle[i + 1][j], triangle[i + 1][j + 1])
+		return Integer.toString(triangle[0][0])
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p018().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p046.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p046.kt b/Random_Work/src/projectEuler/programs/p046.kt
new file mode 100644
--- /dev/null	(date 1614951978643)
+++ b/Random_Work/src/projectEuler/programs/p046.kt	(date 1614951978643)
@@ -0,0 +1,26 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPrime
+import java.util.stream.IntStream
+
+class p046 : EulerSolution() {
+	override fun run(): String {
+		var i = 9
+		while (true) {
+			if (!satisfiesConjecture(i)) return Integer.toString(i)
+			i += 2
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p046().run())
+		}
+
+		private fun satisfiesConjecture(n: Int): Boolean {
+			return if (n % 2 == 0 || isPrime(n)) true else IntStream.iterate(1, { i: Int -> i * i * 2 <= n }) { i: Int -> i + 1 }.anyMatch { i: Int -> isPrime(n - i * i * 2) }
+			// Now n is an odd composite number
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/hackPHS2019/TicTacToeProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hackPHS2019;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.image.BufferedImage;\r\nimport java.io.File;\r\nimport java.io.IOException;\r\nimport java.util.Scanner;\r\n\r\nimport static java.awt.Color.BLUE;\r\nimport static java.awt.Color.RED;\r\nimport static java.lang.Math.random;\r\nimport static java.lang.System.in;\r\nimport static java.lang.System.out;\r\nimport static java.lang.Thread.sleep;\r\nimport static java.util.Arrays.fill;\r\nimport static java.util.Arrays.stream;\r\nimport static javax.imageio.ImageIO.read;\r\nimport static javax.swing.WindowConstants.DISPOSE_ON_CLOSE;\r\n\r\nfinal class TicTacToeProject {\r\n\tTicTacToeProject() {\r\n\t\tvar board = new TicTacToeBoard(620, 700);\r\n\t\tboard.displayGame(false);\r\n\t\ttry (var scanner = new Scanner(in)) {\r\n\t\t\tfinal int[][] grid = new int[][]{new int[]{0, 200, 600, 200}, new int[]{0, 400, 600, 400}, new int[]{200, 0, 200, 600}, new int[]{400, 0, 400, 600}};\r\n\t\t\tboard.defineBoard(grid);\r\n\t\t\tvar ifn = \"TicTacToe\";\r\n\t\t\tvar ft = \".png\";\r\n\t\t\tvar fPs = new String[]{ifn + 'X' + ft, ifn + 'O' + ft};\r\n\t\t\tboard.setFiles(fPs[0], fPs[1]);\r\n\t\t\tvar play = new char[3][3];\r\n\t\t\tstream(play).forEachOrdered(chars -> fill(chars, ' '));\r\n\t\t\tboard.setBoard(play);\r\n\t\t\tout.print(\"How many players? \");\r\n\t\t\tboard.displayGame(true);\r\n\t\t\tvar counter = 0;\r\n\t\t\tvar pieces = new int[2];\r\n\t\t\tswitch (scanner.nextInt()) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Computer's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = (int) (random() * 9) + 1;\r\n\t\t\t\t\t\t\tout.println(placementIn);\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Computer's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = (int) (random() * 9) + 1;\r\n\t\t\t\t\t\t\tout.println(placementIn);\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Player's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = scanner.nextInt();\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Computer's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = (int) (random() * 9) + 1;\r\n\t\t\t\t\t\t\tout.println(placementIn);\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tdo {\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Player 1's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = scanner.nextInt();\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t\tdo {\r\n\t\t\t\t\t\t\tcounter++;\r\n\t\t\t\t\t\t\tout.print(\"Player 2's turn: \");\r\n\t\t\t\t\t\t\tvar placementIn = scanner.nextInt();\r\n\t\t\t\t\t\t\tplacementDetector(placementIn, pieces);\r\n\t\t\t\t\t\t\tplacePiece(placementIn, play, counter, pieces);\r\n\t\t\t\t\t\t\tboard.repaint();\r\n\t\t\t\t\t\t\tboard.delay();\r\n\t\t\t\t\t\t\tif (play[pieces[0]][pieces[1]] != ' ') break;\r\n\t\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\t} while (play[pieces[0]][pieces[1]] == ' ');\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + scanner.nextInt());\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void placementDetector(int placementIn, int[] pieces) {\r\n\t\tswitch (placementIn) {\r\n\t\t\tcase 1:\r\n\t\t\t\tpieces[0] = 0;\r\n\t\t\t\tpieces[1] = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tpieces[0] = 0;\r\n\t\t\t\tpieces[1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tpieces[0] = 0;\r\n\t\t\t\tpieces[1] = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tpieces[0] = 1;\r\n\t\t\t\tpieces[1] = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tpieces[0] = 1;\r\n\t\t\t\tpieces[1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tpieces[0] = 1;\r\n\t\t\t\tpieces[1] = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 7:\r\n\t\t\t\tpieces[0] = 2;\r\n\t\t\t\tpieces[1] = 0;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 8:\r\n\t\t\t\tpieces[0] = 2;\r\n\t\t\t\tpieces[1] = 1;\r\n\t\t\t\tbreak;\r\n\t\t\tcase 9:\r\n\t\t\t\tpieces[0] = 2;\r\n\t\t\t\tpieces[1] = 2;\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new IllegalStateException(\"Unexpected value: \" + placementIn);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void placePiece(int a, char[][] b, int c, int[] d) {\r\n\t\tif ((a == 1) | (a == 2) | (a == 3) | (a == 4) | (a == 5) | (a == 6) | (a == 7) | (a == 8) | (a == 9))\r\n\t\t\tb[d[0]][d[1]] = ((c % 2) == 0) ? 'o' : 'x';\r\n\t}\r\n}\r\n\r\nclass TicTacToeBoard {\r\n\tprivate final JFrame f;\r\n\tprivate int[][] b;\r\n\tprivate char[][] p;\r\n\r\n\tTicTacToeBoard(int width, int height) {\r\n\t\tf = new JFrame(\"Tic-Tac-Toe\");\r\n\t\tf.setIconImage(new ImageIcon(\"Tic-tac-toe.png\").getImage());\r\n\t\tf.setDefaultCloseOperation(DISPOSE_ON_CLOSE);\r\n\t\tf.setSize(width, height);\r\n\t}\r\n\r\n\tvoid defineBoard(int[][] a) {\r\n\t\tb = a;\r\n\t}\r\n\r\n\tvoid delay() {\r\n\t\ttry {\r\n\t\t\tsleep(1000);\r\n\t\t} catch (InterruptedException e) {\r\n\t\t\tnew Throwable().addSuppressed(e);\r\n\t\t}\r\n\t}\r\n\r\n\tvoid displayGame(boolean a) {\r\n\t\tf.setVisible(a);\r\n\t}\r\n\r\n\tvoid repaint() {\r\n\t\tf.repaint();\r\n\t}\r\n\r\n\tvoid setBoard(char[][] a) {\r\n\t\tp = a;\r\n\t}\r\n\r\n\tvoid setFiles(String a, String b) {\r\n\t\tf.add(new DrawTicTacToeBoard(a, b));\r\n\t}\r\n\r\n\tclass DrawTicTacToeBoard extends JPanel {\r\n\t\tprivate final BufferedImage[] images = new BufferedImage[2];\r\n\r\n\t\tprivate DrawTicTacToeBoard(String... a) {\r\n\t\t\tsetBackground(RED);\r\n\t\t\tfor (var i = 0; i < 2; i++)\r\n\t\t\t\ttry {\r\n\t\t\t\t\timages[i] = read(new File(a[i]));\r\n\t\t\t\t} catch (IOException e) {\r\n\t\t\t\t\tnew Throwable().addSuppressed(e);\r\n\t\t\t\t}\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tprotected void paintComponent(Graphics g) {\r\n\t\t\tsuper.paintComponent(g);\r\n\t\t\tfor (var i = 0; i < 3; i++)\r\n\t\t\t\tfor (var j = 0; j < 3; j++)\r\n\t\t\t\t\tif (p[i][j] == 'x')\r\n\t\t\t\t\t\tg.drawImage(images[0], (j * 200) + 25, (i * 200) + 25, null);\r\n\t\t\t\t\telse if (p[i][j] == 'o')\r\n\t\t\t\t\t\tg.drawImage(images[1], (j * 200) + 25, (i * 200) + 25, null);\r\n\t\t\tg.setColor(BLUE);\r\n\t\t\tfor (int i = 0; i < 6; i++) {\r\n\t\t\t\tg.drawLine(b[0][0], b[0][1] + i, b[0][2], b[0][3] + i);\r\n\t\t\t\tg.drawLine(b[1][0], b[1][1] + i, b[1][2], b[1][3] + i);\r\n\t\t\t\tg.drawLine(b[2][0] + i, b[2][1], b[2][2] + i, b[2][3]);\r\n\t\t\t\tg.drawLine(b[3][0] + i, b[3][1], b[3][2] + i, b[3][3]);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/hackPHS2019/TicTacToeProject.java b/Random_Work/src/hackPHS2019/TicTacToeProject.java
--- a/Random_Work/src/hackPHS2019/TicTacToeProject.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/hackPHS2019/TicTacToeProject.java	(date 1614744134791)
@@ -120,44 +120,43 @@
 
 	private void placementDetector(int placementIn, int[] pieces) {
 		switch (placementIn) {
-			case 1:
+			case 1 -> {
 				pieces[0] = 0;
 				pieces[1] = 0;
-				break;
-			case 2:
+			}
+			case 2 -> {
 				pieces[0] = 0;
 				pieces[1] = 1;
-				break;
-			case 3:
+			}
+			case 3 -> {
 				pieces[0] = 0;
 				pieces[1] = 2;
-				break;
-			case 4:
+			}
+			case 4 -> {
 				pieces[0] = 1;
 				pieces[1] = 0;
-				break;
-			case 5:
+			}
+			case 5 -> {
 				pieces[0] = 1;
 				pieces[1] = 1;
-				break;
-			case 6:
+			}
+			case 6 -> {
 				pieces[0] = 1;
 				pieces[1] = 2;
-				break;
-			case 7:
+			}
+			case 7 -> {
 				pieces[0] = 2;
 				pieces[1] = 0;
-				break;
-			case 8:
+			}
+			case 8 -> {
 				pieces[0] = 2;
 				pieces[1] = 1;
-				break;
-			case 9:
+			}
+			case 9 -> {
 				pieces[0] = 2;
 				pieces[1] = 2;
-				break;
-			default:
-				throw new IllegalStateException("Unexpected value: " + placementIn);
+			}
+			default -> throw new IllegalStateException("Unexpected value: " + placementIn);
 		}
 	}
 
Index: Random_Work/src/hackPHS2019/RockPaperScissorsLizardSpock.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hackPHS2019;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport java.util.Scanner;\r\n\r\nimport static java.lang.Math.random;\r\nimport static java.lang.System.in;\r\nimport static java.lang.System.out;\r\nimport static java.lang.Thread.sleep;\r\nimport static java.util.Objects.requireNonNull;\r\n\r\nfinal class RockPaperScissorsLizardSpock {\r\n\tprivate static final Scanner scanner = new Scanner(in);\r\n\tprivate int playerWins = 0;\r\n\tprivate int compWins = 0;\r\n\tprivate int counter = 0;\r\n\tprivate int rounds;\r\n\tprivate String compPicks = null, name, RPSLS;\r\n\r\n\tRockPaperScissorsLizardSpock() throws Exception {\r\n\t\tout.print(\"Welcome to Rock, Paper, Scissors, Lizard, Spock! Please enter your first name, contestant. \");\r\n\t\tname = scanner.nextLine();\r\n\t\tout.printf(\"Hello %s! How many rounds do you want? (Please enter an odd number from one to nine in numerical form.) \", name);\r\n\t\trounds = scanner.nextInt();\r\n\t\tassert (rounds != 2) && (rounds != 4) && (rounds != 6) && (rounds != 8) && (rounds >= 1) && (rounds <= 9) : \"Unexpected value: \" + rounds;\r\n\t\tout.print(\"Please enter a difficulty level from one to nine in numerical form: \");\r\n\t\tvar diff = scanner.nextInt();\r\n\t\tassert (diff >= 1) && (diff <= 9) : \"Unexpected value: \" + diff;\r\n\t\tscanner.nextLine();\r\n\t\tif (diff == 1) l1();\r\n\t\telse if (diff == 2) l2();\r\n\t\telse if (diff == 3) l3();\r\n\t\telse if (diff == 4) l4();\r\n\t\telse if (diff == 5) l5();\r\n\t\telse if (diff == 6) l6();\r\n\t\telse if (diff == 7) l7();\r\n\t\telse if (diff == 8) l8();\r\n\t\telse l9();\r\n\t\tout.printf((compWins > playerWins) ? \"\\nYou lost the match, %s. Too bad... You can try again though!%n\" : ((playerWins > compWins) ? \"\\nYou won the match, %s! Congratulations!%n\" : \"It's a tie, %s.%n\"), name);\r\n\t}\r\n\r\n\tprivate void l1() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.printf(\"\\nRound %d%n\", counter);\r\n\t\t\tout.printf(\"Please enter an RPSLS choice %s: \", name);\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 6);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if (r == 1) compPicks = \"Computer picks rock\";\r\n\t\t\telse if (r == 2) compPicks = \"Computer picks paper\";\r\n\t\t\telse if (r == 3) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if (r == 4) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if (r == 5) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l2() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 26);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 6)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 5) && (r < 11)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 10) && (r < 16)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 15) && (r < 21)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 20) && (r < 26)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l3() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 126);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 26)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 25) && (r < 51)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 50) && (r < 76)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 75) && (r < 101)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 100) && (r < 126)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l4() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 626);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 126)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 125) && (r < 151)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 150) && (r < 176)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 175) && (r < 201)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 200) && (r < 226)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l5() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 3126);\r\n\t\t\tif (playerWins == 1 || compWins == 1) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 626)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 625) && (r < 1251)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 1250) && (r < 1876)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 1875) && (r < 2501)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 2500) && (r < 3126)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l6() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 15626);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 3126)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 3125) && (r < 6251)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 6250) && (r < 9376)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 9375) && (r < 12501)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 12500) && (r < 15626)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l7() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 78126);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 15626)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 15625) && (r < 31251)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 31250) && (r < 46876)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 46875) && (r < 62501)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 62500) && (r < 78126)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l8() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.print(\"Please enter an RPSLS choice \" + name + \": \");\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 390626);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 78126)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 78125) && (r < 156251)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 156250) && (r < 234376)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 234375) && (r < 312501)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 312500) && (r < 390626)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void l9() throws Exception {\r\n\t\tfor (var i = 0; i < rounds; i++) {\r\n\t\t\tcounter++;\r\n\t\t\tout.println(\"\\nRound \" + counter);\r\n\t\t\tout.printf(\"Please enter an RPSLS choice %s: \", name);\r\n\t\t\tRPSLS = scanner.nextLine();\r\n\t\t\tvar r = (int) (random() * 1953126);\r\n\t\t\tif ((playerWins == 1) || (compWins == 1)) break;\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"rock\") || RPSLS.equals(\"Rock\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"paper\") || RPSLS.equals(\"Paper\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"scissors\") || RPSLS.equals(\"Scissors\")))\r\n\t\t\t\tout.println(\"Computer picks Spock\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"lizard\") || RPSLS.equals(\"Lizard\")))\r\n\t\t\t\tout.println(\"Computer picks scissors\");\r\n\t\t\telse if ((playerWins == compWins) && ((playerWins > 0) | (compWins > 0)) && (RPSLS.equals(\"spock\") || RPSLS.equals(\"Spock\")))\r\n\t\t\t\tout.println(\"Computer picks lizard\");\r\n\t\t\telse if ((r > 0) && (r < 390626)) compPicks = \"Computer picks rock\";\r\n\t\t\telse if ((r > 78125) && (r < 781251)) compPicks = \"Computer picks paper\";\r\n\t\t\telse if ((r > 781250) && (r < 1171876)) compPicks = \"Computer picks scissors\";\r\n\t\t\telse if ((r > 1171875) && (r < 1562501)) compPicks = \"Computer picks lizard\";\r\n\t\t\telse if ((r > 1562500) && (r < 1953126)) compPicks = \"Computer picks Spock\";\r\n\t\t\tswitcher(RPSLS);\r\n\t\t\tsleep(1250);\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void switcher(@NotNull String RPSLS) {\r\n\t\tthis.RPSLS = requireNonNull(RPSLS);\r\n\t\tif (RPSLS.equalsIgnoreCase(\"rock\")) {\r\n\t\t\tout.println(compPicks);\r\n\t\t\tif (compPicks.equals(\"Computer picks lizard\") | compPicks.equals(\"Computer picks scissors\")) {\r\n\t\t\t\tout.println(\"You Win!\");\r\n\t\t\t\tplayerWins++;\r\n\t\t\t} else if (compPicks.equals(\"Computer picks rock\")) out.println(\"It's a tie!\");\r\n\t\t\telse {\r\n\t\t\t\tout.println(\"You Lose!\");\r\n\t\t\t\tcompWins++;\r\n\t\t\t}\r\n\t\t} else if (RPSLS.equalsIgnoreCase(\"paper\")) {\r\n\t\t\tout.println(compPicks);\r\n\t\t\tif (compPicks.equals(\"Computer picks rock\") | compPicks.equals(\"Computer picks Spock\")) {\r\n\t\t\t\tout.println(\"You Win!\");\r\n\t\t\t\tplayerWins++;\r\n\t\t\t} else if (compPicks.equals(\"Computer picks paper\")) out.println(\"It's a tie!\");\r\n\t\t\telse {\r\n\t\t\t\tout.println(\"You Lose!\");\r\n\t\t\t\tcompWins++;\r\n\t\t\t}\r\n\t\t} else if (RPSLS.equalsIgnoreCase(\"scissors\")) {\r\n\t\t\tout.println(compPicks);\r\n\t\t\tif (compPicks.equals(\"Computer picks paper\") | compPicks.equals(\"Computer picks lizard\")) {\r\n\t\t\t\tout.println(\"You Win!\");\r\n\t\t\t\tplayerWins++;\r\n\t\t\t} else if (compPicks.equals(\"Computer picks scissors\")) out.println(\"It's a tie!\");\r\n\t\t\telse {\r\n\t\t\t\tout.println(\"You Lose!\");\r\n\t\t\t\tcompWins++;\r\n\t\t\t}\r\n\t\t} else if (RPSLS.equalsIgnoreCase(\"lizard\")) {\r\n\t\t\tout.println(compPicks);\r\n\t\t\tif (compPicks.equals(\"Computer picks Spock\") | compPicks.equals(\"Computer picks paper\")) {\r\n\t\t\t\tout.println(\"You Win!\");\r\n\t\t\t\tplayerWins++;\r\n\t\t\t} else if (compPicks.equals(\"Computer picks lizard\")) out.println(\"It's a tie!\");\r\n\t\t\telse {\r\n\t\t\t\tout.println(\"You Lose!\");\r\n\t\t\t\tcompWins++;\r\n\t\t\t}\r\n\t\t} else if (RPSLS.equalsIgnoreCase(\"spock\")) {\r\n\t\t\tout.println(compPicks);\r\n\t\t\tif (compPicks.equals(\"Computer picks scissors\") | compPicks.equals(\"Computer picks rock\")) {\r\n\t\t\t\tout.println(\"You Win!\");\r\n\t\t\t\tplayerWins++;\r\n\t\t\t} else if (compPicks.equals(\"Computer picks Spock\")) out.println(\"It's a tie!\");\r\n\t\t\telse {\r\n\t\t\t\tout.println(\"You Lose!\");\r\n\t\t\t\tcompWins++;\r\n\t\t\t}\r\n\t\t} else throw new IllegalStateException(\"Unexpected value: \" + RPSLS);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/hackPHS2019/RockPaperScissorsLizardSpock.java b/Random_Work/src/hackPHS2019/RockPaperScissorsLizardSpock.java
--- a/Random_Work/src/hackPHS2019/RockPaperScissorsLizardSpock.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/hackPHS2019/RockPaperScissorsLizardSpock.java	(date 1614742826769)
@@ -15,8 +15,10 @@
 	private int playerWins = 0;
 	private int compWins = 0;
 	private int counter = 0;
-	private int rounds;
-	private String compPicks = null, name, RPSLS;
+	private final int rounds;
+	private String compPicks = null;
+	private final String name;
+	private String RPSLS;
 
 	RockPaperScissorsLizardSpock() throws Exception {
 		out.print("Welcome to Rock, Paper, Scissors, Lizard, Spock! Please enter your first name, contestant. ");
Index: Random_Work/src/hackPHS2019/HangmanProject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hackPHS2019;\r\n\r\nimport java.util.Arrays;\r\nimport java.util.Scanner;\r\n\r\nimport static java.lang.Math.*;\r\nimport static java.lang.System.*;\r\nimport static java.lang.Thread.sleep;\r\nimport static java.util.Arrays.fill;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.stream.IntStream.iterate;\r\n\r\nfinal class HangmanProject {\r\n\t/**\r\n\t * This is where most of the variables which are significant to the game are\r\n\t * declared, so the methods, excluding {@code main}, require no parameters.\r\n\t */\r\n\tprivate static char[] hangman, guessList;\r\n\tprivate static String main, redo = null, inputCopy = null;\r\n\tprivate static int wins = 0, losses = 0;\r\n\tprivate Scanner scanner = new Scanner(in);\r\n\r\n\t/**\r\n\t * This is where the game actually starts. Here, the method {@code game} is invoked and\r\n\t * the Scanner is passed on to \"game\", and eventually \"logic.\"\r\n\t */\r\n\tHangmanProject() throws InterruptedException {\r\n\t\tgame();\r\n\t}\r\n\r\n\t/**\r\n\t * This method runs all of the initial processes required for the game to run,\r\n\t * then passes logic flow to the method {@code logic} to run the game itself, and then\r\n\t * takes over again for the (potential) home stretch.\r\n\t */\r\n\tprivate void game() throws InterruptedException {\r\n//\t\tThis is the loop allowing the user to play another round.\r\n\t\tdo {\r\n\t\t\t/*\r\n\t\t\t * This String declaration is the declaration of the String used for the user's\r\n\t\t\t * input.\r\n\t\t\t */\r\n\t\t\tString input;\r\n\t\t\t/*\r\n\t\t\t * This if statement is for every round besides the first. It provides options\r\n\t\t\t * for the user input.\r\n\t\t\t */\r\n\t\t\tif (wins != 0 || losses != 0) {\r\n\t\t\t\tvar recycle = false;\r\n\t\t\t\tif ((redo != null) && (redo.equalsIgnoreCase(\"yes\") || redo.equalsIgnoreCase(\"y\"))) {\r\n\t\t\t\t\t/*\r\n\t\t\t\t\t * These following two lines and if/else contains the code which provides the\r\n\t\t\t\t\t * user the opportunity to choose whether or not they want to reuse their\r\n\t\t\t\t\t * previous list of words.\r\n\t\t\t\t\t */\r\n\t\t\t\t\tout.print(\"Do want to reuse your words? \");\r\n\t\t\t\t\tvar reuse = scanner.nextLine();\r\n\t\t\t\t\tif (reuse.equalsIgnoreCase(\"yes\") || reuse.equalsIgnoreCase(\"y\")) recycle = true;\r\n\t\t\t\t\telse if (reuse.equalsIgnoreCase(\"no\") || reuse.equalsIgnoreCase(\"n\")) continue;\r\n\t\t\t\t\telse throw new IllegalStateException(\"Unexpected value: \" + reuse);\r\n\t\t\t\t}\r\n\t\t\t\t/*\r\n\t\t\t\t * This if/else is what actually recycles the words, if the user wants to.\r\n\t\t\t\t * Otherwise, the user has to input more words.\r\n\t\t\t\t */\r\n\t\t\t\tif (recycle) input = inputCopy;\r\n\t\t\t\telse {\r\n\t\t\t\t\tout.print(\"Please enter your words and separate them with only spaces. \");\r\n\t\t\t\t\tinput = scanner.nextLine();\r\n\t\t\t\t\tinputCopy = input;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tout.print(\"Please enter your words and separate them with only spaces. \");\r\n\t\t\t\tinput = scanner.nextLine();\r\n\t\t\t\tinputCopy = input;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * This is just in case the user added any leading or trailing spaces, since they\r\n\t\t\t * hold the potential to throw off the random word algorithm.\r\n\t\t\t */\r\n\t\t\tinput = input.trim();\r\n\t\t\t/*\r\n\t\t\t * This is the part where the code generates an array using the user's input and\r\n\t\t\t * then picks a random word.\r\n\t\t\t */\r\n\t\t\tvar list = input.split(\" \");\r\n\t\t\tvar random = toIntExact(round(random() * list.length));\r\n\t\t\tmain = list[random];\r\n\t\t\t/*\r\n\t\t\t * This is the array which is displayed with the letter and underscores when the\r\n\t\t\t * game is played.\r\n\t\t\t */\r\n\t\t\thangman = new char[main.length()];\r\n\t\t\tfill(hangman, '_');\r\n\t\t\t/*\r\n\t\t\t * This is the array keeping track of the letters the user has already\r\n\t\t\t * guessed, and then displays it along with the rest of the game's UI.\r\n\t\t\t */\r\n\t\t\tguessList = new char[52];\r\n\t\t\tfill(guessList, ' ');\r\n\t\t\t/* This is just to squash potential bugs. */\r\n\t\t\tif (Arrays.toString(guessList).equals(\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"))\r\n\t\t\t\terr.println(\"Overload Error.\");\r\n\t\t\t/*\r\n\t\t\t * This passes control to the method {@link #logic}, which will be pass back at the\r\n\t\t\t * end of the invocation of the {@link #logic} method\r\n\t\t\t */\r\n\t\t\tlogic(scanner);\r\n\t\t\t/*\r\n\t\t\t * These lines right before the end of the loop are what prompt the user on if\r\n\t\t\t * they want to play again. If the user says yes, the loop just reiterates.\r\n\t\t\t * Otherwise, the while loop is terminated and the code moves on to the win/lose\r\n\t\t\t * counter.\r\n\t\t\t */\r\n\t\t\tout.print(\"Do you want to play again? \");\r\n\t\t\tredo = scanner.nextLine();\r\n\t\t\tif (redo.equalsIgnoreCase(\"no\") || redo.equalsIgnoreCase(\"n\")) {\r\n\t\t\t\tout.println(\"You have quit the game.\");\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} while (true);\r\n\t\t/*\r\n\t\t * This displays the user's win and loss counter, after the game has terminated\r\n\t\t * for the last time.\r\n\t\t */\r\n\t\tout.printf(\"\\nYou had %d wins and %d losses.%n\", wins, losses);\r\n\t}\r\n\r\n\t/*\r\n\t * This method contains the primary logic for the game and the ASCII art\r\n\t * messages for both a winning instance and a losing instance.\r\n\t */\r\n\tprivate void logic(Scanner in) throws InterruptedException {\r\n\t\t/*\r\n\t\t * This is the ASCII art for the win and lose messages. For the sake of a\r\n\t\t * surprise, it is not declared with the rest of the variables, as the formatter\r\n\t\t * in Eclipse places class level variables before methods, ruining the surprise.\r\n\t\t * For the same reason, the Strings are split so the user cannot visually\r\n\t\t * identify what they say without modifying the code.\r\n\t\t */\r\n\t\tvar winner = new String[]{\r\n\t\t\t\t\"YYYYYYY       YYYYYYY                                         \"\r\n\t\t\t\t\t\t+ \"WWWWWWWW                           WWWWWWWW  iiii                     \",\r\n\t\t\t\t\"Y:::::Y       Y:::::Y                                         \"\r\n\t\t\t\t\t\t+ \"W::::::W                           W::::::W i::::i                    \",\r\n\t\t\t\t\"Y:::::Y       Y:::::Y                                         \"\r\n\t\t\t\t\t\t+ \"W::::::W                           W::::::W  iiii                     \",\r\n\t\t\t\t\"Y::::::Y     Y::::::Y                                         \"\r\n\t\t\t\t\t\t+ \"W::::::W                           W::::::W                           \",\r\n\t\t\t\t\"YYY:::::Y   Y:::::YYY   ooooooooooo    uuuuuu    uuuuuu       \"\r\n\t\t\t\t\t\t+ \" W:::::W           WWWWW           W:::::W iiiiiii  nnnn  nnnnnnnn    \",\r\n\t\t\t\t\"   Y:::::Y Y:::::Y    oo:::::::::::oo  u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  W:::::W         W:::::W         W:::::W  i:::::i  n:::nn::::::::nn  \",\r\n\t\t\t\t\"    Y:::::Y:::::Y    o:::::::::::::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"   W:::::W       W:::::::W       W:::::W    i::::i  n::::::::::::::nn \",\r\n\t\t\t\t\"     Y:::::::::Y     o:::::ooooo:::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"    W:::::W     W:::::::::W     W:::::W     i::::i  nn:::::::::::::::n\",\r\n\t\t\t\t\"      Y:::::::Y      o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"     W:::::W   W:::::W:::::W   W:::::W      i::::i    n:::::nnnn:::::n\",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"      W:::::W W:::::W W:::::W W:::::W       i::::i    n::::n    n::::n\",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"       W:::::W:::::W   W:::::W:::::W        i::::i    n::::n    n::::n\",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u:::::uuuu:::::u       \"\r\n\t\t\t\t\t\t+ \"        W:::::::::W     W:::::::::W         i::::i    n::::n    n::::n\",\r\n\t\t\t\t\"       Y:::::Y       o:::::ooooo:::::o u:::::::::::::::uu     \"\r\n\t\t\t\t\t\t+ \"         W:::::::W       W:::::::W         i::::::i   n::::n    n::::n\",\r\n\t\t\t\t\"    YYYY:::::YYYY    o:::::::::::::::o  u:::::::::::::::u     \"\r\n\t\t\t\t\t\t+ \"          W:::::W         W:::::W          i::::::i   n::::n    n::::n\",\r\n\t\t\t\t\"    Y:::::::::::Y     oo:::::::::::oo    uu::::::::uu:::u     \"\r\n\t\t\t\t\t\t+ \"           W:::W           W:::W           i::::::i   n::::n    n::::n\",\r\n\t\t\t\t\"    YYYYYYYYYYYYY       ooooooooooo        uuuuuuuu  uuuu     \"\r\n\t\t\t\t\t\t+ \"            WWW             WWW            iiiiiiii   nnnnnn    nnnnnn\"};\r\n\t\tvar loser = new String[]{\r\n\t\t\t\t\"YYYYYYY       YYYYYYY                                         \"\r\n\t\t\t\t\t\t+ \"LLLLLLLLLLL                                                                      \",\r\n\t\t\t\t\"Y:::::Y       Y:::::Y                                         \"\r\n\t\t\t\t\t\t+ \"L:::::::::L                                                                      \",\r\n\t\t\t\t\"Y:::::Y       Y:::::Y                                         \"\r\n\t\t\t\t\t\t+ \"L:::::::::L                                                                      \",\r\n\t\t\t\t\"Y::::::Y     Y::::::Y                                         \"\r\n\t\t\t\t\t\t+ \"LL:::::::LL                                                                      \",\r\n\t\t\t\t\"YYY:::::Y   Y:::::YYY   ooooooooooo    uuuuuu    uuuuuu       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                   ooooooooooo       ssssssssss        eeeeeeeeeeee     \",\r\n\t\t\t\t\"   Y:::::Y Y:::::Y    oo:::::::::::oo  u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                 oo:::::::::::oo   ss::::::::::s     ee::::::::::::ee   \",\r\n\t\t\t\t\"    Y:::::Y:::::Y    o:::::::::::::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                o:::::::::::::::o ss:::::::::::::s   e::::::eeeee:::::ee\",\r\n\t\t\t\t\"     Y:::::::::Y     o:::::ooooo:::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                o:::::ooooo:::::o s::::::ssss:::::s e::::::e     e:::::e\",\r\n\t\t\t\t\"      Y:::::::Y      o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                o::::o     o::::o  s:::::s  ssssss  e:::::::eeeee::::::e\",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                o::::o     o::::o    s::::::s       e:::::::::::::::::e \",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u::::u    u::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L                o::::o     o::::o       s::::::s    e::::::eeeeeeeeeee  \",\r\n\t\t\t\t\"       Y:::::Y       o::::o     o::::o u:::::uuuu:::::u       \"\r\n\t\t\t\t\t\t+ \"  L:::::L         LLLLLL o::::o     o::::o ssssss   s:::::s  e:::::::e           \",\r\n\t\t\t\t\"       Y:::::Y       o:::::ooooo:::::o u:::::::::::::::uu     \"\r\n\t\t\t\t\t\t+ \"LL:::::::LLLLLLLLL:::::L o:::::ooooo:::::o s:::::ssss::::::s e::::::::e          \",\r\n\t\t\t\t\"    YYYY:::::YYYY    o:::::::::::::::o  u:::::::::::::::u     \"\r\n\t\t\t\t\t\t+ \"L::::::::::::::::::::::L o:::::::::::::::o s::::::::::::::s   e::::::::eeeeeeee  \",\r\n\t\t\t\t\"    Y:::::::::::Y     oo:::::::::::oo    uu::::::::uu:::u     \"\r\n\t\t\t\t\t\t+ \"L::::::::::::::::::::::L  oo:::::::::::oo   s:::::::::::ss     ee:::::::::::::e  \",\r\n\t\t\t\t\"    YYYYYYYYYYYYY       ooooooooooo        uuuuuuuu  uuuu     \"\r\n\t\t\t\t\t\t+ \"LLLLLLLLLLLLLLLLLLLLLLLL    ooooooooooo      sssssssssss         eeeeeeeeeeeeee  \"};\r\n\t\t/*\r\n\t\t * This determines whether or not the user has won the round after every\r\n\t\t * sub-round of the game.\r\n\t\t */\r\n\t\tvar breaker = false;\r\n\t\t/*\r\n\t\t * This counter counts down the amount of misses left, starting from six, the\r\n\t\t * highest number of misses allowed. This and guessListIndexes are both declared\r\n\t\t * here so they can reset once the game reboots for another round.\r\n\t\t */\r\n\t\tvar counter = 6;\r\n\t\t/*\r\n\t\t * This is the variable in charge of keeping track of the indexes of the list of used\r\n\t\t * letters.\r\n\t\t */\r\n\t\tvar guessListIndexes = 0;\r\n\t\t/*\r\n\t\t * This is the do while loop which runs the bulk of the game's underlying logic.\r\n\t\t */\r\n\t\tdo {\r\n\t\t\t/*\r\n\t\t\t * This loop prints out the letters guessed so far. As seen in the method\r\n\t\t\t * \"game,\" the blanks are represented as underscores.\r\n\t\t\t */\r\n\t\t\tfor (var x : hangman) out.print(x + \" \");\r\n\t\t\tout.println();\r\n\t\t\t/*\r\n\t\t\t * The following four lines make it possible to print out the letters which have\r\n\t\t\t * been guessed as a StringBuilder, which is a companion class to String.\r\n\t\t\t */\r\n\t\t\tvar guessed = new StringBuilder();\r\n\t\t\tfor (var x : guessList) guessed.append(x).append(\" \");\r\n\t\t\tguessed = new StringBuilder(guessed.toString().trim());\r\n\t\t\t/*\r\n\t\t\t * This is where I print out the remaining number of misses, the letters guessed\r\n\t\t\t * so far, and the prompt for the user to input their guess.\r\n\t\t\t */\r\n\t\t\tout.printf(\"Misses left: %d\\nLetters guessed so far: %s\\nGuess Letter: \", counter, guessed);\r\n\t\t\t/* This is where the user inputs their guess. */\r\n\t\t\tvar guess = in.nextLine().charAt(0);\r\n\t\t\t/*\r\n\t\t\t * This if/else is what determines whether or not the the user's letter input is\r\n\t\t\t * in the word.\r\n\t\t\t */\r\n\t\t\tif (main.indexOf(guess) >= 0) {\r\n\t\t\t\tout.printf(\"Found %s!%n\", guess);\r\n\t\t\t\t/*\r\n\t\t\t\t * This for loop is what adds the letter to the array which is printed as the\r\n\t\t\t\t * letters and underscores.\r\n\t\t\t\t */\r\n\t\t\t\titerate(main.indexOf(guess), i -> i >= 0, i -> main.indexOf(guess, i + 1)).forEachOrdered(i -> hangman[i] = guess);\r\n\t\t\t} else {\r\n\t\t\t\tout.printf(\"No %s!%n\", guess);\r\n\t\t\t\tcounter--;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * This if statement adds the character guessed to guessList only if the\r\n\t\t\t * character is not in the array.\r\n\t\t\t */\r\n\t\t\tif (Arrays.toString(guessList).indexOf(guess) < 0) {\r\n\t\t\t\tguessList[guessListIndexes] = guess;\r\n\t\t\t\tguessListIndexes++;\r\n\t\t\t}\r\n\t\t\t/*\r\n\t\t\t * This loop structure sorts the list of letters which are were already guessed.\r\n\t\t\t */\r\n\t\t\tfor (var i = 1; i < guessList.length; i++) {\r\n\t\t\t\tvar j = i;\r\n\t\t\t\twhile ((j > 0) && (guessList[j] < guessList[j - 1])) {\r\n\t\t\t\t\tvar ph = guessList[j];\r\n\t\t\t\t\tguessList[j] = guessList[j - 1];\r\n\t\t\t\t\tguessList[j - 1] = ph;\r\n\t\t\t\t\tj--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tout.println();\r\n\t\t\t/* This causes a break between the rounds. */\r\n\t\t\tsleep(750);\r\n\t\t\t/* The following five lines determine whether or not the round is complete. */\r\n\t\t\tvar y = new StringBuilder();\r\n\t\t\tfor (var x : hangman) y.append(x);\r\n\t\t\tif (y.indexOf(\"_\") < 0) breaker = true;\r\n\t\t\t/*\r\n\t\t\t * This if statement prints win ASCII art if the user wins the round, and then\r\n\t\t\t * breaks the loop in order to go back to the method \"game.\"\r\n\t\t\t */\r\n\t\t\tif (breaker) {\r\n\t\t\t\tout.println();\r\n\t\t\t\twins++;\r\n\t\t\t\tstream(winner).forEachOrdered(out::println);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} while (counter > 0);\r\n\t\t/*\r\n\t\t * This if statement prints the word and the loss ASCII art if the user loses\r\n\t\t * the round.\r\n\t\t */\r\n\t\tif (counter == 0) {\r\n\t\t\tout.printf(\"You were hung! The word was %s.%n\", main);\r\n\t\t\tstream(loser).forEachOrdered(out::println);\r\n\t\t\tlosses++;\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/hackPHS2019/HangmanProject.java b/Random_Work/src/hackPHS2019/HangmanProject.java
--- a/Random_Work/src/hackPHS2019/HangmanProject.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/hackPHS2019/HangmanProject.java	(date 1614742706319)
@@ -18,7 +18,7 @@
 	private static char[] hangman, guessList;
 	private static String main, redo = null, inputCopy = null;
 	private static int wins = 0, losses = 0;
-	private Scanner scanner = new Scanner(in);
+	private final Scanner scanner = new Scanner(in);
 
 	/**
 	 * This is where the game actually starts. Here, the method {@code game} is invoked and
Index: Random_Work/src/projectEuler/programs/p054.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p054.kt b/Random_Work/src/projectEuler/programs/p054.kt
new file mode 100644
--- /dev/null	(date 1614954633683)
+++ b/Random_Work/src/projectEuler/programs/p054.kt	(date 1614954633683)
@@ -0,0 +1,119 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+
+class p054 : EulerSolution() {
+	override fun run(): String {
+		var count = 0
+		for (hand in HANDS) {
+			// Parse cards and divide among players
+			val cards = hand.split(" ".toRegex()).toTypedArray()
+			assert(cards.size == 10)
+			val player1 = arrayOfNulls<Card>(5)
+			val player2 = arrayOfNulls<Card>(5)
+			for (i in 0..4) {
+				player1[i] = Card(cards[i])
+				player2[i] = Card(cards[i + 5])
+			}
+			// Compare hand scores
+			if (getScore(player1) > getScore(player2)) count++
+		}
+		return count.toString()
+	}
+
+	private class Card @Contract(pure = true) constructor(rank: Int, suit: Int) {
+		val rank: Int
+		val suit: Int
+
+		constructor(str: String) : this("23456789TJQKA".indexOf(str[0]), "SHCD".indexOf(str[1]))
+
+		@Contract(value = "null -> false", pure = true)
+		override fun equals(other: Any?): Boolean {
+			if (other !is Card) return false
+			val other = other
+			return rank == other.rank && suit == other.suit
+		}
+
+		@Contract(pure = true)
+		override fun hashCode(): Int {
+			return (rank shl 2) + suit
+		}
+
+		init {
+			assert(rank >= 0 && rank < 13 && suit >= 0 && suit < 4)
+			this.rank = rank
+			this.suit = suit
+		}
+	}
+
+	companion object {
+		private val HANDS = arrayOf("8C TS KC 9H 4S 7D 2S 5D 3S AC", "5C AD 5D AC 9C 7C 5H 8D TD KS", "3H 7H 6S KC JS QH TD JC 2D 8S", "TH 8H 5C QS TC 9H 4D JC KS JS", "7C 5H KC QH JD AS KH 4C AD 4S", "5H KS 9C 7D 9H 8D 3S 5D 5C AH", "6H 4H 5C 3H 2H 3S QH 5S 6S AS", "TD 8C 4H 7C TC KC 4C 3H 7S KS", "7C 9C 6D KD 3H 4C QS QC AC KH", "JC 6S 5H 2H 2D KD 9D 7C AS JS", "AD QH TH 9D 8H TS 6D 3S AS AC", "2H 4S 5C 5S TC KC JD 6C TS 3C", "QD AS 6H JS 2C 3D 9H KC 4H 8S", "KD 8S 9S 7C 2S 3S 6D 6S 4H KC", "3C 8C 2D 7D 4D 9S 4S QH 4H JD", "8C KC 7S TC 2D TS 8H QD AC 5C", "3D KH QD 6C 6S AD AS 8H 2H QS", "6S 8D 4C 8S 6C QH TC 6D 7D 9D", "2S 8D 8C 4C TS 9S 9D 9C AC 3D", "3C QS 2S 4H JH 3D 2D TD 8S 9H", "5H QS 8S 6D 3C 8C JD AS 7H 7D", "6H TD 9D AS JH 6C QC 9S KD JC", "AH 8S QS 4D TH AC TS 3C 3D 5C", "5S 4D JS 3D 8H 6C TS 3S AD 8C", "6D 7C 5D 5H 3S 5C JC 2H 5S 3D", "5H 6H 2S KS 3D 5D JD 7H JS 8H", "KH 4H AS JS QS QC TC 6D 7C KS", "3D QS TS 2H JS 4D AS 9S JC KD", "QD 5H 4D 5D KH 7H 3D JS KD 4H", "2C 9H 6H 5C 9D 6C JC 2D TH 9S", "7D 6D AS QD JH 4D JS 7C QS 5C", "3H KH QD AD 8C 8H 3S TH 9D 5S", "AH 9S 4D 9D 8S 4H JS 3C TC 8D", "2C KS 5H QD 3S TS 9H AH AD 8S", "5C 7H 5D KD 9H 4D 3D 2D KS AD", "KS KC 9S 6D 2C QH 9D 9H TS TC", "9C 6H 5D QH 4D AD 6D QC JS KH", "9S 3H 9D JD 5C 4D 9H AS TC QH", "2C 6D JC 9C 3C AD 9S KH 9D 7D", "KC 9C 7C JC JS KD 3H AS 3C 7D", "QD KH QS 2C 3S 8S 8H 9H 9C JC", "QH 8D 3C KC 4C 4H 6D AD 9H 9D", "3S KS QS 7H KH 7D 5H 5D JD AD", "2H 2C 6H TH TC 7D 8D 4H 8C AS", "4S 2H AC QC 3S 6D TH 4D 4C KH", "4D TC KS AS 7C 3C 6D 2D 9H 6C", "8C TD 5D QS 2C 7H 4C 9C 3H 9H", "5H JH TS 7S TD 6H AD QD 8H 8S", "5S AD 9C 8C 7C 8D 5H 9D 8S 2S", "4H KH KS 9S 2S KC 5S AD 4S 7D", "QS 9C QD 6H JS 5D AC 8D 2S AS", "KH AC JC 3S 9D 9S 3C 9C 5S JS", "AD 3C 3D KS 3S 5C 9C 8C TS 4S", "JH 8D 5D 6H KD QS QD 3D 6C KC", "8S JD 6C 3S 8C TC QC 3C QH JS", "KC JC 8H 2S 9H 9C JH 8S 8C 9S", "8S 2H QH 4D QC 9D KC AS TH 3C", "8S 6H TH 7C 2H 6S 3C 3H AS 7S", "QH 5S JS 4H 5H TS 8H AH AC JC", "9D 8H 2S 4S TC JC 3C 7H 3H 5C", "3D AD 3C 3S 4C QC AS 5D TH 8C", "6S 9D 4C JS KH AH TS JD 8H AD", "4C 6S 9D 7S AC 4D 3D 3S TC JD", "AD 7H 6H 4H JH KC TD TS 7D 6S", "8H JH TC 3S 8D 8C 9S 2C 5C 4D", "2C 9D KC QH TH QS JC 9C 4H TS", "QS 3C QD 8H KH 4H 8D TD 8S AC", "7C 3C TH 5S 8H 8C 9C JD TC KD", "QC TC JD TS 8C 3H 6H KD 7C TD", "JH QS KS 9C 6D 6S AS 9H KH 6H", "2H 4D AH 2D JH 6H TD 5D 4H JD", "KD 8C 9S JH QD JS 2C QS 5C 7C", "4S TC 7H 8D 2S 6H 7S 9C 7C KC", "8C 5D 7H 4S TD QC 8S JS 4H KS", "AD 8S JH 6D TD KD 7C 6C 2D 7D", "JC 6H 6S JS 4H QH 9H AH 4C 3C", "6H 5H AS 7C 7S 3D KH KC 5D 5C", "JC 3D TD AS 4D 6D 6S QH JD KS", "8C 7S 8S QH 2S JD 5C 7H AH QD", "8S 3C 6H 6C 2C 8D TD 7D 4C 4D", "5D QH KH 7C 2S 7H JS 6D QC QD", "AD 6C 6S 7D TH 6H 2H 8H KH 4H", "KS JS KD 5D 2D KH 7D 9C 8C 3D", "9C 6D QD 3C KS 3S 7S AH JD 2D", "AH QH AS JC 8S 8H 4C KC TH 7D", "JC 5H TD 7C 5D KD 4C AD 8H JS", "KC 2H AC AH 7D JH KH 5D 7S 6D", "9S 5S 9C 6H 8S TD JD 9H 6C AC", "7D 8S 6D TS KD 7H AC 5S 7C 5D", "AH QC JC 4C TC 8C 2H TS 2C 7D", "KD KC 6S 3D 7D 2S 8S 3H 5S 5C", "8S 5D 8H 4C 6H KC 3H 7C 5S KD", "JH 8C 3D 3C 6C KC TD 7H 7C 4C", "JC KC 6H TS QS TD KS 8H 8C 9S", "6C 5S 9C QH 7D AH KS KC 9S 2C", "4D 4S 8H TD 9C 3S 7D 9D AS TH", "6S 7D 3C 6H 5D KD 2C 5C 9D 9C", "2H KC 3D AD 3H QD QS 8D JC 4S", "8C 3H 9C 7C AD 5D JC 9D JS AS", "5D 9H 5C 7H 6S 6C QC JC QD 9S", "JC QS JH 2C 6S 9C QC 3D 4S TC", "4H 5S 8D 3D 4D 2S KC 2H JS 2C", "TD 3S TH KD 4D 7H JH JS KS AC", "7S 8C 9S 2D 8S 7D 5C AD 9D AS", "8C 7H 2S 6C TH 3H 4C 3S 8H AC", "KD 5H JC 8H JD 2D 4H TD JH 5C", "3D AS QH KS 7H JD 8S 5S 6D 5H", "9S 6S TC QS JC 5C 5D 9C TH 8C", "5H 3S JH 9H 2S 2C 6S 7S AS KS", "8C QD JC QS TC QC 4H AC KH 6C", "TC 5H 7D JH 4H 2H 8D JC KS 4D", "5S 9C KH KD 9H 5C TS 3D 7D 2D", "5H AS TC 4D 8C 2C TS 9D 3H 8D", "6H 8D 2D 9H JD 6C 4S 5H 5S 6D", "AD 9C JC 7D 6H 9S 6D JS 9H 3C", "AD JH TC QS 4C 5D 9S 7C 9C AH", "KD 6H 2H TH 8S QD KS 9D 9H AS", "4H 8H 8D 5H 6C AH 5S AS AD 8S", "QS 5D 4S 2H TD KS 5H AC 3H JC", "9C 7D QD KD AC 6D 5H QH 6H 5S", "KC AH QH 2H 7D QS 3H KS 7S JD", "6C 8S 3H 6D KS QD 5D 5C 8H TC", "9H 4D 4S 6S 9D KH QC 4H 6C JD", "TD 2D QH 4S 6H JH KD 3C QD 8C", "4S 6H 7C QD 9D AS AH 6S AD 3C", "2C KC TH 6H 8D AH 5C 6D 8S 5D", "TD TS 7C AD JC QD 9H 3C KC 7H", "5D 4D 5S 8H 4H 7D 3H JD KD 2D", "JH TD 6H QS 4S KD 5C 8S 7D 8H", "AC 3D AS 8C TD 7H KH 5D 6C JD", "9D KS 7C 6D QH TC JD KD AS KC", "JH 8S 5S 7S 7D AS 2D 3D AD 2H", "2H 5D AS 3C QD KC 6H 9H 9S 2C", "9D 5D TH 4C JH 3H 8D TC 8H 9H", "6H KD 2C TD 2H 6C 9D 2D JS 8C", "KD 7S 3C 7C AS QH TS AD 8C 2S", "QS 8H 6C JS 4C 9S QC AD TD TS", "2H 7C TS TC 8C 3C 9H 2D 6D JC", "TC 2H 8D JH KS 6D 3H TD TH 8H", "9D TD 9H QC 5D 6C 8H 8C KC TS", "2H 8C 3D AH 4D TH TC 7D 8H KC", "TS 5C 2D 8C 6S KH AH 5H 6H KC", "5S 5D AH TC 4C JD 8D 6H 8C 6C", "KC QD 3D 8H 2D JC 9H 4H AD 2S", "TD 6S 7D JS KD 4H QS 2S 3S 8C", "4C 9H JH TS 3S 4H QC 5S 9S 9C", "2C KD 9H JS 9S 3H JC TS 5D AC", "AS 2H 5D AD 5H JC 7S TD JS 4C", "2D 4S 8H 3D 7D 2C AD KD 9C TS", "7H QD JH 5H JS AC 3D TH 4C 8H", "6D KH KC QD 5C AD 7C 2D 4H AC", "3D 9D TC 8S QD 2C JC 4H JD AH", "6C TD 5S TC 8S AH 2C 5D AS AC", "TH 7S 3D AS 6C 4C 7H 7D 4H AH", "5C 2H KS 6H 7S 4H 5H 3D 3C 7H", "3C 9S AC 7S QH 2H 3D 6S 3S 3H", "2D 3H AS 2C 6H TC JS 6S 9C 6C", "QH KD QD 6D AC 6H KH 2C TS 8C", "8H 7D 3S 9H 5D 3H 4S QC 9S 5H", "2D 9D 7H 6H 3C 8S 5H 4D 3S 4S", "KD 9S 4S TC 7S QC 3S 8S 2H 7H", "TC 3D 8C 3H 6C 2H 6H KS KD 4D", "KC 3D 9S 3H JS 4S 8H 2D 6C 8S", "6H QS 6C TC QD 9H 7D 7C 5H 4D", "TD 9D 8D 6S 6C TC 5D TS JS 8H", "4H KC JD 9H TC 2C 6S 5H 8H AS", "JS 9C 5C 6S 9D JD 8H KC 4C 6D", "4D 8D 8S 6C 7C 6H 7H 8H 5C KC", "TC 3D JC 6D KS 9S 6H 7S 9C 2C", "6C 3S KD 5H TS 7D 9H 9S 6H KH", "3D QD 4C 6H TS AC 3S 5C 2H KD", "4C AS JS 9S 7C TS 7H 9H JC KS", "4H 8C JD 3H 6H AD 9S 4S 5S KS", "4C 2C 7D 3D AS 9C 2S QS KC 6C", "8S 5H 3D 2S AC 9D 6S 3S 4D TD", "QD TH 7S TS 3D AC 7H 6C 5D QC", "TC QD AD 9C QS 5C 8D KD 3D 3C", "9D 8H AS 3S 7C 8S JD 2D 8D KC", "4C TH AC QH JS 8D 7D 7S 9C KH", "9D 8D 4C JH 2C 2S QD KD TS 4H", "4D 6D 5D 2D JH 3S 8S 3H TC KH", "AD 4D 2C QS 8C KD JH JD AH 5C", "5C 6C 5H 2H JH 4H KS 7C TC 3H", "3C 4C QC 5D JH 9C QD KH 8D TC", "3H 9C JS 7H QH AS 7C 9H 5H JC", "2D 5S QD 4S 3C KC 6S 6C 5C 4C", "5D KH 2D TS 8S 9C AS 9S 7C 4C", "7C AH 8C 8D 5S KD QH QS JH 2C", "8C 9D AH 2H AC QC 5S 8H 7H 2C", "QD 9H 5S QS QC 9C 5H JC TH 4H", "6C 6S 3H 5H 3S 6H KS 8D AC 7S", "AC QH 7H 8C 4S KC 6C 3D 3S TC", "9D 3D JS TH AC 5H 3H 8S 3S TC", "QD KH JS KS 9S QC 8D AH 3C AC", "5H 6C KH 3S 9S JH 2D QD AS 8C", "6C 4D 7S 7H 5S JC 6S 9H 4H JH", "AH 5S 6H 9S AD 3S TH 2H 9D 8C", "4C 8D 9H 7C QC AD 4S 9C KC 5S", "9D 6H 4D TC 4C JH 2S 5D 3S AS", "2H 6C 7C KH 5C AD QS TH JD 8S", "3S 4S 7S AH AS KC JS 2S AD TH", "JS KC 2S 7D 8C 5C 9C TS 5H 9D", "7S 9S 4D TD JH JS KH 6H 5D 2C", "JD JS JC TH 2D 3D QD 8C AC 5H", "7S KH 5S 9D 5D TD 4S 6H 3C 2D", "4S 5D AC 8D 4D 7C AD AS AH 9C", "6S TH TS KS 2C QC AH AS 3C 4S", "2H 8C 3S JC 5C 7C 3H 3C KH JH", "7S 3H JC 5S 6H 4C 2S 4D KC 7H", "4D 7C 4H 9S 8S 6S AD TC 6C JC", "KH QS 3S TC 4C 8H 8S AC 3C TS", "QD QS TH 3C TS 7H 7D AH TD JC", "TD JD QC 4D 9S 7S TS AD 7D AC", "AH 7H 4S 6D 7C 2H 9D KS JC TD", "7C AH JD 4H 6D QS TS 2H 2C 5C", "TC KC 8C 9S 4C JS 3C JC 6S AH", "AS 7D QC 3D 5S JC JD 9D TD KH", "TH 3C 2S 6H AH AC 5H 5C 7S 8H", "QC 2D AC QD 2S 3S JD QS 6S 8H", "KC 4H 3C 9D JS 6H 3S 8S AS 8C", "7H KC 7D JD 2H JC QH 5S 3H QS", "9H TD 3S 8H 7S AC 5C 6C AH 7C", "8D 9H AH JD TD QS 7D 3S 9C 8S", "AH QH 3C JD KC 4S 5S 5D TD KS", "9H 7H 6S JH TH 4C 7C AD 5C 2D", "7C KD 5S TC 9D 6S 6C 5D 2S TH", "KC 9H 8D 5H 7H 4H QC 3D 7C AS", "6S 8S QC TD 4S 5C TH QS QD 2S", "8S 5H TH QC 9H 6S KC 7D 7C 5C", "7H KD AH 4D KH 5C 4S 2D KC QH", "6S 2C TD JC AS 4D 6C 8C 4H 5S", "JC TC JD 5S 6S 8D AS 9D AD 3S", "6D 6H 5D 5S TC 3D 7D QS 9D QD", "4S 6C 8S 3S 7S AD KS 2D 7D 7C", "KC QH JC AC QD 5D 8D QS 7H 7D", "JS AH 8S 5H 3D TD 3H 4S 6C JH", "4S QS 7D AS 9H JS KS 6D TC 5C", "2D 5C 6H TC 4D QH 3D 9H 8S 6C", "6D 7H TC TH 5S JD 5C 9C KS KD", "8D TD QH 6S 4S 6C 8S KC 5C TC", "5S 3D KS AC 4S 7D QD 4C TH 2S", "TS 8H 9S 6S 7S QH 3C AH 7H 8C", "4C 8C TS JS QC 3D 7D 5D 7S JH", "8S 7S 9D QC AC 7C 6D 2H JH KC", "JS KD 3C 6S 4S 7C AH QC KS 5H", "KS 6S 4H JD QS TC 8H KC 6H AS", "KH 7C TC 6S TD JC 5C 7D AH 3S", "3H 4C 4H TC TH 6S 7H 6D 9C QH", "7D 5H 4S 8C JS 4D 3D 8S QH KC", "3H 6S AD 7H 3S QC 8S 4S 7S JS", "3S JD KH TH 6H QS 9C 6C 2D QD", "4S QH 4D 5H KC 7D 6D 8D TH 5S", "TD AD 6S 7H KD KH 9H 5S KC JC", "3H QC AS TS 4S QD KS 9C 7S KC", "TS 6S QC 6C TH TC 9D 5C 5D KD", "JS 3S 4H KD 4C QD 6D 9S JC 9D", "8S JS 6D 4H JH 6H 6S 6C KS KH", "AC 7D 5D TC 9S KH 6S QD 6H AS", "AS 7H 6D QH 8D TH 2S KH 5C 5H", "4C 7C 3D QC TC 4S KH 8C 2D JS", "6H 5D 7S 5H 9C 9H JH 8S TH 7H", "AS JS 2S QD KH 8H 4S AC 8D 8S", "3H 4C TD KD 8C JC 5C QS 2D JD", "TS 7D 5D 6C 2C QS 2H 3C AH KS", "4S 7C 9C 7D JH 6C 5C 8H 9D QD", "2S TD 7S 6D 9C 9S QS KH QH 5C", "JC 6S 9C QH JH 8D 7S JS KH 2H", "8D 5H TH KC 4D 4S 3S 6S 3D QS", "2D JD 4C TD 7C 6D TH 7S JC AH", "QS 7S 4C TH 9D TS AD 4D 3H 6H", "2D 3H 7D JD 3D AS 2S 9C QC 8S", "4H 9H 9C 2C 7S JH KD 5C 5D 6H", "TC 9H 8H JC 3C 9S 8D KS AD KC", "TS 5H JD QS QH QC 8D 5D KH AH", "5D AS 8S 6S 4C AH QC QD TH 7H", "3H 4H 7D 6S 4S 9H AS 8H JS 9D", "JD 8C 2C 9D 7D 5H 5S 9S JC KD", "KD 9C 4S QD AH 7C AD 9D AC TD", "6S 4H 4S 9C 8D KS TC 9D JH 7C", "5S JC 5H 4S QH AC 2C JS 2S 9S", "8C 5H AS QD AD 5C 7D 8S QC TD", "JC 4C 8D 5C KH QS 4D 6H 2H 2C", "TH 4S 2D KC 3H QD AC 7H AD 9D", "KH QD AS 8H TH KC 8D 7S QH 8C", "JC 6C 7D 8C KH AD QS 2H 6S 2D", "JC KH 2D 7D JS QC 5H 4C 5D AD", "TS 3S AD 4S TD 2D TH 6S 9H JH", "9H 2D QS 2C 4S 3D KH AS AC 9D", "KH 6S 8H 4S KD 7D 9D TS QD QC", "JH 5H AH KS AS AD JC QC 5S KH", "5D 7D 6D KS KD 3D 7C 4D JD 3S", "AC JS 8D 5H 9C 3H 4H 4D TS 2C", "6H KS KH 9D 7C 2S 6S 8S 2H 3D", "6H AC JS 7S 3S TD 8H 3H 4H TH", "9H TC QC KC 5C KS 6H 4H AC 8S", "TC 7D QH 4S JC TS 6D 6C AC KH", "QH 7D 7C JH QS QD TH 3H 5D KS", "3D 5S 8D JS 4C 2C KS 7H 9C 4H", "5H 8S 4H TD 2C 3S QD QC 3H KC", "QC JS KD 9C AD 5S 9D 7D 7H TS", "8C JC KH 7C 7S 6C TS 2C QD TH", "5S 9D TH 3C 7S QH 8S 9C 2H 5H", "5D 9H 6H 2S JS KH 3H 7C 2H 5S", "JD 5D 5S 2C TC 2S 6S 6C 3C 8S", "4D KH 8H 4H 2D KS 3H 5C 2S 9H", "3S 2D TD 7H 8S 6H JD KC 9C 8D", "6S QD JH 7C 9H 5H 8S 8H TH TD", "QS 7S TD 7D TS JC KD 7C 3C 2C", "3C JD 8S 4H 2D 2S TD AS 4D AC", "AH KS 6C 4C 4S 7D 8C 9H 6H AS", "5S 3C 9S 2C QS KD 4D 4S AC 5D", "2D TS 2C JS KH QH 5D 8C AS KC", "KD 3H 6C TH 8S 7S KH 6H 9S AC", "6H 7S 6C QS AH 2S 2H 4H 5D 5H", "5H JC QD 2C 2S JD AS QC 6S 7D", "6C TC AS KD 8H 9D 2C 7D JH 9S", "2H 4C 6C AH 8S TD 3H TH 7C TS", "KD 4S TS 6C QH 8D 9D 9C AH 7D", "6D JS 5C QD QC 9C 5D 8C 2H KD", "3C QH JH AD 6S AH KC 8S 6D 6H", "3D 7C 4C 7S 5S 3S 6S 5H JC 3C", "QH 7C 5H 3C 3S 8C TS 4C KD 9C", "QD 3S 7S 5H 7H QH JC 7C 8C KD", "3C KD KH 2S 4C TS AC 6S 2C 7C", "2C KH 3C 4C 6H 4D 5H 5S 7S QD", "4D 7C 8S QD TS 9D KS 6H KD 3C", "QS 4D TS 7S 4C 3H QD 8D 9S TC", "TS QH AC 6S 3C 9H 9D QS 8S 6H", "3S 7S 5D 4S JS 2D 6C QH 6S TH", "4C 4H AS JS 5D 3D TS 9C AC 8S", "6S 9C 7C 3S 5C QS AD AS 6H 3C", "9S 8C 7H 3H 6S 7C AS 9H JD KH", "3D 3H 7S 4D 6C 7C AC 2H 9C TH", "4H 5S 3H AC TC TH 9C 9H 9S 8D", "8D 9H 5H 4D 6C 2H QD 6S 5D 3S", "4C 5C JD QS 4D 3H TH AC QH 8C", "QC 5S 3C 7H AD 4C KS 4H JD 6D", "QS AH 3H KS 9H 2S JS JH 5H 2H", "2H 5S TH 6S TS 3S KS 3C 5H JS", "2D 9S 7H 3D KC JH 6D 7D JS TD", "AC JS 8H 2C 8C JH JC 2D TH 7S", "5D 9S 8H 2H 3D TC AH JC KD 9C", "9D QD JC 2H 6D KH TS 9S QH TH", "2C 8D 4S JD 5H 3H TH TC 9C KC", "AS 3D 9H 7D 4D TH KH 2H 7S 3H", "4H 7S KS 2S JS TS 8S 2H QD 8D", "5S 6H JH KS 8H 2S QC AC 6S 3S", "JC AS AD QS 8H 6C KH 4C 4D QD", "2S 3D TS TD 9S KS 6S QS 5C 8D", "3C 6D 4S QC KC JH QD TH KH AD", "9H AH 4D KS 2S 8D JH JC 7C QS", "2D 6C TH 3C 8H QD QH 2S 3S KS", "6H 5D 9S 4C TS TD JS QD 9D JD", "5H 8H KH 8S KS 7C TD AD 4S KD", "2C 7C JC 5S AS 6C 7D 8S 5H 9C", "6S QD 9S TS KH QS 5S QH 3C KC", "7D 3H 3C KD 5C AS JH 7H 6H JD", "9D 5C 9H KC 8H KS 4S AD 4D 2S", "3S JD QD 8D 2S 7C 5S 6S 5H TS", "6D 9S KC TD 3S 6H QD JD 5C 8D", "5H 9D TS KD 8D 6H TD QC 4C 7D", "6D 4S JD 9D AH 9S AS TD 9H QD", "2D 5S 2H 9C 6H 9S TD QC 7D TC", "3S 2H KS TS 2C 9C 8S JS 9D 7D", "3C KC 6D 5D 6C 6H 8S AS 7S QS", "JH 9S 2H 8D 4C 8H 9H AD TH KH", "QC AS 2S JS 5C 6H KD 3H 7H 2C", "QD 8H 2S 8D 3S 6D AH 2C TC 5C", "JD JS TS 8S 3H 5D TD KC JC 6H", "6S QS TC 3H 5D AH JC 7C 7D 4H", "7C 5D 8H 9C 2H 9H JH KH 5S 2C", "9C 7H 6S TH 3S QC QD 4C AC JD", "2H 5D 9S 7D KC 3S QS 2D AS KH", "2S 4S 2H 7D 5C TD TH QH 9S 4D", "6D 3S TS 6H 4H KS 9D 8H 5S 2D", "9H KS 4H 3S 5C 5D KH 6H 6S JS", "KC AS 8C 4C JC KH QC TH QD AH", "6S KH 9S 2C 5H TC 3C 7H JC 4D", "JD 4S 6S 5S 8D 7H 7S 4D 4C 2H", "7H 9H 5D KH 9C 7C TS TC 7S 5H", "4C 8D QC TS 4S 9H 3D AD JS 7C", "8C QS 5C 5D 3H JS AH KC 4S 9D", "TS JD 8S QS TH JH KH 2D QD JS", "JD QC 5D 6S 9H 3S 2C 8H 9S TS", "2S 4C AD 7H JC 5C 2D 6D 4H 3D", "7S JS 2C 4H 8C AD QD 9C 3S TD", "JD TS 4C 6H 9H 7D QD 6D 3C AS", "AS 7C 4C 6S 5D 5S 5C JS QC 4S", "KD 6S 9S 7C 3C 5S 7D JH QD JS", "4S 7S JH 2C 8S 5D 7H 3D QH AD", "TD 6H 2H 8D 4H 2D 7C AD KH 5D", "TS 3S 5H 2C QD AH 2S 5C KH TD", "KC 4D 8C 5D AS 6C 2H 2S 9H 7C", "KD JS QC TS QS KH JH 2C 5D AD", "3S 5H KC 6C 9H 3H 2H AD 7D 7S", "7S JS JH KD 8S 7D 2S 9H 7C 2H", "9H 2D 8D QC 6S AD AS 8H 5H 6C", "2S 7H 6C 6D 7D 8C 5D 9D JC 3C", "7C 9C 7H JD 2H KD 3S KH AD 4S", "QH AS 9H 4D JD KS KD TS KH 5H", "4C 8H 5S 3S 3D 7D TD AD 7S KC", "JS 8S 5S JC 8H TH 9C 4D 5D KC", "7C 5S 9C QD 2C QH JS 5H 8D KH", "TD 2S KS 3D AD KC 7S TC 3C 5D", "4C 2S AD QS 6C 9S QD TH QH 5C", "8C AD QS 2D 2S KC JD KS 6C JC", "8D 4D JS 2H 5D QD 7S 7D QH TS", "6S 7H 3S 8C 8S 9D QS 8H 6C 9S", "4S TC 2S 5C QD 4D QS 6D TH 6S", "3S 5C 9D 6H 8D 4C 7D TC 7C TD", "AH 6S AS 7H 5S KD 3H 5H AC 4C", "8D 8S AH KS QS 2C AD 6H 7D 5D", "6H 9H 9S 2H QS 8S 9C 5D 2D KD", "TS QC 5S JH 7D 7S TH 9S 9H AC", "7H 3H 6S KC 4D 6D 5C 4S QD TS", "TD 2S 7C QD 3H JH 9D 4H 7S 7H", "KS 3D 4H 5H TC 2S AS 2D 6D 7D", "8H 3C 7H TD 3H AD KC TH 9C KH", "TC 4C 2C 9S 9D 9C 5C 2H JD 3C", "3H AC TS 5D AD 8D 6H QC 6S 8C", "2S TS 3S JD 7H 8S QH 4C 5S 8D", "AC 4S 6C 3C KH 3D 7C 2D 8S 2H", "4H 6C 8S TH 2H 4S 8H 9S 3H 7S", "7C 4C 9C 2C 5C AS 5D KD 4D QH", "9H 4H TS AS 7D 8D 5D 9S 8C 2H", "QC KD AC AD 2H 7S AS 3S 2D 9S", "2H QC 8H TC 6D QD QS 5D KH 3C", "TH JD QS 4C 2S 5S AD 7H 3S AS", "7H JS 3D 6C 3S 6D AS 9S AC QS", "9C TS AS 8C TC 8S 6H 9D 8D 6C", "4D JD 9C KC 7C 6D KS 3S 8C AS", "3H 6S TC 8D TS 3S KC 9S 7C AS", "8C QC 4H 4S 8S 6C 3S TC AH AC", "4D 7D 5C AS 2H 6S TS QC AD TC", "QD QC 8S 4S TH 3D AH TS JH 4H", "5C 2D 9S 2C 3H 3C 9D QD QH 7D", "KC 9H 6C KD 7S 3C 4D AS TC 2D", "3D JS 4D 9D KS 7D TH QC 3H 3C", "8D 5S 2H 9D 3H 8C 4C 4H 3C TH", "JC TH 4S 6S JD 2D 4D 6C 3D 4C", "TS 3S 2D 4H AC 2C 6S 2H JH 6H", "TD 8S AD TC AH AC JH 9S 6S 7S", "6C KC 4S JD 8D 9H 5S 7H QH AH", "KD 8D TS JH 5C 5H 3H AD AS JS", "2D 4H 3D 6C 8C 7S AD 5D 5C 8S", "TD 5D 7S 9C 4S 5H 6C 8C 4C 8S", "JS QH 9C AS 5C QS JC 3D QC 7C", "JC 9C KH JH QS QC 2C TS 3D AD", "5D JH AC 5C 9S TS 4C JD 8C KS", "KC AS 2D KH 9H 2C 5S 4D 3D 6H", "TH AH 2D 8S JC 3D 8C QH 7S 3S", "8H QD 4H JC AS KH KS 3C 9S 6D", "9S QH 7D 9C 4S AC 7H KH 4D KD", "AH AD TH 6D 9C 9S KD KS QH 4H", "QD 6H 9C 7C QS 6D 6S 9D 5S JH", "AH 8D 5H QD 2H JC KS 4H KH 5S", "5C 2S JS 8D 9C 8C 3D AS KC AH", "JD 9S 2H QS 8H 5S 8C TH 5C 4C", "QC QS 8C 2S 2C 3S 9C 4C KS KH", "2D 5D 8S AH AD TD 2C JS KS 8C", "TC 5S 5H 8H QC 9H 6H JD 4H 9S", "3C JH 4H 9H AH 4S 2H 4C 8D AC", "8S TH 4D 7D 6D QD QS 7S TC 7C", "KH 6D 2D JD 5H JS QD JH 4H 4S", "9C 7S JH 4S 3S TS QC 8C TC 4H", "QH 9D 4D JH QS 3S 2C 7C 6C 2D", "4H 9S JD 5C 5H AH 9D TS 2D 4C", "KS JH TS 5D 2D AH JS 7H AS 8D", "JS AH 8C AD KS 5S 8H 2C 6C TH", "2H 5D AD AC KS 3D 8H TS 6H QC", "6D 4H TS 9C 5H JS JH 6S JD 4C", "JH QH 4H 2C 6D 3C 5D 4C QS KC", "6H 4H 6C 7H 6S 2S 8S KH QC 8C", "3H 3D 5D KS 4H TD AD 3S 4D TS", "5S 7C 8S 7D 2C KS 7S 6C 8C JS", "5D 2H 3S 7C 5C QD 5H 6D 9C 9H", "JS 2S KD 9S 8D TD TS AC 8C 9D", "5H QD 2S AC 8C 9H KS 7C 4S 3C", "KH AS 3H 8S 9C JS QS 4S AD 4D", "AS 2S TD AD 4D 9H JC 4C 5H QS", "5D 7C 4H TC 2D 6C JS 4S KC 3S", "4C 2C 5D AC 9H 3D JD 8S QS QH", "2C 8S 6H 3C QH 6D TC KD AC AH", "QC 6C 3S QS 4S AC 8D 5C AD KH", "5S 4C AC KH AS QC 2C 5C 8D 9C", "8H JD 3C KH 8D 5C 9C QD QH 9D", "7H TS 2C 8C 4S TD JC 9C 5H QH", "JS 4S 2C 7C TH 6C AS KS 7S JD", "JH 7C 9H 7H TC 5H 3D 6D 5D 4D", "2C QD JH 2H 9D 5S 3D TD AD KS", "JD QH 3S 4D TH 7D 6S QS KS 4H", "TC KS 5S 8D 8H AD 2S 2D 4C JH", "5S JH TC 3S 2D QS 9D 4C KD 9S", "AC KH 3H AS 9D KC 9H QD 6C 6S", "9H 7S 3D 5C 7D KC TD 8H 4H 6S", "3C 7H 8H TC QD 4D 7S 6S QH 6C", "6D AD 4C QD 6C 5D 7D 9D KS TS", "JH 2H JD 9S 7S TS KH 8D 5D 8H", "2D 9S 4C 7D 9D 5H QD 6D AC 6S", "7S 6D JC QD JH 4C 6S QS 2H 7D", "8C TD JH KD 2H 5C QS 2C JS 7S", "TC 5H 4H JH QD 3S 5S 5D 8S KH", "KS KH 7C 2C 5D JH 6S 9C 6D JC", "5H AH JD 9C JS KC 2H 6H 4D 5S", "AS 3C TH QC 6H 9C 8S 8C TD 7C", "KC 2C QD 9C KH 4D 7S 3C TS 9H", "9C QC 2S TS 8C TD 9S QD 3S 3C", "4D 9D TH JH AH 6S 2S JD QH JS", "QD 9H 6C KD 7D 7H 5D 6S 8H AH", "8H 3C 4S 2H 5H QS QH 7S 4H AC", "QS 3C 7S 9S 4H 3S AH KS 9D 7C", "AD 5S 6S 2H 2D 5H TC 4S 3C 8C", "QH TS 6S 4D JS KS JH AS 8S 6D", "2C 8S 2S TD 5H AS TC TS 6C KC", "KC TS 8H 2H 3H 7C 4C 5S TH TD", "KD AD KH 7H 7S 5D 5H 5S 2D 9C", "AD 9S 3D 7S 8C QC 7C 9C KD KS", "3C QC 9S 8C 4D 5C AS QD 6C 2C", "2H KC 8S JD 7S AC 8D 5C 2S 4D", "9D QH 3D 2S TC 3S KS 3C 9H TD", "KD 6S AC 2C 7H 5H 3S 6C 6H 8C", "QH TC 8S 6S KH TH 4H 5D TS 4D", "8C JS 4H 6H 2C 2H 7D AC QD 3D", "QS KC 6S 2D 5S 4H TD 3H JH 4C", "7S 5H 7H 8H KH 6H QS TH KD 7D", "5H AD KD 7C KH 5S TD 6D 3C 6C", "8C 9C 5H JD 7C KC KH 7H 2H 3S", "7S 4H AD 4D 8S QS TH 3D 7H 5S", "8D TC KS KD 9S 6D AD JD 5C 2S", "7H 8H 6C QD 2H 6H 9D TC 9S 7C", "8D 6D 4C 7C 6C 3C TH KH JS JH", "5S 3S 8S JS 9H AS AD 8H 7S KD", "JH 7C 2C KC 5H AS AD 9C 9S JS", "AD AC 2C 6S QD 7C 3H TH KS KD", "9D JD 4H 8H 4C KH 7S TS 8C KC", "3S 5S 2H 7S 6H 7D KS 5C 6D AD", "5S 8C 9H QS 7H 7S 2H 6C 7D TD", "QS 5S TD AC 9D KC 3D TC 2D 4D", "TD 2H 7D JD QD 4C 7H 5D KC 3D", "4C 3H 8S KD QH 5S QC 9H TC 5H", "9C QD TH 5H TS 5C 9H AH QH 2C", "4D 6S 3C AC 6C 3D 2C 2H TD TH", "AC 9C 5D QC 4D AD 8D 6D 8C KC", "AD 3C 4H AC 8D 8H 7S 9S TD JC", "4H 9H QH JS 2D TH TD TC KD KS", "5S 6S 9S 8D TH AS KH 5H 5C 8S", "JD 2S 9S 6S 5S 8S 5D 7S 7H 9D", "5D 8C 4C 9D AD TS 2C 7D KD TC", "8S QS 4D KC 5C 8D 4S KH JD KD", "AS 5C AD QH 7D 2H 9S 7H 7C TC", "2S 8S JD KH 7S 6C 6D AD 5D QC", "9H 6H 3S 8C 8H AH TC 4H JS TD", "2C TS 4D 7H 2D QC 9C 5D TH 7C", "6C 8H QC 5D TS JH 5C 5H 9H 4S", "2D QC 7H AS JS 8S 2H 4C 4H 8D", "JS 6S AC KD 3D 3C 4S 7H TH KC", "QH KH 6S QS 5S 4H 3C QD 3S 3H", "7H AS KH 8C 4H 9C 5S 3D 6S TS", "9C 7C 3H 5S QD 2C 3D AD AC 5H", "JH TD 2D 4C TS 3H KH AD 3S 7S", "AS 4C 5H 4D 6S KD JC 3C 6H 2D", "3H 6S 8C 2D TH 4S AH QH AD 5H", "7C 2S 9H 7H KC 5C 6D 5S 3H JC", "3C TC 9C 4H QD TD JH 6D 9H 5S", "7C 6S 5C 5D 6C 4S 7H 9H 6H AH", "AD 2H 7D KC 2C 4C 2S 9S 7H 3S", "TH 4C 8S 6S 3S AD KS AS JH TD", "5C TD 4S 4D AD 6S 5D TC 9C 7D", "8H 3S 4D 4S 5S 6H 5C AC 3H 3D", "9H 3C AC 4S QS 8S 9D QH 5H 4D", "JC 6C 5H TS AC 9C JD 8C 7C QD", "8S 8H 9C JD 2D QC QH 6H 3C 8D", "KS JS 2H 6H 5H QH QS 3H 7C 6D", "TC 3H 4S 7H QC 2H 3S 8C JS KH", "AH 8H 5S 4C 9H JD 3H 7S JC AC", "3C 2D 4C 5S 6C 4S QS 3S JD 3D", "5H 2D TC AH KS 6D 7H AD 8C 6H", "6C 7S 3C JD 7C 8H KS KH AH 6D", "AH 7D 3H 8H 8S 7H QS 5H 9D 2D", "JD AC 4H 7S 8S 9S KS AS 9D QH", "7S 2C 8S 5S JH QS JC AH KD 4C", "AH 2S 9H 4H 8D TS TD 6H QH JD", "4H JC 3H QS 6D 7S 9C 8S 9D 8D", "5H TD 4S 9S 4C 8C 8D 7H 3H 3D", "QS KH 3S 2C 2S 3C 7S TD 4S QD", "7C TD 4D 5S KH AC AS 7H 4C 6C", "2S 5H 6D JD 9H QS 8S 2C 2H TD", "2S TS 6H 9H 7S 4H JC 4C 5D 5S", "2C 5H 7D 4H 3S QH JC JS 6D 8H", "4C QH 7C QD 3S AD TH 8S 5S TS", "9H TC 2S TD JC 7D 3S 3D TH QH", "7D 4C 8S 5C JH 8H 6S 3S KC 3H", "JC 3H KH TC QH TH 6H 2C AC 5H", "QS 2H 9D 2C AS 6S 6C 2S 8C 8S", "9H 7D QC TH 4H KD QS AC 7S 3C", "4D JH 6S 5S 8H KS 9S QC 3S AS", "JD 2D 6S 7S TC 9H KC 3H 7D KD", "2H KH 7C 4D 4S 3H JS QD 7D KC", "4C JC AS 9D 3C JS 6C 8H QD 4D", "AH JS 3S 6C 4C 3D JH 6D 9C 9H", "9H 2D 8C 7H 5S KS 6H 9C 2S TC", "6C 8C AD 7H 6H 3D KH AS 5D TH", "KS 8C 3S TS 8S 4D 5S 9S 6C 4H", "9H 4S 4H 5C 7D KC 2D 2H 9D JH", "5C JS TC 9D 9H 5H 7S KH JC 6S", "7C 9H 8H 4D JC KH JD 2H TD TC", "8H 6C 2H 2C KH 6H 9D QS QH 5H", "AC 7D 2S 3D QD JC 2D 8D JD JH", "2H JC 2D 7H 2C 3C 8D KD TD 4H", "3S 4H 6D 8D TS 3H TD 3D 6H TH", "JH JC 3S AC QH 9H 7H 8S QC 2C", "7H TD QS 4S 8S 9C 2S 5D 4D 2H", "3D TS 3H 2S QC 8H 6H KC JC KS", "5D JD 7D TC 8C 6C 9S 3D 8D AC", "8H 6H JH 6C 5D 8D 8S 4H AD 2C", "9D 4H 2D 2C 3S TS AS TC 3C 5D", "4D TH 5H KS QS 6C 4S 2H 3D AD", "5C KC 6H 2C 5S 3C 4D 2D 9H 9S", "JD 4C 3H TH QH 9H 5S AH 8S AC", "7D 9S 6S 2H TD 9C 4H 8H QS 4C", "3C 6H 5D 4H 8C 9C KC 6S QD QS", "3S 9H KD TC 2D JS 8C 6S 4H 4S", "2S 4C 8S QS 6H KH 3H TH 8C 5D", "2C KH 5S 3S 7S 7H 6C 9D QD 8D", "8H KS AC 2D KH TS 6C JS KC 7H", "9C KS 5C TD QC AH 6C 5H 9S 7C", "5D 4D 3H 4H 6S 7C 7S AH QD TD", "2H 7D QC 6S TC TS AH 7S 9D 3H", "TH 5H QD 9S KS 7S 7C 6H 8C TD", "TH 2D 4D QC 5C 7D JD AH 9C 4H", "4H 3H AH 8D 6H QC QH 9H 2H 2C", "2D AD 4C TS 6H 7S TH 4H QS TD", "3C KD 2H 3H QS JD TC QC 5D 8H", "KS JC QD TH 9S KD 8D 8C 2D 9C", "3C QD KD 6D 4D 8D AH AD QC 8S", "8H 3S 9D 2S 3H KS 6H 4C 7C KC", "TH 9S 5C 3D 7D 6H AC 7S 4D 2C", "5C 3D JD 4D 2D 6D 5H 9H 4C KH", "AS 7H TD 6C 2H 3D QD KS 4C 4S", "JC 3C AC 7C JD JS 8H 9S QC 5D", "JD 6S 5S 2H AS 8C 7D 5H JH 3D", "8D TC 5S 9S 8S 3H JC 5H 7S AS", "5C TD 3D 7D 4H 8D 7H 4D 5D JS", "QS 9C KS TD 2S 8S 5C 2H 4H AS", "TH 7S 4H 7D 3H JD KD 5D 2S KC", "JD 7H 4S 8H 4C JS 6H QH 5S 4H", "2C QS 8C 5S 3H QC 2S 6C QD AD", "8C 3D JD TC 4H 2H AD 5S AC 2S", "5D 2C JS 2D AD 9D 3D 4C 4S JH", "8D 5H 5D 6H 7S 4D KS 9D TD JD", "3D 6D 9C 2S AS 7D 5S 5C 8H JD", "7C 8S 3S 6S 5H JD TC AD 7H 7S", "2S 9D TS 4D AC 8D 6C QD JD 3H", "9S KH 2C 3C AC 3D 5H 6H 8D 5D", "KS 3D 2D 6S AS 4C 2S 7C 7H KH", "AC 2H 3S JC 5C QH 4D 2D 5H 7S", "TS AS JD 8C 6H JC 8S 5S 2C 5D", "7S QH 7H 6C QC 8H 2D 7C JD 2S", "2C QD 2S 2H JC 9C 5D 2D JD JH", "7C 5C 9C 8S 7D 6D 8D 6C 9S JH", "2C AD 6S 5H 3S KS 7S 9D KH 4C", "7H 6C 2C 5C TH 9D 8D 3S QC AH", "5S KC 6H TC 5H 8S TH 6D 3C AH", "9C KD 4H AD TD 9S 4S 7D 6H 5D", "7H 5C 5H 6D AS 4C KD KH 4H 9D", "3C 2S 5C 6C JD QS 2H 9D 7D 3H", "AC 2S 6S 7S JS QD 5C QS 6H AD", "5H TH QC 7H TC 3S 7C 6D KC 3D", "4H 3D QC 9S 8H 2C 3S JC KS 5C", "4S 6S 2C 6H 8S 3S 3D 9H 3H JS", "4S 8C 4D 2D 8H 9H 7D 9D AH TS", "9S 2C 9H 4C 8D AS 7D 3D 6D 5S", "6S 4C 7H 8C 3H 5H JC AH 9D 9C", "2S 7C 5S JD 8C 3S 3D 4D 7D 6S", "3C KC 4S 5D 7D 3D JD 7H 3H 4H", "9C 9H 4H 4D TH 6D QD 8S 9S 7S", "2H AC 8S 4S AD 8C 2C AH 7D TC", "TS 9H 3C AD KS TC 3D 8C 8H JD", "QC 8D 2C 3C 7D 7C JD 9H 9C 6C", "AH 6S JS JH 5D AS QC 2C JD TD", "9H KD 2H 5D 2D 3S 7D TC AH TS", "TD 8H AS 5D AH QC AC 6S TC 5H", "KS 4S 7H 4D 8D 9C TC 2H 6H 3H", "3H KD 4S QD QH 3D 8H 8C TD 7S", "8S JD TC AH JS QS 2D KH KS 4D", "3C AD JC KD JS KH 4S TH 9H 2C", "QC 5S JS 9S KS AS 7C QD 2S JD", "KC 5S QS 3S 2D AC 5D 9H 8H KS", "6H 9C TC AD 2C 6D 5S JD 6C 7C", "QS KH TD QD 2C 3H 8S 2S QC AH", "9D 9H JH TC QH 3C 2S JS 5C 7H", "6C 3S 3D 2S 4S QD 2D TH 5D 2C", "2D 6H 6D 2S JC QH AS 7H 4H KH", "5H 6S KS AD TC TS 7C AC 4S 4H", "AD 3C 4H QS 8C 9D KS 2H 2D 4D", "4S 9D 6C 6D 9C AC 8D 3H 7H KD", "JC AH 6C TS JD 6D AD 3S 5D QD", "JC JH JD 3S 7S 8S JS QC 3H 4S", "JD TH 5C 2C AD JS 7H 9S 2H 7S", "8D 3S JH 4D QC AS JD 2C KC 6H", "2C AC 5H KD 5S 7H QD JH AH 2D", "JC QH 8D 8S TC 5H 5C AH 8C 6C", "3H JS 8S QD JH 3C 4H 6D 5C 3S", "6D 4S 4C AH 5H 5S 3H JD 7C 8D", "8H AH 2H 3H JS 3C 7D QC 4H KD", "6S 2H KD 5H 8H 2D 3C 8S 7S QD", "2S 7S KC QC AH TC QS 6D 4C 8D", "5S 9H 2C 3S QD 7S 6C 2H 7C 9D", "3C 6C 5C 5S JD JC KS 3S 5D TS", "7C KS 6S 5S 2S 2D TC 2H 5H QS", "AS 7H 6S TS 5H 9S 9D 3C KD 2H", "4S JS QS 3S 4H 7C 2S AC 6S 9D", "8C JH 2H 5H 7C 5D QH QS KH QC", "3S TD 3H 7C KC 8D 5H 8S KH 8C", "4H KH JD TS 3C 7H AS QC JS 5S", "AH 9D 2C 8D 4D 2D 6H 6C KC 6S", "2S 6H 9D 3S 7H 4D KH 8H KD 3D", "9C TC AC JH KH 4D JD 5H TD 3S", "7S 4H 9D AS 4C 7D QS 9S 2S KH", "3S 8D 8S KS 8C JC 5C KH 2H 5D", "8S QH 2C 4D KC JS QC 9D AC 6H", "8S 8C 7C JS JD 6S 4C 9C AC 4S", "QH 5D 2C 7D JC 8S 2D JS JH 4C", "JS 4C 7S TS JH KC KH 5H QD 4S", "QD 8C 8D 2D 6S TD 9D AC QH 5S", "QH QC JS 3D 3C 5C 4H KH 8S 7H", "7C 2C 5S JC 8S 3H QC 5D 2H KC", "5S 8D KD 6H 4H QD QH 6D AH 3D", "7S KS 6C 2S 4D AC QS 5H TS JD", "7C 2D TC 5D QS AC JS QC 6C KC", "2C KS 4D 3H TS 8S AD 4H 7S 9S", "QD 9H QH 5H 4H 4D KH 3S JC AD", "4D AC KC 8D 6D 4C 2D KH 2C JD", "2C 9H 2D AH 3H 6D 9C 7D TC KS", "8C 3H KD 7C 5C 2S 4S 5H AS AH", "TH JD 4H KD 3H TC 5C 3S AC KH", "6D 7H AH 7S QC 6H 2D TD JD AS", "JH 5D 7H TC 9S 7D JC AS 5S KH", "2H 8C AD TH 6H QD KD 9H 6S 6C", "QH KC 9D 4D 3S JS JH 4H 2C 9H", "TC 7H KH 4H JC 7D 9S 3H QS 7S", "AD 7D JH 6C 7H 4H 3S 3H 4D QH", "JD 2H 5C AS 6C QC 4D 3C TC JH", "AC JD 3H 6H 4C JC AD 7D 7H 9H", "4H TC TS 2C 8C 6S KS 2H JD 9S", "4C 3H QS QC 9S 9H 6D KC 9D 9C", "5C AD 8C 2C QH TH QD JC 8D 8H", "QC 2C 2S QD 9C 4D 3S 8D JH QS", "9D 3S 2C 7S 7C JC TD 3C TC 9H", "3C TS 8H 5C 4C 2C 6S 8D 7C 4H", "KS 7H 2H TC 4H 2C 3S AS AH QS", "8C 2D 2H 2C 4S 4C 6S 7D 5S 3S", "TH QC 5D TD 3C QS KD KC KS AS", "4D AH KD 9H KS 5C 4C 6H JC 7S", "KC 4H 5C QS TC 2H JC 9S AH QH", "4S 9H 3H 5H 3C QD 2H QC JH 8H", "5D AS 7H 2C 3D JH 6H 4C 6S 7D", "9C JD 9H AH JS 8S QH 3H KS 8H", "3S AC QC TS 4D AD 3D AH 8S 9H", "7H 3H QS 9C 9S 5H JH JS AH AC", "8D 3C JD 2H AC 9C 7H 5S 4D 8H", "7C JH 9H 6C JS 9S 7H 8C 9D 4H", "2D AS 9S 6H 4D JS JH 9H AD QD", "6H 7S JH KH AH 7H TD 5S 6S 2C", "8H JH 6S 5H 5S 9D TC 4C QC 9S", "7D 2C KD 3H 5H AS QD 7H JS 4D", "TS QH 6C 8H TH 5H 3C 3H 9C 9D", "AD KH JS 5D 3H AS AC 9S 5C KC", "2C KH 8C JC QS 6D AH 2D KC TC", "9D 3H 2S 7C 4D 6D KH KS 8D 7D", "9H 2S TC JH AC QC 3H 5S 3S 8H", "3S AS KD 8H 4C 3H 7C JH QH TS", "7S 6D 7H 9D JH 4C 3D 3S 6C AS", "4S 2H 2C 4C 8S 5H KC 8C QC QD", "3H 3S 6C QS QC 2D 6S 5D 2C 9D", "2H 8D JH 2S 3H 2D 6C 5C 7S AD", "9H JS 5D QH 8S TS 2H 7S 6S AD", "6D QC 9S 7H 5H 5C 7D KC JD 4H", "QC 5S 9H 9C 4D 6S KS 2S 4C 7C", "9H 7C 4H 8D 3S 6H 5C 8H JS 7S", "2D 6H JS TD 4H 4D JC TH 5H KC", "AC 7C 8D TH 3H 9S 2D 4C KC 4D", "KD QS 9C 7S 3D KS AD TS 4C 4H", "QH 9C 8H 2S 7D KS 7H 5D KD 4C", "9C 2S 2H JC 6S 6C TC QC JH 5C", "7S AC 8H KC 8S 6H QS JC 3D 6S", "JS 2D JH 8C 4S 6H 8H 6D 5D AD", "6H 7D 2S 4H 9H 7C AS AC 8H 5S", "3C JS 4S 6D 5H 2S QH 6S 9C 2C", "3D 5S 6S 9S 4C QS 8D QD 8S TC", "9C 3D AH 9H 5S 2C 7D AD JC 3S", "7H TC AS 3C 6S 6D 7S KH KC 9H", "3S TC 8H 6S 5H JH 8C 7D AC 2S", "QD 9D 9C 3S JC 8C KS 8H 5D 4D", "JS AH JD 6D 9D 8C 9H 9S 8H 3H", "2D 6S 4C 4D 8S AD 4S TC AH 9H", "TS AC QC TH KC 6D 4H 7S 8C 2H", "3C QD JS 9D 5S JC AH 2H TS 9H", "3H 4D QH 5D 9C 5H 7D 4S JC 3S", "8S TH 3H 7C 2H JD JS TS AC 8D", "9C 2H TD KC JD 2S 8C 5S AD 2C", "3D KD 7C 5H 4D QH QD TC 6H 7D", "7H 2C KC 5S KD 6H AH QC 7S QH", "6H 5C AC 5H 2C 9C 2D 7C TD 2S", "4D 9D AH 3D 7C JD 4H 8C 4C KS", "TH 3C JS QH 8H 4C AS 3D QS QC", "4D 7S 5H JH 6D 7D 6H JS KH 3C", "QD 8S 7D 2H 2C 7C JC 2S 5H 8C", "QH 8S 9D TC 2H AD 7C 8D QD 6S", "3S 7C AD 9H 2H 9S JD TS 4C 2D", "3S AS 4H QC 2C 8H 8S 7S TD TC", "JH TH TD 3S 4D 4H 5S 5D QS 2C", "8C QD QH TC 6D 4S 9S 9D 4H QC", "8C JS 9D 6H JD 3H AD 6S TD QC", "KC 8S 3D 7C TD 7D 8D 9H 4S 3S", "6C 4S 3D 9D KD TC KC KS AC 5S", "7C 6S QH 3D JS KD 6H 6D 2D 8C", "JD 2S 5S 4H 8S AC 2D 6S TS 5C", "5H 8C 5S 3C 4S 3D 7C 8D AS 3H", "AS TS 7C 3H AD 7D JC QS 6C 6H", "3S 9S 4C AC QH 5H 5D 9H TS 4H", "6C 5C 7H 7S TD AD JD 5S 2H 2S", "7D 6C KC 3S JD 8D 8S TS QS KH", "8S QS 8D 6C TH AC AH 2C 8H 9S", "7H TD KH QH 8S 3D 4D AH JD AS", "TS 3D 2H JC 2S JH KH 6C QC JS", "KC TH 2D 6H 7S 2S TC 8C 9D QS", "3C 9D 6S KH 8H 6D 5D TH 2C 2H", "6H TC 7D AD 4D 8S TS 9H TD 7S", "JS 6D JD JC 2H AC 6C 3D KH 8D", "KH JD 9S 5D 4H 4C 3H 7S QS 5C", "4H JD 5D 3S 3C 4D KH QH QS 7S", "JD TS 8S QD AH 4C 6H 3S 5S 2C", "QS 3D JD AS 8D TH 7C 6S QC KS", "7S 2H 8C QC 7H AC 6D 2D TH KH", "5S 6C 7H KH 7D AH 8C 5C 7S 3D", "3C KD AD 7D 6C 4D KS 2D 8C 4S", "7C 8D 5S 2D 2S AH AD 2C 9D TD", "3C AD 4S KS JH 7C 5C 8C 9C TH", "AS TD 4D 7C JD 8C QH 3C 5H 9S", "3H 9C 8S 9S 6S QD KS AH 5H JH", "QC 9C 5S 4H 2H TD 7D AS 8C 9D", "8C 2C 9D KD TC 7S 3D KH QC 3C", "4D AS 4C QS 5S 9D 6S JD QH KS", "6D AH 6C 4C 5H TS 9H 7D 3D 5S", "QS JD 7C 8D 9C AC 3S 6S 6C KH", "8H JH 5D 9S 6D AS 6S 3S QC 7H", "QD AD 5C JH 2H AH 4H AS KC 2C", "JH 9C 2C 6H 2D JS 5D 9H KC 6D", "7D 9D KD TH 3H AS 6S QC 6H AD", "JD 4H 7D KC 3H JS 3C TH 3D QS", "4C 3H 8C QD 5H 6H AS 8H AD JD", "TH 8S KD 5D QC 7D JS 5S 5H TS", "7D KC 9D QS 3H 3C 6D TS 7S AH", "7C 4H 7H AH QC AC 4D 5D 6D TH", "3C 4H 2S KD 8H 5H JH TC 6C JD", "4S 8C 3D 4H JS TD 7S JH QS KD", "7C QC KD 4D 7H 6S AD TD TC KH", "5H 9H KC 3H 4D 3D AD 6S QD 6H", "TH 7C 6H TS QH 5S 2C KC TD 6S", "7C 4D 5S JD JH 7D AC KD KH 4H", "7D 6C 8D 8H 5C JH 8S QD TH JD", "8D 7D 6C 7C 9D KD AS 5C QH JH", "9S 2C 8C 3C 4C KS JH 2D 8D 4H", "7S 6C JH KH 8H 3H 9D 2D AH 6D", "4D TC 9C 8D 7H TD KS TH KD 3C", "JD 9H 8D QD AS KD 9D 2C 2S 9C", "8D 3H 5C 7H KS 5H QH 2D 8C 9H", "2D TH 6D QD 6C KC 3H 3S AD 4C", "4H 3H JS 9D 3C TC 5H QH QC JC", "3D 5C 6H 3S 3C JC 5S 7S 2S QH", "AC 5C 8C 4D 5D 4H 2S QD 3C 3H", "2C TD AH 9C KD JS 6S QD 4C QC", "QS 8C 3S 4H TC JS 3H 7C JC AD", "5H 4D 9C KS JC TD 9S TS 8S 9H", "QD TS 7D AS AC 2C TD 6H 8H AH", "6S AD 8C 4S 9H 8D 9D KH 8S 3C", "QS 4D 2D 7S KH JS JC AD 4C 3C", "QS 9S 7H KC TD TH 5H JS AC JH", "6D AC 2S QS 7C AS KS 6S KH 5S", "6D 8H KH 3C QS 2H 5C 9C 9D 6C", "JS 2C 4C 6H 7D JC AC QD TD 3H", "4H QC 8H JD 4C KD KS 5C KC 7S", "6D 2D 3H 2S QD 5S 7H AS TH 6S", "AS 6D 8D 2C 8S TD 8H QD JC AH", "9C 9H 2D TD QH 2H 5C TC 3D 8H", "KC 8S 3D KH 2S TS TC 6S 4D JH", "9H 9D QS AC KC 6H 5D 4D 8D AH", "9S 5C QS 4H 7C 7D 2H 8S AD JS", "3D AC 9S AS 2C 2D 2H 3H JC KH", "7H QH KH JD TC KS 5S 8H 4C 8D", "2H 7H 3S 2S 5H QS 3C AS 9H KD", "AD 3D JD 6H 5S 9C 6D AC 9S 3S", "3D 5D 9C 2D AC 4S 2S AD 6C 6S", "QC 4C 2D 3H 6S KC QH QD 2H JH", "QC 3C 8S 4D 9S 2H 5C 8H QS QD", "6D KD 6S 7H 3S KH 2H 5C JC 6C", "3S 9S TC 6S 8H 2D AD 7S 8S TS", "3C 6H 9C 3H 5C JC 8H QH TD QD", "3C JS QD 5D TD 2C KH 9H TH AS", "9S TC JD 3D 5C 5H AD QH 9H KC", "TC 7H 4H 8H 3H TD 6S AC 7C 2S", "QS 9D 5D 3C JC KS 4D 6C JH 2S", "9S 6S 3C 7H TS 4C KD 6D 3D 9C", "2D 9H AH AC 7H 2S JH 3S 7C QC", "QD 9H 3C 2H AC AS 8S KD 8C KH", "2D 7S TD TH 6D JD 8D 4D 2H 5S", "8S QH KD JD QS JH 4D KC 5H 3S", "3C KH QC 6D 8H 3S AH 7D TD 2D", "5S 9H QH 4S 6S 6C 6D TS TH 7S", "6C 4C 6D QS JS 9C TS 3H 8D 8S", "JS 5C 7S AS 2C AH 2H AD 5S TC", "KD 6C 9C 9D TS 2S JC 4H 2C QD", "QS 9H TC 3H KC KS 4H 3C AD TH", "KH 9C 2H KD 9D TC 7S KC JH 2D", "7C 3S KC AS 8C 5D 9C 9S QH 3H", "2D 8C TD 4C 2H QC 5D TC 2C 7D", "KS 4D 6C QH TD KH 5D 7C AD 8D", "2S 9S 8S 4C 8C 3D 6H QD 7C 7H", "6C 8S QH 5H TS 5C 3C 4S 2S 2H", "8S 6S 2H JC 3S 3H 9D 8C 2S 7H", "QC 2C 8H 9C AC JD 4C 4H 6S 3S", "3H 3S 7D 4C 9S 5H 8H JC 3D TC", "QH 2S 2D 9S KD QD 9H AD 6D 9C", "8D 2D KS 9S JC 4C JD KC 4S TH", "KH TS 6D 4D 5C KD 5H AS 9H AD", "QD JS 7C 6D 5D 5C TH 5H QH QS", "9D QH KH 5H JH 4C 4D TC TH 6C", "KH AS TS 9D KD 9C 7S 4D 8H 5S", "KH AS 2S 7D 9D 4C TS TH AH 7C", "KS 4D AC 8S 9S 8D TH QH 9D 5C", "5D 5C 8C QS TC 4C 3D 3S 2C 8D", "9D KS 2D 3C KC 4S 8C KH 6C JC", "8H AH 6H 7D 7S QD 3C 4C 6C KC", "3H 2C QH 8H AS 7D 4C 8C 4H KC", "QD 5S 4H 2C TD AH JH QH 4C 8S", "3H QS 5S JS 8H 2S 9H 9C 3S 2C", "6H TS 7S JC QD AC TD KC 5S 3H", "QH AS QS 7D JC KC 2C 4C 5C 5S", "QH 3D AS JS 4H 8D 7H JC 2S 9C", "5D 4D 2S 4S 9D 9C 2D QS 8H 7H", "6D 7H 3H JS TS AC 2D JH 7C 8S", "JH 5H KC 3C TC 5S 9H 4C 8H 9D", "8S KC 5H 9H AD KS 9D KH 8D AH", "JC 2H 9H KS 6S 3H QC 5H AH 9C", "5C KH 5S AD 6C JC 9H QC 9C TD", "5S 5D JC QH 2D KS 8H QS 2H TS", "JH 5H 5S AH 7H 3C 8S AS TD KH", "6H 3D JD 2C 4C KC 7S AH 6C JH", "4C KS 9D AD 7S KC 7D 8H 3S 9C", "7H 5C 5H 3C 8H QC 3D KH 6D JC", "2D 4H 5D 7D QC AD AH 9H QH 8H", "KD 8C JS 9D 3S 3C 2H 5D 6D 2S", "8S 6S TS 3C 6H 8D 5S 3H TD 6C", "KS 3D JH 9C 7C 9S QS 5S 4H 6H", "7S 6S TH 4S KC KD 3S JC JH KS", "7C 3C 2S 6D QH 2C 7S 5H 8H AH", "KC 8D QD 6D KH 5C 7H 9D 3D 9C", "6H 2D 8S JS 9S 2S 6D KC 7C TC", "KD 9C JH 7H KC 8S 2S 7S 3D 6H", "4H 9H 2D 4C 8H 7H 5S 8S 2H 8D", "AD 7C 3C 7S 5S 4D 9H 3D JC KH", "5D AS 7D 6D 9C JC 4C QH QS KH", "KD JD 7D 3D QS QC 8S 6D JS QD", "6S 8C 5S QH TH 9H AS AC 2C JD", "QC KS QH 7S 3C 4C 5C KC 5D AH", "6C 4H 9D AH 2C 3H KD 3D TS 5C", "TD 8S QS AS JS 3H KD AC 4H KS", "7D 5D TS 9H 4H 4C 9C 2H 8C QC", "2C 7D 9H 4D KS 4C QH AD KD JS", "QD AD AH KH 9D JS 9H JC KD JD", "8S 3C 4S TS 7S 4D 5C 2S 6H 7C", "JS 7S 5C KD 6D QH 8S TD 2H 6S", "QH 6C TC 6H TD 4C 9D 2H QC 8H", "3D TS 4D 2H 6H 6S 2C 7H 8S 6C", "9H 9D JD JH 3S AH 2C 6S 3H 8S", "2C QS 8C 5S 3H 2S 7D 3C AD 4S", "5C QC QH AS TS 4S 6S 4C 5H JS", "JH 5C TD 4C 6H JS KD KH QS 4H", "TC KH JC 4D 9H 9D 8D KC 3C 8H", "2H TC 8S AD 9S 4H TS 7H 2C 5C", "4H 2S 6C 5S KS AH 9C 7C 8H KD", "TS QH TD QS 3C JH AH 2C 8D 7D", "5D KC 3H 5S AC 4S 7H QS 4C 2H", "3D 7D QC KH JH 6D 6C TD TH KD", "5S 8D TH 6C 9D 7D KH 8C 9S 6D", "JD QS 7S QC 2S QH JC 4S KS 8D", "7S 5S 9S JD KD 9C JC AD 2D 7C", "4S 5H AH JH 9C 5D TD 7C 2D 6S", "KC 6C 7H 6S 9C QD 5S 4H KS TD", "6S 8D KS 2D TH TD 9H JD TS 3S", "KH JS 4H 5D 9D TC TD QC JD TS", "QS QD AC AD 4C 6S 2D AS 3H KC", "4C 7C 3C TD QS 9C KC AS 8D AD", "KC 7H QC 6D 8H 6S 5S AH 7S 8C", "3S AD 9H JC 6D JD AS KH 6S JH", "AD 3D TS KS 7H JH 2D JS QD AC", "9C JD 7C 6D TC 6H 6C JC 3D 3S", "QC KC 3S JC KD 2C 8D AH QS TS", "AS KD 3D JD 8H 7C 8C 5C QD 6C")
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p054().run())
+		}
+
+		// Returns a score for the given hand. If handX beats handY then getScore(handX) > getScore(handY), and if
+		// handX is a draw with handY then getScore(handX) = getScore(handY) (even if the hands have different cards).
+		// Note that scores need not be consecutive - for example even if scores 1 and 3 exist, there might be no
+		// hand that produces a score of 2. The comparison property is the only guarantee provided by getScore().
+		private fun getScore(hand: Array<Card?>): Int {
+			assert(hand.size == 5)
+			val rankCounts = IntArray(13) // rankCounts[i] is the number of cards with the rank of i
+			var flushSuit = hand[0]?.suit // flushSuit is in the range [0,3] if all cards have that suit; otherwise -1
+			for (card in hand) if (card != null) {
+				run {
+					rankCounts[card.rank]++
+					if (card.suit != flushSuit) flushSuit = -1
+				}
+			}
+			// rankCountHist[i] is the number of times a rank count of i occurs.
+			// For example if there is exactly one triplet, then rankCountHist[3] = 1.
+			val rankCountHist = IntArray(6)
+			for (count in rankCounts) rankCountHist[count]++
+			val bestCards = get5FrequentHighestCards(rankCounts, rankCountHist)
+			val straightHighRank = getStraightHighRank(rankCounts)
+			// Main idea: Encode the hand type in the top bits, then encode up to 5 cards in big-endian (4 bits each).
+			return if (straightHighRank != -1 && flushSuit != -1) 8388608 or straightHighRank // Straight flush
+			else if (rankCountHist[4] == 1) 7340032 or bestCards // Four of a kind
+			else if (rankCountHist[3] == 1 && rankCountHist[2] == 1) 6291456 or bestCards // Full house
+			else if (flushSuit != -1) 5242880 or bestCards // Flush
+			else if (straightHighRank != -1) 4194304 or straightHighRank // Straight
+			else if (rankCountHist[3] == 1) 3145728 or bestCards // Three of a kind
+			else if (rankCountHist[2] == 2) 2097152 or bestCards // Two pairs
+			else if (rankCountHist[2] == 1) 1048576 or bestCards // One pair
+			else bestCards // High card
+		}
+
+		// Encodes 5 card ranks into 20 bits in big-endian, starting with the most frequent cards,
+		// breaking ties by highest rank. For example, the set of ranks {5,5,T,8,T} is encoded as
+		// the sequence [T,T,5,5,8] because pairs come before singles and highest pairs come first.
+		@Contract(pure = true)
+		private fun get5FrequentHighestCards(ranks: IntArray, ranksHist: IntArray): Int {
+			var result = 0
+			var count = 0
+			for (i in ranksHist.indices.reversed()) for (j in ranks.indices.reversed()) if (ranks[j] == i) {
+				var k = 0
+				while (k < i && count < 5) {
+					result = result shl 4 or j
+					k++
+					count++
+				}
+			}
+			assert(count == 5)
+			return result
+		}
+
+		// Returns the rank of the highest card in the straight, or -1 if the set of cards does not form a straight.
+		// This takes into account the fact that ace can be rank 0 (i.e. face value 1) or rank 13 (value immediately after king).
+		@Contract(pure = true)
+		private fun getStraightHighRank(ranks: IntArray): Int {
+			outer@ for (i in ranks.size - 1 downTo 3) {
+				for (j in 0..4) if (ranks[(i - j + 13) % 13] == 0) continue@outer   // Current offset is not a straight
+				return i // Straight found
+			}
+			return -1
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p047.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p047.kt b/Random_Work/src/projectEuler/programs/p047.kt
new file mode 100644
--- /dev/null	(date 1614951975991)
+++ b/Random_Work/src/projectEuler/programs/p047.kt	(date 1614951975991)
@@ -0,0 +1,42 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+
+class p047 : EulerSolution() {
+	override fun run(): String {
+		var i = 2
+		while (true) {
+			if (has4PrimeFactors(i) && has4PrimeFactors(i + 1) && has4PrimeFactors(i + 2) && has4PrimeFactors(i + 3)) return Integer.toString(i)
+			i++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p047().run())
+		}
+
+		private fun has4PrimeFactors(n: Int): Boolean {
+			return countDistinctPrimeFactors(n) == 4
+		}
+
+		private fun countDistinctPrimeFactors(n: Int): Int {
+			var n = n
+			var count = 0
+			var i = 2
+			var end = sqrt(BigInteger.valueOf(n.toLong())).toInt()
+			while (i <= end) {
+				if (n % i == 0) {
+					do n /= i while (n % i == 0)
+					count++
+					end = sqrt(BigInteger.valueOf(n.toLong())).toInt()
+				}
+				i++
+			}
+			if (n > 1) count++
+			return count
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p053.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p053.kt b/Random_Work/src/projectEuler/programs/p053.kt
new file mode 100644
--- /dev/null	(date 1614951977350)
+++ b/Random_Work/src/projectEuler/programs/p053.kt	(date 1614951977350)
@@ -0,0 +1,20 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.binomial
+import java.math.BigInteger
+
+class p053 : EulerSolution() {
+	override fun run(): String {
+		val MILLION = BigInteger.TEN.pow(6)
+		var count = 0
+		for (n in 1..100) for (r in 0..n) if (binomial(n, r).compareTo(MILLION) > 0) count++
+		return Integer.toString(count)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p053().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p019.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p019.kt b/Random_Work/src/projectEuler/programs/p019.kt
new file mode 100644
--- /dev/null	(date 1614951977089)
+++ b/Random_Work/src/projectEuler/programs/p019.kt	(date 1614951977089)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+
+class p019 : EulerSolution() {
+	/**
+	 * We use Zeller's congruence to compute the day of week when given the year, month, and day.
+	 * Then we simply check the first day of all the months in the given range by brute force.
+	 *
+	 *
+	 * Zeller's congruence is well-known and a bit long to explain.
+	 *
+	 * @see [http://en.wikipedia.org/wiki/Zeller%27s_congruence](http://en.wikipedia.org/wiki/Zeller%27s_congruence)
+	 */
+	override fun run(): String {
+		var count = 0
+		for (y in 1901..2000) for (m in 1..12) if (dayOfWeek(y, m) == 0) count++ // Sunday
+		return Integer.toString(count)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p019().run())
+		}
+
+		// Return value: 0 = Sunday, 1 = Monday, ..., 6 = Saturday.
+		@Contract(pure = true)
+		private fun dayOfWeek(year: Int, month: Int): Int {
+			assert(year >= 0 && year <= 10000 && month >= 1 && month <= 12)
+			// Zeller's congruence algorithm
+			var m = (month - 3 + 4800) % 4800
+			val y = (year + m / 12) % 400
+			m %= 12
+			return (y + (y shr 2) - y / 100 + (13 * m + 2) / 5 + 1 + 2) % 7
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p025.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p025.kt b/Random_Work/src/projectEuler/programs/p025.kt
new file mode 100644
--- /dev/null	(date 1614951977493)
+++ b/Random_Work/src/projectEuler/programs/p025.kt	(date 1614951977493)
@@ -0,0 +1,38 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p025 : EulerSolution() {
+	override fun run(): String? {
+		val lowerThres = BigInteger.TEN.pow(DIGITS - 1)
+		val upperThres = BigInteger.TEN.pow(DIGITS)
+		var prev = BigInteger.ONE
+		var cur = BigInteger.ZERO
+		var i = 0
+		while (true) {
+
+			// At this point, prev = fibonacci(i - 1) and cur = fibonacci(i)
+			if (cur.compareTo(upperThres) >= 0) throw RuntimeException("Not found") else if (cur.compareTo(lowerThres) >= 0) return Integer.toString(i)
+			// Advance the Fibonacci sequence by one step
+			val temp = cur.add(prev)
+			prev = cur
+			cur = temp
+			i++
+		}
+	}
+
+	companion object {
+		private const val DIGITS = 1000
+
+		/*
+	 * Because the target number is relatively small, we simply compute each Fibonacci number starting
+	 * from the beginning until we encounter one with exactly 1000 digits. The Fibonacci sequence grows
+	 * exponentially with a base of about 1.618, so the numbers in base 10 will lengthen by one digit
+	 * after every log10(1.618) ~= 4.78 steps on average. This means the answer is at index around 4780.
+	 */
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p025().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p079.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p079.kt b/Random_Work/src/projectEuler/programs/p079.kt
new file mode 100644
--- /dev/null	(date 1614954633768)
+++ b/Random_Work/src/projectEuler/programs/p079.kt	(date 1614954633768)
@@ -0,0 +1,65 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.pow
+import java.util.stream.IntStream
+
+class p079 : EulerSolution() {
+	private lateinit var packedSubseqs: CharArray
+	override fun run(): String {
+		// Preprocessing
+		packedSubseqs = CharArray(SUBSEQS.size * 3)
+		IntStream.range(0, packedSubseqs.size).forEachOrdered { i: Int -> packedSubseqs[i] = SUBSEQS[i / 3][i % 3] }
+		// Try ascending lengths
+		for (len in 3..10) {
+			val end = pow(10, len)
+			for (guess in 0 until end) {
+				val guessChars = toChars(guess, len)
+				if (isConsistent(guessChars)) return String(guessChars)
+			}
+		}
+		throw RuntimeException("Not found")
+	}
+
+	@Contract(pure = true)
+	private fun isConsistent(guess: CharArray): Boolean {
+		// For each string 's' in SUBSEQS, test if 's' is a subsequence of 'guess'
+		var i = 0
+		while (i < packedSubseqs.size) {
+			var j = 0 // Index in 's'
+			// Index in 'guess'
+			var k = 0
+			while (k < guess.size && j < 3) {
+				if (guess[k] == packedSubseqs[i + j]) j++
+				k++
+			}
+			// Not all characters consumed, fail
+			if (j < 3) return false
+			i += 3
+		}
+		return true
+	}
+
+	companion object {
+		private val SUBSEQS = arrayOf("319", "680", "180", "690", "129", "620", "762", "689", "762", "318", "368", "710", "720", "710", "629", "168", "160", "689", "716", "731", "736", "729", "316", "729", "729", "710", "769", "290", "719", "680", "318", "389", "162", "289", "162", "718", "729", "319", "790", "680", "890", "362", "319", "760", "316", "729", "380", "319", "728", "716")
+
+		@JvmStatic
+		fun main(args: Array<String>) = println(p079().run())
+
+		// Converts integer to string with zero padding, in little endian.
+		// Since we're trying all combinations, the order doesn't matter.
+		@Contract(pure = true)
+		private fun toChars(n: Int, len: Int): CharArray {
+			var a = n
+			val result = CharArray(len)
+			var i = 0
+			while (i < result.size) {
+				result[i] = ('0'.toInt() + a % 10).toChar()
+				i++
+				a /= 10
+			}
+			assert(a == 0)
+			return result
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p032.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p032.kt b/Random_Work/src/projectEuler/programs/p032.kt
new file mode 100644
--- /dev/null	(date 1614951975926)
+++ b/Random_Work/src/projectEuler/programs/p032.kt	(date 1614951975926)
@@ -0,0 +1,39 @@
+package projectEuler.programs
+
+import java.util.*
+import java.util.stream.IntStream
+
+class p032 : EulerSolution() {
+	/*
+	 * For contradiction suppose a candidate (x, y, z) has z >= 10000.
+	 * Then x*y consumes at least 5 digits. With the 4 (or fewer)
+	 * remaining digits, even the upper bound of x=99 and y=99
+	 * produces a product of x*y < 10000, which is unequal to z.
+	 *
+	 * Therefore we need the product z < 10000 to be able to find
+	 * possible x and y values.
+	 */
+	override fun run(): String {
+		val sum = IntStream.range(1, 10000).filter { n: Int -> hasPandigitalProduct(n) }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p032().run())
+		}
+
+		private fun hasPandigitalProduct(n: Int): Boolean {
+			// Find and examine all factors of n
+			return IntStream.rangeClosed(1, n).anyMatch { i: Int -> n % i == 0 && isPandigital("" + n + i + n / i) }
+		}
+
+		private fun isPandigital(s: String): Boolean {
+			if (s.length != 9) return false
+			val temp = s.toCharArray()
+			Arrays.sort(temp)
+			return String(temp) == "123456789"
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p080.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p080.kt b/Random_Work/src/projectEuler/programs/p080.kt
new file mode 100644
--- /dev/null	(date 1614951977401)
+++ b/Random_Work/src/projectEuler/programs/p080.kt	(date 1614951977401)
@@ -0,0 +1,54 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p080 : EulerSolution() {
+	override fun run(): String {
+		var sum = 0
+		for (i in 1..100) {
+			val x = BigInteger.valueOf(i.toLong()).multiply(BigInteger.TEN.pow(100 * 2)) // Shift left so that we can obtain 100 digits after the decimal point
+			val y = sqrt(x)
+			if (y.multiply(y) != x) { // Skip perfect squares
+				// Strip rightmost digits so that we have exactly 100 decimal digits (some are before the decimal point)
+				val s = y.toString().substring(0, 100)
+				sum += IntStream.range(0, s.length).map { j: Int -> s[j] - '0' }.sum()
+			}
+		}
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p080().run())
+		}
+
+		private fun sqrt(x: BigInteger): BigInteger {
+			// Find leftmost position
+			var x = x
+			var i = 0
+			while (BigInteger.TEN.pow(i * 2).compareTo(x) <= 0) i++
+			// Extract square root from left to right using an algorithm like long division
+			var y = BigInteger.ZERO
+			while (i >= 0) {
+
+				// Try every value for next digit
+				var j: Int
+				var delta: BigInteger? = null
+				j = 9
+				while (j >= 0) {
+					val temp = BigInteger.valueOf(j.toLong()).multiply(BigInteger.TEN.pow(i))
+					delta = y.shiftLeft(1).add(temp).multiply(temp)
+					if (delta.compareTo(x) <= 0) break
+					j--
+				}
+				assert(j >= 0)
+				x = x.subtract(delta) // Adjust the remainder
+				y = y.add(BigInteger.valueOf(j.toLong()).multiply(BigInteger.TEN.pow(i))) // Add the new digit
+				i--
+			}
+			return y
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p048.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p048.kt b/Random_Work/src/projectEuler/programs/p048.kt
new file mode 100644
--- /dev/null	(date 1614951978316)
+++ b/Random_Work/src/projectEuler/programs/p048.kt	(date 1614951978316)
@@ -0,0 +1,19 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p048 : EulerSolution() {
+	override fun run(): String? {
+		val modulus = BigInteger.TEN.pow(10)
+		var sum = BigInteger.ZERO
+		for (i in 1..1000) sum = sum.add(BigInteger.valueOf(i.toLong()).modPow(BigInteger.valueOf(i.toLong()), modulus))
+		return sum.mod(modulus).toString()
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p048().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p039.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p039.kt b/Random_Work/src/projectEuler/programs/p039.kt
new file mode 100644
--- /dev/null	(date 1614951978219)
+++ b/Random_Work/src/projectEuler/programs/p039.kt	(date 1614951978219)
@@ -0,0 +1,35 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+
+class p039 : EulerSolution() {
+	override fun run(): String {
+		var maxPerimeter = 0
+		var maxTriangles = 0
+		for (p in 1..1000) {
+			val triangles = countSolutions(p)
+			if (triangles > maxTriangles) {
+				maxTriangles = triangles
+				maxPerimeter = p
+			}
+		}
+		return Integer.toString(maxPerimeter)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p039().run())
+		}
+
+		@Contract(pure = true)
+		private fun countSolutions(p: Int): Int {
+			var count = 0
+			for (a in 1..p) for (b in a..p) {
+				val c = p - a - b
+				if (b <= c && a * a + b * b == c * c) count++
+			}
+			return count
+		}
+	}
+}
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n\t<component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_13\" default=\"true\" project-jdk-name=\"JDK 13.0.2\" project-jdk-type=\"JavaSDK\">\r\n\t\t<output url=\"file://$PROJECT_DIR$/out\" />\r\n\t</component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/.idea/misc.xml	(date 1620217299054)
@@ -1,6 +1,7 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-	<component name="ProjectRootManager" version="2" languageLevel="JDK_13" default="true" project-jdk-name="JDK 13.0.2" project-jdk-type="JavaSDK">
-		<output url="file://$PROJECT_DIR$/out" />
+	<component name="ProjectRootManager" version="2" languageLevel="JDK_15" project-jdk-name="JDK 15"
+	           project-jdk-type="JavaSDK">
+		<output url="file://$PROJECT_DIR$/out"/>
 	</component>
 </project>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p024.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p024.kt b/Random_Work/src/projectEuler/programs/p024.kt
new file mode 100644
--- /dev/null	(date 1614951978980)
+++ b/Random_Work/src/projectEuler/programs/p024.kt	(date 1614951978980)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.nextPermutation
+import java.util.*
+import java.util.stream.Collectors
+import java.util.stream.IntStream
+
+class p024 : EulerSolution() {
+	/*
+	 * We initialize an array as the lowest permutation of the given digits, which is the sequence
+	 * (0,1,2,3,4,5,6,7,8,9). Then we call the next permutation algorithm on it 999 999 times
+	 * (because the index in the problem is 1-based), and stringify the resulting sequence.
+	 *
+	 * The next permutation algorithm is well-known and a bit long to explain.
+	 * See: https://www.nayuki.io/page/next-lexicographical-permutation-algorithm
+	 */
+	override fun run(): String {
+		val array = IntStream.range(0, 10).toArray()
+		IntStream.range(0, 999999).forEachOrdered { i: Int -> assert(nextPermutation(array)) }
+		return Arrays.stream(array).mapToObj { i: Int -> i.toString() }.collect(Collectors.joining())
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p024().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p033.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p033.kt b/Random_Work/src/projectEuler/programs/p033.kt
new file mode 100644
--- /dev/null	(date 1614951975948)
+++ b/Random_Work/src/projectEuler/programs/p033.kt	(date 1614951975948)
@@ -0,0 +1,48 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.gcd
+
+class p033 : EulerSolution() {
+	/*
+	 * Consider an arbitrary fraction n/d:
+	 * Let n = 10 * n1 + n0 be the numerator.
+	 * Let d = 10 * d1 + d0 be the denominator.
+	 * As stated in the problem, we need 10 <= n < d < 100.
+	 * We must disregard trivial simplifications where n0 = d0 = 0.
+	 *
+	 * Now, a simplification with n0 = d0 is impossible because:
+	 * n1 / d1 = n / d = (10*n1 + n0) / (10*d1 + n0).
+	 * n1 * (10*d1 + n0) = d1 * (10*n1 + n0).
+	 * 10*n1*d1 + n1*n0 = 10*d1*n1 + d1*n0.
+	 * n1*n0 = d1*n0.
+	 * n1 = d1.
+	 * This implies n = d, which contradicts the fact that n < d.
+	 * Similarly, we cannot have a simplification with n1 = d1 for the same reason.
+	 *
+	 * Therefore we only need to consider the cases where n0 = d1 or n1 = d0.
+	 * In the first case, check that n1/d0 = n/d;
+	 * in the second case, check that n0/d1 = n/d.
+	 */
+	override fun run(): String {
+		var numer = 1
+		var denom = 1
+		for (d in 10..99) for (n in 10 until d) {
+			val n0 = n % 10
+			val n1 = n / 10
+			val d0 = d % 10
+			val d1 = d / 10
+			if (n1 == d0 && n0 * d == n * d1 || n0 == d1 && n1 * d == n * d0) {
+				numer *= n
+				denom *= d
+			}
+		}
+		return Integer.toString(denom / gcd(numer, denom))
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p033().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p023.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p023.kt b/Random_Work/src/projectEuler/programs/p023.kt
new file mode 100644
--- /dev/null	(date 1614951975895)
+++ b/Random_Work/src/projectEuler/programs/p023.kt	(date 1614951975895)
@@ -0,0 +1,39 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.util.stream.IntStream
+
+class p023 : EulerSolution() {
+	private val isAbundant = BooleanArray(LIMIT + 1)
+	override fun run(): String {
+		// Compute look-up table
+		IntStream.range(1, isAbundant.size).forEachOrdered { i: Int -> isAbundant[i] = isAbundant(i) }
+		val sum = IntStream.rangeClosed(1, LIMIT).filter { i: Int -> !isSumOf2Abundants(i) }.sum()
+		return Integer.toString(sum)
+	}
+
+	@Contract(pure = true)
+	private fun isSumOf2Abundants(n: Int): Boolean {
+		return IntStream.rangeClosed(0, n).anyMatch { i: Int -> isAbundant[i] && isAbundant[n - i] }
+	}
+
+	companion object {
+		private const val LIMIT = 28123
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p023().run())
+		}
+
+		private fun isAbundant(n: Int): Boolean {
+			assert(n >= 1)
+			var sum = 1 // Sum of factors less than n
+			val end = sqrt(BigInteger.valueOf(n.toLong())).toInt()
+			sum += IntStream.rangeClosed(2, end).filter { i: Int -> n % i == 0 }.map { i: Int -> i + n / i }.sum()
+			if (end * end == n) sum -= end
+			return sum > n
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p078.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p078.kt b/Random_Work/src/projectEuler/programs/p078.kt
new file mode 100644
--- /dev/null	(date 1614951978161)
+++ b/Random_Work/src/projectEuler/programs/p078.kt	(date 1614951978161)
@@ -0,0 +1,39 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.pow
+import java.util.stream.IntStream
+
+class p078 : EulerSolution() {
+	override fun run(): String {
+		var limit = 1
+		while (true) {
+			val result = search(limit)
+			if (result != -1) return Integer.toString(result)
+			limit *= 2
+		}
+	}
+
+	companion object {
+		private val MODULUS = pow(10, 6)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p078().run())
+		}
+
+		@Contract(pure = true)
+		private fun search(limit: Int): Int {
+			/*
+		 * partitions[i] is {the number of ways i can be written
+		 * as an unordered sum of positive integers} mod 10^6.
+		 * Note that the partition function P(n, k) can be computed with
+		 * dynamic programming using only 1 dimension for memoization.
+		 */
+			val partitions = IntArray(limit)
+			partitions[0] = 1
+			for (i in 1 until limit) for (j in i until limit) partitions[j] = (partitions[j] + partitions[j - i]) % MODULUS
+			return IntStream.range(0, limit).filter { i: Int -> partitions[i] == 0 }.findFirst().orElse(-1)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p035.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p035.kt b/Random_Work/src/projectEuler/programs/p035.kt
new file mode 100644
--- /dev/null	(date 1614951977434)
+++ b/Random_Work/src/projectEuler/programs/p035.kt	(date 1614951977434)
@@ -0,0 +1,27 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimality
+import projectEuler.programs.Library.pow
+import java.util.stream.IntStream
+
+class p035 : EulerSolution() {
+	private val isPrime = listPrimality(LIMIT - 1)
+	override fun run(): String {
+		val count = IntStream.range(0, isPrime.size).filter { n: Int -> isCircularPrime(n) }.count().toInt()
+		return Integer.toString(count)
+	}
+
+	private fun isCircularPrime(n: Int): Boolean {
+		val s = Integer.toString(n)
+		return IntStream.range(0, s.length).allMatch { i: Int -> isPrime[(s.substring(i) + s.substring(0, i)).toInt()] }
+	}
+
+	companion object {
+		private val LIMIT = pow(10, 6)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p035().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p020.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p020.kt b/Random_Work/src/projectEuler/programs/p020.kt
new file mode 100644
--- /dev/null	(date 1614951978273)
+++ b/Random_Work/src/projectEuler/programs/p020.kt	(date 1614951978273)
@@ -0,0 +1,22 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.factorial
+import java.util.stream.IntStream
+
+class p020 : EulerSolution() {
+	/*
+	 * We do a straightforward product with help from Java's BigInteger type.
+	 */
+	override fun run(): String {
+		val temp = factorial(100).toString()
+		val sum = IntStream.range(0, temp.length).map { i: Int -> temp[i] - '0' }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p020().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p038.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p038.kt b/Random_Work/src/projectEuler/programs/p038.kt
new file mode 100644
--- /dev/null	(date 1614951978700)
+++ b/Random_Work/src/projectEuler/programs/p038.kt	(date 1614951978700)
@@ -0,0 +1,30 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.pow
+import java.util.*
+
+class p038 : EulerSolution() {
+	override fun run(): String {
+		var max = -1
+		for (n in 2..9) for (i in 1 until pow(10, 9 / n)) {
+			val concat = StringBuilder()
+			for (j in 1..n) concat.append(i * j)
+			if (isPandigital(concat.toString())) max = Math.max(concat.toString().toInt(), max)
+		}
+		return Integer.toString(max)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p038().run())
+		}
+
+		private fun isPandigital(s: String): Boolean {
+			if (s.length != 9) return false
+			val temp = s.toCharArray()
+			Arrays.sort(temp)
+			return String(temp) == "123456789"
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p063.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p063.kt b/Random_Work/src/projectEuler/programs/p063.kt
new file mode 100644
--- /dev/null	(date 1614951979504)
+++ b/Random_Work/src/projectEuler/programs/p063.kt	(date 1614951979504)
@@ -0,0 +1,34 @@
+package projectEuler.programs
+
+import java.math.BigInteger
+
+class p063 : EulerSolution() {
+	/*
+	 * Let's examine n^k for different values of n and k and see which
+	 * choices cannot possibly work (i.e. not being exactly k digits long).
+	 *
+	 * When n = 10, for each k, n^k has exactly k+1 digits, so these are excluded.
+	 * By extension, when n > 10, for each k, n^k has at least k+1 digits, so these are excluded.
+	 * Thus we should only consider 1 <= n <= 9.
+	 *
+	 * When n = 9, k = 22, then n^k has 21 digits which is insufficient.
+	 * Extending this, when n = 9 and k > 22, n^k has fewer than k digits.
+	 * Furthermore, when n < 9, n^k will have start to have
+	 * fewer than k digits at some value of k with k < 22.
+	 * Therefore we should only consider 1 <= k <= 21.
+	 *
+	 * We handle the rest of the testing by brute force.
+	 */
+	override fun run(): String {
+		var count = 0
+		for (n in 1..9) for (k in 1..21) if (BigInteger.valueOf(n.toLong()).pow(k).toString().length == k) count++
+		return Integer.toString(count)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p063().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p049.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p049.kt b/Random_Work/src/projectEuler/programs/p049.kt
new file mode 100644
--- /dev/null	(date 1614951979944)
+++ b/Random_Work/src/projectEuler/programs/p049.kt	(date 1614951979944)
@@ -0,0 +1,33 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.listPrimality
+import java.util.*
+
+class p049 : EulerSolution() {
+	override fun run(): String {
+		val isPrime = listPrimality(LIMIT - 1)
+		for (base in 1000 until LIMIT) if (isPrime[base]) for (step in 1 until LIMIT) {
+			val a = base + step
+			val b = a + step
+			if (a < LIMIT && isPrime[a] && hasSameDigits(a, base) && b < LIMIT && isPrime[b] && hasSameDigits(b, base) && (base != 1487 || a != 4817)) return "" + base + a + b
+		}
+		throw RuntimeException("Not found")
+	}
+
+	companion object {
+		private const val LIMIT = 10000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p049().run())
+		}
+
+		private fun hasSameDigits(x: Int, y: Int): Boolean {
+			val xdigits = Integer.toString(x).toCharArray()
+			val ydigits = Integer.toString(y).toCharArray()
+			Arrays.sort(xdigits)
+			Arrays.sort(ydigits)
+			return Arrays.equals(xdigits, ydigits)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/graphingCalculator/CalculatorView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphingCalculator;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\nimport java.awt.event.ActionListener;\r\nimport java.util.ArrayList;\r\n\r\nimport static java.awt.BorderLayout.EAST;\r\nimport static java.awt.BorderLayout.WEST;\r\nimport static java.awt.Color.gray;\r\nimport static java.awt.Color.red;\r\nimport static java.awt.Font.PLAIN;\r\nimport static java.lang.Double.valueOf;\r\nimport static java.util.stream.IntStream.range;\r\nimport static java.util.stream.IntStream.rangeClosed;\r\nimport static javax.swing.JFrame.EXIT_ON_CLOSE;\r\nimport static javax.swing.JTabbedPane.TOP;\r\nimport static javax.swing.JTabbedPane.WRAP_TAB_LAYOUT;\r\n\r\nclass CalculatorView implements ActionListener {\r\n\tprivate JFrame frame;\r\n\tprivate JPanel displayPanel;\r\n\tprivate JPanel buttonPanel;\r\n\tprivate JPanel graphPanel;\r\n\tprivate JPanel graphDisplayPanel;\r\n\tprivate JTextArea inputEquation;\r\n\tprivate JTextArea equationDisplay;\r\n\tprivate JTextArea graphEquation;\r\n\tprivate final CalculatorController calcControl;\r\n\tprivate final Graphics2D g;\r\n\tprivate final Font displayFont;\r\n\r\n\t/**\r\n\t * Sets up the overall frame for the Calculator, the two\r\n\t * panels where everything is displayed.\r\n\t */\r\n\tpublic CalculatorView() {\r\n//\t\tCreates a new font to be used within the frame\r\n\t\tdisplayFont = new Font(\"Dialogue\", PLAIN, 18);\r\n//\t\tCreates the frame and correct panels and tabs so it displays properly\r\n\t\tcreateFrame();\r\n\t\tcreateGraphPanel();\r\n\t\tcreateDisplayPanel();\r\n\t\tcreateButtonPanel();\r\n\t\tcreateTabs();\r\n//\t\tCreates a new Calculator Controller for the Calculator\r\n\t\tcalcControl = new CalculatorController();\r\n\t\tframe.setLocationRelativeTo(null);\r\n\t\tframe.setVisible(true);\r\n//\t\tCreates the graphics to draw the grid on the graph panel\r\n\t\tg = (Graphics2D) graphDisplayPanel.getGraphics();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the whole frame to be used in the Calculator, sets it\r\n\t * to be visible and of a set size with a grid layout of two\r\n\t * columns and one row.\r\n\t */\r\n\tprivate void createFrame() {\r\n\t\tframe = new JFrame(\"Graphing Calculator\");\r\n\t\tframe.setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n\t\tframe.setLayout(new GridLayout(1, 2));\r\n\t\tframe.setSize(1250, 720);\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the display panel, which is half the size of the frame,\r\n\t * and has a null layout so we can place the text areas appropriately.\r\n\t * <p>\r\n\t * The display panel is where equations are entered in, evaluated, and graphed.\r\n\t */\r\n\tprivate void createDisplayPanel() {\r\n\t\tdisplayPanel = new JPanel();\r\n\t\tdisplayPanel.setLayout(null);\r\n\t\tframe.add(displayPanel, WEST);\r\n\t\taddToDisplayPanel();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the button panel, which is half the size of the frame,\r\n\t * and has a grid layout to place all the buttons in a uniform way.\r\n\t * <p>\r\n\t * The button panel contains the keyboard for the Calculator.\r\n\t */\r\n\tprivate void createButtonPanel() {\r\n\t\tbuttonPanel = new JPanel();\r\n\t\tbuttonPanel.setLayout(new GridLayout(6, 6));\r\n\t\tframe.add(buttonPanel, EAST);\r\n\t\taddButtonsToButtonPanel();\r\n\t}\r\n\r\n\t/**\r\n\t * Sets up the graph panel, which is half the size of the frame,\r\n\t * and has a null layout so we can add the graph to it in a\r\n\t * specified location.\r\n\t * <p>\r\n\t * The graph panel contains equation to be graphed and the graph itself.\r\n\t */\r\n\tprivate void createGraphPanel() {\r\n\t\tgraphPanel = new JPanel();\r\n\t\tgraphPanel.setLayout(null);\r\n\t\tgraphPanel.setVisible(true);\r\n\t\tframe.add(graphPanel, WEST);\r\n\t\taddToGraphPanel();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * First creates the display panel tab, which allows the user to switch\r\n\t * between the display and graph panels, then creates the button panel\r\n\t * tab, which informs the user of the location of the keyboard.\r\n\t */\r\n\tprivate void createTabs() {\r\n\t\tJTabbedPane tabs = new JTabbedPane(TOP, WRAP_TAB_LAYOUT);\r\n\t\ttabs.addTab(\"Equations\", displayPanel);\r\n\t\ttabs.addTab(\"Graph\", graphPanel);\r\n\t\ttabs.setVisible(true);\r\n\t\tframe.add(tabs);\r\n\r\n\t\ttabs = new JTabbedPane(TOP, WRAP_TAB_LAYOUT);\r\n\t\ttabs.addTab(\"Keyboard\", buttonPanel);\r\n\t\ttabs.setVisible(true);\r\n\t\tframe.add(tabs);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds everything necessary for the display panel, including two\r\n\t * text areas to display the current equation and previous equations\r\n\t */\r\n\tprivate void addToDisplayPanel() {\r\n//\t\tCreates the text area for the input equation and adds it to the displayPanel\r\n\t\tinputEquation = new JTextArea(\"Enter equation here: \", 3, 5);\r\n\t\tinputEquation.setLineWrap(true);\r\n\t\tinputEquation.setEditable(false);\r\n\t\tinputEquation.setFont(displayFont);\r\n\t\tinputEquation.setBounds(0, 0, 600, 50);\r\n\t\tdisplayPanel.add(inputEquation);\r\n//\t\tCreates the text area for the previous equations and adds it to the displayPanel\r\n\t\tequationDisplay = new JTextArea(\"Previous Equations: \\n\", 3, 5);\r\n\t\tequationDisplay.setLineWrap(true);\r\n\t\tequationDisplay.setEditable(false);\r\n\t\tequationDisplay.setFont(displayFont);\r\n\t\tequationDisplay.setBounds(0, 60, 600, 600);\r\n\t\tdisplayPanel.add(equationDisplay);\r\n\t}\r\n\r\n\t/**\r\n\t * Adds all necessary buttons to the keyboard by creating each\r\n\t * button and adding it to an ArrayList to store them all,\r\n\t * then looping through that list and adding them to the panel\r\n\t * while also setting the font to a correct size and creating\r\n\t * action listeners for all buttons.\r\n\t */\r\n\tprivate void addButtonsToButtonPanel() {\r\n//\t\tCreates the new ArrayList to store the buttons\r\n\t\tArrayList<JButton> buttonList = new ArrayList<>();\r\n//\t\tRow one of buttons on the keyboard\r\n\t\tJButton plus = new JButton(\"+\");\r\n\t\tbuttonList.add(plus);\r\n\t\tJButton minus = new JButton(\"-\");\r\n\t\tbuttonList.add(minus);\r\n\t\tJButton multiply = new JButton(\"*\");\r\n\t\tbuttonList.add(multiply);\r\n\t\tJButton divide = new JButton(\"/\");\r\n\t\tbuttonList.add(divide);\r\n\t\tJButton openParen = new JButton(\"(\");\r\n\t\tbuttonList.add(openParen);\r\n\t\tJButton closeParen = new JButton(\")\");\r\n\t\tbuttonList.add(closeParen);\r\n//\t\tRow two of buttons on the keyboard\r\n\t\tJButton seven = new JButton(Integer.toString(7));\r\n\t\tbuttonList.add(seven);\r\n\t\tJButton eight = new JButton(Integer.toString(8));\r\n\t\tbuttonList.add(eight);\r\n\t\tJButton nine = new JButton(Integer.toString(9));\r\n\t\tbuttonList.add(nine);\r\n\t\tJButton power = new JButton(\"^\");\r\n\t\tbuttonList.add(power);\r\n\t\tJButton squared = new JButton(\"x^2\");\r\n\t\tbuttonList.add(squared);\r\n\t\tvar sqrt = new JButton(\"sqrt\");\r\n\t\tbuttonList.add(sqrt);\r\n//\t\tRow three of buttons on the keyboard\r\n\t\tvar four = new JButton(Integer.toString(4));\r\n\t\tbuttonList.add(four);\r\n\t\tvar five = new JButton(Integer.toString(5));\r\n\t\tbuttonList.add(five);\r\n\t\tvar six = new JButton(Integer.toString(6));\r\n\t\tbuttonList.add(six);\r\n\t\tvar sine = new JButton(\"sin()\");\r\n\t\tbuttonList.add(sine);\r\n\t\tvar cosine = new JButton(\"cos()\");\r\n\t\tbuttonList.add(cosine);\r\n\t\tvar tan = new JButton(\"tan()\");\r\n\t\tbuttonList.add(tan);\r\n//\t\tRow four of buttons on the keyboard\r\n\t\tvar one = new JButton(Integer.toString(1));\r\n\t\tbuttonList.add(one);\r\n\t\tvar two = new JButton(Integer.toString(2));\r\n\t\tbuttonList.add(two);\r\n\t\tvar three = new JButton(Integer.toString(3));\r\n\t\tbuttonList.add(three);\r\n\t\tvar pi = new JButton(\"pi\");\r\n\t\tbuttonList.add(pi);\r\n\t\tvar ln = new JButton(\"ln()\");\r\n\t\tbuttonList.add(ln);\r\n\t\tvar e = new JButton(\"e\");\r\n\t\tbuttonList.add(e);\r\n//\t\tRow five of buttons on the keyboard\r\n\t\tvar period = new JButton(\".\");\r\n\t\tbuttonList.add(period);\r\n\t\tvar zero = new JButton(Integer.toString(0));\r\n\t\tbuttonList.add(zero);\r\n\t\tvar negative = new JButton(\"(-)\");\r\n\t\tbuttonList.add(negative);\r\n\t\tvar x = new JButton(\"x\");\r\n\t\tbuttonList.add(x);\r\n\t\tvar enter = new JButton(\"Enter\");\r\n\t\tbuttonList.add(enter);\r\n\t\tvar graph = new JButton(\"Graph\");\r\n\t\tbuttonList.add(graph);\r\n//\t\tRow six of buttons on the keyboard\r\n\t\tvar delete = new JButton(\"Delete\");\r\n\t\tbuttonList.add(delete);\r\n\t\tvar clear = new JButton(\"Clear\");\r\n\t\tbuttonList.add(clear);\r\n\t\tvar clearAll = new JButton(\"<html>\" + \"Clear\" + \"<br>\" + \"All\" + \"<html>\");\r\n\t\tbuttonList.add(clearAll);\r\n\t\tvar clearGraph = new JButton(\"<html>\" + \"Clear\" + \"<br>\" + \"Graph\" + \"<html>\");\r\n\t\tbuttonList.add(clearGraph);\r\n//\t\tCreates a new font so the buttons have larger text than everything else\r\n\t\tFont f = new Font(\"Dialogue\", PLAIN, 22);\r\n//\t\tLoops through the button list, sets the font, adds listeners, then adds them to the panel\r\n\t\tbuttonList.forEach(temp -> {\r\n\t\t\ttemp.setFont(f);\r\n\t\t\ttemp.setActionCommand(temp.getText());\r\n\t\t\ttemp.addActionListener(this);\r\n\t\t\tbuttonPanel.add(temp);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Adds everything necessary to the graphPanel, including a text area\r\n\t * to display the current equation, and a panel to draw the graph in.\r\n\t */\r\n\tprivate void addToGraphPanel() {\r\n//\t\tCreates a text area for the input equations and adds it to the graphPanel\r\n\t\tgraphEquation = new JTextArea(\"Graph: Y = \", 600, 50);\r\n\t\tgraphEquation.setEditable(false);\r\n\t\tgraphEquation.setFont(displayFont);\r\n\t\tgraphEquation.setBounds(0, 0, 600, 50);\r\n\t\tgraphPanel.add(graphEquation);\r\n//\t\tCreates a new panel to draw the graph in and adds it to the graphPanel\r\n\t\tgraphDisplayPanel = new JPanel();\r\n\t\tgraphDisplayPanel.setVisible(true);\r\n\t\tgraphDisplayPanel.setLayout(null);\r\n\t\tgraphDisplayPanel.setBounds(0, 50, 650, 650);\r\n\t\tgraphPanel.add(graphDisplayPanel);\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Determine which button was pressed and evaluates it once Enter is pushed, Graphs\r\n\t * it once graph is pushed, Clears everything when Clear All is pushed, and clears\r\n\t * the graph when Clear Graph is pushed, otherwise it just adds the text from the\r\n\t * button to each text area.\r\n\t */\r\n\tpublic void actionPerformed(ActionEvent arg0) {\r\n//\t\tGets the button text and instantiates an array of Strings to store the answer\r\n\t\tString result = arg0.getActionCommand();\r\n\t\tString[] fullEquation;\r\n\t\tString[] newText;\r\n//\t\tIf the user pushes \"Enter\", evaluate the equation and display it in previous equations\r\n\t\tswitch (result) {\r\n\t\t\tcase \"Enter\":\r\n\t\t\t\tfullEquation = calcControl.update(\"Enter\");\r\n\t\t\t\tString eq = fullEquation[0];\r\n\t\t\t\tString sol = fullEquation[1];\r\n//\t\t\t    Inserts the equation and solution to the text area and adds newlines for readability\r\n\t\t\t\tequationDisplay.insert(\"\\n\", 22);\r\n\t\t\t\tequationDisplay.insert(sol, 22);\r\n\t\t\t\tequationDisplay.insert(\" = \", 22);\r\n\t\t\t\tequationDisplay.insert(eq, 22);\r\n\t\t\t\tequationDisplay.insert(\"\\n\", 22);\r\n\t\t\t\tequationDisplay.insert(\"\\n\", 22);\r\n\t\t\t\tinputEquation.setText(\"\");\r\n\t\t\t\t/*\r\n\t\t\t\t * If the list of equations gets longer than the given screen size clear the\r\n\t\t\t\t * screen of previous equations and start over\r\n\t\t\t\t */\r\n\t\t\t\tif (equationDisplay.getLineCount() > 24) {\r\n\t\t\t\t\tequationDisplay.setText(eq + \" = \" + sol);\r\n\t\t\t\t\tequationDisplay.append(\"\\n\");\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n//\t\t\tIf the user pushes the \"Graph\" button graph the equation if they are on the graphPanel\r\n\t\t\tcase \"Graph\":\r\n\t\t\t\tif (graphDisplayPanel.isShowing()) drawPoints(calcControl.update(\"Graph\"));\r\n\t\t\t\tbreak;\r\n//\t\t\tIf the user pushes \"Clear All\" reset all text areas to their original state\r\n\t\t\tcase \"<html>Clear<br>All<html>\":\r\n\t\t\t\tnewText = calcControl.update(result);\r\n\t\t\t\tinputEquation.setText(newText[0]);\r\n\t\t\t\tgraphEquation.setText(newText[0]);\r\n\t\t\t\tequationDisplay.setText(\"Previous equations: \");\r\n\t\t\t\tbreak;\r\n//\t\t\tIf the user pushes \"Clear Graph\" reset the graph if it is showing\r\n\t\t\tcase \"<html>Clear<br>Graph<html>\":\r\n\t\t\t\tif (graphDisplayPanel.isShowing()) {\r\n\t\t\t\t\tclearGraph();\r\n\t\t\t\t\tdrawGrid();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n//\t\t\tOtherwise add the input to the equation stored in the model\r\n\t\t\tdefault:\r\n\t\t\t\tnewText = calcControl.update(result);\r\n\t\t\t\tinputEquation.setText(newText[0]);\r\n\t\t\t\tgraphEquation.setText(newText[0]);\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the grid of the graph using a set size that we\r\n\t * determined based on the size of the panel.\r\n\t */\r\n\tprivate void drawGrid() {\r\n\t\tg.setColor(gray);\r\n\t\tint boxSize = 30;\r\n//\t\tLoops and draws horizontal and vertical lines for every 30 units\r\n\t\trangeClosed(0, 20).forEachOrdered(i -> {\r\n\t\t\tif ((i % 10) == 0) g.setStroke(new BasicStroke(3));\r\n\t\t\tg.drawLine(boxSize * i, 0, boxSize * i, 600);\r\n\t\t\tg.drawLine(0, boxSize * i, 600, boxSize * i);\r\n\t\t\tg.setStroke(new BasicStroke(1));\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Draws the grid for the graph and then, given the array of coordinates, plots\r\n\t * the points in the correct place in the graph after setting the color to red\r\n\t * so it shows up on the graph better.\r\n\t */\r\n\tprivate void drawPoints(String[] coordinates) {\r\n\t\tdrawGrid();\r\n\t\trange(0, coordinates.length - 1).forEachOrdered(j -> {\r\n\t\t\tg.setColor(red);\r\n\t\t\tg.drawLine(j, 300 - valueOf(coordinates[j]).intValue(), j + 1, 300 - valueOf(coordinates[j + 1]).intValue());\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all equations that have been graphed\r\n\t */\r\n\tprivate void clearGraph() {\r\n\t\tg.clearRect(0, 0, 600, 600);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/graphingCalculator/CalculatorView.java b/Random_Work/src/graphingCalculator/CalculatorView.java
--- a/Random_Work/src/graphingCalculator/CalculatorView.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/graphingCalculator/CalculatorView.java	(date 1614742706457)
@@ -35,7 +35,7 @@
 	 * Sets up the overall frame for the Calculator, the two
 	 * panels where everything is displayed.
 	 */
-	public CalculatorView() {
+	CalculatorView() {
 //		Creates a new font to be used within the frame
 		displayFont = new Font("Dialogue", PLAIN, 18);
 //		Creates the frame and correct panels and tabs so it displays properly
Index: Random_Work/src/graphingCalculator/CalculatorModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package graphingCalculator;\r\n\r\nimport javax.script.ScriptEngine;\r\nimport javax.script.ScriptEngineManager;\r\nimport javax.script.ScriptException;\r\nimport java.util.ArrayList;\r\nimport java.util.Stack;\r\n\r\nclass CalculatorModel {\r\n\tprivate final ScriptEngine solver;\r\n\tprivate ArrayList<String> currentEq;\r\n\tprivate int size;\r\n\r\n\t/**\r\n\t * Constructor creates a script engine to solve equations,\r\n\t * then initializes an ArrayList and sets the size to zero.\r\n\t */\r\n\tCalculatorModel() {\r\n\t\tScriptEngineManager mgr = new ScriptEngineManager();\r\n\t\tsolver = mgr.getEngineByName(\"JavaScript\");\r\n\t\tcurrentEq = new ArrayList<>();\r\n\t\tsize = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the correct symbol to the equation based on the String\r\n\t * parameter action and returns an Array of Strings.\r\n\t */\r\n\tpublic String[] performAction(String action) {\r\n//\t\tInitializes an Array of Strings of size 2\r\n\t\tString[] finalEquation = new String[2];\r\n//\t\tIf the input is \"Enter\" evaluate the equation\r\n\t\tif (action.equals(\"Enter\")) return this.evaluate();\r\n//\t\tbasic operators\r\n\t\telse if (action.equals(\"+\")) this.plus();\r\n\t\telse if (action.equals(\"-\")) this.minus();\r\n\t\telse if (action.equals(\"*\")) this.times();\r\n\t\telse if (action.equals(\"/\")) this.divide();\r\n\t\telse if (action.equals(\"(-)\")) this.negative();\r\n//\t\tparentheses\r\n\t\telse if (action.equals(\"(\")) this.openParen();\r\n\t\telse if (action.equals(\")\")) this.closeParen();\r\n//\t\ttrigonometric operations\r\n\t\telse if (action.equals(\"sin()\")) this.sin();\r\n\t\telse if (action.equals(\"cos()\")) this.cos();\r\n\t\telse if (action.equals(\"tan()\")) this.tan();\r\n\t\telse if (action.equals(\"pi\")) this.pi();\r\n//\t\tlogarithms\r\n\t\telse if (action.equals(\"ln()\")) this.ln();\r\n\t\telse if (action.equals(\"e\")) this.e();\r\n//\t\tpowers\r\n\t\telse if (action.equals(\"x^2\")) this.square();\r\n\t\telse if (action.equals(\"sqrt\")) this.sqrt();\r\n\t\telse if (action.equals(\"^\")) this.power();\r\n//\t\tdelete\r\n\t\telse if (action.equals(\"Delete\")) this.delete();\r\n//\t\tclear\r\n\t\telse if (action.equals(\"Clear\")) this.clear();\r\n\t\telse if (action.equals(\"<html>Clear<br>All<html>\")) this.clear();\r\n\t\telse if (action.equals(\"<html>Clear<br>Graph<html>\")) this.clear();\r\n//\t\tdecimal point\r\n\t\telse if (action.equals(\".\")) this.decimal();\r\n//\t\tdigits\r\n\t\telse if (action.matches(\"[0-9]\")) this.number(action);\r\n//\t\tvariable x\r\n\t\telse if (action.matches(\"x\")) this.number(action);\r\n//\t\tReturns the displayable form of the equation\r\n\t\tfinalEquation[0] = equationToNiceForm(this.copyEquation());\r\n\t\treturn finalEquation;\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the current equation by making a new ArrayList of Strings\r\n\t * of size 0.\r\n\t */\r\n\tprivate void clear() {\r\n\t\tcurrentEq = new ArrayList<>();\r\n\t\tsize = 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the most recent character in the equation\r\n\t */\r\n\tprivate void delete() {\r\n\t\tif (currentEq.size() > 0) {\r\n\t\t\tString temp = currentEq.get(size - 1);\r\n//\t\t\tEnsures only one digit is deleted\r\n\t\t\tif (isNum(temp)) if (temp.length() > 1) currentEq.set(size - 1, temp.substring(0, temp.length() - 1));\r\n\t\t\telse {\r\n\t\t\t\tcurrentEq.remove(size - 1);\r\n\t\t\t\tsize--;\r\n\t\t\t}\r\n//\t\t\tEnsures that the entire power function is deleted\r\n\t\t\telse if (temp.charAt(0) == ',') {\r\n\t\t\t\tcurrentEq.remove(size - 1);\r\n\t\t\t\tint i = 2;\r\n\t\t\t\twhile (!currentEq.get(size - i).equals(\"Math.pow(\")) i++;\r\n\t\t\t\tcurrentEq.remove(size - i);\r\n\t\t\t\tsize -= 2;\r\n\t\t\t}\r\n//\t\t\tOtherwise delete the most recent thing entered\r\n\t\t\telse {\r\n\t\t\t\tcurrentEq.remove(size - 1);\r\n\t\t\t\tsize--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a digit to the equation\r\n\t */\r\n\tprivate void number(String num) {\r\n\t\tif (size > 0) {\r\n\t\t\tString temp = currentEq.get(size - 1);\r\n\t\t\tif (isNum(temp)) currentEq.set(size - 1, temp + num);\r\n\t\t\telse {\r\n\t\t\t\tcurrentEq.add(num);\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcurrentEq.add(num);\r\n\t\t\tsize++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a decimal point to the equation\r\n\t */\r\n\tprivate void decimal() {\r\n\t\tif (size > 0) {\r\n\t\t\tString temp = currentEq.get(size - 1);\r\n\t\t\tif (isNum(temp)) {\r\n\t\t\t\tcurrentEq.set(size - 1, temp + \".\");\r\n\t\t\t} else {\r\n\t\t\t\tcurrentEq.add(\".\");\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tcurrentEq.add(\".\");\r\n\t\t\tsize++;\r\n\t\t}\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The next few functions add the basic operators\r\n\t */\r\n\r\n\tprivate void plus() {\r\n\t\tcurrentEq.add(\"+\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void minus() {\r\n\t\tcurrentEq.add(\"-\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void times() {\r\n\t\tcurrentEq.add(\"*\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void divide() {\r\n\t\tcurrentEq.add(\"/\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void negative() {\r\n\t\tcurrentEq.add(\"(-1)*\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\t/**\r\n\t * The next few functions add the parentheses\r\n\t */\r\n\tprivate void openParen() {\r\n\t\tcurrentEq.add(\"(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void closeParen() {\r\n\t\tcurrentEq.add(\")\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The next few functions add the trigonometric operations\r\n\t */\r\n\r\n\tprivate void sin() {\r\n\t\tcurrentEq.add(\"Math.sin(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void cos() {\r\n\t\tcurrentEq.add(\"Math.cos(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void tan() {\r\n\t\tcurrentEq.add(\"Math.tan(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void pi() {\r\n\t\tcurrentEq.add(\"Math.PI\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * The next few functions add the logarithms\r\n\t */\r\n\tprivate void ln() {\r\n\t\tcurrentEq.add(\"Math.log(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\tprivate void e() {\r\n\t\tcurrentEq.add(\"Math.E\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\r\n\t/**\r\n\t * Adds the \"x\" variable\r\n\t */\r\n\tpublic void x() {\r\n\t\tcurrentEq.add(\"x\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the sqrt function\r\n\t */\r\n\tprivate void sqrt() {\r\n\t\tcurrentEq.add(\"Math.sqrt(\");\r\n\t\tsize++;\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the \"square\" function\r\n\t */\r\n\tprivate void square() {\r\n//\t\tChecks for different cases to figure out where to add \"Math.pow(\" and \",2)\"\r\n\t\tif (size > 0) {\r\n\t\t\tString temp = currentEq.get(size - 1);\r\n\t\t\tStack<String> tempStack = new Stack<>();\r\n\t\t\tif (isNum(temp) || temp.equals(\"x\")) {\r\n\t\t\t\tcurrentEq.add(size - 1, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",2)\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t} else if (temp.equals(\")\")) {\r\n\t\t\t\ttempStack.push(\")\");\r\n\t\t\t\tint i = 2;\r\n\t\t\t\twhile (!tempStack.empty()) {\r\n\t\t\t\t\tString temp2 = currentEq.get(size - i);\r\n\t\t\t\t\tif (temp2.equals(\")\")) tempStack.push(\")\");\r\n\t\t\t\t\telse if (temp2.equals(\"(\") || temp2.matches(\"Math.+[(]\")) tempStack.pop();\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\tcurrentEq.add(size - i, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",2)\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t} else if (temp.matches(\"Math.(E|(PI))\")) {\r\n\t\t\t\tcurrentEq.add(size - 1, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",2)\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the power function\r\n\t */\r\n\tprivate void power() {\r\n//\t\tChecks for different cases to figure out where to add \"Math.pow(\" and \",\"\r\n\t\tif (size > 0) {\r\n\t\t\tString temp = currentEq.get(size - 1);\r\n\t\t\tStack<String> tempStack = new Stack<>();\r\n\t\t\tif (isNum(temp) || temp.equals(\"x\")) {\r\n\t\t\t\tcurrentEq.add(size - 1, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t} else if (temp.equals(\")\")) {\r\n\t\t\t\ttempStack.push(\")\");\r\n\t\t\t\tint i = 2;\r\n\t\t\t\twhile (!tempStack.empty()) {\r\n\t\t\t\t\tString temp2 = currentEq.get(size - i);\r\n\t\t\t\t\tif (temp2.equals(\")\")) tempStack.push(\")\");\r\n\t\t\t\t\telse if (temp2.equals(\"(\") || temp2.matches(\"Math.+[(]\")) tempStack.pop();\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\t\t\t\ti--;\r\n\t\t\t\tcurrentEq.add(size - i, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t} else if (temp.matches(\"Math.(E|(PI))\")) {\r\n\t\t\t\tcurrentEq.add(size - 1, \"Math.pow(\");\r\n\t\t\t\tcurrentEq.add(\",\");\r\n\t\t\t\tsize += 2;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Used so we can get a copy of the current equation,\r\n\t * it returns an ArrayList of Strings which represent\r\n\t * the equation.\r\n\t */\r\n\tprivate ArrayList<String> copyEquation() {\r\n\t\treturn (ArrayList<String>) currentEq.clone();\r\n\t}\r\n\r\n\t/**\r\n\t * Evaluates the equation and returns an Array of Strings\r\n\t * where the first entry is the displayable form of the equation,\r\n\t * and the second entry is the answer.\r\n\t */\r\n\tprivate String[] evaluate() {\r\n\t\tString[] evaluatedEquation = new String[2];\r\n//\t\tCreates a displayable form of the equation\r\n\t\tString displayableEquation = equationToNiceForm(copyEquation());\r\n\t\tevaluatedEquation[0] = displayableEquation;\r\n//\t\tMakes the equation readable by a ScriptEngine\r\n\t\tString readableEquation = javascriptEquation();\r\n\t\tString fixedParen = parenthesesChecker(readableEquation);\r\n//\t\tRounds to 6 decimal points\r\n\t\tString withRounding = \"Math.round(1000000*(\" + fixedParen + \"))/1000000\";\r\n\t\tString tempSolution;\r\n//\t\tEquation is evaluated here and catches any errors\r\n\t\ttry {\r\n\t\t\ttempSolution = solver.eval(withRounding).toString();\r\n\t\t} catch (ScriptException e) {\r\n\t\t\ttempSolution = \"Error\";\r\n\t\t}\r\n\t\tevaluatedEquation[1] = tempSolution;\r\n//\t\tResets the equation to size 0\r\n\t\tcurrentEq = new ArrayList<>();\r\n\t\tsize = 0;\r\n\t\treturn evaluatedEquation;\r\n\t}\r\n\r\n\t/**\r\n\t * Evaluates the equation over the range x = -10 to x = 10,\r\n\t * and returns an Array of Strings which contain the y-values\r\n\t * for the graph.\r\n\t */\r\n\tpublic String[] evaluateGraph() {\r\n\t\tString[] solutionArray = new String[600];\r\n//\t\tGets the equation to a form that the ScriptEngine can read\r\n\t\tString readableEquation = javascriptEquation();\r\n\t\tString fixedParen = parenthesesChecker(readableEquation);\r\n\t\tString scaledEquation = \"30*(\" + fixedParen + \")\";\r\n//\t\tLoops through possible x values\r\n\t\tfor (int i = -300; i < 300; i++) {\r\n//\t\t\tScales x value so it fits with 20 by 20 grid\r\n\t\t\tdouble scaleFactor = i / 30.0;\r\n//\t\t\tSolves equations at a given x value\r\n\t\t\tString graphedEq = replaceX(scaledEquation, Double.toString(scaleFactor));\r\n\t\t\tString tempSolution;\r\n\t\t\ttry {\r\n\t\t\t\ttempSolution = solver.eval(graphedEq).toString();\r\n\t\t\t} catch (ScriptException e) {\r\n\t\t\t\ttempSolution = \"0\";\r\n\t\t\t}\r\n\t\t\tsolutionArray[i + 300] = tempSolution;\r\n\t\t}\r\n\r\n\t\t// Resets current equation\r\n\t\tcurrentEq = new ArrayList<>();\r\n\t\tsize = 0;\r\n\t\treturn solutionArray;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a String with all x's in the parameter equation with a number\r\n\t */\r\n\tprivate String replaceX(String equation, String num) {\r\n\t\tString output = equation;\r\n//\t\tLoops through the output equation and if an \"x\" is found replace it with the correct number\r\n\t\tfor (int i = 0; i < output.length(); i++) {\r\n\t\t\tif (output.charAt(i) == 'x') {\r\n\t\t\t\tString firstPart = output.substring(0, i);\r\n\t\t\t\tString secondPart = output.substring(i + 1);\r\n\t\t\t\toutput = \"\";\r\n\t\t\t\toutput = output.concat(firstPart);\r\n\t\t\t\toutput = output.concat(num);\r\n\t\t\t\toutput = output.concat(secondPart);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn output;\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if a value is a number and returns a boolean\r\n\t */\r\n\tprivate boolean isNum(String nm) {\r\n\t\treturn nm.matches(\"[0-9]+.?[0-9]*\");\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the current equation to readable form for a ScriptEngine\r\n\t */\r\n\tprivate String javascriptEquation() {\r\n\t\tStringBuilder currentEquation = new StringBuilder();\r\n\t\tfor (int i = 0; i < size; i++) {\r\n\t\t\tif ((i < (size - 1)) && isNum(currentEq.get(i)) && currentEq.get(i + 1).matches(\"Math.+\")) {\r\n\t\t\t\tcurrentEq.add(i + 1, \"*\");\r\n\t\t\t\tsize++;\r\n\t\t\t}\r\n\t\t\tcurrentEquation.append(currentEq.get(i));\r\n\t\t}\r\n\t\treturn currentEquation.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the equation to a displayable form for text areas\r\n\t */\r\n\tprivate String equationToNiceForm(ArrayList<String> eq) {\r\n\t\tStringBuilder currentEquation = new StringBuilder();\r\n\t\tfor (int i = 0; i < eq.size(); i++) {\r\n\t\t\tif ((i < (eq.size() - 1)) && isNum(eq.get(i)) && eq.get(i + 1).matches(\"Math.+\")) eq.add(i + 1, \"*\");\r\n\t\t\tif (eq.get(i).equals(\"Math.pow(\")) eq.remove(i);\r\n\t\t\tif (eq.get(i).matches(\"Math.+\")) {\r\n\t\t\t\tString replace = eq.get(i).substring(5);\r\n\t\t\t\teq.set(i, replace);\r\n\t\t\t}\r\n\t\t\tif (eq.get(i).equals(\",\")) eq.set(i, \"^(\");\r\n\t\t\tif (eq.get(i).equals(\",2)\")) eq.set(i, \"^2\");\r\n\t\t\tif (eq.get(i).equals(\"(-1)*\")) eq.set(i, \"(-)\");\r\n\t\t\tcurrentEquation.append(eq.get(i));\r\n\t\t}\r\n\t\treturn currentEquation.toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Adds in all missing parentheses\r\n\t */\r\n\tprivate String parenthesesChecker(String checkedEq) {\r\n\t\tStringBuilder withParens = new StringBuilder(checkedEq);\r\n\t\tStack<String> parenStack = new Stack<>();\r\n\t\tfor (int i = 0; i < checkedEq.length(); i++) {\r\n\t\t\tif (withParens.charAt(i) == '(') parenStack.push(\"off cliff\");\r\n\t\t\tif (withParens.charAt(i) == ')' && !parenStack.empty()) parenStack.pop();\r\n\t\t}\r\n\t\twhile (!parenStack.empty()) {\r\n\t\t\twithParens.append(\")\");\r\n\t\t\tparenStack.pop();\r\n\t\t}\r\n\t\treturn withParens.toString();\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/graphingCalculator/CalculatorModel.java b/Random_Work/src/graphingCalculator/CalculatorModel.java
--- a/Random_Work/src/graphingCalculator/CalculatorModel.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/graphingCalculator/CalculatorModel.java	(date 1614742706186)
@@ -26,7 +26,7 @@
 	 * Adds the correct symbol to the equation based on the String
 	 * parameter action and returns an Array of Strings.
 	 */
-	public String[] performAction(String action) {
+	String[] performAction(String action) {
 //		Initializes an Array of Strings of size 2
 		String[] finalEquation = new String[2];
 //		If the input is "Enter" evaluate the equation
Index: Random_Work/src/projectEuler/programs/p021.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p021.kt b/Random_Work/src/projectEuler/programs/p021.kt
new file mode 100644
--- /dev/null	(date 1614951979674)
+++ b/Random_Work/src/projectEuler/programs/p021.kt	(date 1614951979674)
@@ -0,0 +1,30 @@
+package projectEuler.programs
+
+import java.util.stream.IntStream
+
+class p021 : EulerSolution() {
+	override fun run(): String? {
+		val sum = IntStream.range(1, 10000).filter { n: Int -> isAmicable(n) }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p021().run())
+		}
+
+		/*
+	 * We find the sum of proper divisors of a number by brute force,
+	 * and apply the definition of an amicable number straightforwardly.
+	 */
+		private fun isAmicable(n: Int): Boolean {
+			val m = divisorSum(n)
+			return m != n && divisorSum(m) == n
+		}
+
+		private fun divisorSum(n: Int): Int {
+			return IntStream.range(1, n).filter { i: Int -> n % i == 0 }.sum()
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p077.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p077.kt b/Random_Work/src/projectEuler/programs/p077.kt
new file mode 100644
--- /dev/null	(date 1614951977653)
+++ b/Random_Work/src/projectEuler/programs/p077.kt	(date 1614951977653)
@@ -0,0 +1,55 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.isPrime
+import java.util.stream.IntStream
+
+class p077 : EulerSolution() {
+	override fun run(): String {
+		var limit = 1
+		while (true) {
+			val result = search(limit)
+			if (result != -1) return Integer.toString(result)
+			limit *= 2
+		}
+	}
+
+	companion object {
+		private const val TARGET = 5000
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p077().run())
+		}
+
+		/*
+	 * This function searches for the smallest n in [0, limit)
+	 * such that P(n, n) > target, or returns -1 if not found.
+	 *
+	 * Let P(i, n) denote the number of ways that n can be written as an
+	 * unordered sum of prime numbers where no prime is greater than i.
+	 *
+	 * - P(i, 0) = 1 for all i.
+	 * - P(0, n) = 0 for all n > 0.
+	 * - If i is 1 or composite then P(i, n) = P(i - 1, n).
+	 * - Otherwise i is prime:
+	 * - If i <= n then P(i, n) = P(i - 1, n) + P(i, n - i).
+	 * - Else P(i, n) = P(i - 1, n).
+	 *
+	 * Notice that when computing P(i, k), we only need values from the
+	 * current row i for k' in [1, k) and values from the previous row i -1
+	 * for k' in [k, n). Thus we only need to buffer one row of data for
+	 * dynamic programming and can overwrite it in place.
+	 */
+		@Contract(pure = true)
+		private fun search(limit: Int): Int {
+			val partitions = IntArray(limit)
+			partitions[0] = 1
+			for (i in partitions.indices) {
+				if (!isPrime(i)) continue
+				for (j in i until partitions.size) partitions[j] += partitions[j - i]
+			}
+			return IntStream.range(0, limit).filter { i: Int -> partitions[i] > TARGET }.findFirst().orElse(-1)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p064.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p064.kt b/Random_Work/src/projectEuler/programs/p064.kt
new file mode 100644
--- /dev/null	(date 1614951978769)
+++ b/Random_Work/src/projectEuler/programs/p064.kt	(date 1614951978769)
@@ -0,0 +1,99 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import projectEuler.programs.Library.isSquare
+import projectEuler.programs.Library.sqrt
+import java.math.BigInteger
+import java.util.*
+
+class p064 : EulerSolution() {
+	override fun run(): String {
+		var count = 0
+		for (i in 1..10000) if (!isSquare(i) && getSqrtContinuedFractionPeriod(i) % 2 == 1) count++
+		return Integer.toString(count)
+	}
+
+	// Represents (a + b * sqrt(d)) / c. d must not be a perfect square.
+	private class QuadraticSurd(a: BigInteger, b: BigInteger, c: BigInteger, d: BigInteger) {
+		val a: BigInteger
+		val b: BigInteger
+		val c: BigInteger
+		val d: BigInteger
+
+		@Contract("_ -> new")
+		fun subtract(other: QuadraticSurd): QuadraticSurd {
+			assert(d == other.d)
+			return QuadraticSurd(a.multiply(other.c).subtract(other.a.multiply(c)), b.multiply(other.c).subtract(other.b.multiply(c)), c.multiply(other.c), d)
+		}
+
+		@Contract(" -> new")
+		fun reciprocal(): QuadraticSurd {
+			return QuadraticSurd(a.multiply(c).negate(), b.multiply(c), b.multiply(b).multiply(d).subtract(a.multiply(a)), d)
+		}
+
+		fun floor(): BigInteger {
+			var temp = sqrt(b.multiply(b).multiply(d))
+			if (b.signum() == -1) temp = temp.add(BigInteger.ONE).negate()
+			temp = temp.add(a)
+			if (temp.signum() == -1) temp = temp.subtract(c.subtract(BigInteger.ONE))
+			return temp.divide(c)
+		}
+
+		@Contract(value = "null -> false", pure = true)
+		override fun equals(obj: Any?): Boolean {
+			return if (obj !is QuadraticSurd) false else {
+				val other = obj
+				a == other.a && b == other.b && c == other.c && d == other.d
+			}
+		}
+
+		override fun hashCode(): Int {
+			return a.hashCode() + b.hashCode() + c.hashCode() + d.hashCode()
+		}
+
+		override fun toString(): String {
+			return String.format("(%d + %d*sqrt(%d)) / %d", a, b, d, c)
+		}
+
+		init {
+			var a = a
+			var b = b
+			var c = c
+			assert(c.signum() != 0)
+			// Simplify
+			if (c.signum() == -1) {
+				a = a.negate()
+				b = b.negate()
+				c = c.negate()
+			}
+			val gcd = a.gcd(b).gcd(c)
+			if (gcd != BigInteger.ONE) {
+				a = a.divide(gcd)
+				b = b.divide(gcd)
+				c = c.divide(gcd)
+			}
+			this.a = a
+			this.b = b
+			this.c = c
+			this.d = d
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p064().run())
+		}
+
+		// Returns the period of the continued fraction of sqrt(n)
+		private fun getSqrtContinuedFractionPeriod(n: Int): Int {
+			val seen = HashMap<QuadraticSurd, Int>()
+			var `val` = QuadraticSurd(BigInteger.ZERO, BigInteger.ONE, BigInteger.ONE, BigInteger.valueOf(n.toLong()))
+			do {
+				seen[`val`] = seen.size
+				`val` = `val`.subtract(QuadraticSurd(`val`.floor(), BigInteger.ZERO, BigInteger.ONE, `val`.d)).reciprocal()
+			} while (!seen.containsKey(`val`))
+			return seen.size - seen[`val`]!!
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p008.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p008.kt b/Random_Work/src/projectEuler/programs/p008.kt
new file mode 100644
--- /dev/null	(date 1614951977305)
+++ b/Random_Work/src/projectEuler/programs/p008.kt	(date 1614951977305)
@@ -0,0 +1,29 @@
+package projectEuler.programs
+
+class p008 : EulerSolution() {
+	/*
+	 * We implement a straightforward algorithm that examines every substring of length 13.
+	 * Note that the maximum product is 9^13 = 2541865828329, which fits in a Java long type (but not int).
+	 */
+	override fun run(): String {
+		var maxProd: Long = -1
+		var i = 0
+		while (i + ADJACENT <= NUMBER.length) {
+			var prod: Long = 1
+			for (j in 0 until ADJACENT) prod *= (NUMBER[i + j] - '0').toLong()
+			maxProd = Math.max(prod, maxProd)
+			i++
+		}
+		return java.lang.Long.toString(maxProd)
+	}
+
+	companion object {
+		private const val ADJACENT = 13
+		private const val NUMBER = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p008().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p036.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p036.kt b/Random_Work/src/projectEuler/programs/p036.kt
new file mode 100644
--- /dev/null	(date 1614951980066)
+++ b/Random_Work/src/projectEuler/programs/p036.kt	(date 1614951980066)
@@ -0,0 +1,17 @@
+package projectEuler.programs
+
+import projectEuler.programs.Library.isPalindrome
+import java.util.stream.IntStream
+
+class p036 : EulerSolution() {
+	override fun run(): String {
+		return java.lang.Long.toString(IntStream.range(1, 1000000).filter { i: Int -> isPalindrome(Integer.toString(i, 10).toInt()) && isPalindrome(Integer.toString(i, 2).toInt()) }.asLongStream().sum())
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p036().run())
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p348.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static java.lang.Integer.MAX_VALUE;\r\nimport static java.lang.Math.min;\r\nimport static java.util.stream.IntStream.iterate;\r\nimport static projectEuler.programs.Library.isPalindrome;\r\nimport static projectEuler.programs.Library.sqrt;\r\n\r\npublic final class p348 extends EulerSolution {\r\n\tprivate static final int TARGET_WAYS = 4;\r\n\r\n\t/*\r\n\t * Given a range of integers [0, n), we can bulk-calculate how many ways\r\n\t * each integer can be expressed as a sum of a cube and a square.\r\n\t *\r\n\t * Start by initializing an array of length n with all zeros.\r\n\t * Next, write a two-level loop to explore all the cubes i^3\r\n\t * and squares j^2 such that their sum is less than n:\r\n\t *\r\n\t * ways = new int[n]; // Initially all zero\r\n\t * for (i = 2; i^3 < n; i++) {\r\n\t *  for (j = 2; i^3 + j^2 < n; j++) {\r\n\t *  ways[i^3 + j^2]++;\r\n\t *  }\r\n\t * }\r\n\t *\r\n\t * The array creation takes O(n) time. The outer loop runs O(n^(1/3)) iterations,\r\n\t * the inner loop runs O(n^(1/2)) iterations per outer loop, hence the inner loop body\r\n\t * runs O(n^(5/6)) iterations. Thus the whole process runs in O(n) time and memory.\r\n\t *\r\n\t * Finally we iterate forward through the array, selecting numbers that\r\n\t * are palindromes and can be summed in the target number of ways.\r\n\t *\r\n\t * If the answer is not found in our range [0, n), then we increase the range and search\r\n\t * again. If we multiply n by some factor (say 2 or 10), then the geometric series ensures\r\n\t * that the total work we do is O(n) with respect to the magnitude of the final answer.\r\n\t */\r\n\tprivate static final int TARGET_COUNT = 5;\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p348().run());\r\n\t}\r\n\r\n\t// Examines all integers in the range [0, limit), and returns the sum of the lowest\r\n\t// TARGET_COUNT integers each with the property that it is a palidrome in base 10\r\n\t// and it can be expressed in exactly TARGET_COUNT ways as a sum of a perfect square\r\n\t// greater than 1 and a perfect cube greater than 1. If fewer than TARGET_COUNT integers\r\n\t// in [0, limit) have the desired property, then -1 is returned. Note that if\r\n\t// trySearch(n) == k != -1, then for every m > n, trySearch(m) == k also holds.\r\n\tprivate static long trySearch(int limit) {\r\n\t\t// ways[i] is exactly the number of ways that i can be expressed as a sum of a\r\n\t\t// square greater than 1 and a cube greater than 1. However, the counting of ways\r\n\t\t// saturates at TARGET_COUNT+1 to prevent potentially unboundedly large values.\r\n\t\tbyte[] ways = new byte[limit];\r\n\t\t// Count both loops downward, so that the end\r\n\t\t// value is a constant instead of a variable\r\n\t\tfor (int i = cbrt(limit - 1); i > 1; i--) {\r\n\t\t\tint cube = i * i * i;\r\n\t\t\titerate(sqrt(limit - 1 - cube), j -> j > 1, j -> j - 1).map(j -> cube + (j * j)).forEachOrdered(index -> ways[index] = (byte) min(ways[index] + 1, TARGET_WAYS + 1));\r\n\t\t}\r\n\t\t// Examine which numbers are palindromes and have the target number of ways\r\n\t\tlong result = 0;\r\n\t\tint count = 0;\r\n\t\tfor (int i = 0; i < ways.length; i++)\r\n\t\t\tif ((ways[i] == TARGET_WAYS) && isPalindrome(i)) {\r\n\t\t\t\tresult += i;\r\n\t\t\t\tcount++;\r\n\t\t\t\tif (count == TARGET_COUNT) return result;\r\n\t\t\t}\r\n\t\treturn -1; // Not found\r\n\t}\r\n\r\n\t// Returns floor(cbrt(x)) for x >= 0.\r\n\t@Contract(pure = true)\r\n\tprivate static int cbrt(int x) {\r\n\t\tassert x >= 0 : \"Not implemented\";\r\n\t\tint y = 0;\r\n\t\tfor (int i = 1024; i != 0; i >>>= 1) {\r\n\t\t\ty |= i;\r\n\t\t\tif ((y > 1290) || ((y * y * y) > x)) y ^= i;\r\n\t\t}\r\n\t\treturn y;\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\tfor (long limit = 1; ; limit *= 10) {\r\n\t\t\tassert limit <= MAX_VALUE : \"Overflow\";\r\n\t\t\tlong answer = trySearch((int) limit);\r\n\t\t\tif (answer != -1) return Long.toString(answer);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p348.java b/Random_Work/src/projectEuler/programs/p348.java
--- a/Random_Work/src/projectEuler/programs/p348.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p348.java	(date 1614915693347)
@@ -3,6 +3,8 @@
 import org.jetbrains.annotations.Contract;
 import org.jetbrains.annotations.NotNull;
 
+import java.math.BigInteger;
+
 import static java.lang.Integer.MAX_VALUE;
 import static java.lang.Math.min;
 import static java.util.stream.IntStream.iterate;
@@ -59,7 +61,7 @@
 		// value is a constant instead of a variable
 		for (int i = cbrt(limit - 1); i > 1; i--) {
 			int cube = i * i * i;
-			iterate(sqrt(limit - 1 - cube), j -> j > 1, j -> j - 1).map(j -> cube + (j * j)).forEachOrdered(index -> ways[index] = (byte) min(ways[index] + 1, TARGET_WAYS + 1));
+			iterate(sqrt(BigInteger.valueOf(limit - 1 - cube)).intValue(), j -> j > 1, j -> j - 1).map(j -> cube + (j * j)).forEachOrdered(index -> ways[index] = (byte) min(ways[index] + 1, TARGET_WAYS + 1));
 		}
 		// Examine which numbers are palindromes and have the target number of ways
 		long result = 0;
Index: Random_Work/src/projectEuler/programs/p108.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\npublic final class p108 extends EulerSolution {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p108().run());\r\n\t}\r\n\r\n\t// Returns the number of divisors of n^2\r\n\tprivate static int countDivisorsSquared(int n) {\r\n\t\tint count = 1;\r\n\t\tfor (int i = 2, end = Library.sqrt(n); i <= end; i++)\r\n\t\t\tif (n % i == 0) {\r\n\t\t\t\tint j = 0;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tn /= i;\r\n\t\t\t\t\tj++;\r\n\t\t\t\t} while (n % i == 0);\r\n\t\t\t\tcount *= j * 2 + 1;\r\n\t\t\t\tend = Library.sqrt(n);\r\n\t\t\t}\r\n\t\t// Remaining largest prime factor\r\n\t\tif (n != 1) count *= 3;\r\n\t\treturn count;\r\n\t}\r\n\r\n\t/*\r\n\t * Rewrite the equation with x = n+i, y = n+j, and manipulate it:\r\n\t * 1/n = 1/x + 1/y\r\n\t *  = 1/(n+i) + 1/(n+j)\r\n\t *  = (2n+i+j) / ((n+i)(n+j)).\r\n\t * n(2n+i+j) = (n+i)(n+j).\r\n\t * 2n^2 + ni + nj = n^2 + ni + nj + ij.\r\n\t * n^2 = ij.\r\n\t * Hence i and j are divisors of n^2. To ensure unique solutions,\r\n\t * we impose that x <= y, so i <= j. Also, i > 0, otherwise no j exists.\r\n\t * We have i <= j = n^2 / i, thus i^2 <= n^2. With i being positive, we get that i <= n.\r\n\t * Therefore the number of solutions for i is the number of divisors of n^2 in the range [1, n].\r\n\t * n^2 always has an odd number of divisors. One of them is n. As for the remainder of them, half of them are below n\r\n\t * and half of them are above n. So if n^2 has m divisors, then we want (m+1)/2 of them as solutions for i.\r\n\t */\r\n\t@NotNull String run() {\r\n\t\tfor (int n = 1; ; n++) if (((countDivisorsSquared(n) + 1) >> 1) > 1000) return Integer.toString(n);\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p108.java b/Random_Work/src/projectEuler/programs/p108.java
--- a/Random_Work/src/projectEuler/programs/p108.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p108.java	(date 1614915693335)
@@ -2,6 +2,9 @@
 
 import org.jetbrains.annotations.NotNull;
 
+import static java.math.BigInteger.valueOf;
+import static projectEuler.programs.Library.sqrt;
+
 public final class p108 extends EulerSolution {
 	public static void main(String[] args) {
 		System.out.println(new p108().run());
@@ -10,7 +13,7 @@
 	// Returns the number of divisors of n^2
 	private static int countDivisorsSquared(int n) {
 		int count = 1;
-		for (int i = 2, end = Library.sqrt(n); i <= end; i++)
+		for (int i = 2, end = sqrt(valueOf(n)).intValue(); i <= end; i++)
 			if (n % i == 0) {
 				int j = 0;
 				do {
@@ -18,7 +21,7 @@
 					j++;
 				} while (n % i == 0);
 				count *= j * 2 + 1;
-				end = Library.sqrt(n);
+				end = sqrt(valueOf(n)).intValue();
 			}
 		// Remaining largest prime factor
 		if (n != 1) count *= 3;
Index: Random_Work/src/projectEuler/programs/p160.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package projectEuler.programs;\r\n\r\nimport org.jetbrains.annotations.Contract;\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport static projectEuler.programs.Library.powMod;\r\n\r\npublic final class p160 extends EulerSolution {\r\n\tpublic static void main(String[] args) {\r\n\t\tSystem.out.println(new p160().run());\r\n\t}\r\n\r\n\t// The last 5 digits of n!, excluding trailing zeros.\r\n\tprivate static long factorialSuffix(long n) {\r\n\t\tlong twos = countFactors(n, 2) - countFactors(n, 5); // Always non-negative for every n\r\n\t\t// We can reduce 'twos' because there is a cycle: 2^5 = 2^2505 = 32 mod 100000\r\n\t\tif (twos >= 2505) twos = (twos - 5) % 2500 + 5;\r\n\t\treturn (factorialish(n) * powMod(2, (int) twos, 100000)) % 100000;\r\n\t}\r\n\r\n\t// Equal to n! but with all factors of 2 and 5 removed and then modulo 10^5.\r\n\t// The identity factorialIsh(n) = oddFactorialish(n) * evenFactorialish(n) (mod 10^5) is true by definition.\r\n\tprivate static long factorialish(long n) {\r\n\t\treturn (evenFactorialish(n) * oddFactorialish(n)) % 100000;\r\n\t}\r\n\r\n\t// The product of {all even numbers from 1 to n}, but with all factors of 2 and 5 removed and then modulo 10^5.\r\n\t// For example, evenFactorialish(9) only considers the numbers {2, 4, 6, 8}. Divide each number by 2 to get {1, 2, 3, 4}. Thus evenFactorialish(9) = factorialish(4).\r\n\tprivate static long evenFactorialish(long n) {\r\n\t\treturn (n == 0) ? 1 : factorialish(n >> 1);\r\n\t}\r\n\r\n\t// The product of {all odd numbers from 1 to n}, but with all factors of 2 and 5 removed and then modulo 10^5.\r\n\t// By definition, oddFactorialish() never considers any number that has a factor of 2. The product of the numbers that not a multiple of 5 are accumulated by factorialCoprime().\r\n\t// Those that are a multiple of 5 are handled recursively by oddFactorialish(), noting that they are still odd after dividing by 5.\r\n\tprivate static long oddFactorialish(long n) {\r\n\t\treturn (n == 0) ? 1 : ((oddFactorialish(n / 5) * factorialCoprime(n)) % 100000);\r\n\t}\r\n\r\n\t// The product of {all numbers from 1 to n that are coprime with 10}, modulo 10^5.\r\n\t// The input argument can be taken modulo 10^5 because factorialoid(10^5) = 1, and each block of 10^5 numbers behaves the same.\r\n\t@Contract(pure = true)\r\n\tprivate static long factorialCoprime(long n) {\r\n\t\tn %= 100000;\r\n\t\tlong product = 1;\r\n\t\tfor (int i = 1; i <= n; i++) if (((i % 2) != 0) && ((i % 5) != 0)) product = (i * product) % 100000;\r\n\t\treturn product;\r\n\t}\r\n\r\n\t// Counts the number of factors of n in the set of integers {1, 2, ..., end}.\r\n\t// For example, countFactors(25, 5) = 6 because {5, 10, 15, 20} each has one factor of 5, and 25 has two factors of 5.\r\n\t@Contract(pure = true)\r\n\tprivate static long countFactors(long end, long n) {\r\n\t\treturn (end == 0) ? 0 : ((end / n) + countFactors(end / n, n));\r\n\t}\r\n\r\n\t@NotNull String run() {\r\n\t\treturn Long.toString(factorialSuffix(1000000000000L));\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p160.java b/Random_Work/src/projectEuler/programs/p160.java
--- a/Random_Work/src/projectEuler/programs/p160.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/projectEuler/programs/p160.java	(date 1614916556104)
@@ -11,11 +11,11 @@
 	}
 
 	// The last 5 digits of n!, excluding trailing zeros.
-	private static long factorialSuffix(long n) {
-		long twos = countFactors(n, 2) - countFactors(n, 5); // Always non-negative for every n
+	private static long factorialSuffix() {
+		long twos = countFactors(1000000000000L, 2) - countFactors(1000000000000L, 5); // Always non-negative for every n
 		// We can reduce 'twos' because there is a cycle: 2^5 = 2^2505 = 32 mod 100000
 		if (twos >= 2505) twos = (twos - 5) % 2500 + 5;
-		return (factorialish(n) * powMod(2, (int) twos, 100000)) % 100000;
+		return (factorialish(1000000000000L) * powMod(2, (int) twos, 100000)) % 100000;
 	}
 
 	// Equal to n! but with all factors of 2 and 5 removed and then modulo 10^5.
@@ -55,6 +55,6 @@
 	}
 
 	@NotNull String run() {
-		return Long.toString(factorialSuffix(1000000000000L));
+		return Long.toString(factorialSuffix());
 	}
 }
\ No newline at end of file
Index: Random_Work/src/FirebaseTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/FirebaseTest.kt b/Random_Work/src/FirebaseTest.kt
new file mode 100644
--- /dev/null	(date 1622893789319)
+++ b/Random_Work/src/FirebaseTest.kt	(date 1622893789319)
@@ -0,0 +1,10 @@
+import kotlin.Throws
+import java.io.IOException
+import java.net.URL
+import kotlin.jvm.JvmStatic
+
+object FirebaseTest {
+	@JvmStatic
+	fun main(vararg args: String) =
+		println(URL("https://buildmypc-ac8c3-default-rtdb.firebaseio.com/case/0/dimensions/0").readText())
+}
\ No newline at end of file
Index: Random_Work/Random_Work.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/Random_Work.iml b/Random_Work/Random_Work.iml
new file mode 100644
--- /dev/null	(date 1620217646467)
+++ b/Random_Work/Random_Work.iml	(date 1620217646467)
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+      <excludeFolder url="file://$MODULE_DIR$/src/projectEuler" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+    <orderEntry type="module-library">
+      <library>
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/jetbrains/annotations/20.1.0/annotations-20.1.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
+  </component>
+</module>
\ No newline at end of file
Index: .idea/Java_Development.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/Java_Development.iml b/.idea/Java_Development.iml
new file mode 100644
--- /dev/null	(date 1620217298657)
+++ b/.idea/Java_Development.iml	(date 1620217298657)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$" />
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/dictionaries/china.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectDictionaryState\">\r\n\t<dictionary name=\"china\">\r\n\t\t<words>\r\n\t\t\t<w>baviskar</w>\r\n\t\t\t<w>chirag</w>\r\n\t\t\t<w>tanay</w>\r\n\t\t</words>\r\n\t</dictionary>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dictionaries/china.xml b/.idea/dictionaries/china.xml
--- a/.idea/dictionaries/china.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/.idea/dictionaries/china.xml	(date 1620216921212)
@@ -1,6 +1,7 @@
 <component name="ProjectDictionaryState">
 	<dictionary name="china">
 		<words>
+			<w>arcsin</w>
 			<w>baviskar</w>
 			<w>chirag</w>
 			<w>tanay</w>
Index: .idea/libraries/gridworld.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/gridworld.xml b/.idea/libraries/gridworld.xml
new file mode 100644
--- /dev/null	(date 1620217299003)
+++ b/.idea/libraries/gridworld.xml	(date 1620217299003)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+	<library name="gridworld">
+		<CLASSES>
+			<root url="jar://$PROJECT_DIR$/Classwork/AP_Computer_Science_Ⅰ/src/objectOriented/gridWorld/gridworld.jar!/"/>
+		</CLASSES>
+		<JAVADOC/>
+		<SOURCES/>
+	</library>
+</component>
\ No newline at end of file
Index: Random_Work/src/hackPHS2019/ArcadeLogic.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package hackPHS2019;\r\n\r\nimport org.jetbrains.annotations.NotNull;\r\n\r\nimport javax.swing.*;\r\nimport java.awt.*;\r\nimport java.awt.event.ActionEvent;\r\n\r\nimport static java.awt.Color.blue;\r\nimport static java.awt.Font.PLAIN;\r\nimport static java.util.Arrays.stream;\r\nimport static java.util.Objects.requireNonNull;\r\nimport static javax.swing.JFrame.EXIT_ON_CLOSE;\r\n\r\nclass ArcadeLogic {\r\n\tprivate static Container contentPane;\r\n\tprivate JFrame frame = new JFrame();\r\n\r\n\tprivate ArcadeLogic() {\r\n\t\tthis(contentPane);\r\n\t}\r\n\r\n\tprivate ArcadeLogic(Container contentPane) {\r\n\t\tArcadeLogic.contentPane = contentPane;\r\n\t\tframe.setDefaultCloseOperation(EXIT_ON_CLOSE);\r\n\t\tframe.setSize(1000, 1000);\r\n\t\tframe.setVisible(true);\r\n\t\tvar b = new JButton[]{new JButton(\"Tic-Tac-Toe\"), new JButton(\"Hangman\"), new JButton(\"Rock Paper Scissors Lizard Spock\")};\r\n\t\tvar bFont = new Font(\"Comic Sans MS\", PLAIN, 20);\r\n\t\tvar x = stream(b);\r\n\t\tx.forEachOrdered(jButton -> {\r\n\t\t\tjButton.setBounds(100, 150, 100, 100);\r\n\t\t\tjButton.setForeground(blue);\r\n\t\t\tjButton.setFont(bFont);\r\n\t\t\tsetJButtonTextPosition(jButton);\r\n\t\t});\r\n\t\tx.forEachOrdered(i -> ArcadeLogic.contentPane.add(i));\r\n\t\tb[0].addActionListener(this::actionPerformedB1);\r\n\t\tb[1].addActionListener(this::actionPerformedB2);\r\n\t\tb[2].addActionListener(this::actionPerformedB3);\r\n\t}\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tnew ArcadeLogic();\r\n\t}\r\n\r\n\tprivate void actionPerformedB1(ActionEvent e) {\r\n\t\tframe.setVisible(false);\r\n\t\tnew TicTacToeProject();\r\n\t}\r\n\r\n\tprivate void actionPerformedB2(ActionEvent e) {\r\n\t\tframe.setVisible(false);\r\n\t\ttry {\r\n\t\t\tnew HangmanProject();\r\n\t\t} catch (InterruptedException ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void actionPerformedB3(ActionEvent e) {\r\n\t\tframe.setVisible(false);\r\n\t\ttry {\r\n\t\t\tnew RockPaperScissorsLizardSpock();\r\n\t\t} catch (Exception ex) {\r\n\t\t\tex.printStackTrace();\r\n\t\t}\r\n\t}\r\n\r\n\tprivate void setJButtonTextPosition(@NotNull JButton jButton) {\r\n\t\trequireNonNull(jButton).setHorizontalTextPosition(0);\r\n\t\trequireNonNull(jButton).setVerticalTextPosition(0);\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/hackPHS2019/ArcadeLogic.java b/Random_Work/src/hackPHS2019/ArcadeLogic.java
--- a/Random_Work/src/hackPHS2019/ArcadeLogic.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Random_Work/src/hackPHS2019/ArcadeLogic.java	(date 1614742706007)
@@ -14,7 +14,7 @@
 
 class ArcadeLogic {
 	private static Container contentPane;
-	private JFrame frame = new JFrame();
+	private final JFrame frame = new JFrame();
 
 	private ArcadeLogic() {
 		this(contentPane);
Index: Random_Work/src/randomStuff/RandomStuffKotlin.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/randomStuff/RandomStuffKotlin.kt b/Random_Work/src/randomStuff/RandomStuffKotlin.kt
new file mode 100644
--- /dev/null	(date 1620218300998)
+++ b/Random_Work/src/randomStuff/RandomStuffKotlin.kt	(date 1620218300998)
@@ -0,0 +1,11 @@
+package randomStuff
+
+object RandomStuffKotlin {
+	@JvmStatic
+	fun main(args: Array<String>) = println(
+		"Dear Mom,\n\tYou’ve always been a great mom, but even more than that, you’ve always been there when I didn’t know what to do. Whenever I was upset, you encouraged me and it was your support that made me what I am today. On this Mother’s Day, I want to express my gratitude, love, and thankfulness to you. I miss you a lot! Though I am not a little kid today, for you, mom, I would always remain a little kid. I always need your support. I seek your tap on my back in my everyday life. I want the confidence you gave me and the strength I obtained from your care and love. You knew exactly what I needed to do, and you guided me through. You always know when I need you even when I don’t. So, I want to thank you. I know you might say it is a mother’s intuition, but I know it’s just your love.\n\nHappy Mother’s Day,\n\tChirag".replace(
+			"  ",
+			" "
+		)
+	)
+}
\ No newline at end of file
Index: Hello_World/src/HelloWorld.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Hello_World/src/HelloWorld.kt b/Hello_World/src/HelloWorld.kt
new file mode 100644
--- /dev/null	(date 1620218938080)
+++ b/Hello_World/src/HelloWorld.kt	(date 1620218938080)
@@ -0,0 +1,33 @@
+import java.lang.Thread.sleep
+
+internal object HelloWorld {
+	@Throws(InterruptedException::class)
+	@JvmStatic
+	fun main(args: Array<String>) {
+		val var1 = "Hello world!"
+		println(var1)
+		sleep(1250)
+		val var2 = "My name is Chirag."
+		println(var2)
+		sleep(1250)
+		val var3 = "This just happens to be my first Java project."
+		println(var3)
+		sleep(1250)
+		for (element in var1) {
+			print(element)
+			sleep(200)
+		}
+		sleep(450)
+		println()
+		for (element in var2) {
+			print(element)
+			sleep(200)
+		}
+		sleep(450)
+		println()
+		for (element in var3) {
+			print(element)
+			sleep(200)
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/EulerTest.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/EulerTest.kt b/Random_Work/src/projectEuler/programs/EulerTest.kt
new file mode 100644
--- /dev/null	(date 1614744273924)
+++ b/Random_Work/src/projectEuler/programs/EulerTest.kt	(date 1614744273924)
@@ -0,0 +1,1026 @@
+package projectEuler.programs
+
+import org.junit.Assert.assertEquals
+import org.junit.Test
+
+class EulerTest {
+	@Test
+	fun testP001() {
+		assertEquals("233168", p001().run())
+	}
+
+	@Test
+	fun testP002() {
+		assertEquals("4613732", p002().run())
+	}
+
+	@Test
+	fun testP003() {
+		assertEquals("6857", p003().run())
+	}
+
+	@Test
+	fun testP004() {
+		assertEquals("906609", p004().run())
+	}
+
+	@Test
+	fun testP005() {
+		assertEquals("232792560", p005().run())
+	}
+
+	@Test
+	fun testP006() {
+		assertEquals("25164150", p006().run())
+	}
+
+	@Test
+	fun testP007() {
+		assertEquals("104743", p007().run())
+	}
+
+	@Test
+	fun testP008() {
+		assertEquals("23514624000", p008().run())
+	}
+
+	@Test
+	fun testP009() {
+		assertEquals("31875000", p009().run())
+	}
+
+	@Test
+	fun testP010() {
+		assertEquals("142913828922", p010().run())
+	}
+
+	@Test
+	fun testP011() {
+		assertEquals("70600674", p011().run())
+	}
+
+	@Test
+	fun testP012() {
+		assertEquals("76576500", p012().run())
+	}
+
+	@Test
+	fun testP013() {
+		assertEquals("5537376230", p013().run())
+	}
+
+	@Test
+	fun testP014() {
+		assertEquals("837799", p014().run())
+	}
+
+	@Test
+	fun testP015() {
+		assertEquals("137846528820", p015().run())
+	}
+
+	@Test
+	fun testP016() {
+		assertEquals("1366", p016().run())
+	}
+
+	@Test
+	fun testP017() {
+		assertEquals("21124", p017().run())
+	}
+
+	@Test
+	fun testP018() {
+		assertEquals("1074", p018().run())
+	}
+
+	@Test
+	fun testP019() {
+		assertEquals("171", p019().run())
+	}
+
+	@Test
+	fun testP020() {
+		assertEquals("648", p020().run())
+	}
+
+	@Test
+	fun testP021() {
+		assertEquals("31626", p021().run())
+	}
+
+	@Test
+	fun testP022() {
+		assertEquals("871198282", p022().run())
+	}
+
+	@Test
+	fun testP023() {
+		assertEquals("4179871", p023().run())
+	}
+
+	@Test
+	fun testP024() {
+		assertEquals("2783915460", p024().run())
+	}
+
+	@Test
+	fun testP025() {
+		assertEquals("4782", p025().run())
+	}
+
+	@Test
+	fun testP026() {
+		assertEquals("983", p026().run())
+	}
+
+	@Test
+	fun testP027() {
+		assertEquals("-59231", p027().run())
+	}
+
+	@Test
+	fun testP028() {
+		assertEquals("669171001", p028().run())
+	}
+
+	@Test
+	fun testP029() {
+		assertEquals("9183", p029().run())
+	}
+
+	@Test
+	fun testP030() {
+		assertEquals("443839", p030().run())
+	}
+
+	@Test
+	fun testP031() {
+		assertEquals("73682", p031().run())
+	}
+
+	@Test
+	fun testP032() {
+		assertEquals("45228", p032().run())
+	}
+
+	@Test
+	fun testP033() {
+		assertEquals("100", p033().run())
+	}
+
+	@Test
+	fun testP034() {
+		assertEquals("40730", p034().run())
+	}
+
+	@Test
+	fun testP035() {
+		assertEquals("55", p035().run())
+	}
+
+	@Test
+	fun testP036() {
+		assertEquals("872187", p036().run())
+	}
+
+	@Test
+	fun testP037() {
+		assertEquals("748317", p037().run())
+	}
+
+	@Test
+	fun testP038() {
+		assertEquals("932718654", p038().run())
+	}
+
+	@Test
+	fun testP039() {
+		assertEquals("840", p039().run())
+	}
+
+	@Test
+	fun testP040() {
+		assertEquals("210", p040().run())
+	}
+
+	@Test
+	fun testP041() {
+		assertEquals("7652413", p041().run())
+	}
+
+	@Test
+	fun testP042() {
+		assertEquals("162", p042().run())
+	}
+
+	@Test
+	fun testP043() {
+		assertEquals("16695334890", p043().run())
+	}
+
+	@Test
+	fun testP044() {
+		assertEquals("5482660", p044().run())
+	}
+
+	@Test
+	fun testP045() {
+		assertEquals("1533776805", p045().run())
+	}
+
+	@Test
+	fun testP046() {
+		assertEquals("5777", p046().run())
+	}
+
+	@Test
+	fun testP047() {
+		assertEquals("134043", p047().run())
+	}
+
+	@Test
+	fun testP048() {
+		assertEquals("9110846700", p048().run())
+	}
+
+	@Test
+	fun testP049() {
+		assertEquals("296962999629", p049().run())
+	}
+
+	@Test
+	fun testP050() {
+		assertEquals("997651", p050().run())
+	}
+
+	@Test
+	fun testP051() {
+		assertEquals("121313", p051().run())
+	}
+
+	@Test
+	fun testP052() {
+		assertEquals("142857", p052().run())
+	}
+
+	@Test
+	fun testP053() {
+		assertEquals("4075", p053().run())
+	}
+
+	@Test
+	fun testP054() {
+		assertEquals("376", p054().run())
+	}
+
+	@Test
+	fun testP055() {
+		assertEquals("249", p055().run())
+	}
+
+	@Test
+	fun testP056() {
+		assertEquals("972", p056().run())
+	}
+
+	@Test
+	fun testP057() {
+		assertEquals("153", p057().run())
+	}
+
+	@Test
+	fun testP058() {
+		assertEquals("26241", p058().run())
+	}
+
+	@Test
+	fun testP059() {
+		assertEquals("129448", p059().run())
+	}
+
+	@Test
+	fun testP060() {
+		assertEquals("26033", p060().run())
+	}
+
+	@Test
+	fun testP061() {
+		assertEquals("28684", p061().run())
+	}
+
+	@Test
+	fun testP062() {
+		assertEquals("127035954683", p062().run())
+	}
+
+	@Test
+	fun testP063() {
+		assertEquals("49", p063().run())
+	}
+
+	@Test
+	fun testP064() {
+		assertEquals("1322", p064().run())
+	}
+
+	@Test
+	fun testP065() {
+		assertEquals("272", p065().run())
+	}
+
+	@Test
+	fun testP066() {
+		assertEquals("661", p066().run())
+	}
+
+	@Test
+	fun testP067() {
+		assertEquals("7273", p067().run())
+	}
+
+	@Test
+	fun testP068() {
+		assertEquals("6531031914842725", p068().run())
+	}
+
+	@Test
+	fun testP069() {
+		assertEquals("510510", p069().run())
+	}
+
+	@Test
+	fun testP070() {
+		assertEquals("8319823", p070().run())
+	}
+
+	@Test
+	fun testP071() {
+		assertEquals("428570", p071().run())
+	}
+
+	@Test
+	fun testP072() {
+		assertEquals("303963552391", p072().run())
+	}
+
+	@Test
+	fun testP073() {
+		assertEquals("7295372", p073().run())
+	}
+
+	@Test
+	fun testP074() {
+		assertEquals("402", p074().run())
+	}
+
+	@Test
+	fun testP075() {
+		assertEquals("161667", p075().run())
+	}
+
+	@Test
+	fun testP076() {
+		assertEquals("190569291", p076().run())
+	}
+
+	@Test
+	fun testP077() {
+		assertEquals("71", p077().run())
+	}
+
+	@Test
+	fun testP078() {
+		assertEquals("55374", p078().run())
+	}
+
+	@Test
+	fun testP079() {
+		assertEquals("73162890", p079().run())
+	}
+
+	@Test
+	fun testP080() {
+		assertEquals("40886", p080().run())
+	}
+
+	@Test
+	fun testP081() {
+		assertEquals("427337", p081().run())
+	}
+
+	@Test
+	fun testP082() {
+		assertEquals("260324", p082().run())
+	}
+
+	@Test
+	fun testP083() {
+		assertEquals("425185", p083().run())
+	}
+
+	@Test
+	fun testP084() {
+		assertEquals("101524", p084().run())
+	}
+
+	@Test
+	fun testP085() {
+		assertEquals("2772", p085().run())
+	}
+
+	@Test
+	fun testP086() {
+		assertEquals("1818", p086().run())
+	}
+
+	@Test
+	fun testP087() {
+		assertEquals("1097343", p087().run())
+	}
+
+	@Test
+	fun testP088() {
+		assertEquals("7587457", p088().run())
+	}
+
+	@Test
+	fun testP089() {
+		assertEquals("743", p089().run())
+	}
+
+	@Test
+	fun testP090() {
+		assertEquals("1217", p090().run())
+	}
+
+	@Test
+	fun testP091() {
+		assertEquals("14234", p091().run())
+	}
+
+	@Test
+	fun testP092() {
+		assertEquals("8581146", p092().run())
+	}
+
+	@Test
+	fun testP093() {
+		assertEquals("1258", p093().run())
+	}
+
+	@Test
+	fun testP094() {
+		assertEquals("518408346", p094().run())
+	}
+
+	@Test
+	fun testP095() {
+		assertEquals("14316", p095().run())
+	}
+
+	@Test
+	fun testP096() {
+		assertEquals("24702", p096().run())
+	}
+
+	@Test
+	fun testP097() {
+		assertEquals("8739992577", p097().run())
+	}
+
+	@Test
+	fun testP098() {
+		assertEquals("18769", p098().run())
+	}
+
+	@Test
+	fun testP099() {
+		assertEquals("709", p099().run())
+	}
+
+	@Test
+	fun testP100() {
+		assertEquals("756872327473", p100().run())
+	}
+
+	@Test
+	fun testP101() {
+		assertEquals("37076114526", p101().run())
+	}
+
+	@Test
+	fun testP102() {
+		assertEquals("228", p102().run())
+	}
+
+	@Test
+	fun testP103() {
+		assertEquals("20313839404245", p103().run())
+	}
+
+	@Test
+	fun testP104() {
+		assertEquals("329468", p104().run())
+	}
+
+	@Test
+	fun testP105() {
+		assertEquals("73702", p105().run())
+	}
+
+	@Test
+	fun testP106() {
+		assertEquals("21384", p106().run())
+	}
+
+	@Test
+	fun testP107() {
+		assertEquals("259679", p107().run())
+	}
+
+	@Test
+	fun testP108() {
+		assertEquals("180180", p108().run())
+	}
+
+	@Test
+	fun testP109() {
+		assertEquals("38182", p109().run())
+	}
+
+	@Test
+	fun testP111() {
+		assertEquals("612407567715", p111().run())
+	}
+
+	@Test
+	fun testP112() {
+		assertEquals("1587000", p112().run())
+	}
+
+	@Test
+	fun testP113() {
+		assertEquals("51161058134250", p113().run())
+	}
+
+	@Test
+	fun testP114() {
+		assertEquals("16475640049", p114().run())
+	}
+
+	@Test
+	fun testP115() {
+		assertEquals("168", p115().run())
+	}
+
+	@Test
+	fun testP116() {
+		assertEquals("20492570929", p116().run())
+	}
+
+	@Test
+	fun testP117() {
+		assertEquals("100808458960497", p117().run())
+	}
+
+	@Test
+	fun testP118() {
+		assertEquals("44680", p118().run())
+	}
+
+	@Test
+	fun testP119() {
+		assertEquals("248155780267521", p119().run())
+	}
+
+	@Test
+	fun testP120() {
+		assertEquals("333082500", p120().run())
+	}
+
+	@Test
+	fun testP121() {
+		assertEquals("2269", p121().run())
+	}
+
+	@Test
+	fun testP122() {
+		assertEquals("1582", p122().run())
+	}
+
+	@Test
+	fun testP123() {
+		assertEquals("21035", p123().run())
+	}
+
+	@Test
+	fun testP124() {
+		assertEquals("21417", p124().run())
+	}
+
+	@Test
+	fun testP125() {
+		assertEquals("2906969179", p125().run())
+	}
+
+	@Test
+	fun testP127() {
+		assertEquals("18407904", p127().run())
+	}
+
+	@Test
+	fun testP128() {
+		assertEquals("14516824220", p128().run())
+	}
+
+	@Test
+	fun testP129() {
+		assertEquals("1000023", p129().run())
+	}
+
+	@Test
+	fun testP130() {
+		assertEquals("149253", p130().run())
+	}
+
+	@Test
+	fun testP132() {
+		assertEquals("843296", p132().run())
+	}
+
+	@Test
+	fun testP133() {
+		assertEquals("453647705", p133().run())
+	}
+
+	@Test
+	fun testP134() {
+		assertEquals("18613426663617118", p134().run())
+	}
+
+	@Test
+	fun testP135() {
+		assertEquals("4989", p135().run())
+	}
+
+	@Test
+	fun testP139() {
+		assertEquals("10057761", p139().run())
+	}
+
+	@Test
+	fun testP142() {
+		assertEquals("1006193", p142().run())
+	}
+
+	@Test
+	fun testP145() {
+		assertEquals("608720", p145().run())
+	}
+
+	@Test
+	fun testP146() {
+		assertEquals("676333270", p146().run())
+	}
+
+	@Test
+	fun testP149() {
+		assertEquals("52852124", p149().run())
+	}
+
+	@Test
+	fun testP150() {
+		assertEquals("-271248680", p150().run())
+	}
+
+	@Test
+	fun testP151() {
+		assertEquals("0.464399", p151().run())
+	}
+
+	@Test
+	fun testP155() {
+		assertEquals("3857447", p155().run())
+	}
+
+	@Test
+	fun testP160() {
+		assertEquals("16576", p160().run())
+	}
+
+	@Test
+	fun testP162() {
+		assertEquals("3D58725572C62302", p162().run())
+	}
+
+	@Test
+	fun testP164() {
+		assertEquals("378158756814587", p164().run())
+	}
+
+	@Test
+	fun testP166() {
+		assertEquals("7130034", p166().run())
+	}
+
+	@Test
+	fun testP169() {
+		assertEquals("178653872807", p169().run())
+	}
+
+	@Test
+	fun testP171() {
+		assertEquals("142989277", p171().run())
+	}
+
+	@Test
+	fun testP172() {
+		assertEquals("227485267000992000", p172().run())
+	}
+
+	@Test
+	fun testP173() {
+		assertEquals("1572729", p173().run())
+	}
+
+	@Test
+	fun testP174() {
+		assertEquals("209566", p174().run())
+	}
+
+	@Test
+	fun testP178() {
+		assertEquals("126461847755", p178().run())
+	}
+
+	@Test
+	fun testP179() {
+		assertEquals("986262", p179().run())
+	}
+
+	@Test
+	fun testP182() {
+		assertEquals("399788195976", p182().run())
+	}
+
+	@Test
+	fun testP186() {
+		assertEquals("2325629", p186().run())
+	}
+
+	@Test
+	fun testP187() {
+		assertEquals("17427258", p187().run())
+	}
+
+	@Test
+	fun testP188() {
+		assertEquals("95962097", p188().run())
+	}
+
+	@Test
+	fun testP191() {
+		assertEquals("1918080160", p191().run())
+	}
+
+	@Test
+	fun testP197() {
+		assertEquals("1.710637717", p197().run())
+	}
+
+	@Test
+	fun testP203() {
+		assertEquals("34029210557338", p203().run())
+	}
+
+	@Test
+	fun testP204() {
+		assertEquals("2944730", p204().run())
+	}
+
+	@Test
+	fun testP205() {
+		assertEquals("0.5731441", p205().run())
+	}
+
+	@Test
+	fun testP206() {
+		assertEquals("1389019170", p206().run())
+	}
+
+	@Test
+	fun testP208() {
+		assertEquals("331951449665644800", p208().run())
+	}
+
+	@Test
+	fun testP211() {
+		assertEquals("1922364685", p211().run())
+	}
+
+	@Test
+	fun testP214() {
+		assertEquals("1677366278943", p214().run())
+	}
+
+	@Test
+	fun testP215() {
+		assertEquals("806844323190414", p215().run())
+	}
+
+	@Test
+	fun testP216() {
+		assertEquals("5437849", p216().run())
+	}
+
+	@Test
+	fun testP218() {
+		assertEquals("0", p218().run())
+	}
+
+	@Test
+	fun testP222() {
+		assertEquals("1590933", p222().run())
+	}
+
+	@Test
+	fun testP225() {
+		assertEquals("2009", p225().run())
+	}
+
+	@Test
+	fun testP231() {
+		assertEquals("7526965179680", p231().run())
+	}
+
+	@Test
+	fun testP243() {
+		assertEquals("892371480", p243().run())
+	}
+
+	@Test
+	fun testP249() {
+		assertEquals("9275262564250418", p249().run())
+	}
+
+	@Test
+	fun testP250() {
+		assertEquals("1425480602091519", p250().run())
+	}
+
+	@Test
+	fun testP265() {
+		assertEquals("209110240768", p265().run())
+	}
+
+	@Test
+	fun testP267() {
+		assertEquals("0.999992836187", p267().run())
+	}
+
+	@Test
+	fun testP271() {
+		assertEquals("4617456485273129588", p271().run())
+	}
+
+	@Test
+	fun testP280() {
+		assertEquals("430.088247", p280().run())
+	}
+
+	@Test
+	fun testP287() {
+		assertEquals("313135496", p287().run())
+	}
+
+	@Test
+	fun testP301() {
+		assertEquals("2178309", p301().run())
+	}
+
+	@Test
+	fun testP303() {
+		assertEquals("1111981904675169", p303().run())
+	}
+
+	@Test
+	fun testP304() {
+		assertEquals("283988410192", p304().run())
+	}
+
+	@Test
+	fun testP315() {
+		assertEquals("13625242", p315().run())
+	}
+
+	@Test
+	fun testP323() {
+		assertEquals("6.3551758451", p323().run())
+	}
+
+	@Test
+	fun testP329() {
+		assertEquals("199740353/29386561536000", p329().run())
+	}
+
+	@Test
+	fun testP345() {
+		assertEquals("13938", p345().run())
+	}
+
+	@Test
+	fun testP346() {
+		assertEquals("336108797689259276", p346().run())
+	}
+
+	@Test
+	fun testP347() {
+		assertEquals("11109800204052", p347().run())
+	}
+
+	@Test
+	fun testP348() {
+		assertEquals("1004195061", p348().run())
+	}
+
+	@Test
+	fun testP357() {
+		assertEquals("1739023853137", p357().run())
+	}
+
+	@Test
+	fun testP381() {
+		assertEquals("139602943319822", p381().run())
+	}
+
+	@Test
+	fun testP387() {
+		assertEquals("696067597313468", p387().run())
+	}
+
+	@Test
+	fun testP401() {
+		assertEquals("281632621", p401().run())
+	}
+
+	@Test
+	fun testP407() {
+		assertEquals("39782849136421", p407().run())
+	}
+
+	@Test
+	fun testP417() {
+		assertEquals("446572970925740", p417().run())
+	}
+
+	@Test
+	fun testP425() {
+		assertEquals("46479497324", p425().run())
+	}
+
+	@Test
+	fun testP429() {
+		assertEquals("98792821", p429().run())
+	}
+
+	@Test
+	fun testP431() {
+		assertEquals("23.386029052", p431().run())
+	}
+
+	@Test
+	fun testP433() {
+		assertEquals("326624372659664", p433().run())
+	}
+
+	@Test
+	fun testP451() {
+		assertEquals("153651073760956", p451().run())
+	}
+
+	@Test
+	fun testP493() {
+		assertEquals("6.818741802", p493().run())
+	}
+
+	@Test
+	fun testP500() {
+		assertEquals("35407281", p500().run())
+	}
+
+	@Test
+	fun testP518() {
+		assertEquals("100315739184392", p518().run())
+	}
+
+	@Test
+	fun testP549() {
+		assertEquals("476001479068717", p549().run())
+	}
+
+	@Test
+	fun testP587() {
+		assertEquals("2240", p587().run())
+	}
+}
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n\t<component name=\"ProjectModuleManager\">\r\n\t\t<modules>\r\n\t\t\t<module fileurl=\"file://$PROJECT_DIR$/Java_Development.iml\" filepath=\"$PROJECT_DIR$/Java_Development.iml\"/>\r\n\t\t</modules>\r\n\t</component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
--- a/.idea/modules.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/.idea/modules.xml	(date 1620217299021)
@@ -2,7 +2,18 @@
 <project version="4">
 	<component name="ProjectModuleManager">
 		<modules>
-			<module fileurl="file://$PROJECT_DIR$/Java_Development.iml" filepath="$PROJECT_DIR$/Java_Development.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml"
+			        filepath="$PROJECT_DIR$/Classwork/AP_Computer_Science_Ⅰ/AP_Computer_Science_Ⅰ.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml"
+			        filepath="$PROJECT_DIR$/Classwork/Computer_Science_in_the_21st_Century/Computer_Science_in_the_21st_Century.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/Hello_World/Hello_World.iml"
+			        filepath="$PROJECT_DIR$/Hello_World/Hello_World.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/.idea/Java_Development.iml"
+			        filepath="$PROJECT_DIR$/.idea/Java_Development.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/Random_Work/Random_Work.iml"
+			        filepath="$PROJECT_DIR$/Random_Work/Random_Work.iml"/>
+			<module fileurl="file://$PROJECT_DIR$/Classwork/mobileApp/mobileApp.iml"
+			        filepath="$PROJECT_DIR$/Classwork/mobileApp/mobileApp.iml"/>
 		</modules>
 	</component>
 </project>
\ No newline at end of file
Index: Random_Work/src/randomStuff/RandomStuff.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/randomStuff/RandomStuff.java b/Random_Work/src/randomStuff/RandomStuff.java
new file mode 100644
--- /dev/null	(date 1620218234494)
+++ b/Random_Work/src/randomStuff/RandomStuff.java	(date 1620218234494)
@@ -0,0 +1,7 @@
+package randomStuff;
+
+public class RandomStuff {
+	public static void main(String... args) {
+		System.out.println("Dear Mom,\n\tYou’ve always been a great mom, but even more than that, you’ve always been there when I didn’t know what to do. Whenever I was upset, you encouraged me and it was your support that made me what I am today. On this Mother’s Day, I want to express my gratitude, love, and thankfulness to you. I miss you a lot! Though I am not a little kid today, for you, mom, I would always remain a little kid. I always need your support. I seek your tap on my back in my everyday life. I want the confidence you gave me and the strength I obtained from your care and love. You knew exactly what I needed to do, and you guided me through. You always know when I need you even when I don’t. So, I want to thank you. I know you might say it is a mother’s intuition, but I know it’s just your love.\n\nHappy Mother’s Day,\n\tChirag".replace("  ", " "));
+	}
+}
\ No newline at end of file
Index: .idea/libraries/gridworld1.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/gridworld1.xml b/.idea/libraries/gridworld1.xml
new file mode 100644
--- /dev/null	(date 1620217299082)
+++ b/.idea/libraries/gridworld1.xml	(date 1620217299082)
@@ -0,0 +1,9 @@
+<component name="libraryTable">
+	<library name="gridworld1">
+		<CLASSES>
+			<root url="jar://$PROJECT_DIR$/out/production/Java_Development/objectOriented/gridWorld/gridworld.jar!/"/>
+		</CLASSES>
+		<JAVADOC/>
+		<SOURCES/>
+	</library>
+</component>
\ No newline at end of file
Index: Random_Work/src/Solution.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/Solution.java b/Random_Work/src/Solution.java
new file mode 100644
--- /dev/null	(date 1620342250573)
+++ b/Random_Work/src/Solution.java	(date 1620342250573)
@@ -0,0 +1,42 @@
+import java.io.*;
+import java.util.List;
+import java.util.stream.IntStream;
+
+import static java.lang.Integer.parseInt;
+import static java.lang.System.getenv;
+import static java.lang.System.in;
+import static java.util.Arrays.stream;
+import static java.util.stream.Collectors.toList;
+
+class Result {
+	/*
+	 * Complete the 'solve' function below.
+	 *
+	 * The function is expected to return an INTEGER.
+	 * The function accepts INTEGER_ARRAY arr as parameter.
+	 */
+	public static int solve(List<Integer> arr) {
+		// Write your code here
+		return 0;
+	}
+
+}
+
+public class Solution {
+	public static void main(String[] args) throws IOException {
+		BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(in));
+		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(getenv("OUTPUT_PATH")));
+		IntStream.range(0, parseInt(bufferedReader.readLine().trim())).forEach(tItr -> {
+			try {
+				int arrCount = parseInt(bufferedReader.readLine().trim());
+				int result = Result.solve(stream(bufferedReader.readLine().replaceAll("\\s+$", "").split(" ")).map(Integer::parseInt).collect(toList()));
+				bufferedWriter.write(String.valueOf(result));
+				bufferedWriter.newLine();
+			} catch (IOException ex) {
+				throw new RuntimeException(ex);
+			}
+		});
+		bufferedReader.close();
+		bufferedWriter.close();
+	}
+}
\ No newline at end of file
Index: Random_Work/src/svgs/screwdriver-and-wrench.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/svgs/screwdriver-and-wrench.svg b/Random_Work/src/svgs/screwdriver-and-wrench.svg
new file mode 100644
--- /dev/null	(date 1622062475613)
+++ b/Random_Work/src/svgs/screwdriver-and-wrench.svg	(date 1622062475613)
@@ -0,0 +1,16 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32">
+	<defs>
+		<radialGradient id="rad" cx="16" cy="16" fx="16" fy="16" r="16">
+			<stop stop-color="#c60"/>
+			<stop stop-color="#f60" offset="100%"/>
+		</radialGradient>
+	</defs>
+	<rect width="32" height="32" fill="" id="rect840" style="fill-opacity:1.0;fill:url(#rad)"/>
+	<g transform="matrix(1.1953925,0,0,1.2348537,5.3842732e-4,-0.5285174)">
+		<path d="m 17.601,12.297 c 0.556,-0.371 1.212,-0.529 1.854,-0.457 L 26.769,4.524 22.673,0.428 15.358,7.744 c 0.074,0.65 -0.09,1.314 -0.476,1.877 z"/>
+		<polygon
+				points="5.136,24.006 6.256,22.623 5.99,22.354 10.642,17.701 9.486,16.561 4.842,21.207 4.577,20.942 3.19,22.063 0.854,25.744 1.452,26.342 "/>
+		<path d="M 11.204,8.307 C 11.741,6.387 11.254,4.241 9.747,2.731 8.245,1.235 6.124,0.744 4.215,1.262 L 7.448,4.494 6.6,7.66 3.43,8.508 0.198,5.278 c -0.516,1.908 -0.026,4.029 1.473,5.529 1.571,1.572 3.835,2.033 5.815,1.389 l 0.018,0.018 13.299,13.299 c 0.526,0.525 1.216,0.791 1.905,0.791 0.69,0 1.378,-0.266 1.906,-0.791 1.051,-1.049 1.051,-2.754 0,-3.811 z M 22.94,25.061 c -0.566,0 -1.025,-0.461 -1.025,-1.029 0,-0.57 0.459,-1.029 1.025,-1.029 0.57,0 1.031,0.459 1.031,1.029 0.001,0.568 -0.46,1.029 -1.031,1.029 z"/>
+	</g>
+</svg>
\ No newline at end of file
Index: Random_Work/src/svgs/gradient.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/svgs/gradient.svg b/Random_Work/src/svgs/gradient.svg
new file mode 100644
--- /dev/null	(date 1618235642053)
+++ b/Random_Work/src/svgs/gradient.svg	(date 1618235642053)
@@ -0,0 +1,12 @@
+<svg viewBox="0 0 960 960" fill="none" stroke="none" stroke-linecap="square" stroke-miterlimit="10"
+     xmlns="http://www.w3.org/2000/svg">
+	<defs>
+		<radialGradient id="p.1" gradientUnits="userSpaceOnUse"
+		                gradientTransform="matrix(36.846234721113085 0.0 0.0 36.846234721113085 0.0 0.0)" cx="0"
+		                cy="26.054222562120167" fx="0.0" fy="26.054222562120167" r="36.84623336791992">
+			<stop offset="0.0" stop-color="#996699"/>
+			<stop offset="1.0" stop-color="#003366"/>
+		</radialGradient>
+	</defs>
+	<path fill="url(#p.1)" d="m0 0l960.0 0l0 960.0l-960.0 0z" fill-rule="evenodd"/>
+</svg>
\ No newline at end of file
Index: Random_Work/src/svgs/cat.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/svgs/cat.svg b/Random_Work/src/svgs/cat.svg
new file mode 100644
--- /dev/null	(date 1614289605202)
+++ b/Random_Work/src/svgs/cat.svg	(date 1614289605202)
@@ -0,0 +1,24 @@
+<svg xmlns="http://www.w3.org/2000/svg" width="1024pt" height="1024pt" viewBox="0 0 1024 1024">
+	<g>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(100%,80%,30.196078%);fill-opacity:1;"
+		      d="M 920.121094 398.195312 C 920.121094 398.195312 1018.113281 147.542969 967.082031 56.917969 C 949.902344 26.394531 739.527344 113.75 662.074219 211.710938 C 662.074219 211.710938 588.515625 187.25 512 187.25 C 435.484375 187.25 361.925781 211.710938 361.925781 211.710938 C 284.472656 113.75 74.097656 26.394531 56.917969 56.917969 C 5.886719 147.542969 103.878906 398.195312 103.878906 398.195312 C 78.363281 447.175781 68.808594 521.785156 59.648438 601.855469 C 49.578125 689.636719 69.605469 759.609375 78.363281 775.054688 C 88.320312 792.605469 138.753906 849.152344 205.910156 897.535156 C 307.941406 971.007812 460.96875 995.527344 512 995.527344 C 563.03125 995.527344 716.058594 971.035156 818.089844 897.535156 C 885.246094 849.152344 935.679688 792.605469 945.636719 775.054688 C 954.394531 759.609375 974.421875 689.636719 964.378906 601.855469 C 955.164062 521.8125 945.636719 447.175781 920.121094 398.195312 Z M 920.121094 398.195312 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(94.509804%,56.078431%,14.901961%);fill-opacity:1;"
+		      d="M 67.101562 84.507812 C 72.789062 67.46875 219.222656 146.316406 252.5 238.222656 C 252.5 238.222656 144.183594 312.859375 123.703125 369.75 C 123.703125 369.75 38.65625 169.839844 67.101562 84.507812 Z M 67.101562 84.507812 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(100%,80%,30.196078%);fill-opacity:1;"
+		      d="M 170.097656 206.535156 C 170.097656 166.316406 325.320312 284.273438 296.875 312.71875 C 268.429688 341.164062 261.175781 333.199219 232.734375 361.644531 C 204.289062 390.085938 170.097656 234.980469 170.097656 206.535156 Z M 170.097656 206.535156 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(94.509804%,56.078431%,14.901961%);fill-opacity:1;"
+		      d="M 956.898438 84.507812 C 951.210938 67.46875 804.777344 146.316406 771.5 238.222656 C 771.5 238.222656 879.816406 312.859375 900.296875 369.75 C 900.296875 369.75 985.34375 169.839844 956.898438 84.507812 Z M 956.898438 84.507812 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(100%,80%,30.196078%);fill-opacity:1;"
+		      d="M 853.902344 206.535156 C 853.902344 166.316406 698.679688 284.273438 727.125 312.71875 C 755.570312 341.164062 762.824219 333.199219 791.265625 361.644531 C 819.710938 390.085938 853.902344 234.980469 853.902344 206.535156 Z M 853.902344 206.535156 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(16.078431%,18.431373%,20%);fill-opacity:1;"
+		      d="M 398.25 568.917969 C 398.25 600.347656 372.765625 625.777344 341.363281 625.777344 C 309.960938 625.777344 284.472656 600.347656 284.472656 568.917969 C 284.472656 537.515625 309.960938 512.058594 341.363281 512.058594 C 372.765625 512.058594 398.25 537.542969 398.25 568.917969 Z M 739.527344 568.917969 C 739.527344 600.347656 714.039062 625.777344 682.636719 625.777344 C 651.207031 625.777344 625.75 600.347656 625.75 568.917969 C 625.75 537.515625 651.207031 512.058594 682.636719 512.058594 C 714.070312 512.058594 739.527344 537.542969 739.527344 568.917969 Z M 739.527344 568.917969 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(99.607843%,90.588235%,72.156863%);fill-opacity:1;"
+		      d="M 62.605469 866.359375 C 58.394531 866.359375 54.242188 864.511719 51.425781 860.957031 C 46.5625 854.785156 47.617188 845.851562 53.789062 840.988281 C 58.394531 837.375 168.136719 752.242188 356.664062 766.890625 C 364.488281 767.488281 370.347656 774.316406 369.75 782.136719 C 369.152344 789.960938 362.4375 796.386719 354.476562 795.222656 C 177.179688 781.738281 72.449219 862.519531 71.425781 863.347656 C 68.777344 865.335938 65.679688 866.359375 62.605469 866.359375 Z M 314.851562 733.722656 C 313.457031 733.722656 312.007812 733.523438 310.613281 733.097656 C 174.363281 690.515625 62.09375 723.226562 60.957031 723.542969 C 53.417969 725.84375 45.511719 721.550781 43.234375 714.011719 C 40.988281 706.476562 45.253906 698.566406 52.765625 696.320312 C 57.683594 694.839844 174.675781 660.851562 319.0625 705.933594 C 326.570312 708.296875 330.753906 716.257812 328.390625 723.769531 C 326.515625 729.828125 320.910156 733.722656 314.851562 733.722656 Z M 961.394531 866.359375 C 965.605469 866.359375 969.757812 864.511719 972.574219 860.957031 C 977.4375 854.785156 976.382812 845.851562 970.210938 840.988281 C 965.605469 837.375 855.863281 752.242188 667.335938 766.890625 C 659.511719 767.488281 653.652344 774.316406 654.25 782.136719 C 654.875 789.960938 661.5625 796.386719 669.523438 795.222656 C 846.820312 781.738281 951.550781 862.519531 952.574219 863.347656 C 955.222656 865.335938 958.320312 866.359375 961.394531 866.359375 Z M 709.148438 733.722656 C 710.542969 733.722656 711.992188 733.523438 713.386719 733.097656 C 849.636719 690.515625 961.90625 723.226562 963.042969 723.542969 C 970.582031 725.84375 978.488281 721.550781 980.765625 714.011719 C 983.011719 706.476562 978.746094 698.566406 971.234375 696.320312 C 966.316406 694.839844 849.324219 660.851562 704.9375 705.933594 C 697.429688 708.296875 693.246094 716.257812 695.609375 723.769531 C 697.484375 729.828125 703.089844 733.722656 709.148438 733.722656 Z M 709.148438 733.722656 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(40.392157%,45.882353%,49.803922%);fill-opacity:1;"
+		      d="M 703.601562 878.875 C 700.84375 871.539062 692.679688 867.726562 685.3125 870.515625 C 669.609375 876.375 654.707031 879.359375 640.96875 879.359375 C 608.199219 879.359375 596.566406 870.65625 583.140625 860.613281 C 570.3125 851 555.945312 840.277344 526.535156 837.773438 L 526.535156 771.242188 C 526.535156 763.390625 520.164062 757.019531 512.3125 757.019531 C 504.460938 757.019531 498.089844 763.390625 498.089844 771.242188 L 498.089844 838.742188 C 475.050781 842.011719 459.804688 851.226562 446.4375 859.875 C 430.277344 870.316406 416.3125 879.359375 387.1875 879.359375 C 373.476562 879.359375 358.570312 876.402344 342.871094 870.515625 C 335.53125 867.8125 327.308594 871.507812 324.578125 878.875 C 321.820312 886.242188 325.574219 894.4375 332.914062 897.195312 C 351.800781 904.21875 370.0625 907.804688 387.15625 907.804688 C 424.675781 907.804688 444.445312 895.03125 461.882812 883.769531 C 476.785156 874.125 489.757812 865.820312 514.445312 865.707031 C 542.664062 865.933594 553.074219 873.613281 566.074219 883.371094 C 581.375 894.832031 598.699219 907.804688 640.96875 907.804688 C 658.0625 907.804688 676.351562 904.21875 695.238281 897.195312 C 702.605469 894.4375 706.359375 886.242188 703.601562 878.875 Z M 703.601562 878.875 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(90.588235%,35.294118%,43.921569%);fill-opacity:1;"
+		      d="M 551.820312 705.621094 L 472.179688 705.621094 C 453.972656 705.621094 439.097656 720.496094 439.097656 738.703125 C 439.097656 756.878906 453.972656 771.78125 472.179688 771.78125 L 478.917969 771.78125 L 478.917969 781.597656 C 478.917969 799.773438 493.796875 814.675781 512 814.675781 C 530.203125 814.675781 545.082031 799.800781 545.082031 781.597656 L 545.082031 771.78125 L 551.820312 771.78125 C 570 771.78125 584.902344 756.90625 584.902344 738.703125 C 584.902344 720.496094 570 705.621094 551.820312 705.621094 Z M 551.820312 705.621094 "/>
+		<path style="stroke:none;fill-rule:nonzero;fill:rgb(94.509804%,56.078431%,14.901961%);fill-opacity:1;"
+		      d="M 512.625 487.9375 C 504.773438 487.9375 498.402344 481.5625 498.402344 473.714844 L 498.402344 238.078125 C 498.402344 230.230469 504.773438 223.859375 512.625 223.859375 C 520.476562 223.859375 526.847656 230.230469 526.847656 238.078125 L 526.847656 473.714844 C 526.847656 481.59375 520.503906 487.9375 512.625 487.9375 Z M 597.332031 442.9375 C 589.484375 442.9375 583.109375 436.566406 583.109375 428.714844 C 583.109375 346.738281 618.15625 280.519531 619.664062 277.730469 C 623.359375 270.792969 632.035156 268.230469 638.917969 271.929688 C 645.832031 275.625 648.417969 284.246094 644.722656 291.1875 C 644.378906 291.78125 611.554688 354.132812 611.554688 428.714844 C 611.554688 436.566406 605.183594 442.9375 597.332031 442.9375 Z M 426.667969 442.9375 C 418.816406 442.9375 412.445312 436.566406 412.445312 428.714844 C 412.445312 354.105469 379.589844 291.78125 379.25 291.1875 C 375.550781 284.246094 378.167969 275.65625 385.082031 271.929688 C 391.964844 268.203125 400.582031 270.820312 404.308594 277.730469 C 405.816406 280.519531 440.859375 346.738281 440.859375 428.714844 C 440.890625 436.566406 434.515625 442.9375 426.667969 442.9375 Z M 426.667969 442.9375 "/>
+	</g>
+</svg>
\ No newline at end of file
Index: Random_Work/src/63164bb66f2c9c65db1b1f7cf554a968.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/63164bb66f2c9c65db1b1f7cf554a968.svg b/Random_Work/src/63164bb66f2c9c65db1b1f7cf554a968.svg
new file mode 100644
--- /dev/null	(date 1620507016950)
+++ b/Random_Work/src/63164bb66f2c9c65db1b1f7cf554a968.svg	(date 1620507016950)
@@ -0,0 +1,7 @@
+<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024">
+	<!--	<path fill="#FFCC4D"-->
+	<!--	      d="M36 18c0 9.941-8.059 18-18 18-9.94 0-18-8.059-18-18C0 8.06 8.06 0 18 0c9.941 0 18 8.06 18 18"/>-->
+	<circle fill="#FFCD4D" cx="50%" cy="50%" r="512"/>
+	<!--<ellipse fill="#664500" cx="11.5" cy="16.5" rx="2.5" ry="3.5"/>
+	<ellipse fill="#664500" cx="24.5" cy="16.5" rx="2.5" ry="3.5"/>-->
+</svg>
\ No newline at end of file
Index: Random_Work/src/svgs/monitor.svg
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/svgs/monitor.svg b/Random_Work/src/svgs/monitor.svg
new file mode 100644
--- /dev/null	(date 1620507080245)
+++ b/Random_Work/src/svgs/monitor.svg	(date 1620507080245)
@@ -0,0 +1,62 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+<svg viewBox="0 0 64 64" xmlns="http://www.w3.org/2000/svg">
+	<linearGradient id="a" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="44.39"
+	                x2="17.83" y1="55.11" y2="9.1">
+		<stop offset="0" stop-color="#ff980e"/>
+		<stop offset=".21" stop-color="#ff7139"/>
+		<stop offset=".36" stop-color="#ff5854"/>
+		<stop offset=".46" stop-color="#ff4f5e"/>
+		<stop offset=".69" stop-color="#ff3750"/>
+		<stop offset=".86" stop-color="#f92261"/>
+		<stop offset="1" stop-color="#f5156c"/>
+	</linearGradient>
+	<linearGradient id="b" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="44.39"
+	                x2="17.83" y1="55.11" y2="9.1">
+		<stop offset="0" stop-color="#fff44f" stop-opacity=".8"/>
+		<stop offset=".75" stop-color="#fff44f" stop-opacity="0"/>
+	</linearGradient>
+	<linearGradient id="c" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="44.49"
+	                x2="44.49" y1="3.82" y2="58.55">
+		<stop offset="0" stop-color="#3a8ee6"/>
+		<stop offset=".24" stop-color="#5c79f0"/>
+		<stop offset=".63" stop-color="#9059ff"/>
+		<stop offset="1" stop-color="#c139e6"/>
+	</linearGradient>
+	<linearGradient id="d" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="35.2" x2="59.52"
+	                y1="60.58" y2="36.25">
+		<stop offset="0" stop-color="#6e008b" stop-opacity=".5"/>
+		<stop offset=".5" stop-color="#c846cb" stop-opacity="0"/>
+	</linearGradient>
+	<linearGradient id="e" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="59.67"
+	                x2="45.66" y1="30.62" y2="16.61">
+		<stop offset=".14" stop-color="#6a2bea" stop-opacity="0"/>
+		<stop offset=".3" stop-color="#662ce6" stop-opacity=".09"/>
+		<stop offset=".47" stop-color="#592fdb" stop-opacity=".19"/>
+		<stop offset=".64" stop-color="#4534c9" stop-opacity=".29"/>
+		<stop offset=".81" stop-color="#283baf" stop-opacity=".39"/>
+		<stop offset=".99" stop-color="#03448d" stop-opacity=".49"/>
+		<stop offset="1" stop-color="#00458b" stop-opacity=".5"/>
+	</linearGradient>
+	<linearGradient id="f" gradientTransform="matrix(1 0 0 -1 0 66)" gradientUnits="userSpaceOnUse" x1="38.67"
+	                x2="41.95" y1="21.69" y2="17.77">
+		<stop offset="0" stop-color="#960e18" stop-opacity=".6"/>
+		<stop offset=".17" stop-color="#a91522" stop-opacity=".47"/>
+		<stop offset=".51" stop-color="#d9283c" stop-opacity=".19"/>
+		<stop offset=".75" stop-color="#ff3750" stop-opacity="0"/>
+	</linearGradient>
+	<path d="m54.55 15.53-5.71-3.26-13-7.46-.41-.23a6.88 6.88 0 0 0 -6.88 0l-.42.23-18.28 10.48-.41.24a6.83 6.83 0 0 0 -3.44 5.92v21.89a6.86 6.86 0 0 0 3.44 5.92l18.7 10.74a2.75 2.75 0 0 0 1.44.38 2.91 2.91 0 0 0 2.49-1.42 2.83 2.83 0 0 0 -1.07-3.96l-18.29-10.44a2 2 0 0 1 -1-1.69v-20.95a2 2 0 0 1 1-1.69l3.29-1.85 15-8.63a2 2 0 0 1 2 0l18.27 10.48a2 2 0 0 1 1 1.69v20.95a1.94 1.94 0 0 1 -1 1.69l-6.18 3.54-3.09-4.71a15 15 0 1 0 -5 2.92l4.75 7.15a1.91 1.91 0 0 0 .24.32 3.18 3.18 0 0 0 .33.3.27.27 0 0 0 .08.07l.41.25h.1a1.3 1.3 0 0 0 .39.14.14.14 0 0 0 .09 0 2.34 2.34 0 0 0 .45.07.3.3 0 0 1 .13 0h.39a.23.23 0 0 0 .11 0 2.57 2.57 0 0 0 .48-.11.26.26 0 0 0 .12 0l.37-.16h.08l8.94-5.13a6.83 6.83 0 0 0 3.54-5.9v-21.86a6.75 6.75 0 0 0 -3.45-5.92zm-31.74 16.85a9.18 9.18 0 1 1 9.19 9.11 9.15 9.15 0 0 1 -9.19-9.11z"
+	      fill="url(#a)"/>
+	<path d="m54.55 15.53-5.71-3.26-13-7.46-.41-.23a6.88 6.88 0 0 0 -6.88 0l-.42.23-18.28 10.48-.41.24a6.83 6.83 0 0 0 -3.44 5.92v21.89a6.86 6.86 0 0 0 3.44 5.92l18.7 10.74a2.75 2.75 0 0 0 1.44.38 2.91 2.91 0 0 0 2.49-1.42 2.83 2.83 0 0 0 -1.07-3.96l-18.29-10.44a2 2 0 0 1 -1-1.69v-20.95a2 2 0 0 1 1-1.69l3.29-1.85 15-8.63a2 2 0 0 1 2 0l18.27 10.48a2 2 0 0 1 1 1.69v20.95a1.94 1.94 0 0 1 -1 1.69l-6.18 3.54-3.09-4.71a15 15 0 1 0 -5 2.92l4.75 7.15a1.91 1.91 0 0 0 .24.32 3.18 3.18 0 0 0 .33.3.27.27 0 0 0 .08.07l.41.25h.1a1.3 1.3 0 0 0 .39.14.14.14 0 0 0 .09 0 2.34 2.34 0 0 0 .45.07.3.3 0 0 1 .13 0h.39a.23.23 0 0 0 .11 0 2.57 2.57 0 0 0 .48-.11.26.26 0 0 0 .12 0l.37-.16h.08l8.94-5.13a6.83 6.83 0 0 0 3.54-5.9v-21.86a6.75 6.75 0 0 0 -3.45-5.92zm-31.74 16.85a9.18 9.18 0 1 1 9.19 9.11 9.15 9.15 0 0 1 -9.19-9.11z"
+	      fill="url(#b)"/>
+	<path d="m54.55 15.53-5.71-3.26-7.94-4.55a6.11 6.11 0 0 0 -5.9-.08l-4 2.11a2 2 0 0 1 2 0l18.3 10.48a1.94 1.94 0 0 1 1 1.69v20.95a1.93 1.93 0 0 1 -1 1.69l-6.23 3.54 1 1.55a4.05 4.05 0 0 0 5.41 1.35l3.06-1.75a6.82 6.82 0 0 0 3.46-5.91v-21.9a6.75 6.75 0 0 0 -3.45-5.91z"
+	      fill="url(#c)"/>
+	<path d="m52.26 21.92v10.16h5.74v-10.64a6.83 6.83 0 0 0 -3.44-5.92l-5.7-3.26-8-4.55a6.14 6.14 0 0 0 -5.86-.09l-4 2.12a2 2 0 0 1 2 0l18.27 10.48a2 2 0 0 1 .99 1.7z"
+	      fill="url(#d)"/>
+	<path d="m52.26 33.72v9.14a2 2 0 0 1 -1 1.69l-6.19 3.54 1 1.55a4.06 4.06 0 0 0 5.42 1.36l3.06-1.75a6.84 6.84 0 0 0 3.45-5.92v-9.63h-5.74z"
+	      fill="url(#e)" opacity=".9"/>
+	<path d="m41.17 32.38a9.18 9.18 0 1 0 -9.17 9.11 9.14 9.14 0 0 0 9.17-9.11z" fill="none"/>
+	<path d="m44.64 47.43-2.68-4a15 15 0 0 1 -4.96 2.88l2.86 4.31c1.63-1.02 3.22-2.08 4.78-3.19z" fill="url(#f)"
+	      opacity=".9"/>
+</svg>
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p034.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p034.kt b/Random_Work/src/projectEuler/programs/p034.kt
new file mode 100644
--- /dev/null	(date 1614951979699)
+++ b/Random_Work/src/projectEuler/programs/p034.kt	(date 1614951979699)
@@ -0,0 +1,35 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.util.stream.IntStream
+
+class p034 : EulerSolution() {
+	override fun run(): String {
+		// As stated in the problem, 1 = 1! and 2 = 2! are excluded.
+		// If a number has at least n >= 8 digits, then even if every digit is 9,
+		// n * 9! is still less than the number (which is at least 10^n).
+		val sum = IntStream.range(3, 10000000).filter { i: Int -> i == factorialDigitSum(i) }.sum()
+		return Integer.toString(sum)
+	}
+
+	companion object {
+		// Hard-coded values for factorial(0), factorial(1), ..., factorial(9)
+		private val FACTORIAL = intArrayOf(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880)
+
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p034().run())
+		}
+
+		@Contract(pure = true)
+		private fun factorialDigitSum(x: Int): Int {
+			var x = x
+			var sum = 0
+			while (x != 0) {
+				sum += FACTORIAL[x % 10]
+				x /= 10
+			}
+			return sum
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/de/vogella/rss/model/FeedMessage.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/de/vogella/rss/model/FeedMessage.java b/Random_Work/src/de/vogella/rss/model/FeedMessage.java
new file mode 100644
--- /dev/null	(date 1621726143063)
+++ b/Random_Work/src/de/vogella/rss/model/FeedMessage.java	(date 1621726143063)
@@ -0,0 +1,59 @@
+package de.vogella.rss.model;
+
+/*
+ * Represents one RSS message
+ */
+public class FeedMessage {
+	String title;
+	String description;
+	String link;
+	String author;
+	String guid;
+
+	public String getTitle() {
+		return title;
+	}
+
+	public void setTitle(String title) {
+		this.title = title;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public void setDescription(String description) {
+		this.description = description;
+	}
+
+	public String getLink() {
+		return link;
+	}
+
+	public void setLink(String link) {
+		this.link = link;
+	}
+
+	public String getAuthor() {
+		return author;
+	}
+
+	public void setAuthor(String author) {
+		this.author = author;
+	}
+
+	public String getGuid() {
+		return guid;
+	}
+
+	public void setGuid(String guid) {
+		this.guid = guid;
+	}
+
+	@Override
+	public String toString() {
+		return "FeedMessage [title=" + title + ", description=" + description
+				+ ", link=" + link + ", author=" + author + ", guid=" + guid
+				+ "]";
+	}
+}
\ No newline at end of file
Index: Random_Work/src/de/vogella/rss/model/Feed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/de/vogella/rss/model/Feed.java b/Random_Work/src/de/vogella/rss/model/Feed.java
new file mode 100644
--- /dev/null	(date 1621726473900)
+++ b/Random_Work/src/de/vogella/rss/model/Feed.java	(date 1621726473900)
@@ -0,0 +1,59 @@
+package de.vogella.rss.model;
+
+import java.util.ArrayList;
+import java.util.List;
+
+/*
+ * Stores an RSS feed
+ */
+public class Feed {
+	final String title;
+	final String link;
+	final String description;
+	final String language;
+	final String copyright;
+	final String pubDate;
+	final List<FeedMessage> entries = new ArrayList<FeedMessage>();
+
+	public Feed(String title, String link, String description, String language, String copyright, String pubDate) {
+		this.title = title;
+		this.link = link;
+		this.description = description;
+		this.language = language;
+		this.copyright = copyright;
+		this.pubDate = pubDate;
+	}
+
+	public List<FeedMessage> getMessages() {
+		return entries;
+	}
+
+	public String getTitle() {
+		return title;
+	}
+
+	public String getLink() {
+		return link;
+	}
+
+	public String getDescription() {
+		return description;
+	}
+
+	public String getLanguage() {
+		return language;
+	}
+
+	public String getCopyright() {
+		return copyright;
+	}
+
+	public String getPubDate() {
+		return pubDate;
+	}
+
+	@Override
+	public String toString() {
+		return "Feed [copyright=" + copyright + ", description=" + description + ", language=" + language + ", link=" + link + ", pubDate=" + pubDate + ", title=" + title + "]";
+	}
+}
\ No newline at end of file
Index: Random_Work/src/de/vogella/rss/read/RSSFeedParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/de/vogella/rss/read/RSSFeedParser.java b/Random_Work/src/de/vogella/rss/read/RSSFeedParser.java
new file mode 100644
--- /dev/null	(date 1621726143091)
+++ b/Random_Work/src/de/vogella/rss/read/RSSFeedParser.java	(date 1621726143091)
@@ -0,0 +1,111 @@
+package de.vogella.rss.read;
+
+import de.vogella.rss.model.Feed;
+import de.vogella.rss.model.FeedMessage;
+
+import javax.xml.stream.XMLEventReader;
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.events.Characters;
+import javax.xml.stream.events.XMLEvent;
+import java.io.IOException;
+import java.io.InputStream;
+import java.net.MalformedURLException;
+import java.net.URL;
+
+public class RSSFeedParser {
+	static final String TITLE = "title";
+	static final String DESCRIPTION = "description";
+	static final String CHANNEL = "channel";
+	static final String LANGUAGE = "language";
+	static final String COPYRIGHT = "copyright";
+	static final String LINK = "link";
+	static final String AUTHOR = "author";
+	static final String ITEM = "item";
+	static final String PUB_DATE = "pubDate";
+	static final String GUID = "guid";
+	final URL url;
+
+	public RSSFeedParser(String feedUrl) {
+		try {
+			this.url = new URL(feedUrl);
+		} catch (MalformedURLException e) {
+			throw new RuntimeException(e);
+		}
+	}
+
+	public Feed readFeed() {
+		Feed feed = null;
+		try {
+			boolean isFeedHeader = true;
+			// Set header values intial to the empty string
+			String description = "";
+			String title = "";
+			String link = "";
+			String language = "";
+			String copyright = "";
+			String author = "";
+			String pubdate = "";
+			String guid = "";
+			// First create a new XMLInputFactory
+			XMLInputFactory inputFactory = XMLInputFactory.newInstance();
+			// Setup a new eventReader
+			InputStream in = read();
+			XMLEventReader eventReader = inputFactory.createXMLEventReader(in);
+			// read the XML document
+			while (eventReader.hasNext()) {
+				XMLEvent event = eventReader.nextEvent();
+				if (event.isStartElement()) {
+					String localPart = event.asStartElement().getName().getLocalPart();
+					switch (localPart) {
+						case ITEM -> {
+							if (isFeedHeader) {
+								isFeedHeader = false;
+								feed = new Feed(title, link, description, language, copyright, pubdate);
+							}
+							event = eventReader.nextEvent();
+						}
+						case TITLE -> title = getCharacterData(event, eventReader);
+						case DESCRIPTION -> description = getCharacterData(event, eventReader);
+						case LINK -> link = getCharacterData(event, eventReader);
+						case GUID -> guid = getCharacterData(event, eventReader);
+						case LANGUAGE -> language = getCharacterData(event, eventReader);
+						case AUTHOR -> author = getCharacterData(event, eventReader);
+						case PUB_DATE -> pubdate = getCharacterData(event, eventReader);
+						case COPYRIGHT -> copyright = getCharacterData(event, eventReader);
+					}
+				} else if (event.isEndElement()) {
+					if (event.asEndElement().getName().getLocalPart().equals(ITEM)) {
+						FeedMessage message = new FeedMessage();
+						message.setAuthor(author);
+						message.setDescription(description);
+						message.setGuid(guid);
+						message.setLink(link);
+						message.setTitle(title);
+						assert feed != null;
+						feed.getMessages().add(message);
+						event = eventReader.nextEvent();
+					}
+				}
+			}
+		} catch (XMLStreamException e) {
+			throw new RuntimeException(e);
+		}
+		return feed;
+	}
+
+	private String getCharacterData(XMLEvent event, XMLEventReader eventReader) throws XMLStreamException {
+		String result = "";
+		event = eventReader.nextEvent();
+		if (event instanceof Characters) result = event.asCharacters().getData();
+		return result;
+	}
+
+	private InputStream read() {
+		try {
+			return url.openStream();
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+	}
+}
\ No newline at end of file
Index: Random_Work/src/de/vogella/rss/tests/ReadTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/de/vogella/rss/tests/ReadTest.java b/Random_Work/src/de/vogella/rss/tests/ReadTest.java
new file mode 100644
--- /dev/null	(date 1621726346055)
+++ b/Random_Work/src/de/vogella/rss/tests/ReadTest.java	(date 1621726346055)
@@ -0,0 +1,14 @@
+package de.vogella.rss.tests;
+
+import de.vogella.rss.model.Feed;
+import de.vogella.rss.model.FeedMessage;
+import de.vogella.rss.read.RSSFeedParser;
+
+public class ReadTest {
+	public static void main(String[] args) {
+		RSSFeedParser parser = new RSSFeedParser("https://techcrunch.com/feed/");
+		Feed feed = parser.readFeed();
+		System.out.println(feed);
+		for (FeedMessage message : feed.getMessages()) System.out.println(message);
+	}
+}
\ No newline at end of file
Index: Random_Work/src/MobileAppStaticVars/Runner.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/MobileAppStaticVars/Runner.java b/Classwork/mobileApp/src/staticVars/Runner.java
rename from Random_Work/src/MobileAppStaticVars/Runner.java
rename to Classwork/mobileApp/src/staticVars/Runner.java
--- a/Random_Work/src/MobileAppStaticVars/Runner.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Classwork/mobileApp/src/staticVars/Runner.java	(date 1614742706389)
@@ -1,29 +1,32 @@
-package MobileAppStaticVars;
+package staticVars;
 
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.Random;
 
-import static MobileAppStaticVars.StaticArrayLists.arrayList;
 import static java.lang.Integer.MAX_VALUE;
+import static java.lang.Math.random;
+import static java.lang.System.out;
+import static java.util.Collections.shuffle;
+import static java.util.stream.IntStream.range;
+import static staticVars.StaticArrayLists.arrayList;
 
 public class Runner {
 	public static void main(String[] args) {
-		for (int i = 0; i < 5; i++) {
-			System.out.println(arrayList);
+		range(0, 5).forEach(i -> {
+			out.println(arrayList);
 			addRandomNumbersAndBooleanList();
-		}
+		});
 	}
 
 	private static void addRandomNumbersAndBooleanList() {
 		ArrayList<Object> objectArrayList = new ArrayList<>();
 		objectArrayList.add(new Random().nextInt());
-		objectArrayList.add(new Random().nextInt((int) (Math.random() * MAX_VALUE)));
+		objectArrayList.add(new Random().nextInt((int) (random() * MAX_VALUE)));
 		objectArrayList.add(new Random().nextLong());
 		objectArrayList.add(new Random().nextBoolean());
 		objectArrayList.add(new Random().nextFloat());
 		objectArrayList.add(new Random().nextDouble());
-		Collections.shuffle(objectArrayList);
+		shuffle(objectArrayList);
 		arrayList.addAll(objectArrayList);
 	}
-}
+}
\ No newline at end of file
Index: Random_Work/src/MobileAppStaticVars/StaticArrayLists.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/MobileAppStaticVars/StaticArrayLists.java b/Classwork/mobileApp/src/staticVars/StaticArrayLists.java
rename from Random_Work/src/MobileAppStaticVars/StaticArrayLists.java
rename to Classwork/mobileApp/src/staticVars/StaticArrayLists.java
--- a/Random_Work/src/MobileAppStaticVars/StaticArrayLists.java	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/Classwork/mobileApp/src/staticVars/StaticArrayLists.java	(date 1614742705949)
@@ -1,8 +1,7 @@
-package MobileAppStaticVars;
+package staticVars;
 
 import java.util.ArrayList;
 
 class StaticArrayLists {
 	static ArrayList<Object> arrayList = new ArrayList<>();
-
-}
+}
\ No newline at end of file
Index: Random_Work/src/projectEuler/programs/p062.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Random_Work/src/projectEuler/programs/p062.kt b/Random_Work/src/projectEuler/programs/p062.kt
new file mode 100644
--- /dev/null	(date 1614951978889)
+++ b/Random_Work/src/projectEuler/programs/p062.kt	(date 1614951978889)
@@ -0,0 +1,50 @@
+package projectEuler.programs
+
+import org.jetbrains.annotations.Contract
+import java.math.BigInteger
+import java.util.*
+
+class p062 : EulerSolution() {
+	override fun run(): String? {
+		var numDigits = 0
+		val lowest = HashMap<String, Int>()
+		val counts = HashMap<String, Int>()
+		var i = 0
+		while (true) {
+			val numClass = getCubeNumberClass(i)
+			if (numClass.length > numDigits) {
+				// Process and flush data for smaller number of digits
+				var min = Int.MAX_VALUE
+				for (nc in counts.keys) if (counts[nc] == 5) min = Math.min(lowest[nc]!!, min)
+				if (min != Int.MAX_VALUE) return cube(min).toString()
+				lowest.clear()
+				counts.clear()
+				numDigits = numClass.length
+			}
+			if (!lowest.containsKey(numClass)) {
+				lowest[numClass] = i
+				counts[numClass] = 0
+			}
+			counts[numClass] = counts[numClass]!! + 1
+			i++
+		}
+	}
+
+	companion object {
+		@JvmStatic
+		fun main(args: Array<String>) {
+			println(p062().run())
+		}
+
+		@Contract("_ -> new")
+		private fun getCubeNumberClass(x: Int): String {
+			val digits = cube(x).toString().toCharArray()
+			Arrays.sort(digits)
+			return String(digits)
+		}
+
+		private fun cube(x: Int): BigInteger {
+			return BigInteger.valueOf(x.toLong()).pow(3)
+		}
+	}
+}
\ No newline at end of file
Index: .idea/codeStyles/codeStyleConfig.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><component name=\"ProjectCodeStyleConfiguration\">\r\n\t<state>\r\n\t\t<option name=\"PREFERRED_PROJECT_CODE_STYLE\" value=\"Default\"/>\r\n\t</state>\r\n</component>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/codeStyles/codeStyleConfig.xml b/.idea/codeStyles/codeStyleConfig.xml
--- a/.idea/codeStyles/codeStyleConfig.xml	(revision 12f86443197af1c61399dc40dde01510524ac2a9)
+++ b/.idea/codeStyles/codeStyleConfig.xml	(date 1636057937996)
@@ -1,5 +1,5 @@
 <component name="ProjectCodeStyleConfiguration">
-	<state>
-		<option name="PREFERRED_PROJECT_CODE_STYLE" value="Default"/>
-	</state>
+  <state>
+    <option name="PREFERRED_PROJECT_CODE_STYLE" value="Default" />
+  </state>
 </component>
\ No newline at end of file
